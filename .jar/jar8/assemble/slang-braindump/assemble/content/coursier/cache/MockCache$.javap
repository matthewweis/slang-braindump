Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/coursier/cache/MockCache$.class
  Last modified May 29, 2022; size 10041 bytes
  SHA-256 checksum 5e14bf678e3895edb8e1574f8fba8f074da3b7bd7ffa25222ec5ea7ed0a2431b
  Compiled from "MockCache.scala"
public final class coursier.cache.MockCache$ implements java.io.Serializable
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // coursier/cache/MockCache$
  super_class: #4                         // java/lang/Object
  interfaces: 1, fields: 1, methods: 18, attributes: 5
Constant pool:
    #1 = Utf8               coursier/cache/MockCache$
    #2 = Class              #1            // coursier/cache/MockCache$
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               java/io/Serializable
    #6 = Class              #5            // java/io/Serializable
    #7 = Utf8               MockCache.scala
    #8 = Utf8               java/lang/invoke/MethodHandles$Lookup
    #9 = Class              #8            // java/lang/invoke/MethodHandles$Lookup
   #10 = Utf8               java/lang/invoke/MethodHandles
   #11 = Class              #10           // java/lang/invoke/MethodHandles
   #12 = Utf8               Lookup
   #13 = Utf8               scala/reflect/ManifestFactory$ByteManifest
   #14 = Class              #13           // scala/reflect/ManifestFactory$ByteManifest
   #15 = Utf8               scala/reflect/ManifestFactory
   #16 = Class              #15           // scala/reflect/ManifestFactory
   #17 = Utf8               ByteManifest
   #18 = Utf8               MODULE$
   #19 = Utf8               Lcoursier/cache/MockCache$;
   #20 = Utf8               <clinit>
   #21 = Utf8               ()V
   #22 = Utf8               <init>
   #23 = NameAndType        #22:#21       // "<init>":()V
   #24 = Methodref          #2.#23        // coursier/cache/MockCache$."<init>":()V
   #25 = NameAndType        #18:#19       // MODULE$:Lcoursier/cache/MockCache$;
   #26 = Fieldref           #2.#25        // coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
   #27 = Utf8               create
   #28 = Utf8               (Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #29 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
   #30 = Utf8               base
   #31 = Utf8               pool
   #32 = Utf8               extraData
   #33 = Utf8               writeMissing
   #34 = Utf8               evidence$1
   #35 = Utf8               coursier/util/Sync$
   #36 = Class              #35           // coursier/util/Sync$
   #37 = Utf8               Lcoursier/util/Sync$;
   #38 = NameAndType        #18:#37       // MODULE$:Lcoursier/util/Sync$;
   #39 = Fieldref           #36.#38       // coursier/util/Sync$.MODULE$:Lcoursier/util/Sync$;
   #40 = Utf8               apply
   #41 = Utf8               (Lcoursier/util/Sync;)Lcoursier/util/Sync;
   #42 = NameAndType        #40:#41       // apply:(Lcoursier/util/Sync;)Lcoursier/util/Sync;
   #43 = Methodref          #36.#42       // coursier/util/Sync$.apply:(Lcoursier/util/Sync;)Lcoursier/util/Sync;
   #44 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #45 = NameAndType        #40:#44       // apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #46 = Methodref          #2.#45        // coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #47 = Utf8               this
   #48 = Utf8               Ljava/nio/file/Path;
   #49 = Utf8               Ljava/util/concurrent/ExecutorService;
   #50 = Utf8               Lscala/collection/immutable/Seq;
   #51 = Utf8               Z
   #52 = Utf8               Lcoursier/util/Sync;
   #53 = Utf8               create$default$3
   #54 = Utf8               ()Lscala/collection/immutable/Seq;
   #55 = Utf8               <F:Ljava/lang/Object;>()Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;
   #56 = Utf8               scala/collection/immutable/Nil$
   #57 = Class              #56           // scala/collection/immutable/Nil$
   #58 = Utf8               Lscala/collection/immutable/Nil$;
   #59 = NameAndType        #18:#58       // MODULE$:Lscala/collection/immutable/Nil$;
   #60 = Fieldref           #57.#59       // scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
   #61 = Utf8               create$default$4
   #62 = Utf8               ()Z
   #63 = Utf8               <F:Ljava/lang/Object;>()Z
   #64 = Utf8               coursier$cache$MockCache$$readFullySync
   #65 = Utf8               (Ljava/io/InputStream;)[B
   #66 = Utf8               is
   #67 = Utf8               java/io/ByteArrayOutputStream
   #68 = Class              #67           // java/io/ByteArrayOutputStream
   #69 = Methodref          #68.#23       // java/io/ByteArrayOutputStream."<init>":()V
   #70 = Utf8               scala/Array$
   #71 = Class              #70           // scala/Array$
   #72 = Utf8               Lscala/Array$;
   #73 = NameAndType        #18:#72       // MODULE$:Lscala/Array$;
   #74 = Fieldref           #71.#73       // scala/Array$.MODULE$:Lscala/Array$;
   #75 = Utf8               scala/reflect/ClassTag$
   #76 = Class              #75           // scala/reflect/ClassTag$
   #77 = Utf8               Lscala/reflect/ClassTag$;
   #78 = NameAndType        #18:#77       // MODULE$:Lscala/reflect/ClassTag$;
   #79 = Fieldref           #76.#78       // scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
   #80 = Utf8               Byte
   #81 = Utf8               ()Lscala/reflect/ManifestFactory$ByteManifest;
   #82 = NameAndType        #80:#81       // Byte:()Lscala/reflect/ManifestFactory$ByteManifest;
   #83 = Methodref          #76.#82       // scala/reflect/ClassTag$.Byte:()Lscala/reflect/ManifestFactory$ByteManifest;
   #84 = Utf8               ofDim
   #85 = Utf8               (ILscala/reflect/ClassTag;)Ljava/lang/Object;
   #86 = NameAndType        #84:#85       // ofDim:(ILscala/reflect/ClassTag;)Ljava/lang/Object;
   #87 = Methodref          #71.#86       // scala/Array$.ofDim:(ILscala/reflect/ClassTag;)Ljava/lang/Object;
   #88 = Utf8               [B
   #89 = Class              #88           // "[B"
   #90 = Utf8               java/io/InputStream
   #91 = Class              #90           // java/io/InputStream
   #92 = Utf8               read
   #93 = Utf8               ([BII)I
   #94 = NameAndType        #92:#93       // read:([BII)I
   #95 = Methodref          #91.#94       // java/io/InputStream.read:([BII)I
   #96 = Utf8               write
   #97 = Utf8               ([BII)V
   #98 = NameAndType        #96:#97       // write:([BII)V
   #99 = Methodref          #68.#98       // java/io/ByteArrayOutputStream.write:([BII)V
  #100 = Utf8               flush
  #101 = NameAndType        #100:#21      // flush:()V
  #102 = Methodref          #68.#101      // java/io/ByteArrayOutputStream.flush:()V
  #103 = Utf8               toByteArray
  #104 = Utf8               ()[B
  #105 = NameAndType        #103:#104     // toByteArray:()[B
  #106 = Methodref          #68.#105      // java/io/ByteArrayOutputStream.toByteArray:()[B
  #107 = Utf8               buffer
  #108 = Utf8               Ljava/io/ByteArrayOutputStream;
  #109 = Utf8               data
  #110 = Utf8               nRead
  #111 = Utf8               I
  #112 = Utf8               Ljava/io/InputStream;
  #113 = Utf8               coursier$cache$MockCache$$readFully
  #114 = Utf8               (Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
  #115 = Utf8               <F:Ljava/lang/Object;>(Lscala/Function0<Ljava/io/InputStream;>;Lscala/Option<Ljava/lang/String;>;Lcoursier/util/Sync<TF;>;)TF;
  #116 = Utf8               parseLinksUrl
  #117 = Utf8               evidence$2
  #118 = Utf8               ()Ljava/lang/Object;
  #119 = MethodType         #118          //  ()Ljava/lang/Object;
  #120 = Utf8               $anonfun$readFully$1
  #121 = Utf8               (Lscala/Function0;Lscala/Option;)Lscala/util/Either;
  #122 = NameAndType        #120:#121     // $anonfun$readFully$1:(Lscala/Function0;Lscala/Option;)Lscala/util/Either;
  #123 = Methodref          #2.#122       // coursier/cache/MockCache$.$anonfun$readFully$1:(Lscala/Function0;Lscala/Option;)Lscala/util/Either;
  #124 = MethodHandle       6:#123        // REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$1:(Lscala/Function0;Lscala/Option;)Lscala/util/Either;
  #125 = Utf8               ()Lscala/util/Either;
  #126 = MethodType         #125          //  ()Lscala/util/Either;
  #127 = Integer            5
  #128 = Integer            1
  #129 = Utf8               java/lang/invoke/LambdaMetafactory
  #130 = Class              #129          // java/lang/invoke/LambdaMetafactory
  #131 = Utf8               altMetafactory
  #132 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #133 = NameAndType        #131:#132     // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #134 = Methodref          #130.#133     // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #135 = MethodHandle       6:#134        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #136 = Utf8               (Lscala/Function0;Lscala/Option;)Lscala/Function0;
  #137 = NameAndType        #40:#136      // apply:(Lscala/Function0;Lscala/Option;)Lscala/Function0;
  #138 = InvokeDynamic      #0:#137       // #0:apply:(Lscala/Function0;Lscala/Option;)Lscala/Function0;
  #139 = Utf8               coursier/util/Sync
  #140 = Class              #139          // coursier/util/Sync
  #141 = Utf8               delay
  #142 = Utf8               (Lscala/Function0;)Ljava/lang/Object;
  #143 = NameAndType        #141:#142     // delay:(Lscala/Function0;)Ljava/lang/Object;
  #144 = InterfaceMethodref #140.#143     // coursier/util/Sync.delay:(Lscala/Function0;)Ljava/lang/Object;
  #145 = Utf8               Lscala/Function0;
  #146 = Utf8               Lscala/Option;
  #147 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
  #148 = Utf8               S
  #149 = Utf8               coursier/cache/MockCache
  #150 = Class              #149          // coursier/cache/MockCache
  #151 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #152 = MethodType         #151          //  (Ljava/lang/Object;)Ljava/lang/Object;
  #153 = Utf8               $anonfun$apply$1$adapted
  #154 = Utf8               (Lcoursier/util/Artifact;)Ljava/lang/Object;
  #155 = NameAndType        #153:#154     // $anonfun$apply$1$adapted:(Lcoursier/util/Artifact;)Ljava/lang/Object;
  #156 = Methodref          #2.#155       // coursier/cache/MockCache$.$anonfun$apply$1$adapted:(Lcoursier/util/Artifact;)Ljava/lang/Object;
  #157 = MethodHandle       6:#156        // REF_invokeStatic coursier/cache/MockCache$.$anonfun$apply$1$adapted:(Lcoursier/util/Artifact;)Ljava/lang/Object;
  #158 = MethodType         #154          //  (Lcoursier/util/Artifact;)Ljava/lang/Object;
  #159 = Utf8               ()Lscala/Function1;
  #160 = NameAndType        #40:#159      // apply:()Lscala/Function1;
  #161 = InvokeDynamic      #1:#160       // #1:apply:()Lscala/Function1;
  #162 = Utf8               scala/None$
  #163 = Class              #162          // scala/None$
  #164 = Utf8               Lscala/None$;
  #165 = NameAndType        #18:#164      // MODULE$:Lscala/None$;
  #166 = Fieldref           #163.#165     // scala/None$.MODULE$:Lscala/None$;
  #167 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
  #168 = NameAndType        #22:#167      // "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
  #169 = Methodref          #150.#168     // coursier/cache/MockCache."<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
  #170 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
  #171 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)Lcoursier/cache/MockCache<TF;>;
  #172 = Utf8               dummyArtifact
  #173 = Utf8               Lscala/Function1;
  #174 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
  #175 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;)Lcoursier/cache/MockCache<TF;>;
  #176 = Utf8               proxy
  #177 = Utf8               writeReplace
  #178 = Utf8               scala/runtime/ModuleSerializationProxy
  #179 = Class              #178          // scala/runtime/ModuleSerializationProxy
  #180 = Utf8               (Ljava/lang/Class;)V
  #181 = NameAndType        #22:#180      // "<init>":(Ljava/lang/Class;)V
  #182 = Methodref          #179.#181     // scala/runtime/ModuleSerializationProxy."<init>":(Ljava/lang/Class;)V
  #183 = Utf8               $anonfun$readFully$2
  #184 = Utf8               (Lscala/Function0;Lscala/Option;)Ljava/lang/String;
  #185 = Utf8               is$2
  #186 = Utf8               parseLinksUrl$1
  #187 = Utf8               scala/Function0
  #188 = Class              #187          // scala/Function0
  #189 = NameAndType        #40:#118      // apply:()Ljava/lang/Object;
  #190 = InterfaceMethodref #188.#189     // scala/Function0.apply:()Ljava/lang/Object;
  #191 = NameAndType        #64:#65       // coursier$cache$MockCache$$readFullySync:(Ljava/io/InputStream;)[B
  #192 = Methodref          #2.#191       // coursier/cache/MockCache$.coursier$cache$MockCache$$readFullySync:(Ljava/io/InputStream;)[B
  #193 = Utf8               scala/Option
  #194 = Class              #193          // scala/Option
  #195 = Utf8               java/lang/Throwable
  #196 = Class              #195          // java/lang/Throwable
  #197 = Utf8               close
  #198 = NameAndType        #197:#21      // close:()V
  #199 = Methodref          #91.#198      // java/io/InputStream.close:()V
  #200 = Utf8               java/lang/String
  #201 = Class              #200          // java/lang/String
  #202 = Utf8               java/nio/charset/StandardCharsets
  #203 = Class              #202          // java/nio/charset/StandardCharsets
  #204 = Utf8               UTF_8
  #205 = Utf8               Ljava/nio/charset/Charset;
  #206 = NameAndType        #204:#205     // UTF_8:Ljava/nio/charset/Charset;
  #207 = Fieldref           #203.#206     // java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
  #208 = Utf8               ([BLjava/nio/charset/Charset;)V
  #209 = NameAndType        #22:#208      // "<init>":([BLjava/nio/charset/Charset;)V
  #210 = Methodref          #201.#209     // java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
  #211 = Utf8               equals
  #212 = Utf8               (Ljava/lang/Object;)Z
  #213 = NameAndType        #211:#212     // equals:(Ljava/lang/Object;)Z
  #214 = Methodref          #4.#213       // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #215 = Utf8               scala/Some
  #216 = Class              #215          // scala/Some
  #217 = Utf8               value
  #218 = NameAndType        #217:#118     // value:()Ljava/lang/Object;
  #219 = Methodref          #216.#218     // scala/Some.value:()Ljava/lang/Object;
  #220 = Utf8               coursier/util/WebPage$
  #221 = Class              #220          // coursier/util/WebPage$
  #222 = Utf8               Lcoursier/util/WebPage$;
  #223 = NameAndType        #18:#222      // MODULE$:Lcoursier/util/WebPage$;
  #224 = Fieldref           #221.#223     // coursier/util/WebPage$.MODULE$:Lcoursier/util/WebPage$;
  #225 = Utf8               listElements
  #226 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lscala/collection/Iterator;
  #227 = NameAndType        #225:#226     // listElements:(Ljava/lang/String;Ljava/lang/String;)Lscala/collection/Iterator;
  #228 = Methodref          #221.#227     // coursier/util/WebPage$.listElements:(Ljava/lang/String;Ljava/lang/String;)Lscala/collection/Iterator;
  #229 = Utf8               \n
  #230 = String             #229          // \n
  #231 = Utf8               scala/collection/Iterator
  #232 = Class              #231          // scala/collection/Iterator
  #233 = Utf8               mkString
  #234 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
  #235 = NameAndType        #233:#234     // mkString:(Ljava/lang/String;)Ljava/lang/String;
  #236 = InterfaceMethodref #232.#235     // scala/collection/Iterator.mkString:(Ljava/lang/String;)Ljava/lang/String;
  #237 = Utf8               scala/MatchError
  #238 = Class              #237          // scala/MatchError
  #239 = Utf8               (Ljava/lang/Object;)V
  #240 = NameAndType        #22:#239      // "<init>":(Ljava/lang/Object;)V
  #241 = Methodref          #238.#240     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #242 = Utf8               url
  #243 = Utf8               Ljava/lang/String;
  #244 = Utf8               is0
  #245 = Utf8               b
  #246 = Utf8               s
  #247 = Utf8               $anonfun$readFully$3
  #248 = Utf8               ()Ljava/lang/String;
  #249 = Utf8
  #250 = String             #249          //
  #251 = Utf8               $anonfun$readFully$4
  #252 = Utf8               x$5
  #253 = Utf8               java/lang/StringBuilder
  #254 = Class              #253          // java/lang/StringBuilder
  #255 = Integer            3
  #256 = Utf8               (I)V
  #257 = NameAndType        #22:#256      // "<init>":(I)V
  #258 = Methodref          #254.#257     // java/lang/StringBuilder."<init>":(I)V
  #259 = Utf8                (
  #260 = String             #259          //  (
  #261 = Utf8               append
  #262 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #263 = NameAndType        #261:#262     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #264 = Methodref          #254.#263     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #265 = Utf8               )
  #266 = String             #265          // )
  #267 = Utf8               toString
  #268 = NameAndType        #267:#248     // toString:()Ljava/lang/String;
  #269 = Methodref          #254.#268     // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #270 = Utf8               scala/util/Try$
  #271 = Class              #270          // scala/util/Try$
  #272 = Utf8               Lscala/util/Try$;
  #273 = NameAndType        #18:#272      // MODULE$:Lscala/util/Try$;
  #274 = Fieldref           #271.#273     // scala/util/Try$.MODULE$:Lscala/util/Try$;
  #275 = NameAndType        #183:#184     // $anonfun$readFully$2:(Lscala/Function0;Lscala/Option;)Ljava/lang/String;
  #276 = Methodref          #2.#275       // coursier/cache/MockCache$.$anonfun$readFully$2:(Lscala/Function0;Lscala/Option;)Ljava/lang/String;
  #277 = MethodHandle       6:#276        // REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$2:(Lscala/Function0;Lscala/Option;)Ljava/lang/String;
  #278 = MethodType         #248          //  ()Ljava/lang/String;
  #279 = InvokeDynamic      #2:#137       // #2:apply:(Lscala/Function0;Lscala/Option;)Lscala/Function0;
  #280 = Utf8               (Lscala/Function0;)Lscala/util/Try;
  #281 = NameAndType        #40:#280      // apply:(Lscala/Function0;)Lscala/util/Try;
  #282 = Methodref          #271.#281     // scala/util/Try$.apply:(Lscala/Function0;)Lscala/util/Try;
  #283 = Utf8               scala/util/Success
  #284 = Class              #283          // scala/util/Success
  #285 = Methodref          #284.#218     // scala/util/Success.value:()Ljava/lang/Object;
  #286 = Utf8               scala/package$
  #287 = Class              #286          // scala/package$
  #288 = Utf8               Lscala/package$;
  #289 = NameAndType        #18:#288      // MODULE$:Lscala/package$;
  #290 = Fieldref           #287.#289     // scala/package$.MODULE$:Lscala/package$;
  #291 = Utf8               Right
  #292 = Utf8               ()Lscala/util/Right$;
  #293 = NameAndType        #291:#292     // Right:()Lscala/util/Right$;
  #294 = Methodref          #287.#293     // scala/package$.Right:()Lscala/util/Right$;
  #295 = Utf8               scala/util/Right$
  #296 = Class              #295          // scala/util/Right$
  #297 = Utf8               (Ljava/lang/Object;)Lscala/util/Right;
  #298 = NameAndType        #40:#297      // apply:(Ljava/lang/Object;)Lscala/util/Right;
  #299 = Methodref          #296.#298     // scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
  #300 = Utf8               scala/util/Try
  #301 = Class              #300          // scala/util/Try
  #302 = Utf8               scala/util/Failure
  #303 = Class              #302          // scala/util/Failure
  #304 = Utf8               exception
  #305 = Utf8               ()Ljava/lang/Throwable;
  #306 = NameAndType        #304:#305     // exception:()Ljava/lang/Throwable;
  #307 = Methodref          #303.#306     // scala/util/Failure.exception:()Ljava/lang/Throwable;
  #308 = Utf8               java/io/FileNotFoundException
  #309 = Class              #308          // java/io/FileNotFoundException
  #310 = Utf8               getMessage
  #311 = NameAndType        #310:#248     // getMessage:()Ljava/lang/String;
  #312 = Methodref          #309.#311     // java/io/FileNotFoundException.getMessage:()Ljava/lang/String;
  #313 = Utf8               Left
  #314 = Utf8               ()Lscala/util/Left$;
  #315 = NameAndType        #313:#314     // Left:()Lscala/util/Left$;
  #316 = Methodref          #287.#315     // scala/package$.Left:()Lscala/util/Left$;
  #317 = Integer            11
  #318 = Utf8               Not found:
  #319 = String             #318          // Not found:
  #320 = Utf8               scala/util/Left$
  #321 = Class              #320          // scala/util/Left$
  #322 = Utf8               (Ljava/lang/Object;)Lscala/util/Left;
  #323 = NameAndType        #40:#322      // apply:(Ljava/lang/Object;)Lscala/util/Left;
  #324 = Methodref          #321.#323     // scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
  #325 = Integer            0
  #326 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #327 = NameAndType        #261:#326     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #328 = Methodref          #254.#327     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #329 = Utf8               scala/Option$
  #330 = Class              #329          // scala/Option$
  #331 = Utf8               Lscala/Option$;
  #332 = NameAndType        #18:#331      // MODULE$:Lscala/Option$;
  #333 = Fieldref           #330.#332     // scala/Option$.MODULE$:Lscala/Option$;
  #334 = Methodref          #196.#311     // java/lang/Throwable.getMessage:()Ljava/lang/String;
  #335 = Utf8               (Ljava/lang/Object;)Lscala/Option;
  #336 = NameAndType        #40:#335      // apply:(Ljava/lang/Object;)Lscala/Option;
  #337 = Methodref          #330.#336     // scala/Option$.apply:(Ljava/lang/Object;)Lscala/Option;
  #338 = NameAndType        #247:#248     // $anonfun$readFully$3:()Ljava/lang/String;
  #339 = Methodref          #2.#338       // coursier/cache/MockCache$.$anonfun$readFully$3:()Ljava/lang/String;
  #340 = MethodHandle       6:#339        // REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$3:()Ljava/lang/String;
  #341 = Utf8               ()Lscala/Function0;
  #342 = NameAndType        #40:#341      // apply:()Lscala/Function0;
  #343 = InvokeDynamic      #3:#342       // #3:apply:()Lscala/Function0;
  #344 = NameAndType        #251:#234     // $anonfun$readFully$4:(Ljava/lang/String;)Ljava/lang/String;
  #345 = Methodref          #2.#344       // coursier/cache/MockCache$.$anonfun$readFully$4:(Ljava/lang/String;)Ljava/lang/String;
  #346 = MethodHandle       6:#345        // REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$4:(Ljava/lang/String;)Ljava/lang/String;
  #347 = MethodType         #234          //  (Ljava/lang/String;)Ljava/lang/String;
  #348 = InvokeDynamic      #4:#160       // #4:apply:()Lscala/Function1;
  #349 = Utf8               fold
  #350 = Utf8               (Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
  #351 = NameAndType        #349:#350     // fold:(Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
  #352 = Methodref          #194.#351     // scala/Option.fold:(Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
  #353 = Utf8               scala/util/Either
  #354 = Class              #353          // scala/util/Either
  #355 = Utf8               r
  #356 = Utf8               e
  #357 = Utf8               Ljava/lang/Throwable;
  #358 = Utf8               t
  #359 = Utf8               Lscala/util/Try;
  #360 = Utf8               $anonfun$apply$1
  #361 = Utf8               (Lcoursier/util/Artifact;)Z
  #362 = Utf8               x$1
  #363 = Utf8               Lcoursier/util/Artifact;
  #364 = Methodref          #4.#23        // java/lang/Object."<init>":()V
  #365 = NameAndType        #360:#361     // $anonfun$apply$1:(Lcoursier/util/Artifact;)Z
  #366 = Methodref          #2.#365       // coursier/cache/MockCache$.$anonfun$apply$1:(Lcoursier/util/Artifact;)Z
  #367 = Utf8               scala/runtime/BoxesRunTime
  #368 = Class              #367          // scala/runtime/BoxesRunTime
  #369 = Utf8               boxToBoolean
  #370 = Utf8               (Z)Ljava/lang/Boolean;
  #371 = NameAndType        #369:#370     // boxToBoolean:(Z)Ljava/lang/Boolean;
  #372 = Methodref          #368.#371     // scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
  #373 = Utf8               $deserializeLambda$
  #374 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #375 = Utf8               scala/runtime/LambdaDeserialize
  #376 = Class              #375          // scala/runtime/LambdaDeserialize
  #377 = Utf8               bootstrap
  #378 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #379 = NameAndType        #377:#378     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #380 = Methodref          #376.#379     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #381 = MethodHandle       6:#380        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #382 = Utf8               lambdaDeserialize
  #383 = NameAndType        #382:#374     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #384 = InvokeDynamic      #5:#383       // #5:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #385 = Utf8               Code
  #386 = Utf8               LineNumberTable
  #387 = Utf8               LocalVariableTable
  #388 = Utf8               Signature
  #389 = Utf8               MethodParameters
  #390 = Utf8               StackMapTable
  #391 = Utf8               InnerClasses
  #392 = Utf8               SourceFile
  #393 = Utf8               BootstrapMethods
  #394 = Utf8               ScalaInlineInfo
  #395 = Utf8               Scala
{
  public static final coursier.cache.MockCache$ MODULE$;
    descriptor: Lcoursier/cache/MockCache$;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static {};
    descriptor: ()V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #2                  // class coursier/cache/MockCache$
         3: dup
         4: invokespecial #24                 // Method "<init>":()V
         7: putstatic     #26                 // Field MODULE$:Lcoursier/cache/MockCache$;
        10: return
      LineNumberTable:
        line 18: 0

  public <F extends java.lang.Object> coursier.cache.MockCache<F> create(java.nio.file.Path, java.util.concurrent.ExecutorService, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, coursier.util.Sync<F>);
    descriptor: (Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=6, args_size=6
         0: aload_0
         1: aload_1
         2: aload_3
         3: iload         4
         5: aload_2
         6: getstatic     #39                 // Field coursier/util/Sync$.MODULE$:Lcoursier/util/Sync$;
         9: aload         5
        11: invokevirtual #43                 // Method coursier/util/Sync$.apply:(Lcoursier/util/Sync;)Lcoursier/util/Sync;
        14: invokevirtual #46                 // Method apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
        17: areturn
      LineNumberTable:
        line 134: 0
        line 135: 1
        line 136: 2
        line 137: 3
        line 138: 5
        line 139: 6
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      18     0  this   Lcoursier/cache/MockCache$;
            0      18     1  base   Ljava/nio/file/Path;
            0      18     2  pool   Ljava/util/concurrent/ExecutorService;
            0      18     3 extraData   Lscala/collection/immutable/Seq;
            0      18     4 writeMissing   Z
            0      18     5 evidence$1   Lcoursier/util/Sync;
    Signature: #29                          // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      pool                           final
      extraData                      final
      writeMissing                   final
      evidence$1                     final

  public <F extends java.lang.Object> scala.collection.immutable.Seq<java.nio.file.Path> create$default$3();
    descriptor: ()Lscala/collection/immutable/Seq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: getstatic     #60                 // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
         3: areturn
      LineNumberTable:
        line 131: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lcoursier/cache/MockCache$;
    Signature: #55                          // <F:Ljava/lang/Object;>()Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;

  public <F extends java.lang.Object> boolean create$default$4();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 132: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Lcoursier/cache/MockCache$;
    Signature: #63                          // <F:Ljava/lang/Object;>()Z

  public byte[] coursier$cache$MockCache$$readFullySync(java.io.InputStream);
    descriptor: (Ljava/io/InputStream;)[B
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=5, args_size=2
         0: new           #68                 // class java/io/ByteArrayOutputStream
         3: dup
         4: invokespecial #69                 // Method java/io/ByteArrayOutputStream."<init>":()V
         7: astore_2
         8: getstatic     #74                 // Field scala/Array$.MODULE$:Lscala/Array$;
        11: sipush        16384
        14: getstatic     #79                 // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
        17: invokevirtual #83                 // Method scala/reflect/ClassTag$.Byte:()Lscala/reflect/ManifestFactory$ByteManifest;
        20: invokevirtual #87                 // Method scala/Array$.ofDim:(ILscala/reflect/ClassTag;)Ljava/lang/Object;
        23: checkcast     #89                 // class "[B"
        26: astore_3
        27: aload_1
        28: aload_3
        29: iconst_0
        30: aload_3
        31: arraylength
        32: invokevirtual #95                 // Method java/io/InputStream.read:([BII)I
        35: istore        4
        37: iload         4
        39: iconst_m1
        40: if_icmpeq     64
        43: aload_2
        44: aload_3
        45: iconst_0
        46: iload         4
        48: invokevirtual #99                 // Method java/io/ByteArrayOutputStream.write:([BII)V
        51: aload_1
        52: aload_3
        53: iconst_0
        54: aload_3
        55: arraylength
        56: invokevirtual #95                 // Method java/io/InputStream.read:([BII)I
        59: istore        4
        61: goto          37
        64: aload_2
        65: invokevirtual #102                // Method java/io/ByteArrayOutputStream.flush:()V
        68: aload_2
        69: invokevirtual #106                // Method java/io/ByteArrayOutputStream.toByteArray:()[B
        72: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 254 /* append */
          offset_delta = 37
          locals = [ class java/io/ByteArrayOutputStream, class "[B", int ]
        frame_type = 26 /* same */
      LineNumberTable:
        line 144: 0
        line 145: 8
        line 147: 27
        line 148: 37
        line 149: 43
        line 150: 51
        line 148: 61
        line 153: 64
        line 154: 68
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            8      64     2 buffer   Ljava/io/ByteArrayOutputStream;
           27      45     3  data   [B
           37      35     4 nRead   I
            0      73     0  this   Lcoursier/cache/MockCache$;
            0      73     1    is   Ljava/io/InputStream;
    MethodParameters:
      Name                           Flags
      is                             final

  public <F extends java.lang.Object> F coursier$cache$MockCache$$readFully(scala.Function0<java.io.InputStream>, scala.Option<java.lang.String>, coursier.util.Sync<F>);
    descriptor: (Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=4, args_size=4
         0: getstatic     #39                 // Field coursier/util/Sync$.MODULE$:Lcoursier/util/Sync$;
         3: aload_3
         4: invokevirtual #43                 // Method coursier/util/Sync$.apply:(Lcoursier/util/Sync;)Lcoursier/util/Sync;
         7: aload_1
         8: aload_2
         9: invokedynamic #138,  0            // InvokeDynamic #0:apply:(Lscala/Function0;Lscala/Option;)Lscala/Function0;
        14: invokeinterface #144,  2          // InterfaceMethod coursier/util/Sync.delay:(Lscala/Function0;)Ljava/lang/Object;
        19: areturn
      LineNumberTable:
        line 158: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      20     0  this   Lcoursier/cache/MockCache$;
            0      20     1    is   Lscala/Function0;
            0      20     2 parseLinksUrl   Lscala/Option;
            0      20     3 evidence$2   Lcoursier/util/Sync;
    Signature: #115                         // <F:Ljava/lang/Object;>(Lscala/Function0<Ljava/io/InputStream;>;Lscala/Option<Ljava/lang/String;>;Lcoursier/util/Sync<TF;>;)TF;
    MethodParameters:
      Name                           Flags
      is                             final
      parseLinksUrl                  final
      evidence$2                     final

  public <F extends java.lang.Object> coursier.cache.MockCache<F> apply(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=6, args_size=6
         0: new           #150                // class coursier/cache/MockCache
         3: dup
         4: aload_1
         5: aload_2
         6: iload_3
         7: aload         4
         9: aload         5
        11: invokedynamic #161,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
        16: getstatic     #166                // Field scala/None$.MODULE$:Lscala/None$;
        19: invokespecial #169                // Method coursier/cache/MockCache."<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        22: areturn
      LineNumberTable:
        line 18: 0
        line 24: 11
        line 26: 16
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lcoursier/cache/MockCache$;
            0      23     1  base   Ljava/nio/file/Path;
            0      23     2 extraData   Lscala/collection/immutable/Seq;
            0      23     3 writeMissing   Z
            0      23     4  pool   Ljava/util/concurrent/ExecutorService;
            0      23     5     S   Lcoursier/util/Sync;
    Signature: #147                         // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final

  public <F extends java.lang.Object> coursier.cache.MockCache<F> apply(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=7, args_size=7
         0: new           #150                // class coursier/cache/MockCache
         3: dup
         4: aload_1
         5: aload_2
         6: iload_3
         7: aload         4
         9: aload         5
        11: aload         6
        13: getstatic     #166                // Field scala/None$.MODULE$:Lscala/None$;
        16: invokespecial #169                // Method coursier/cache/MockCache."<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        19: areturn
      LineNumberTable:
        line 18: 0
        line 26: 13
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      20     0  this   Lcoursier/cache/MockCache$;
            0      20     1  base   Ljava/nio/file/Path;
            0      20     2 extraData   Lscala/collection/immutable/Seq;
            0      20     3 writeMissing   Z
            0      20     4  pool   Ljava/util/concurrent/ExecutorService;
            0      20     5     S   Lcoursier/util/Sync;
            0      20     6 dummyArtifact   Lscala/Function1;
    Signature: #171                         // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final
      dummyArtifact                  final

  public <F extends java.lang.Object> coursier.cache.MockCache<F> apply(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>, scala.Option<java.net.Proxy>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=8, args_size=8
         0: new           #150                // class coursier/cache/MockCache
         3: dup
         4: aload_1
         5: aload_2
         6: iload_3
         7: aload         4
         9: aload         5
        11: aload         6
        13: aload         7
        15: invokespecial #169                // Method coursier/cache/MockCache."<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        18: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      19     0  this   Lcoursier/cache/MockCache$;
            0      19     1  base   Ljava/nio/file/Path;
            0      19     2 extraData   Lscala/collection/immutable/Seq;
            0      19     3 writeMissing   Z
            0      19     4  pool   Ljava/util/concurrent/ExecutorService;
            0      19     5     S   Lcoursier/util/Sync;
            0      19     6 dummyArtifact   Lscala/Function1;
            0      19     7 proxy   Lscala/Option;
    Signature: #175                         // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final
      dummyArtifact                  final
      proxy                          final

  private java.lang.Object writeReplace();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=3, locals=1, args_size=1
         0: new           #179                // class scala/runtime/ModuleSerializationProxy
         3: dup
         4: ldc           #2                  // class coursier/cache/MockCache$
         6: invokespecial #182                // Method scala/runtime/ModuleSerializationProxy."<init>":(Ljava/lang/Class;)V
         9: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lcoursier/cache/MockCache$;

  public static final java.lang.String $anonfun$readFully$2(scala.Function0, scala.Option);
    descriptor: (Lscala/Function0;Lscala/Option;)Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=10, args_size=2
         0: aload_0
         1: invokeinterface #190,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
         6: checkcast     #91                 // class java/io/InputStream
         9: astore_3
        10: getstatic     #26                 // Field MODULE$:Lcoursier/cache/MockCache$;
        13: aload_3
        14: invokevirtual #192                // Method coursier$cache$MockCache$$readFullySync:(Ljava/io/InputStream;)[B
        17: goto          29
        20: astore        5
        22: aload_3
        23: invokevirtual #199                // Method java/io/InputStream.close:()V
        26: aload         5
        28: athrow
        29: aload_3
        30: invokevirtual #199                // Method java/io/InputStream.close:()V
        33: astore        4
        35: new           #201                // class java/lang/String
        38: dup
        39: aload         4
        41: getstatic     #207                // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
        44: invokespecial #210                // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
        47: astore        6
        49: aload_1
        50: astore        7
        52: getstatic     #166                // Field scala/None$.MODULE$:Lscala/None$;
        55: aload         7
        57: invokevirtual #214                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        60: ifeq          69
        63: aload         6
        65: astore_2
        66: goto          131
        69: goto          72
        72: aload         7
        74: instanceof    #216                // class scala/Some
        77: ifeq          118
        80: aload         7
        82: checkcast     #216                // class scala/Some
        85: astore        8
        87: aload         8
        89: invokevirtual #219                // Method scala/Some.value:()Ljava/lang/Object;
        92: checkcast     #201                // class java/lang/String
        95: astore        9
        97: getstatic     #224                // Field coursier/util/WebPage$.MODULE$:Lcoursier/util/WebPage$;
       100: aload         9
       102: aload         6
       104: invokevirtual #228                // Method coursier/util/WebPage$.listElements:(Ljava/lang/String;Ljava/lang/String;)Lscala/collection/Iterator;
       107: ldc           #230                // String \n
       109: invokeinterface #236,  2          // InterfaceMethod scala/collection/Iterator.mkString:(Ljava/lang/String;)Ljava/lang/String;
       114: astore_2
       115: goto          131
       118: goto          121
       121: new           #238                // class scala/MatchError
       124: dup
       125: aload         7
       127: invokespecial #241                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       130: athrow
       131: aload_2
       132: areturn
      Exception table:
         from    to  target type
            10    20    20   any
      StackMapTable: number_of_entries = 7
        frame_type = 255 /* full_frame */
          offset_delta = 20
          locals = [ class scala/Function0, class scala/Option, top, class java/io/InputStream ]
          stack = [ class java/lang/Throwable ]
        frame_type = 72 /* same_locals_1_stack_item */
          stack = [ class "[B" ]
        frame_type = 255 /* full_frame */
          offset_delta = 39
          locals = [ class scala/Function0, class scala/Option, top, class java/io/InputStream, class "[B", top, class java/lang/String, class scala/Option ]
          stack = []
        frame_type = 2 /* same */
        frame_type = 45 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class scala/Function0, class scala/Option, class java/lang/String, class java/io/InputStream, class "[B", top, class java/lang/String, class scala/Option ]
          stack = []
      LineNumberTable:
        line 160: 0
        line 162: 10
        line 163: 22
        line 165: 35
        line 166: 49
        line 167: 52
        line 168: 72
        line 169: 97
        line 168: 118
        line 166: 121
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           97      21     9   url   Ljava/lang/String;
           10     122     3   is0   Ljava/io/InputStream;
           35      97     4     b   [B
           49      83     6     s   Ljava/lang/String;
            0     133     0  is$2   Lscala/Function0;
            0     133     1 parseLinksUrl$1   Lscala/Option;
    MethodParameters:
      Name                           Flags
      is$2                           final
      parseLinksUrl$1                final

  public static final java.lang.String $anonfun$readFully$3();
    descriptor: ()Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=0, args_size=0
         0: ldc           #250                // String
         2: areturn
      LineNumberTable:
        line 178: 0

  public static final java.lang.String $anonfun$readFully$4(java.lang.String);
    descriptor: (Ljava/lang/String;)Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=1, args_size=1
         0: new           #254                // class java/lang/StringBuilder
         3: dup
         4: ldc           #255                // int 3
         6: invokespecial #258                // Method java/lang/StringBuilder."<init>":(I)V
         9: ldc_w         #260                // String  (
        12: invokevirtual #264                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        15: aload_0
        16: invokevirtual #264                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        19: ldc_w         #266                // String )
        22: invokevirtual #264                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        25: invokevirtual #269                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        28: areturn
      LineNumberTable:
        line 178: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      29     0   x$5   Ljava/lang/String;
    MethodParameters:
      Name                           Flags
      x$5                            final

  public static final scala.util.Either $anonfun$readFully$1(scala.Function0, scala.Option);
    descriptor: (Lscala/Function0;Lscala/Option;)Lscala/util/Either;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=5, locals=12, args_size=2
         0: getstatic     #274                // Field scala/util/Try$.MODULE$:Lscala/util/Try$;
         3: aload_0
         4: aload_1
         5: invokedynamic #279,  0            // InvokeDynamic #2:apply:(Lscala/Function0;Lscala/Option;)Lscala/Function0;
        10: invokevirtual #282                // Method scala/util/Try$.apply:(Lscala/Function0;)Lscala/util/Try;
        13: astore_3
        14: iconst_0
        15: istore        4
        17: aconst_null
        18: astore        5
        20: aload_3
        21: astore        6
        23: aload         6
        25: instanceof    #284                // class scala/util/Success
        28: ifeq          63
        31: aload         6
        33: checkcast     #284                // class scala/util/Success
        36: astore        7
        38: aload         7
        40: invokevirtual #285                // Method scala/util/Success.value:()Ljava/lang/Object;
        43: checkcast     #201                // class java/lang/String
        46: astore        8
        48: getstatic     #290                // Field scala/package$.MODULE$:Lscala/package$;
        51: invokevirtual #294                // Method scala/package$.Right:()Lscala/util/Right$;
        54: aload         8
        56: invokevirtual #299                // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        59: astore_2
        60: goto          246
        63: goto          66
        66: aload         6
        68: instanceof    #303                // class scala/util/Failure
        71: ifeq          160
        74: iconst_1
        75: istore        4
        77: aload         6
        79: checkcast     #303                // class scala/util/Failure
        82: astore        5
        84: aload         5
        86: invokevirtual #307                // Method scala/util/Failure.exception:()Ljava/lang/Throwable;
        89: astore        9
        91: aload         9
        93: instanceof    #309                // class java/io/FileNotFoundException
        96: ifeq          157
        99: aload         9
       101: checkcast     #309                // class java/io/FileNotFoundException
       104: astore        10
       106: aload         10
       108: invokevirtual #312                // Method java/io/FileNotFoundException.getMessage:()Ljava/lang/String;
       111: ifnull        154
       114: getstatic     #290                // Field scala/package$.MODULE$:Lscala/package$;
       117: invokevirtual #316                // Method scala/package$.Left:()Lscala/util/Left$;
       120: new           #254                // class java/lang/StringBuilder
       123: dup
       124: ldc_w         #317                // int 11
       127: invokespecial #258                // Method java/lang/StringBuilder."<init>":(I)V
       130: ldc_w         #319                // String Not found:
       133: invokevirtual #264                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       136: aload         10
       138: invokevirtual #312                // Method java/io/FileNotFoundException.getMessage:()Ljava/lang/String;
       141: invokevirtual #264                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       144: invokevirtual #269                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       147: invokevirtual #324                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
       150: astore_2
       151: goto          246
       154: goto          163
       157: goto          163
       160: goto          163
       163: iload         4
       165: ifeq          233
       168: aload         5
       170: invokevirtual #307                // Method scala/util/Failure.exception:()Ljava/lang/Throwable;
       173: astore        11
       175: getstatic     #290                // Field scala/package$.MODULE$:Lscala/package$;
       178: invokevirtual #316                // Method scala/package$.Left:()Lscala/util/Left$;
       181: new           #254                // class java/lang/StringBuilder
       184: dup
       185: ldc_w         #325                // int 0
       188: invokespecial #258                // Method java/lang/StringBuilder."<init>":(I)V
       191: aload         11
       193: invokevirtual #328                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
       196: getstatic     #333                // Field scala/Option$.MODULE$:Lscala/Option$;
       199: aload         11
       201: invokevirtual #334                // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
       204: invokevirtual #337                // Method scala/Option$.apply:(Ljava/lang/Object;)Lscala/Option;
       207: invokedynamic #343,  0            // InvokeDynamic #3:apply:()Lscala/Function0;
       212: invokedynamic #348,  0            // InvokeDynamic #4:apply:()Lscala/Function1;
       217: invokevirtual #352                // Method scala/Option.fold:(Lscala/Function0;Lscala/Function1;)Ljava/lang/Object;
       220: invokevirtual #328                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
       223: invokevirtual #269                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       226: invokevirtual #324                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
       229: astore_2
       230: goto          246
       233: goto          236
       236: new           #238                // class scala/MatchError
       239: dup
       240: aload         6
       242: invokespecial #241                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       245: athrow
       246: aload_2
       247: areturn
      StackMapTable: number_of_entries = 9
        frame_type = 255 /* full_frame */
          offset_delta = 63
          locals = [ class scala/Function0, class scala/Option, top, class scala/util/Try, int, null, class scala/util/Try ]
          stack = []
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 87
          locals = [ class scala/Function0, class scala/Option, top, class scala/util/Try, int, class scala/util/Failure, class scala/util/Try, top, top, class java/lang/Throwable, class java/io/FileNotFoundException ]
          stack = []
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class scala/Function0, class scala/Option, top, class scala/util/Try, int, null, class scala/util/Try ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class scala/Function0, class scala/Option, top, class scala/util/Try, int, class scala/util/Failure, class scala/util/Try ]
          stack = []
        frame_type = 251 /* same_frame_extended */
          offset_delta = 69
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class scala/Function0, class scala/Option, class scala/util/Either, class scala/util/Try, int, class scala/util/Failure, class scala/util/Try ]
          stack = []
      LineNumberTable:
        line 159: 0
        line 173: 14
        line 174: 23
        line 175: 66
        line 176: 114
        line 175: 154
        line 177: 163
        line 178: 175
        line 177: 233
        line 173: 236
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           48      15     8     r   Ljava/lang/String;
           91      69     9     e   Ljava/lang/Throwable;
          175      58    11     e   Ljava/lang/Throwable;
           14     233     3     t   Lscala/util/Try;
            0     248     0  is$2   Lscala/Function0;
            0     248     1 parseLinksUrl$1   Lscala/Option;
    MethodParameters:
      Name                           Flags
      is$2                           final
      parseLinksUrl$1                final

  public static final boolean $anonfun$apply$1(coursier.util.Artifact);
    descriptor: (Lcoursier/util/Artifact;)Z
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 24: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0   x$1   Lcoursier/util/Artifact;
    MethodParameters:
      Name                           Flags
      x$1                            final

  private coursier.cache.MockCache$();
    descriptor: ()V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #364                // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 182: 0
        line 18: 4
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache$;

  public static final java.lang.Object $anonfun$apply$1$adapted(coursier.util.Artifact);
    descriptor: (Lcoursier/util/Artifact;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #366                // Method $anonfun$apply$1:(Lcoursier/util/Artifact;)Z
         4: invokestatic  #372                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
         7: areturn
      LineNumberTable:
        line 24: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0   x$1   Lcoursier/util/Artifact;
    MethodParameters:
      Name                           Flags
      x$1                            final

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #384,  0            // InvokeDynamic #5:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #12= #9 of #11;     // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  public static final #17= #14 of #16;    // ByteManifest=class scala/reflect/ManifestFactory$ByteManifest of class scala/reflect/ManifestFactory
SourceFile: "MockCache.scala"
BootstrapMethods:
  0: #135 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #119 ()Ljava/lang/Object;
      #124 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$1:(Lscala/Function0;Lscala/Option;)Lscala/util/Either;
      #126 ()Lscala/util/Either;
      #127 5
      #128 1
      #126 ()Lscala/util/Either;
  1: #135 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #152 (Ljava/lang/Object;)Ljava/lang/Object;
      #157 REF_invokeStatic coursier/cache/MockCache$.$anonfun$apply$1$adapted:(Lcoursier/util/Artifact;)Ljava/lang/Object;
      #158 (Lcoursier/util/Artifact;)Ljava/lang/Object;
      #127 5
      #128 1
      #158 (Lcoursier/util/Artifact;)Ljava/lang/Object;
  2: #135 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #119 ()Ljava/lang/Object;
      #277 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$2:(Lscala/Function0;Lscala/Option;)Ljava/lang/String;
      #278 ()Ljava/lang/String;
      #127 5
      #128 1
      #278 ()Ljava/lang/String;
  3: #135 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #119 ()Ljava/lang/Object;
      #340 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$3:()Ljava/lang/String;
      #278 ()Ljava/lang/String;
      #127 5
      #128 1
      #278 ()Ljava/lang/String;
  4: #135 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #152 (Ljava/lang/Object;)Ljava/lang/Object;
      #346 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$4:(Ljava/lang/String;)Ljava/lang/String;
      #347 (Ljava/lang/String;)Ljava/lang/String;
      #127 5
      #128 1
      #347 (Ljava/lang/String;)Ljava/lang/String;
  5: #381 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #157 REF_invokeStatic coursier/cache/MockCache$.$anonfun$apply$1$adapted:(Lcoursier/util/Artifact;)Ljava/lang/Object;
      #124 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$1:(Lscala/Function0;Lscala/Option;)Lscala/util/Either;
      #277 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$2:(Lscala/Function0;Lscala/Option;)Ljava/lang/String;
      #340 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$3:()Ljava/lang/String;
      #346 REF_invokeStatic coursier/cache/MockCache$.$anonfun$readFully$4:(Ljava/lang/String;)Ljava/lang/String;
  ScalaInlineInfo: length = 0x54 (unknown attribute)
   01 01 00 10 01 68 01 69 01 00 99 00 9A 01 00 78
   00 79 01 00 B7 00 B8 01 00 F7 00 F8 01 00 FB 00
   E6 01 00 16 00 15 01 00 28 00 2C 01 00 28 00 AA
   01 00 28 00 AE 01 00 71 00 72 01 00 40 00 41 01
   00 1B 00 1C 01 00 35 00 36 01 00 3D 00 3E 01 00
   B1 00 76 01
  Scala: length = 0x0 (unknown attribute)

