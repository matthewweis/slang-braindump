Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/concurrentrefhashmap/ConcurrentReferenceHashMap$Values.class
  Last modified May 29, 2022; size 1098 bytes
  SHA-256 checksum 1f0e53fe55e24815d934a6e40334080e82c721e8fb306d1a87db2c78986768e3
  Compiled from "ConcurrentReferenceHashMap.java"
final class concurrentrefhashmap.ConcurrentReferenceHashMap$Values extends java.util.AbstractCollection<V>
  minor version: 0
  major version: 52
  flags: (0x0030) ACC_FINAL, ACC_SUPER
  this_class: #9                          // concurrentrefhashmap/ConcurrentReferenceHashMap$Values
  super_class: #10                        // java/util/AbstractCollection
  interfaces: 0, fields: 1, methods: 6, attributes: 3
Constant pool:
   #1 = Fieldref           #9.#32         // concurrentrefhashmap/ConcurrentReferenceHashMap$Values.this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
   #2 = Methodref          #10.#33        // java/util/AbstractCollection."<init>":()V
   #3 = Class              #35            // concurrentrefhashmap/ConcurrentReferenceHashMap$ValueIterator
   #4 = Methodref          #3.#38         // concurrentrefhashmap/ConcurrentReferenceHashMap$ValueIterator."<init>":(Lconcurrentrefhashmap/ConcurrentReferenceHashMap;)V
   #5 = Methodref          #34.#39        // concurrentrefhashmap/ConcurrentReferenceHashMap.size:()I
   #6 = Methodref          #34.#40        // concurrentrefhashmap/ConcurrentReferenceHashMap.isEmpty:()Z
   #7 = Methodref          #34.#41        // concurrentrefhashmap/ConcurrentReferenceHashMap.containsValue:(Ljava/lang/Object;)Z
   #8 = Methodref          #34.#42        // concurrentrefhashmap/ConcurrentReferenceHashMap.clear:()V
   #9 = Class              #43            // concurrentrefhashmap/ConcurrentReferenceHashMap$Values
  #10 = Class              #45            // java/util/AbstractCollection
  #11 = Utf8               this$0
  #12 = Utf8               Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
  #13 = Utf8               <init>
  #14 = Utf8               (Lconcurrentrefhashmap/ConcurrentReferenceHashMap;)V
  #15 = Utf8               Code
  #16 = Utf8               LineNumberTable
  #17 = Utf8               iterator
  #18 = Utf8               ()Ljava/util/Iterator;
  #19 = Utf8               Signature
  #20 = Utf8               ()Ljava/util/Iterator<TV;>;
  #21 = Utf8               size
  #22 = Utf8               ()I
  #23 = Utf8               isEmpty
  #24 = Utf8               ()Z
  #25 = Utf8               contains
  #26 = Utf8               (Ljava/lang/Object;)Z
  #27 = Utf8               clear
  #28 = Utf8               ()V
  #29 = Utf8               Ljava/util/AbstractCollection<TV;>;
  #30 = Utf8               SourceFile
  #31 = Utf8               ConcurrentReferenceHashMap.java
  #32 = NameAndType        #11:#12        // this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
  #33 = NameAndType        #13:#28        // "<init>":()V
  #34 = Class              #46            // concurrentrefhashmap/ConcurrentReferenceHashMap
  #35 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$ValueIterator
  #36 = Utf8               ValueIterator
  #37 = Utf8               InnerClasses
  #38 = NameAndType        #13:#14        // "<init>":(Lconcurrentrefhashmap/ConcurrentReferenceHashMap;)V
  #39 = NameAndType        #21:#22        // size:()I
  #40 = NameAndType        #23:#24        // isEmpty:()Z
  #41 = NameAndType        #47:#26        // containsValue:(Ljava/lang/Object;)Z
  #42 = NameAndType        #27:#28        // clear:()V
  #43 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$Values
  #44 = Utf8               Values
  #45 = Utf8               java/util/AbstractCollection
  #46 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap
  #47 = Utf8               containsValue
{
  final concurrentrefhashmap.ConcurrentReferenceHashMap this$0;
    descriptor: Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
    flags: (0x1010) ACC_FINAL, ACC_SYNTHETIC

  concurrentrefhashmap.ConcurrentReferenceHashMap$Values(concurrentrefhashmap.ConcurrentReferenceHashMap);
    descriptor: (Lconcurrentrefhashmap/ConcurrentReferenceHashMap;)V
    flags: (0x0000)
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #1                  // Field this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
         5: aload_0
         6: invokespecial #2                  // Method java/util/AbstractCollection."<init>":()V
         9: return
      LineNumberTable:
        line 1792: 0

  public java.util.Iterator<V> iterator();
    descriptor: ()Ljava/util/Iterator;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: new           #3                  // class concurrentrefhashmap/ConcurrentReferenceHashMap$ValueIterator
         3: dup
         4: aload_0
         5: getfield      #1                  // Field this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
         8: invokespecial #4                  // Method concurrentrefhashmap/ConcurrentReferenceHashMap$ValueIterator."<init>":(Lconcurrentrefhashmap/ConcurrentReferenceHashMap;)V
        11: areturn
      LineNumberTable:
        line 1795: 0
    Signature: #20                          // ()Ljava/util/Iterator<TV;>;

  public int size();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #1                  // Field this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
         4: invokevirtual #5                  // Method concurrentrefhashmap/ConcurrentReferenceHashMap.size:()I
         7: ireturn
      LineNumberTable:
        line 1800: 0

  public boolean isEmpty();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #1                  // Field this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
         4: invokevirtual #6                  // Method concurrentrefhashmap/ConcurrentReferenceHashMap.isEmpty:()Z
         7: ireturn
      LineNumberTable:
        line 1805: 0

  public boolean contains(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #1                  // Field this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
         4: aload_1
         5: invokevirtual #7                  // Method concurrentrefhashmap/ConcurrentReferenceHashMap.containsValue:(Ljava/lang/Object;)Z
         8: ireturn
      LineNumberTable:
        line 1810: 0

  public void clear();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #1                  // Field this$0:Lconcurrentrefhashmap/ConcurrentReferenceHashMap;
         4: invokevirtual #8                  // Method concurrentrefhashmap/ConcurrentReferenceHashMap.clear:()V
         7: return
      LineNumberTable:
        line 1815: 0
        line 1816: 7
}
Signature: #29                          // Ljava/util/AbstractCollection<TV;>;
SourceFile: "ConcurrentReferenceHashMap.java"
InnerClasses:
  final #36= #3 of #34;                   // ValueIterator=class concurrentrefhashmap/ConcurrentReferenceHashMap$ValueIterator of class concurrentrefhashmap/ConcurrentReferenceHashMap
  final #44= #9 of #34;                   // Values=class concurrentrefhashmap/ConcurrentReferenceHashMap$Values of class concurrentrefhashmap/ConcurrentReferenceHashMap
