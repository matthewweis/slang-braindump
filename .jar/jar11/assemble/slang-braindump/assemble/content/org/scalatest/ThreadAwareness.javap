Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/scalatest/ThreadAwareness.class
  Last modified May 29, 2022; size 1639 bytes
  SHA-256 checksum f931ede4ed39876d447c7be02e8167b3676589d5d20894ec7e4876f1bd0e54a9
  Compiled from "ConcurrentInformer.scala"
public abstract class org.scalatest.ThreadAwareness
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #2                          // org/scalatest/ThreadAwareness
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 3, attributes: 4
Constant pool:
   #1 = Utf8               org/scalatest/ThreadAwareness
   #2 = Class              #1             // org/scalatest/ThreadAwareness
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               ConcurrentInformer.scala
   #6 = Utf8               Lscala/reflect/ScalaSignature;
   #7 = Utf8               bytes
   #8 = Utf8               \u0006\u0005=2a!\u0002\u0004\u0002\u0002\u0019Q\u0001\"B\t\u0001\t\u0003\u0019\u0002b\u0002\f\u0001\u0005\u0004%ia\u0006\u0005\u0007S\u0001\u0001\u000bQ\u0002\r\t\u000b)\u0002A\u0011A\u0016\u0003\u001fQC\'/Z1e\u0003^\f\'/\u001a8fgNT!a\u0002\u0005\u0002\u0013M\u001c\u0017\r\\1uKN$(\"A\u0005\u0002\u0007=\u0014xm\u0005\u0002\u0001\u0017A\u0011AbD\u0007\u0002\u001b)\ta\"A\u0003tG\u0006d\u0017-\u0003\u0002\u0011\u001b\t1\u0011I\\=SK\u001a\fa\u0001P5oSRt4\u0001\u0001\u000b\u0002)A\u0011Q\u0003A\u0007\u0002\r\u00051\u0011\r^8nS\u000e,\u0012\u0001\u0007\t\u00043\u0005\u001aS\"\u0001\u000e\u000b\u0005YY\"B\u0001\u000f\u001e\u0003)\u0019wN\\2veJ,g\u000e\u001e\u0006\u0003=}\tA!\u001e;jY*\t\u0001%\u0001\u0003kCZ\f\u0017B\u0001\u0012\u001b\u0005=\tEo\\7jGJ+g-\u001a:f]\u000e,\u0007C\u0001\u0013(\u001b\u0005)#B\u0001\u0014 \u0003\u0011a\u0017M\\4\n\u0005!*#A\u0002+ie\u0016\fG-A\u0004bi>l\u0017n\u0019\u0011\u0002)%\u001c8i\u001c8tiJ,8\r^5oORC\'/Z1e+\u0005a\u0003C\u0001\u0007.\u0013\tqSBA\u0004C_>dW-\u00198
   #9 = Utf8               atomic
  #10 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;
  #11 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;
  #12 = Utf8               ()Ljava/util/concurrent/atomic/AtomicReference;
  #13 = Utf8               ()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;
  #14 = NameAndType        #9:#10         // atomic:Ljava/util/concurrent/atomic/AtomicReference;
  #15 = Fieldref           #2.#14         // org/scalatest/ThreadAwareness.atomic:Ljava/util/concurrent/atomic/AtomicReference;
  #16 = Utf8               this
  #17 = Utf8               Lorg/scalatest/ThreadAwareness;
  #18 = Utf8               isConstructingThread
  #19 = Utf8               ()Z
  #20 = NameAndType        #9:#12         // atomic:()Ljava/util/concurrent/atomic/AtomicReference;
  #21 = Methodref          #2.#20         // org/scalatest/ThreadAwareness.atomic:()Ljava/util/concurrent/atomic/AtomicReference;
  #22 = Utf8               java/util/concurrent/atomic/AtomicReference
  #23 = Class              #22            // java/util/concurrent/atomic/AtomicReference
  #24 = Utf8               get
  #25 = Utf8               ()Ljava/lang/Object;
  #26 = NameAndType        #24:#25        // get:()Ljava/lang/Object;
  #27 = Methodref          #23.#26        // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
  #28 = Utf8               java/lang/Thread
  #29 = Class              #28            // java/lang/Thread
  #30 = Utf8               currentThread
  #31 = Utf8               ()Ljava/lang/Thread;
  #32 = NameAndType        #30:#31        // currentThread:()Ljava/lang/Thread;
  #33 = Methodref          #29.#32        // java/lang/Thread.currentThread:()Ljava/lang/Thread;
  #34 = Utf8               equals
  #35 = Utf8               (Ljava/lang/Object;)Z
  #36 = NameAndType        #34:#35        // equals:(Ljava/lang/Object;)Z
  #37 = Methodref          #4.#36         // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #38 = Utf8               constructingThread
  #39 = Utf8               Ljava/lang/Thread;
  #40 = Utf8               <init>
  #41 = Utf8               ()V
  #42 = NameAndType        #40:#41        // "<init>":()V
  #43 = Methodref          #4.#42         // java/lang/Object."<init>":()V
  #44 = Utf8               (Ljava/lang/Object;)V
  #45 = NameAndType        #40:#44        // "<init>":(Ljava/lang/Object;)V
  #46 = Methodref          #23.#45        // java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
  #47 = Utf8               Signature
  #48 = Utf8               Code
  #49 = Utf8               LineNumberTable
  #50 = Utf8               LocalVariableTable
  #51 = Utf8               StackMapTable
  #52 = Utf8               SourceFile
  #53 = Utf8               RuntimeVisibleAnnotations
  #54 = Utf8               ScalaInlineInfo
  #55 = Utf8               ScalaSig
{
  private final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> atomic;
    descriptor: Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #11                          // Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;

  private final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> atomic();
    descriptor: ()Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #15                 // Field atomic:Ljava/util/concurrent/atomic/AtomicReference;
         4: areturn
      LineNumberTable:
        line 56: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalatest/ThreadAwareness;
    Signature: #13                          // ()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/Thread;>;

  public boolean isConstructingThread();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: aload_0
         1: invokespecial #21                 // Method atomic:()Ljava/util/concurrent/atomic/AtomicReference;
         4: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
         7: checkcast     #29                 // class java/lang/Thread
        10: astore_1
        11: invokestatic  #33                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
        14: aload_1
        15: astore_2
        16: dup
        17: ifnonnull     28
        20: pop
        21: aload_2
        22: ifnull        35
        25: goto          39
        28: aload_2
        29: invokevirtual #37                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        32: ifeq          39
        35: iconst_1
        36: goto          40
        39: iconst_0
        40: ireturn
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 28
          locals = [ class org/scalatest/ThreadAwareness, class java/lang/Thread, class java/lang/Thread ]
          stack = [ class java/lang/Thread ]
        frame_type = 6 /* same */
        frame_type = 3 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 59: 0
        line 60: 11
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           11      29     1 constructingThread   Ljava/lang/Thread;
            0      41     0  this   Lorg/scalatest/ThreadAwareness;

  public org.scalatest.ThreadAwareness();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #43                 // Method java/lang/Object."<init>":()V
         4: aload_0
         5: new           #23                 // class java/util/concurrent/atomic/AtomicReference
         8: dup
         9: invokestatic  #33                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
        12: invokespecial #46                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
        15: putfield      #15                 // Field atomic:Ljava/util/concurrent/atomic/AtomicReference;
        18: return
      LineNumberTable:
        line 81: 0
        line 56: 4
        line 54: 18
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      19     0  this   Lorg/scalatest/ThreadAwareness;
}
SourceFile: "ConcurrentInformer.scala"
RuntimeVisibleAnnotations:
  0: #6(#7=s#8)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005=2a!\u0002\u0004\u0002\u0002\u0019Q\u0001\"B\t\u0001\t\u0003\u0019\u0002b\u0002\f\u0001\u0005\u0004%ia\u0006\u0005\u0007S\u0001\u0001\u000bQ\u0002\r\t\u000b)\u0002A\u0011A\u0016\u0003\u001fQC\'/Z1e\u0003^\f\'/\u001a8fgNT!a\u0002\u0005\u0002\u0013M\u001c\u0017\r\\1uKN$(\"A\u0005\u0002\u0007=\u0014xm\u0005\u0002\u0001\u0017A\u0011AbD\u0007\u0002\u001b)\ta\"A\u0003tG\u0006d\u0017-\u0003\u0002\u0011\u001b\t1\u0011I\\=SK\u001a\fa\u0001P5oSRt4\u0001\u0001\u000b\u0002)A\u0011Q\u0003A\u0007\u0002\r\u00051\u0011\r^8nS\u000e,\u0012\u0001\u0007\t\u00043\u0005\u001aS\"\u0001\u000e\u000b\u0005YY\"B\u0001\u000f\u001e\u0003)\u0019wN\\2veJ,g\u000e\u001e\u0006\u0003=}\tA!\u001e;jY*\t\u0001%\u0001\u0003kCZ\f\u0017B\u0001\u0012\u001b\u0005=\tEo\\7jGJ+g-\u001a:f]\u000e,\u0007C\u0001\u0013(\u001b\u0005)#B\u0001\u0014 \u0003\u0011a\u0017M\\4\n\u0005!*#A\u0002+ie\u0016\fG-A\u0004bi>l\u0017n\u0019\u0011\u0002)%\u001c8i\u001c8tiJ,8\r^5oORC\'/Z1e+\u0005a\u0003C\u0001\u0007.\u0013\tqSBA\u0004C_>dW-\u00198"
    )
  ScalaInlineInfo: length = 0x13 (unknown attribute)
   01 00 00 03 00 28 00 29 00 00 09 00 0C 01 00 12
   00 13 00
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
