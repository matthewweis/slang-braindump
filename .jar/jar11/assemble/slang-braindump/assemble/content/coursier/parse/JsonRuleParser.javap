Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/coursier/parse/JsonRuleParser.class
  Last modified May 29, 2022; size 22683 bytes
  SHA-256 checksum bbd4b497df8417ca2bc5f2f020b5f06c1fd639d225f107c32d914399a3956158
  Compiled from "JsonRuleParser.scala"
public class coursier.parse.JsonRuleParser
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // coursier/parse/JsonRuleParser
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 11, methods: 46, attributes: 6
Constant pool:
    #1 = Utf8               coursier/parse/JsonRuleParser
    #2 = Class              #1            // coursier/parse/JsonRuleParser
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               JsonRuleParser.scala
    #6 = Utf8               Lscala/reflect/ScalaSignature;
    #7 = Utf8               bytes
    #8 = Utf8               \u0006\u0005\u00055e\u0001B\u0010!\u0001\u0015B\u0001\u0002\f\u0001\u0003\u0002\u0003\u0006I!\f\u0005\tq\u0001\u0011\t\u0011)A\u0005s!)\u0011\t\u0001C\u0001\u0005\"9q\t\u0001b\u0001\n\u0017A\u0005BB+\u0001A\u0003%\u0011\nC\u0004W\u0001\t\u0007I1B,\t\r}\u0003\u0001\u0015!\u0003Y\u0011\u001d\u0001\u0007A1A\u0005\f\u0005DaA\u001a\u0001!\u0002\u0013\u0011\u0007bB4\u0001\u0005\u0004%I\u0001\u001b\u0005\u0007[\u0002\u0001\u000b\u0011B5\t\u000f9\u0004!\u0019!C\u0005_\"1A\u000f\u0001Q\u0001\nADq!\u001e\u0001C\u0002\u0013%a\u000f\u0003\u0004|\u0001\u0001\u0006Ia\u001e\u0005\by\u0002\u0011\r\u0011\"\u0003~\u0011\u001d\t)\u0001\u0001Q\u0001\nyD\u0011\"a\u0002\u0001\u0005\u0004%I!!\u0003\t\u0011\u0005\r\u0002\u0001)A\u0005\u0003\u0017A\u0011\"!\n\u0001\u0005\u0004%I!a\n\t\u0011\u0005E\u0002\u0001)A\u0005\u0003SAq!a\r\u0001\t\u0003\t)\u0004C\u0004\u0002N\u0001!\t!a\u0014\b\u000f\u0005m\u0003\u0005#\u0001\u0002^\u00191q\u0004\tE\u0001\u0003?Ba!Q\r\u0005\u0002\u0005\u0005\u0004bBA\u001a3\u0011\u0005\u00111\r\u0005\n\u0003WJ\u0012\u0013!C\u0001\u0003[Bq!!\u0014\u001a\t\u0003\t\u0019\tC\u0005\u0002\ff\t\n\u0011\"\u0001\u0002n\tq!j]8o%VdW\rU1sg\u0016\u0014(BA\u0011#\u0003\u0015\u0001\u0018M]:f\u0015\u0005\u0019\u0013\u0001C2pkJ\u001c\u0018.\u001a:\u0004\u0001M\u0011\u0001A\n\t\u0003O)j\u0011\u0001\u000b\u0006\u0002S\u0005)1oY1mC&\u00111\u0006\u000b\u0002\u0007\u0003:L(+\u001a4\u0002\'\u0011,g-Y;miN\u001b\u0017\r\\1WKJ\u001c\u0018n\u001c8\u0011\u00059*dBA\u00184!\t\u0001\u0004&D\u00012\u0015\t\u0011D%\u0001\u0004=e>|GOP\u0005\u0003i!\na\u0001\u0015:fI\u00164\u0017B\u0001\u001c8\u0005\u0019\u0019FO]5oO*\u0011A\u0007K\u0001\u0016I\u00164\u0017-\u001e7u%VdWMU3t_2,H/[8o!\tQt(D\u0001<\u0015\taT(\u0001\u0003sk2,\'B\u0001 #\u0003\u0019\u0001\u0018M]1ng&\u0011\u0001i\u000f\u0002\u000f%VdWMU3t_2,H/[8o\u0003\u0019a\u0014N\\5u}Q\u00191)\u0012$\u0011\u0005\u0011\u0003Q\"\u0001\u0011\t\u000b1\u001a\u0001\u0019A\u0017\t\u000ba\u001a\u0001\u0019A\u001d\u0002\u0019\u0011,7m\u001c3f\u001b>$W\u000f\\3\u0016\u0003%\u00032AS\'P\u001b\u0005Y%\"\u0001\'\u0002\u0011\u0005\u0014xm\u001c8bkRL!AT&\u0003\u0015\u0011+7m\u001c3f\u0015N|g\u000e\u0005\u0002Q\'6\t\u0011K\u0003\u0002SE\u0005!1m\u001c:f\u0013\t!\u0016K\u0001\u0004N_\u0012,H.Z\u0001\u000eI\u0016\u001cw\u000eZ3N_\u0012,H.\u001a\u0011\u0002\'\u0011,7m\u001c3f\u001b>$W\u000f\\3NCR\u001c\u0007.\u001a:\u0016\u0003a\u00032AS\'Z!\tQV,D\u0001\\\u0015\ta&%\u0001\u0003vi&d\u0017B\u00010\\\u00055iu\u000eZ;mK6\u000bGo\u00195fe\u0006!B-Z2pI\u0016lu\u000eZ;mK6\u000bGo\u00195fe\u0002\nA\u0003Z3d_\u0012,Wj\u001c3vY\u0016l\u0015\r^2iKJ\u001cX#\u00012\u0011\u0007)k5\r\u0005\u0002[I&\u0011Qm\u0017\u0002\u000f\u001b>$W\u000f\\3NCR\u001c\u0007.\u001a:t\u0003U!WmY8eK6{G-\u001e7f\u001b\u0006$8\r[3sg\u0002\n\u0001\u0003Z3d_\u0012,\u0017\t\\<bsN4\u0015-\u001b7\u0016\u0003%\u00042AS\'k!\tQ4.\u0003\u0002mw\tQ\u0011\t\\<bsN4\u0015-\u001b7\u0002#\u0011,7m\u001c3f\u00032<\u0018-_:GC&d\u0007%A\teK\u000e|G-Z*b[\u00164VM]:j_:,\u0012\u0001\u001d\t\u0004\u00156\u000b\bC\u0001\u001es\u0013\t\u00198HA\u0006TC6,g+\u001a:tS>t\u0017A\u00053fG>$WmU1nKZ+\'o]5p]\u0002\na\u0004Z3d_\u0012,Gi\u001c8u\u0005Vl\u0007OU8pi\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:\u0016\u0003]\u00042AS\'y!\tQ\u00140\u0003\u0002{w\tABi\u001c8u\u0005Vl\u0007OU8pi\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:\u0002?\u0011,7m\u001c3f\t>tGOQ;naJ{w\u000e\u001e#fa\u0016tG-\u001a8dS\u0016\u001c\b%\u0001\u0007eK\u000e|G-Z*ue&\u001cG/F\u0001\u007f!\rQUj \t\u0004u\u0005\u0005\u0011bAA\u0002w\t11\u000b\u001e:jGR\fQ\u0002Z3d_\u0012,7\u000b\u001e:jGR\u0004\u0013\u0001\u0004:vY\u0016$UmY8eKJ\u001cXCAA\u0006!\u001d\ti!a\u0006.\u00037i!!a\u0004\u000b\t\u0005E\u00111C\u0001\nS6lW\u000f^1cY\u0016T1!!\u0006)\u0003)\u0019w\u000e\u001c7fGRLwN\\\u0005\u0005\u00033\tyAA\u0002NCB\u0004BAS\'\u0002\u001eA\u0019!(a\b\n\u0007\u0005\u00052H\u0001\u0003Sk2,\u0017!\u0004:vY\u0016$UmY8eKJ\u001c\b%\u0001\u0006eK\u000e|G-\u001a*vY\u0016,\"!!\u000b\u0011\t)k\u00151\u0006\t\u0007O\u00055\u0012QD\u001d\n\u0007\u0005=\u0002F\u0001\u0004UkBdWMM\u0001\fI\u0016\u001cw\u000eZ3Sk2,\u0007%A\u0005qCJ\u001cXMU;mKR!\u0011qGA%!\u001d\tI$a\u0011.\u0003WqA!a\u000f\u0002@9\u0019\u0001\'!\u0010\n\u0003%J1!!\u0011)\u0003\u001d\u0001\u0018mY6bO\u0016LA!!\u0012\u0002H\t1Q)\u001b;iKJT1!!\u0011)\u0011\u0019\tYE\u0006a\u0001[\u0005\t1/\u0001\u0006qCJ\u001cXMU;mKN$B!!\u0015\u0002ZA9\u0011\u0011HA\"[\u0005M\u0003CBA\u001d\u0003+\nY#\u0003\u0003\u0002X\u0005\u001d#aA*fc\"1\u00111J\fA\u00025\naBS:p]J+H.\u001a)beN,\'\u000f\u0005\u0002E3M\u0011\u0011D\n\u000b\u0003\u0003;\"\u0002\"a\u000e\u0002f\u0005\u001d\u0014\u0011\u000e\u0005\u0007\u0003\u0017Z\u0002\u0019A\u0017\t\u000b1Z\u0002\u0019A\u0017\t\u000faZ\u0002\u0013!a\u0001s\u0005\u0019\u0002/\u0019:tKJ+H.\u001a\u0013eK\u001a\fW\u000f\u001c;%gU\u0011\u0011q\u000e\u0016\u0004s\u0005E4FAA:!\u0011\t)(a \u000e\u0005\u0005]$\u0002BA=\u0003w\n\u0011\"\u001e8dQ\u0016\u001c7.\u001a3\u000b\u0007\u0005u\u0004&\u0001\u0006b]:|G/\u0019;j_:LA!!!\u0002x\t\tRO\\2iK\u000e\\W\r\u001a,be&\fgnY3\u0015\u0011\u0005E\u0013QQAD\u0003\u0013Ca!a\u0013\u001e\u0001\u0004i\u0003\"\u0002\u0017\u001e\u0001\u0004i\u0003b\u0002\u001d\u001e!\u0003\u0005\r!O\u0001\u0015a\u0006\u00148/\u001a*vY\u0016\u001cH\u0005Z3gCVdG\u000fJ\u001a
    #9 = Utf8               coursier/parse/JsonRuleParser$$anonfun$1
   #10 = Class              #9            // coursier/parse/JsonRuleParser$$anonfun$1
   #11 = Utf8               coursier/parse/JsonRuleParser$Helper$1
   #12 = Class              #11           // coursier/parse/JsonRuleParser$Helper$1
   #13 = Utf8               1
   #14 = Utf8               coursier/parse/JsonRuleParser$Helper$2$
   #15 = Class              #14           // coursier/parse/JsonRuleParser$Helper$2$
   #16 = Utf8
   #17 = Utf8               coursier/parse/JsonRuleParser$Repr$1
   #18 = Class              #17           // coursier/parse/JsonRuleParser$Repr$1
   #19 = Utf8               coursier/parse/JsonRuleParser$Repr$2$
   #20 = Class              #19           // coursier/parse/JsonRuleParser$Repr$2$
   #21 = Utf8               coursier/parse/JsonRuleParser$Repr$4
   #22 = Class              #21           // coursier/parse/JsonRuleParser$Repr$4
   #23 = Utf8               4
   #24 = Utf8               coursier/parse/JsonRuleParser$Repr$5$
   #25 = Class              #24           // coursier/parse/JsonRuleParser$Repr$5$
   #26 = Utf8               coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1
   #27 = Class              #26           // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1
   #28 = Utf8               coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1
   #29 = Class              #28           // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1
   #30 = Utf8               coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1
   #31 = Class              #30           // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1
   #32 = Utf8               java/lang/invoke/MethodHandles$Lookup
   #33 = Class              #32           // java/lang/invoke/MethodHandles$Lookup
   #34 = Utf8               java/lang/invoke/MethodHandles
   #35 = Class              #34           // java/lang/invoke/MethodHandles
   #36 = Utf8               Lookup
   #37 = Utf8               scala/Predef$ArrowAssoc$
   #38 = Class              #37           // scala/Predef$ArrowAssoc$
   #39 = Utf8               scala/Predef
   #40 = Class              #39           // scala/Predef
   #41 = Utf8               scala/math/Ordering$String$
   #42 = Class              #41           // scala/math/Ordering$String$
   #43 = Utf8               scala/math/Ordering
   #44 = Class              #43           // scala/math/Ordering
   #45 = Utf8               defaultScalaVersion
   #46 = Utf8               Ljava/lang/String;
   #47 = Utf8               defaultRuleResolution
   #48 = Utf8               Lcoursier/params/rule/RuleResolution;
   #49 = Utf8               coursier$parse$JsonRuleParser$$decodeModule
   #50 = Utf8               Largonaut/DecodeJson;
   #51 = Utf8               Largonaut/DecodeJson<Lcoursier/core/Module;>;
   #52 = Utf8               coursier$parse$JsonRuleParser$$decodeModuleMatcher
   #53 = Utf8               Largonaut/DecodeJson<Lcoursier/util/ModuleMatcher;>;
   #54 = Utf8               decodeModuleMatchers
   #55 = Utf8               Largonaut/DecodeJson<Lcoursier/util/ModuleMatchers;>;
   #56 = Utf8               decodeAlwaysFail
   #57 = Utf8               Largonaut/DecodeJson<Lcoursier/params/rule/AlwaysFail;>;
   #58 = Utf8               decodeSameVersion
   #59 = Utf8               Largonaut/DecodeJson<Lcoursier/params/rule/SameVersion;>;
   #60 = Utf8               decodeDontBumpRootDependencies
   #61 = Utf8               Largonaut/DecodeJson<Lcoursier/params/rule/DontBumpRootDependencies;>;
   #62 = Utf8               decodeStrict
   #63 = Utf8               Largonaut/DecodeJson<Lcoursier/params/rule/Strict;>;
   #64 = Utf8               ruleDecoders
   #65 = Utf8               Lscala/collection/immutable/Map;
   #66 = Utf8               Lscala/collection/immutable/Map<Ljava/lang/String;Largonaut/DecodeJson<Lcoursier/params/rule/Rule;>;>;
   #67 = Utf8               decodeRule
   #68 = Utf8               Largonaut/DecodeJson<Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;
   #69 = Utf8               parseRules$default$3
   #70 = Utf8               ()Lcoursier/params/rule/RuleResolution;
   #71 = Utf8               coursier/parse/JsonRuleParser$
   #72 = Class              #71           // coursier/parse/JsonRuleParser$
   #73 = Utf8               MODULE$
   #74 = Utf8               Lcoursier/parse/JsonRuleParser$;
   #75 = NameAndType        #73:#74       // MODULE$:Lcoursier/parse/JsonRuleParser$;
   #76 = Fieldref           #72.#75       // coursier/parse/JsonRuleParser$.MODULE$:Lcoursier/parse/JsonRuleParser$;
   #77 = NameAndType        #69:#70       // parseRules$default$3:()Lcoursier/params/rule/RuleResolution;
   #78 = Methodref          #72.#77       // coursier/parse/JsonRuleParser$.parseRules$default$3:()Lcoursier/params/rule/RuleResolution;
   #79 = Utf8               parseRule$default$3
   #80 = NameAndType        #79:#70       // parseRule$default$3:()Lcoursier/params/rule/RuleResolution;
   #81 = Methodref          #72.#80       // coursier/parse/JsonRuleParser$.parseRule$default$3:()Lcoursier/params/rule/RuleResolution;
   #82 = Utf8               ()Largonaut/DecodeJson;
   #83 = Utf8               ()Largonaut/DecodeJson<Lcoursier/core/Module;>;
   #84 = NameAndType        #49:#50       // coursier$parse$JsonRuleParser$$decodeModule:Largonaut/DecodeJson;
   #85 = Fieldref           #2.#84        // coursier/parse/JsonRuleParser.coursier$parse$JsonRuleParser$$decodeModule:Largonaut/DecodeJson;
   #86 = Utf8               this
   #87 = Utf8               Lcoursier/parse/JsonRuleParser;
   #88 = Utf8               ()Largonaut/DecodeJson<Lcoursier/util/ModuleMatcher;>;
   #89 = NameAndType        #52:#50       // coursier$parse$JsonRuleParser$$decodeModuleMatcher:Largonaut/DecodeJson;
   #90 = Fieldref           #2.#89        // coursier/parse/JsonRuleParser.coursier$parse$JsonRuleParser$$decodeModuleMatcher:Largonaut/DecodeJson;
   #91 = Utf8               ()Largonaut/DecodeJson<Lcoursier/util/ModuleMatchers;>;
   #92 = NameAndType        #54:#50       // decodeModuleMatchers:Largonaut/DecodeJson;
   #93 = Fieldref           #2.#92        // coursier/parse/JsonRuleParser.decodeModuleMatchers:Largonaut/DecodeJson;
   #94 = Utf8               ()Largonaut/DecodeJson<Lcoursier/params/rule/AlwaysFail;>;
   #95 = NameAndType        #56:#50       // decodeAlwaysFail:Largonaut/DecodeJson;
   #96 = Fieldref           #2.#95        // coursier/parse/JsonRuleParser.decodeAlwaysFail:Largonaut/DecodeJson;
   #97 = Utf8               ()Largonaut/DecodeJson<Lcoursier/params/rule/SameVersion;>;
   #98 = NameAndType        #58:#50       // decodeSameVersion:Largonaut/DecodeJson;
   #99 = Fieldref           #2.#98        // coursier/parse/JsonRuleParser.decodeSameVersion:Largonaut/DecodeJson;
  #100 = Utf8               ()Largonaut/DecodeJson<Lcoursier/params/rule/DontBumpRootDependencies;>;
  #101 = NameAndType        #60:#50       // decodeDontBumpRootDependencies:Largonaut/DecodeJson;
  #102 = Fieldref           #2.#101       // coursier/parse/JsonRuleParser.decodeDontBumpRootDependencies:Largonaut/DecodeJson;
  #103 = Utf8               ()Largonaut/DecodeJson<Lcoursier/params/rule/Strict;>;
  #104 = NameAndType        #62:#50       // decodeStrict:Largonaut/DecodeJson;
  #105 = Fieldref           #2.#104       // coursier/parse/JsonRuleParser.decodeStrict:Largonaut/DecodeJson;
  #106 = Utf8               ()Lscala/collection/immutable/Map;
  #107 = Utf8               ()Lscala/collection/immutable/Map<Ljava/lang/String;Largonaut/DecodeJson<Lcoursier/params/rule/Rule;>;>;
  #108 = NameAndType        #64:#65       // ruleDecoders:Lscala/collection/immutable/Map;
  #109 = Fieldref           #2.#108       // coursier/parse/JsonRuleParser.ruleDecoders:Lscala/collection/immutable/Map;
  #110 = Utf8               ()Largonaut/DecodeJson<Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;
  #111 = NameAndType        #67:#50       // decodeRule:Largonaut/DecodeJson;
  #112 = Fieldref           #2.#111       // coursier/parse/JsonRuleParser.decodeRule:Largonaut/DecodeJson;
  #113 = Utf8               parseRule
  #114 = Utf8               (Ljava/lang/String;)Lscala/util/Either;
  #115 = Utf8               (Ljava/lang/String;)Lscala/util/Either<Ljava/lang/String;Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;
  #116 = Utf8               s
  #117 = Utf8               argonaut/Argonaut$
  #118 = Class              #117          // argonaut/Argonaut$
  #119 = Utf8               Largonaut/Argonaut$;
  #120 = NameAndType        #73:#119      // MODULE$:Largonaut/Argonaut$;
  #121 = Fieldref           #118.#120     // argonaut/Argonaut$.MODULE$:Largonaut/Argonaut$;
  #122 = Utf8               StringToParseWrap
  #123 = Utf8               (Ljava/lang/String;)Largonaut/ParseWrap;
  #124 = NameAndType        #122:#123     // StringToParseWrap:(Ljava/lang/String;)Largonaut/ParseWrap;
  #125 = Methodref          #118.#124     // argonaut/Argonaut$.StringToParseWrap:(Ljava/lang/String;)Largonaut/ParseWrap;
  #126 = NameAndType        #67:#82       // decodeRule:()Largonaut/DecodeJson;
  #127 = Methodref          #2.#126       // coursier/parse/JsonRuleParser.decodeRule:()Largonaut/DecodeJson;
  #128 = Utf8               argonaut/ParseWrap
  #129 = Class              #128          // argonaut/ParseWrap
  #130 = Utf8               decodeEither
  #131 = Utf8               (Largonaut/DecodeJson;)Lscala/util/Either;
  #132 = NameAndType        #130:#131     // decodeEither:(Largonaut/DecodeJson;)Lscala/util/Either;
  #133 = Methodref          #129.#132     // argonaut/ParseWrap.decodeEither:(Largonaut/DecodeJson;)Lscala/util/Either;
  #134 = Utf8               parseRules
  #135 = Utf8               (Ljava/lang/String;)Lscala/util/Either<Ljava/lang/String;Lscala/collection/immutable/Seq<Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;>;
  #136 = Utf8               argonaut/DecodeJson$
  #137 = Class              #136          // argonaut/DecodeJson$
  #138 = Utf8               Largonaut/DecodeJson$;
  #139 = NameAndType        #73:#138      // MODULE$:Largonaut/DecodeJson$;
  #140 = Fieldref           #137.#139     // argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
  #141 = Utf8               ListDecodeJson
  #142 = Utf8               (Largonaut/DecodeJson;)Largonaut/DecodeJson;
  #143 = NameAndType        #141:#142     // ListDecodeJson:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
  #144 = Methodref          #137.#143     // argonaut/DecodeJson$.ListDecodeJson:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
  #145 = Utf8               $anonfun$decodeModule$2
  #146 = Utf8               (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
  #147 = Utf8               $this
  #148 = Utf8               c$1
  #149 = Utf8               coursier/parse/ModuleParser$
  #150 = Class              #149          // coursier/parse/ModuleParser$
  #151 = Utf8               Lcoursier/parse/ModuleParser$;
  #152 = NameAndType        #73:#151      // MODULE$:Lcoursier/parse/ModuleParser$;
  #153 = Fieldref           #150.#152     // coursier/parse/ModuleParser$.MODULE$:Lcoursier/parse/ModuleParser$;
  #154 = NameAndType        #45:#46       // defaultScalaVersion:Ljava/lang/String;
  #155 = Fieldref           #2.#154       // coursier/parse/JsonRuleParser.defaultScalaVersion:Ljava/lang/String;
  #156 = Utf8               module
  #157 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lscala/util/Either;
  #158 = NameAndType        #156:#157     // module:(Ljava/lang/String;Ljava/lang/String;)Lscala/util/Either;
  #159 = Methodref          #150.#158     // coursier/parse/ModuleParser$.module:(Ljava/lang/String;Ljava/lang/String;)Lscala/util/Either;
  #160 = Utf8               scala/util/Left
  #161 = Class              #160          // scala/util/Left
  #162 = Utf8               value
  #163 = Utf8               ()Ljava/lang/Object;
  #164 = NameAndType        #162:#163     // value:()Ljava/lang/Object;
  #165 = Methodref          #161.#164     // scala/util/Left.value:()Ljava/lang/Object;
  #166 = Utf8               java/lang/String
  #167 = Class              #166          // java/lang/String
  #168 = Utf8               argonaut/DecodeResult$
  #169 = Class              #168          // argonaut/DecodeResult$
  #170 = Utf8               Largonaut/DecodeResult$;
  #171 = NameAndType        #73:#170      // MODULE$:Largonaut/DecodeResult$;
  #172 = Fieldref           #169.#171     // argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
  #173 = Utf8               java/lang/StringBuilder
  #174 = Class              #173          // java/lang/StringBuilder
  #175 = Integer            25
  #176 = Utf8               <init>
  #177 = Utf8               (I)V
  #178 = NameAndType        #176:#177     // "<init>":(I)V
  #179 = Methodref          #174.#178     // java/lang/StringBuilder."<init>":(I)V
  #180 = Utf8               Cannot decode module \'
  #181 = String             #180          // Cannot decode module \'
  #182 = Utf8               append
  #183 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #184 = NameAndType        #182:#183     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #185 = Methodref          #174.#184     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #186 = Utf8               \':
  #187 = String             #186          // \':
  #188 = Utf8               toString
  #189 = Utf8               ()Ljava/lang/String;
  #190 = NameAndType        #188:#189     // toString:()Ljava/lang/String;
  #191 = Methodref          #174.#190     // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #192 = Utf8               argonaut/HCursor
  #193 = Class              #192          // argonaut/HCursor
  #194 = Utf8               history
  #195 = Utf8               ()Largonaut/CursorHistory;
  #196 = NameAndType        #194:#195     // history:()Largonaut/CursorHistory;
  #197 = Methodref          #193.#196     // argonaut/HCursor.history:()Largonaut/CursorHistory;
  #198 = Utf8               fail
  #199 = Utf8               (Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
  #200 = NameAndType        #198:#199     // fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
  #201 = Methodref          #169.#200     // argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
  #202 = Utf8               scala/util/Either
  #203 = Class              #202          // scala/util/Either
  #204 = Utf8               scala/util/Right
  #205 = Class              #204          // scala/util/Right
  #206 = Methodref          #205.#164     // scala/util/Right.value:()Ljava/lang/Object;
  #207 = Utf8               coursier/core/Module
  #208 = Class              #207          // coursier/core/Module
  #209 = Utf8               ok
  #210 = Utf8               (Ljava/lang/Object;)Largonaut/DecodeResult;
  #211 = NameAndType        #209:#210     // ok:(Ljava/lang/Object;)Largonaut/DecodeResult;
  #212 = Methodref          #169.#211     // argonaut/DecodeResult$.ok:(Ljava/lang/Object;)Largonaut/DecodeResult;
  #213 = Utf8               scala/MatchError
  #214 = Class              #213          // scala/MatchError
  #215 = Utf8               (Ljava/lang/Object;)V
  #216 = NameAndType        #176:#215     // "<init>":(Ljava/lang/Object;)V
  #217 = Methodref          #214.#216     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #218 = Utf8               argonaut/DecodeResult
  #219 = Class              #218          // argonaut/DecodeResult
  #220 = Utf8               err
  #221 = Utf8               mod
  #222 = Utf8               Lcoursier/core/Module;
  #223 = Utf8               Largonaut/HCursor;
  #224 = Utf8               $anonfun$decodeModule$3
  #225 = Utf8               (Largonaut/HCursor;)Largonaut/DecodeResult;
  #226 = Utf8               Invalid module
  #227 = String             #226          // Invalid module
  #228 = Utf8               $anonfun$decodeModule$1
  #229 = Utf8               (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #230 = Utf8               c
  #231 = Utf8               focus
  #232 = Utf8               ()Largonaut/Json;
  #233 = NameAndType        #231:#232     // focus:()Largonaut/Json;
  #234 = Methodref          #193.#233     // argonaut/HCursor.focus:()Largonaut/Json;
  #235 = Utf8               argonaut/Json
  #236 = Class              #235          // argonaut/Json
  #237 = Utf8               string
  #238 = Utf8               ()Lscala/Option;
  #239 = NameAndType        #237:#238     // string:()Lscala/Option;
  #240 = Methodref          #236.#239     // argonaut/Json.string:()Lscala/Option;
  #241 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #242 = MethodType         #241          //  (Ljava/lang/Object;)Ljava/lang/Object;
  #243 = NameAndType        #145:#146     // $anonfun$decodeModule$2:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
  #244 = Methodref          #2.#243       // coursier/parse/JsonRuleParser.$anonfun$decodeModule$2:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
  #245 = MethodHandle       6:#244        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$2:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
  #246 = Utf8               (Ljava/lang/String;)Largonaut/DecodeResult;
  #247 = MethodType         #246          //  (Ljava/lang/String;)Largonaut/DecodeResult;
  #248 = Integer            5
  #249 = Integer            1
  #250 = Utf8               java/lang/invoke/LambdaMetafactory
  #251 = Class              #250          // java/lang/invoke/LambdaMetafactory
  #252 = Utf8               altMetafactory
  #253 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #254 = NameAndType        #252:#253     // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #255 = Methodref          #251.#254     // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #256 = MethodHandle       6:#255        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #257 = Utf8               apply
  #258 = Utf8               (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Lscala/Function1;
  #259 = NameAndType        #257:#258     // apply:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Lscala/Function1;
  #260 = InvokeDynamic      #0:#259       // #0:apply:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Lscala/Function1;
  #261 = Utf8               scala/Option
  #262 = Class              #261          // scala/Option
  #263 = Utf8               map
  #264 = Utf8               (Lscala/Function1;)Lscala/Option;
  #265 = NameAndType        #263:#264     // map:(Lscala/Function1;)Lscala/Option;
  #266 = Methodref          #262.#265     // scala/Option.map:(Lscala/Function1;)Lscala/Option;
  #267 = MethodType         #163          //  ()Ljava/lang/Object;
  #268 = NameAndType        #224:#225     // $anonfun$decodeModule$3:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #269 = Methodref          #2.#268       // coursier/parse/JsonRuleParser.$anonfun$decodeModule$3:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #270 = MethodHandle       6:#269        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$3:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #271 = Utf8               ()Largonaut/DecodeResult;
  #272 = MethodType         #271          //  ()Largonaut/DecodeResult;
  #273 = Utf8               (Largonaut/HCursor;)Lscala/Function0;
  #274 = NameAndType        #257:#273     // apply:(Largonaut/HCursor;)Lscala/Function0;
  #275 = InvokeDynamic      #1:#274       // #1:apply:(Largonaut/HCursor;)Lscala/Function0;
  #276 = Utf8               getOrElse
  #277 = Utf8               (Lscala/Function0;)Ljava/lang/Object;
  #278 = NameAndType        #276:#277     // getOrElse:(Lscala/Function0;)Ljava/lang/Object;
  #279 = Methodref          #262.#278     // scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
  #280 = Utf8               fromStringOpt
  #281 = Utf8               Lscala/Option;
  #282 = Utf8               $anonfun$decodeModuleMatcher$1
  #283 = Utf8               (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #284 = Utf8               x$1
  #285 = Utf8               coursier/util/ModuleMatcher$
  #286 = Class              #285          // coursier/util/ModuleMatcher$
  #287 = Utf8               Lcoursier/util/ModuleMatcher$;
  #288 = NameAndType        #73:#287      // MODULE$:Lcoursier/util/ModuleMatcher$;
  #289 = Fieldref           #286.#288     // coursier/util/ModuleMatcher$.MODULE$:Lcoursier/util/ModuleMatcher$;
  #290 = NameAndType        #257:#283     // apply:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #291 = Methodref          #286.#290     // coursier/util/ModuleMatcher$.apply:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #292 = Utf8               Helper$lzycompute$1
  #293 = Utf8               (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Helper$2$;
  #294 = Utf8               Helper$module$1
  #295 = Utf8               scala/runtime/LazyRef
  #296 = Class              #295          // scala/runtime/LazyRef
  #297 = Utf8               initialized
  #298 = Utf8               ()Z
  #299 = NameAndType        #297:#298     // initialized:()Z
  #300 = Methodref          #296.#299     // scala/runtime/LazyRef.initialized:()Z
  #301 = Methodref          #296.#164     // scala/runtime/LazyRef.value:()Ljava/lang/Object;
  #302 = Utf8               (Lcoursier/parse/JsonRuleParser;)V
  #303 = NameAndType        #176:#302     // "<init>":(Lcoursier/parse/JsonRuleParser;)V
  #304 = Methodref          #15.#303      // coursier/parse/JsonRuleParser$Helper$2$."<init>":(Lcoursier/parse/JsonRuleParser;)V
  #305 = Utf8               initialize
  #306 = NameAndType        #305:#241     // initialize:(Ljava/lang/Object;)Ljava/lang/Object;
  #307 = Methodref          #296.#306     // scala/runtime/LazyRef.initialize:(Ljava/lang/Object;)Ljava/lang/Object;
  #308 = Utf8               java/lang/Throwable
  #309 = Class              #308          // java/lang/Throwable
  #310 = Utf8               Lscala/runtime/LazyRef;
  #311 = Utf8               coursier$parse$JsonRuleParser$$Helper$3
  #312 = NameAndType        #292:#293     // Helper$lzycompute$1:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Helper$2$;
  #313 = Methodref          #2.#312       // coursier/parse/JsonRuleParser.Helper$lzycompute$1:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Helper$2$;
  #314 = Utf8               $anonfun$decodeModuleMatchers$2
  #315 = Utf8               (Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
  #316 = Utf8               h
  #317 = Utf8               coursier/util/ModuleMatchers$
  #318 = Class              #317          // coursier/util/ModuleMatchers$
  #319 = Utf8               Lcoursier/util/ModuleMatchers$;
  #320 = NameAndType        #73:#319      // MODULE$:Lcoursier/util/ModuleMatchers$;
  #321 = Fieldref           #318.#320     // coursier/util/ModuleMatchers$.MODULE$:Lcoursier/util/ModuleMatchers$;
  #322 = Utf8               exclude
  #323 = Utf8               ()Lscala/collection/immutable/List;
  #324 = NameAndType        #322:#323     // exclude:()Lscala/collection/immutable/List;
  #325 = Methodref          #12.#324      // coursier/parse/JsonRuleParser$Helper$1.exclude:()Lscala/collection/immutable/List;
  #326 = Utf8               scala/collection/immutable/List
  #327 = Class              #326          // scala/collection/immutable/List
  #328 = Utf8               toSet
  #329 = Utf8               ()Lscala/collection/immutable/Set;
  #330 = NameAndType        #328:#329     // toSet:()Lscala/collection/immutable/Set;
  #331 = Methodref          #327.#330     // scala/collection/immutable/List.toSet:()Lscala/collection/immutable/Set;
  #332 = Utf8               include
  #333 = NameAndType        #332:#323     // include:()Lscala/collection/immutable/List;
  #334 = Methodref          #12.#333      // coursier/parse/JsonRuleParser$Helper$1.include:()Lscala/collection/immutable/List;
  #335 = Utf8               (Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/util/ModuleMatchers;
  #336 = NameAndType        #257:#335     // apply:(Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/util/ModuleMatchers;
  #337 = Methodref          #318.#336     // coursier/util/ModuleMatchers$.apply:(Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/util/ModuleMatchers;
  #338 = Utf8               Lcoursier/parse/JsonRuleParser$Helper$1;
  #339 = Utf8               $anonfun$decodeModuleMatchers$1
  #340 = Utf8               (Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
  #341 = Utf8               decodeHelper$1
  #342 = Utf8               argonaut/DecodeJson
  #343 = Class              #342          // argonaut/DecodeJson
  #344 = NameAndType        #257:#225     // apply:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #345 = InterfaceMethodref #343.#344     // argonaut/DecodeJson.apply:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #346 = NameAndType        #314:#315     // $anonfun$decodeModuleMatchers$2:(Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
  #347 = Methodref          #2.#346       // coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$2:(Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
  #348 = MethodHandle       6:#347        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$2:(Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
  #349 = MethodType         #315          //  (Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
  #350 = Utf8               ()Lscala/Function1;
  #351 = NameAndType        #257:#350     // apply:()Lscala/Function1;
  #352 = InvokeDynamic      #2:#351       // #2:apply:()Lscala/Function1;
  #353 = Utf8               (Lscala/Function1;)Largonaut/DecodeResult;
  #354 = NameAndType        #263:#353     // map:(Lscala/Function1;)Largonaut/DecodeResult;
  #355 = Methodref          #219.#354     // argonaut/DecodeResult.map:(Lscala/Function1;)Largonaut/DecodeResult;
  #356 = Utf8               $anonfun$decodeAlwaysFail$1
  #357 = Utf8               isObject
  #358 = NameAndType        #357:#298     // isObject:()Z
  #359 = Methodref          #236.#358     // argonaut/Json.isObject:()Z
  #360 = Utf8               coursier/params/rule/AlwaysFail$
  #361 = Class              #360          // coursier/params/rule/AlwaysFail$
  #362 = Utf8               Lcoursier/params/rule/AlwaysFail$;
  #363 = NameAndType        #73:#362      // MODULE$:Lcoursier/params/rule/AlwaysFail$;
  #364 = Fieldref           #361.#363     // coursier/params/rule/AlwaysFail$.MODULE$:Lcoursier/params/rule/AlwaysFail$;
  #365 = Utf8               ()Lcoursier/params/rule/AlwaysFail;
  #366 = NameAndType        #257:#365     // apply:()Lcoursier/params/rule/AlwaysFail;
  #367 = Methodref          #361.#366     // coursier/params/rule/AlwaysFail$.apply:()Lcoursier/params/rule/AlwaysFail;
  #368 = Utf8               Expected JSON object for AlwaysFail rule
  #369 = String             #368          // Expected JSON object for AlwaysFail rule
  #370 = Utf8               Repr$lzycompute$1
  #371 = Utf8               (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$2$;
  #372 = Utf8               Repr$module$1
  #373 = Methodref          #20.#303      // coursier/parse/JsonRuleParser$Repr$2$."<init>":(Lcoursier/parse/JsonRuleParser;)V
  #374 = Utf8               coursier$parse$JsonRuleParser$$Repr$3
  #375 = NameAndType        #370:#371     // Repr$lzycompute$1:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$2$;
  #376 = Methodref          #2.#375       // coursier/parse/JsonRuleParser.Repr$lzycompute$1:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$2$;
  #377 = Utf8               $anonfun$decodeSameVersion$2
  #378 = Utf8               x$2
  #379 = Utf8               $anonfun$decodeSameVersion$1
  #380 = Utf8               (Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
  #381 = Utf8               r
  #382 = Utf8               coursier/params/rule/SameVersion$
  #383 = Class              #382          // coursier/params/rule/SameVersion$
  #384 = Utf8               Lcoursier/params/rule/SameVersion$;
  #385 = NameAndType        #73:#384      // MODULE$:Lcoursier/params/rule/SameVersion$;
  #386 = Fieldref           #383.#385     // coursier/params/rule/SameVersion$.MODULE$:Lcoursier/params/rule/SameVersion$;
  #387 = Utf8               modules
  #388 = NameAndType        #387:#323     // modules:()Lscala/collection/immutable/List;
  #389 = Methodref          #18.#388      // coursier/parse/JsonRuleParser$Repr$1.modules:()Lscala/collection/immutable/List;
  #390 = NameAndType        #377:#283     // $anonfun$decodeSameVersion$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #391 = Methodref          #2.#390       // coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #392 = MethodHandle       6:#391        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #393 = MethodType         #283          //  (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #394 = InvokeDynamic      #3:#351       // #3:apply:()Lscala/Function1;
  #395 = Utf8               (Lscala/Function1;)Lscala/collection/immutable/List;
  #396 = NameAndType        #263:#395     // map:(Lscala/Function1;)Lscala/collection/immutable/List;
  #397 = Methodref          #327.#396     // scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
  #398 = Utf8               (Lscala/collection/immutable/Set;)Lcoursier/params/rule/SameVersion;
  #399 = NameAndType        #257:#398     // apply:(Lscala/collection/immutable/Set;)Lcoursier/params/rule/SameVersion;
  #400 = Methodref          #383.#399     // coursier/params/rule/SameVersion$.apply:(Lscala/collection/immutable/Set;)Lcoursier/params/rule/SameVersion;
  #401 = Utf8               Lcoursier/parse/JsonRuleParser$Repr$1;
  #402 = Utf8               $anonfun$decodeDontBumpRootDependencies$2
  #403 = Utf8               (Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #404 = Utf8               m
  #405 = Utf8               coursier/params/rule/DontBumpRootDependencies$
  #406 = Class              #405          // coursier/params/rule/DontBumpRootDependencies$
  #407 = Utf8               Lcoursier/params/rule/DontBumpRootDependencies$;
  #408 = NameAndType        #73:#407      // MODULE$:Lcoursier/params/rule/DontBumpRootDependencies$;
  #409 = Fieldref           #406.#408     // coursier/params/rule/DontBumpRootDependencies$.MODULE$:Lcoursier/params/rule/DontBumpRootDependencies$;
  #410 = NameAndType        #257:#403     // apply:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #411 = Methodref          #406.#410     // coursier/params/rule/DontBumpRootDependencies$.apply:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #412 = Utf8               Lcoursier/util/ModuleMatchers;
  #413 = Utf8               $anonfun$decodeDontBumpRootDependencies$1
  #414 = NameAndType        #54:#82       // decodeModuleMatchers:()Largonaut/DecodeJson;
  #415 = Methodref          #2.#414       // coursier/parse/JsonRuleParser.decodeModuleMatchers:()Largonaut/DecodeJson;
  #416 = NameAndType        #402:#403     // $anonfun$decodeDontBumpRootDependencies$2:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #417 = Methodref          #2.#416       // coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$2:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #418 = MethodHandle       6:#417        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$2:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #419 = MethodType         #403          //  (Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  #420 = InvokeDynamic      #4:#351       // #4:apply:()Lscala/Function1;
  #421 = Utf8               Repr$lzycompute$2
  #422 = Utf8               (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$5$;
  #423 = Utf8               Repr$module$2
  #424 = Methodref          #25.#303      // coursier/parse/JsonRuleParser$Repr$5$."<init>":(Lcoursier/parse/JsonRuleParser;)V
  #425 = Utf8               coursier$parse$JsonRuleParser$$Repr$6
  #426 = NameAndType        #421:#422     // Repr$lzycompute$2:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$5$;
  #427 = Methodref          #2.#426       // coursier/parse/JsonRuleParser.Repr$lzycompute$2:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$5$;
  #428 = Utf8               $anonfun$decodeStrict$2
  #429 = Utf8               x$3
  #430 = Utf8               $anonfun$decodeStrict$3
  #431 = Utf8               x$4
  #432 = Utf8               $anonfun$decodeStrict$1
  #433 = Utf8               (Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
  #434 = Methodref          #22.#333      // coursier/parse/JsonRuleParser$Repr$4.include:()Lscala/collection/immutable/List;
  #435 = Utf8               isEmpty
  #436 = NameAndType        #435:#298     // isEmpty:()Z
  #437 = Methodref          #327.#436     // scala/collection/immutable/List.isEmpty:()Z
  #438 = Utf8               scala/Predef$
  #439 = Class              #438          // scala/Predef$
  #440 = Utf8               Lscala/Predef$;
  #441 = NameAndType        #73:#440      // MODULE$:Lscala/Predef$;
  #442 = Fieldref           #439.#441     // scala/Predef$.MODULE$:Lscala/Predef$;
  #443 = Utf8               Set
  #444 = Utf8               ()Lscala/collection/immutable/Set$;
  #445 = NameAndType        #443:#444     // Set:()Lscala/collection/immutable/Set$;
  #446 = Methodref          #439.#445     // scala/Predef$.Set:()Lscala/collection/immutable/Set$;
  #447 = Utf8               scala/runtime/ScalaRunTime$
  #448 = Class              #447          // scala/runtime/ScalaRunTime$
  #449 = Utf8               Lscala/runtime/ScalaRunTime$;
  #450 = NameAndType        #73:#449      // MODULE$:Lscala/runtime/ScalaRunTime$;
  #451 = Fieldref           #448.#450     // scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
  #452 = Utf8               coursier/util/ModuleMatcher
  #453 = Class              #452          // coursier/util/ModuleMatcher
  #454 = Utf8               all
  #455 = Utf8               ()Lcoursier/util/ModuleMatcher;
  #456 = NameAndType        #454:#455     // all:()Lcoursier/util/ModuleMatcher;
  #457 = Methodref          #286.#456     // coursier/util/ModuleMatcher$.all:()Lcoursier/util/ModuleMatcher;
  #458 = Utf8               [Ljava/lang/Object;
  #459 = Class              #458          // "[Ljava/lang/Object;"
  #460 = Utf8               wrapRefArray
  #461 = Utf8               ([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #462 = NameAndType        #460:#461     // wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #463 = Methodref          #448.#462     // scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #464 = Utf8               scala/collection/immutable/Set$
  #465 = Class              #464          // scala/collection/immutable/Set$
  #466 = Utf8               (Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #467 = NameAndType        #257:#466     // apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #468 = Methodref          #465.#467     // scala/collection/immutable/Set$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #469 = Utf8               scala/collection/immutable/Set
  #470 = Class              #469          // scala/collection/immutable/Set
  #471 = NameAndType        #428:#283     // $anonfun$decodeStrict$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #472 = Methodref          #2.#471       // coursier/parse/JsonRuleParser.$anonfun$decodeStrict$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #473 = MethodHandle       6:#472        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #474 = InvokeDynamic      #5:#351       // #5:apply:()Lscala/Function1;
  #475 = Utf8               coursier/params/rule/Strict$
  #476 = Class              #475          // coursier/params/rule/Strict$
  #477 = Utf8               Lcoursier/params/rule/Strict$;
  #478 = NameAndType        #73:#477      // MODULE$:Lcoursier/params/rule/Strict$;
  #479 = Fieldref           #476.#478     // coursier/params/rule/Strict$.MODULE$:Lcoursier/params/rule/Strict$;
  #480 = Methodref          #22.#324      // coursier/parse/JsonRuleParser$Repr$4.exclude:()Lscala/collection/immutable/List;
  #481 = NameAndType        #430:#283     // $anonfun$decodeStrict$3:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #482 = Methodref          #2.#481       // coursier/parse/JsonRuleParser.$anonfun$decodeStrict$3:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #483 = MethodHandle       6:#482        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$3:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #484 = InvokeDynamic      #6:#351       // #6:apply:()Lscala/Function1;
  #485 = Utf8               (Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/params/rule/Strict;
  #486 = NameAndType        #257:#485     // apply:(Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/params/rule/Strict;
  #487 = Methodref          #476.#486     // coursier/params/rule/Strict$.apply:(Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/params/rule/Strict;
  #488 = Utf8               Lscala/collection/immutable/Set;
  #489 = Utf8               Lcoursier/parse/JsonRuleParser$Repr$4;
  #490 = Utf8               $anonfun$ruleDecoders$1
  #491 = Utf8               (Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
  #492 = Utf8               x
  #493 = Utf8               Lcoursier/params/rule/AlwaysFail;
  #494 = Utf8               $anonfun$ruleDecoders$2
  #495 = Utf8               (Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
  #496 = Utf8               Lcoursier/params/rule/SameVersion;
  #497 = Utf8               $anonfun$ruleDecoders$3
  #498 = Utf8               (Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
  #499 = Utf8               Lcoursier/params/rule/DontBumpRootDependencies;
  #500 = Utf8               $anonfun$ruleDecoders$4
  #501 = Utf8               (Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  #502 = Utf8               Lcoursier/params/rule/Strict;
  #503 = Utf8               $anonfun$decodeRule$2
  #504 = Utf8               (Lscala/collection/immutable/Set;)Z
  #505 = Utf8               x$5
  #506 = Utf8               action
  #507 = String             #506          // action
  #508 = Utf8               contains
  #509 = Utf8               (Ljava/lang/Object;)Z
  #510 = NameAndType        #508:#509     // contains:(Ljava/lang/Object;)Z
  #511 = InterfaceMethodref #470.#510     // scala/collection/immutable/Set.contains:(Ljava/lang/Object;)Z
  #512 = Utf8               $anonfun$decodeRule$3
  #513 = Utf8               (Largonaut/Json;)Lscala/Option;
  #514 = Utf8               x$6
  #515 = Utf8               Largonaut/Json;
  #516 = Utf8               $anonfun$decodeRule$4
  #517 = Utf8               x$7
  #518 = Utf8               $anonfun$decodeRule$6
  #519 = Utf8               (Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
  #520 = NameAndType        #47:#48       // defaultRuleResolution:Lcoursier/params/rule/RuleResolution;
  #521 = Fieldref           #2.#520       // coursier/parse/JsonRuleParser.defaultRuleResolution:Lcoursier/params/rule/RuleResolution;
  #522 = Utf8               $anonfun$decodeRule$5
  #523 = Utf8               (Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  #524 = Utf8               ruleResOpt$1
  #525 = Utf8               rule
  #526 = Utf8               scala/Tuple2
  #527 = Class              #526          // scala/Tuple2
  #528 = NameAndType        #518:#519     // $anonfun$decodeRule$6:(Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
  #529 = Methodref          #2.#528       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$6:(Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
  #530 = MethodHandle       6:#529        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$6:(Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
  #531 = MethodType         #70           //  ()Lcoursier/params/rule/RuleResolution;
  #532 = Utf8               (Lcoursier/parse/JsonRuleParser;)Lscala/Function0;
  #533 = NameAndType        #257:#532     // apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function0;
  #534 = InvokeDynamic      #7:#533       // #7:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function0;
  #535 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #536 = NameAndType        #176:#535     // "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
  #537 = Methodref          #527.#536     // scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
  #538 = Utf8               Lcoursier/params/rule/Rule;
  #539 = Utf8               $anonfun$decodeRule$1
  #540 = Utf8               fieldSet
  #541 = NameAndType        #540:#238     // fieldSet:()Lscala/Option;
  #542 = Methodref          #193.#541     // argonaut/HCursor.fieldSet:()Lscala/Option;
  #543 = Utf8               $anonfun$decodeRule$2$adapted
  #544 = Utf8               (Lscala/collection/immutable/Set;)Ljava/lang/Object;
  #545 = NameAndType        #543:#544     // $anonfun$decodeRule$2$adapted:(Lscala/collection/immutable/Set;)Ljava/lang/Object;
  #546 = Methodref          #2.#545       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$2$adapted:(Lscala/collection/immutable/Set;)Ljava/lang/Object;
  #547 = MethodHandle       6:#546        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$2$adapted:(Lscala/collection/immutable/Set;)Ljava/lang/Object;
  #548 = MethodType         #544          //  (Lscala/collection/immutable/Set;)Ljava/lang/Object;
  #549 = InvokeDynamic      #8:#351       // #8:apply:()Lscala/Function1;
  #550 = Utf8               exists
  #551 = Utf8               (Lscala/Function1;)Z
  #552 = NameAndType        #550:#551     // exists:(Lscala/Function1;)Z
  #553 = Methodref          #262.#552     // scala/Option.exists:(Lscala/Function1;)Z
  #554 = Utf8               downField
  #555 = Utf8               (Ljava/lang/String;)Largonaut/ACursor;
  #556 = NameAndType        #554:#555     // downField:(Ljava/lang/String;)Largonaut/ACursor;
  #557 = Methodref          #193.#556     // argonaut/HCursor.downField:(Ljava/lang/String;)Largonaut/ACursor;
  #558 = Utf8               argonaut/ACursor
  #559 = Class              #558          // argonaut/ACursor
  #560 = NameAndType        #231:#238     // focus:()Lscala/Option;
  #561 = Methodref          #559.#560     // argonaut/ACursor.focus:()Lscala/Option;
  #562 = NameAndType        #512:#513     // $anonfun$decodeRule$3:(Largonaut/Json;)Lscala/Option;
  #563 = Methodref          #2.#562       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$3:(Largonaut/Json;)Lscala/Option;
  #564 = MethodHandle       6:#563        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$3:(Largonaut/Json;)Lscala/Option;
  #565 = MethodType         #513          //  (Largonaut/Json;)Lscala/Option;
  #566 = InvokeDynamic      #9:#351       // #9:apply:()Lscala/Function1;
  #567 = Utf8               flatMap
  #568 = NameAndType        #567:#264     // flatMap:(Lscala/Function1;)Lscala/Option;
  #569 = Methodref          #262.#568     // scala/Option.flatMap:(Lscala/Function1;)Lscala/Option;
  #570 = Methodref          #10.#303      // coursier/parse/JsonRuleParser$$anonfun$1."<init>":(Lcoursier/parse/JsonRuleParser;)V
  #571 = Utf8               collect
  #572 = Utf8               (Lscala/PartialFunction;)Lscala/Option;
  #573 = NameAndType        #571:#572     // collect:(Lscala/PartialFunction;)Lscala/Option;
  #574 = Methodref          #262.#573     // scala/Option.collect:(Lscala/PartialFunction;)Lscala/Option;
  #575 = Utf8               deleteGoParent
  #576 = Utf8               ()Largonaut/ACursor;
  #577 = NameAndType        #575:#576     // deleteGoParent:()Largonaut/ACursor;
  #578 = Methodref          #559.#577     // argonaut/ACursor.deleteGoParent:()Largonaut/ACursor;
  #579 = Utf8               acursor
  #580 = NameAndType        #579:#576     // acursor:()Largonaut/ACursor;
  #581 = Methodref          #193.#580     // argonaut/HCursor.acursor:()Largonaut/ACursor;
  #582 = String             #525          // rule
  #583 = Methodref          #559.#556     // argonaut/ACursor.downField:(Ljava/lang/String;)Largonaut/ACursor;
  #584 = NameAndType        #516:#513     // $anonfun$decodeRule$4:(Largonaut/Json;)Lscala/Option;
  #585 = Methodref          #2.#584       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$4:(Largonaut/Json;)Lscala/Option;
  #586 = MethodHandle       6:#585        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$4:(Largonaut/Json;)Lscala/Option;
  #587 = InvokeDynamic      #10:#351      // #10:apply:()Lscala/Function1;
  #588 = Utf8               scala/None$
  #589 = Class              #588          // scala/None$
  #590 = Utf8               Lscala/None$;
  #591 = NameAndType        #73:#590      // MODULE$:Lscala/None$;
  #592 = Fieldref           #589.#591     // scala/None$.MODULE$:Lscala/None$;
  #593 = Utf8               equals
  #594 = NameAndType        #593:#509     // equals:(Ljava/lang/Object;)Z
  #595 = Methodref          #4.#594       // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #596 = Utf8               No rule name found
  #597 = String             #596          // No rule name found
  #598 = Utf8               scala/Some
  #599 = Class              #598          // scala/Some
  #600 = Methodref          #599.#164     // scala/Some.value:()Ljava/lang/Object;
  #601 = NameAndType        #64:#106      // ruleDecoders:()Lscala/collection/immutable/Map;
  #602 = Methodref          #2.#601       // coursier/parse/JsonRuleParser.ruleDecoders:()Lscala/collection/immutable/Map;
  #603 = Utf8               scala/collection/immutable/Map
  #604 = Class              #603          // scala/collection/immutable/Map
  #605 = Utf8               get
  #606 = Utf8               (Ljava/lang/Object;)Lscala/Option;
  #607 = NameAndType        #605:#606     // get:(Ljava/lang/Object;)Lscala/Option;
  #608 = InterfaceMethodref #604.#607     // scala/collection/immutable/Map.get:(Ljava/lang/Object;)Lscala/Option;
  #609 = Integer            37
  #610 = Utf8               Rule \'
  #611 = String             #610          // Rule \'
  #612 = Utf8               \' not found (available rules:
  #613 = String             #612          // \' not found (available rules:
  #614 = Utf8               keys
  #615 = Utf8               ()Lscala/collection/Iterable;
  #616 = NameAndType        #614:#615     // keys:()Lscala/collection/Iterable;
  #617 = InterfaceMethodref #604.#616     // scala/collection/immutable/Map.keys:()Lscala/collection/Iterable;
  #618 = Utf8               scala/collection/Iterable
  #619 = Class              #618          // scala/collection/Iterable
  #620 = Utf8               toVector
  #621 = Utf8               ()Lscala/collection/immutable/Vector;
  #622 = NameAndType        #620:#621     // toVector:()Lscala/collection/immutable/Vector;
  #623 = InterfaceMethodref #619.#622     // scala/collection/Iterable.toVector:()Lscala/collection/immutable/Vector;
  #624 = Utf8               Lscala/math/Ordering$String$;
  #625 = NameAndType        #73:#624      // MODULE$:Lscala/math/Ordering$String$;
  #626 = Fieldref           #42.#625      // scala/math/Ordering$String$.MODULE$:Lscala/math/Ordering$String$;
  #627 = Utf8               scala/collection/immutable/Vector
  #628 = Class              #627          // scala/collection/immutable/Vector
  #629 = Utf8               sorted
  #630 = Utf8               (Lscala/math/Ordering;)Ljava/lang/Object;
  #631 = NameAndType        #629:#630     // sorted:(Lscala/math/Ordering;)Ljava/lang/Object;
  #632 = Methodref          #628.#631     // scala/collection/immutable/Vector.sorted:(Lscala/math/Ordering;)Ljava/lang/Object;
  #633 = Utf8               scala/collection/IterableOnceOps
  #634 = Class              #633          // scala/collection/IterableOnceOps
  #635 = Utf8               ,
  #636 = String             #635          // ,
  #637 = Utf8               mkString
  #638 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
  #639 = NameAndType        #637:#638     // mkString:(Ljava/lang/String;)Ljava/lang/String;
  #640 = InterfaceMethodref #634.#639     // scala/collection/IterableOnceOps.mkString:(Ljava/lang/String;)Ljava/lang/String;
  #641 = Utf8               )
  #642 = String             #641          // )
  #643 = Utf8               tryDecode
  #644 = Utf8               (Largonaut/ACursor;)Largonaut/DecodeResult;
  #645 = NameAndType        #643:#644     // tryDecode:(Largonaut/ACursor;)Largonaut/DecodeResult;
  #646 = InterfaceMethodref #343.#645     // argonaut/DecodeJson.tryDecode:(Largonaut/ACursor;)Largonaut/DecodeResult;
  #647 = NameAndType        #522:#523     // $anonfun$decodeRule$5:(Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  #648 = Methodref          #2.#647       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$5:(Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  #649 = MethodHandle       6:#648        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$5:(Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  #650 = Utf8               (Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  #651 = MethodType         #650          //  (Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  #652 = Utf8               (Lcoursier/parse/JsonRuleParser;Lscala/Option;)Lscala/Function1;
  #653 = NameAndType        #257:#652     // apply:(Lcoursier/parse/JsonRuleParser;Lscala/Option;)Lscala/Function1;
  #654 = InvokeDynamic      #11:#653      // #11:apply:(Lcoursier/parse/JsonRuleParser;Lscala/Option;)Lscala/Function1;
  #655 = Utf8               ruleDecoder
  #656 = Utf8               name
  #657 = Utf8               hasAction
  #658 = Utf8               Z
  #659 = Utf8               ruleResCursor
  #660 = Utf8               Largonaut/ACursor;
  #661 = Utf8               ruleResOpt
  #662 = Utf8               ruleCursor
  #663 = Utf8               (Ljava/lang/String;Lcoursier/params/rule/RuleResolution;)V
  #664 = Utf8               ()V
  #665 = NameAndType        #176:#664     // "<init>":()V
  #666 = Methodref          #4.#665       // java/lang/Object."<init>":()V
  #667 = NameAndType        #228:#229     // $anonfun$decodeModule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #668 = Methodref          #2.#667       // coursier/parse/JsonRuleParser.$anonfun$decodeModule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #669 = MethodHandle       6:#668        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #670 = MethodType         #225          //  (Largonaut/HCursor;)Largonaut/DecodeResult;
  #671 = Utf8               (Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
  #672 = NameAndType        #257:#671     // apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
  #673 = InvokeDynamic      #12:#672      // #12:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
  #674 = Utf8               (Lscala/Function1;)Largonaut/DecodeJson;
  #675 = NameAndType        #257:#674     // apply:(Lscala/Function1;)Largonaut/DecodeJson;
  #676 = Methodref          #137.#675     // argonaut/DecodeJson$.apply:(Lscala/Function1;)Largonaut/DecodeJson;
  #677 = NameAndType        #49:#82       // coursier$parse$JsonRuleParser$$decodeModule:()Largonaut/DecodeJson;
  #678 = Methodref          #2.#677       // coursier/parse/JsonRuleParser.coursier$parse$JsonRuleParser$$decodeModule:()Largonaut/DecodeJson;
  #679 = NameAndType        #282:#283     // $anonfun$decodeModuleMatcher$1:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #680 = Methodref          #2.#679       // coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatcher$1:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #681 = MethodHandle       6:#680        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatcher$1:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  #682 = InvokeDynamic      #13:#351      // #13:apply:()Lscala/Function1;
  #683 = NameAndType        #263:#674     // map:(Lscala/Function1;)Largonaut/DecodeJson;
  #684 = InterfaceMethodref #343.#683     // argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
  #685 = Methodref          #296.#665     // scala/runtime/LazyRef."<init>":()V
  #686 = Utf8               argonaut/ArgonautShapeless$
  #687 = Class              #686          // argonaut/ArgonautShapeless$
  #688 = Utf8               Largonaut/ArgonautShapeless$;
  #689 = NameAndType        #73:#688      // MODULE$:Largonaut/ArgonautShapeless$;
  #690 = Fieldref           #687.#689     // argonaut/ArgonautShapeless$.MODULE$:Largonaut/ArgonautShapeless$;
  #691 = Utf8               (Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
  #692 = NameAndType        #176:#691     // "<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
  #693 = Methodref          #27.#692      // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1."<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
  #694 = Utf8               inst$macro$4
  #695 = Utf8               ()Largonaut/derive/MkDecodeJson;
  #696 = NameAndType        #694:#695     // inst$macro$4:()Largonaut/derive/MkDecodeJson;
  #697 = Methodref          #27.#696      // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1.inst$macro$4:()Largonaut/derive/MkDecodeJson;
  #698 = Utf8               shapeless/Strict$
  #699 = Class              #698          // shapeless/Strict$
  #700 = Utf8               Lshapeless/Strict$;
  #701 = NameAndType        #73:#700      // MODULE$:Lshapeless/Strict$;
  #702 = Fieldref           #699.#701     // shapeless/Strict$.MODULE$:Lshapeless/Strict$;
  #703 = Utf8               (Ljava/lang/Object;)Lshapeless/Strict;
  #704 = NameAndType        #257:#703     // apply:(Ljava/lang/Object;)Lshapeless/Strict;
  #705 = Methodref          #699.#704     // shapeless/Strict$.apply:(Ljava/lang/Object;)Lshapeless/Strict;
  #706 = Utf8               derivedDecodeJson
  #707 = Utf8               (Lshapeless/LowPriority;Lshapeless/Strict;)Largonaut/DecodeJson;
  #708 = NameAndType        #706:#707     // derivedDecodeJson:(Lshapeless/LowPriority;Lshapeless/Strict;)Largonaut/DecodeJson;
  #709 = Methodref          #687.#708     // argonaut/ArgonautShapeless$.derivedDecodeJson:(Lshapeless/LowPriority;Lshapeless/Strict;)Largonaut/DecodeJson;
  #710 = Utf8               of
  #711 = NameAndType        #710:#142     // of:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
  #712 = Methodref          #137.#711     // argonaut/DecodeJson$.of:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
  #713 = NameAndType        #339:#340     // $anonfun$decodeModuleMatchers$1:(Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
  #714 = Methodref          #2.#713       // coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$1:(Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
  #715 = MethodHandle       6:#714        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$1:(Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
  #716 = Utf8               (Largonaut/DecodeJson;)Lscala/Function1;
  #717 = NameAndType        #257:#716     // apply:(Largonaut/DecodeJson;)Lscala/Function1;
  #718 = InvokeDynamic      #14:#717      // #14:apply:(Largonaut/DecodeJson;)Lscala/Function1;
  #719 = NameAndType        #356:#225     // $anonfun$decodeAlwaysFail$1:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #720 = Methodref          #2.#719       // coursier/parse/JsonRuleParser.$anonfun$decodeAlwaysFail$1:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #721 = MethodHandle       6:#720        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeAlwaysFail$1:(Largonaut/HCursor;)Largonaut/DecodeResult;
  #722 = InvokeDynamic      #15:#351      // #15:apply:()Lscala/Function1;
  #723 = Methodref          #29.#692      // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1."<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
  #724 = Utf8               inst$macro$28
  #725 = NameAndType        #724:#695     // inst$macro$28:()Largonaut/derive/MkDecodeJson;
  #726 = Methodref          #29.#725      // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1.inst$macro$28:()Largonaut/derive/MkDecodeJson;
  #727 = NameAndType        #379:#380     // $anonfun$decodeSameVersion$1:(Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
  #728 = Methodref          #2.#727       // coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$1:(Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
  #729 = MethodHandle       6:#728        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$1:(Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
  #730 = MethodType         #380          //  (Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
  #731 = InvokeDynamic      #16:#351      // #16:apply:()Lscala/Function1;
  #732 = NameAndType        #413:#229     // $anonfun$decodeDontBumpRootDependencies$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #733 = Methodref          #2.#732       // coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #734 = MethodHandle       6:#733        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #735 = InvokeDynamic      #17:#672      // #17:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
  #736 = Methodref          #31.#692      // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1."<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
  #737 = Utf8               inst$macro$47
  #738 = NameAndType        #737:#695     // inst$macro$47:()Largonaut/derive/MkDecodeJson;
  #739 = Methodref          #31.#738      // coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1.inst$macro$47:()Largonaut/derive/MkDecodeJson;
  #740 = NameAndType        #432:#433     // $anonfun$decodeStrict$1:(Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
  #741 = Methodref          #2.#740       // coursier/parse/JsonRuleParser.$anonfun$decodeStrict$1:(Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
  #742 = MethodHandle       6:#741        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$1:(Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
  #743 = MethodType         #433          //  (Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
  #744 = InvokeDynamic      #18:#351      // #18:apply:()Lscala/Function1;
  #745 = Utf8               Map
  #746 = Utf8               ()Lscala/collection/immutable/Map$;
  #747 = NameAndType        #745:#746     // Map:()Lscala/collection/immutable/Map$;
  #748 = Methodref          #439.#747     // scala/Predef$.Map:()Lscala/collection/immutable/Map$;
  #749 = Utf8               Lscala/Predef$ArrowAssoc$;
  #750 = NameAndType        #73:#749      // MODULE$:Lscala/Predef$ArrowAssoc$;
  #751 = Fieldref           #38.#750      // scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
  #752 = Utf8               always-fail
  #753 = String             #752          // always-fail
  #754 = Utf8               ArrowAssoc
  #755 = NameAndType        #754:#241     // ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
  #756 = Methodref          #439.#755     // scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
  #757 = NameAndType        #56:#82       // decodeAlwaysFail:()Largonaut/DecodeJson;
  #758 = Methodref          #2.#757       // coursier/parse/JsonRuleParser.decodeAlwaysFail:()Largonaut/DecodeJson;
  #759 = NameAndType        #490:#491     // $anonfun$ruleDecoders$1:(Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
  #760 = Methodref          #2.#759       // coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$1:(Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
  #761 = MethodHandle       6:#760        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$1:(Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
  #762 = MethodType         #491          //  (Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
  #763 = InvokeDynamic      #19:#351      // #19:apply:()Lscala/Function1;
  #764 = Utf8               $minus$greater$extension
  #765 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
  #766 = NameAndType        #764:#765     // $minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
  #767 = Methodref          #38.#766      // scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
  #768 = Utf8               same-version
  #769 = String             #768          // same-version
  #770 = NameAndType        #58:#82       // decodeSameVersion:()Largonaut/DecodeJson;
  #771 = Methodref          #2.#770       // coursier/parse/JsonRuleParser.decodeSameVersion:()Largonaut/DecodeJson;
  #772 = NameAndType        #494:#495     // $anonfun$ruleDecoders$2:(Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
  #773 = Methodref          #2.#772       // coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$2:(Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
  #774 = MethodHandle       6:#773        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$2:(Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
  #775 = MethodType         #495          //  (Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
  #776 = InvokeDynamic      #20:#351      // #20:apply:()Lscala/Function1;
  #777 = Utf8               dont-bump-root-dependencies
  #778 = String             #777          // dont-bump-root-dependencies
  #779 = NameAndType        #60:#82       // decodeDontBumpRootDependencies:()Largonaut/DecodeJson;
  #780 = Methodref          #2.#779       // coursier/parse/JsonRuleParser.decodeDontBumpRootDependencies:()Largonaut/DecodeJson;
  #781 = NameAndType        #497:#498     // $anonfun$ruleDecoders$3:(Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
  #782 = Methodref          #2.#781       // coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$3:(Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
  #783 = MethodHandle       6:#782        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$3:(Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
  #784 = MethodType         #498          //  (Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
  #785 = InvokeDynamic      #21:#351      // #21:apply:()Lscala/Function1;
  #786 = Utf8               strict
  #787 = String             #786          // strict
  #788 = NameAndType        #62:#82       // decodeStrict:()Largonaut/DecodeJson;
  #789 = Methodref          #2.#788       // coursier/parse/JsonRuleParser.decodeStrict:()Largonaut/DecodeJson;
  #790 = NameAndType        #500:#501     // $anonfun$ruleDecoders$4:(Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  #791 = Methodref          #2.#790       // coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$4:(Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  #792 = MethodHandle       6:#791        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$4:(Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  #793 = MethodType         #501          //  (Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  #794 = InvokeDynamic      #22:#351      // #22:apply:()Lscala/Function1;
  #795 = Utf8               scala/collection/immutable/Map$
  #796 = Class              #795          // scala/collection/immutable/Map$
  #797 = Methodref          #796.#467     // scala/collection/immutable/Map$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #798 = NameAndType        #539:#229     // $anonfun$decodeRule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #799 = Methodref          #2.#798       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #800 = MethodHandle       6:#799        // REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
  #801 = InvokeDynamic      #23:#672      // #23:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
  #802 = Utf8               inst$macro$24
  #803 = Utf8               Largonaut/derive/MkDecodeJson;
  #804 = Utf8               Helper$module
  #805 = Utf8               decodeHelper
  #806 = Utf8               inst$macro$43
  #807 = Utf8               Repr$module
  #808 = Utf8               inst$macro$67
  #809 = NameAndType        #503:#504     // $anonfun$decodeRule$2:(Lscala/collection/immutable/Set;)Z
  #810 = Methodref          #2.#809       // coursier/parse/JsonRuleParser.$anonfun$decodeRule$2:(Lscala/collection/immutable/Set;)Z
  #811 = Utf8               scala/runtime/BoxesRunTime
  #812 = Class              #811          // scala/runtime/BoxesRunTime
  #813 = Utf8               boxToBoolean
  #814 = Utf8               (Z)Ljava/lang/Boolean;
  #815 = NameAndType        #813:#814     // boxToBoolean:(Z)Ljava/lang/Boolean;
  #816 = Methodref          #812.#815     // scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
  #817 = Utf8               $deserializeLambda$
  #818 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #819 = Utf8               scala/runtime/LambdaDeserialize
  #820 = Class              #819          // scala/runtime/LambdaDeserialize
  #821 = Utf8               bootstrap
  #822 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #823 = NameAndType        #821:#822     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #824 = Methodref          #820.#823     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #825 = MethodHandle       6:#824        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #826 = Utf8               lambdaDeserialize
  #827 = NameAndType        #826:#818     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #828 = InvokeDynamic      #24:#827      // #24:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #829 = Utf8               Signature
  #830 = Utf8               Code
  #831 = Utf8               LineNumberTable
  #832 = Utf8               LocalVariableTable
  #833 = Utf8               MethodParameters
  #834 = Utf8               StackMapTable
  #835 = Utf8               InnerClasses
  #836 = Utf8               SourceFile
  #837 = Utf8               RuntimeVisibleAnnotations
  #838 = Utf8               BootstrapMethods
  #839 = Utf8               ScalaInlineInfo
  #840 = Utf8               ScalaSig
{
  private final java.lang.String defaultScalaVersion;
    descriptor: Ljava/lang/String;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final coursier.params.rule.RuleResolution defaultRuleResolution;
    descriptor: Lcoursier/params/rule/RuleResolution;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final argonaut.DecodeJson<coursier.core.Module> coursier$parse$JsonRuleParser$$decodeModule;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #51                          // Largonaut/DecodeJson<Lcoursier/core/Module;>;

  private final argonaut.DecodeJson<coursier.util.ModuleMatcher> coursier$parse$JsonRuleParser$$decodeModuleMatcher;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #53                          // Largonaut/DecodeJson<Lcoursier/util/ModuleMatcher;>;

  private final argonaut.DecodeJson<coursier.util.ModuleMatchers> decodeModuleMatchers;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #55                          // Largonaut/DecodeJson<Lcoursier/util/ModuleMatchers;>;

  private final argonaut.DecodeJson<coursier.params.rule.AlwaysFail> decodeAlwaysFail;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #57                          // Largonaut/DecodeJson<Lcoursier/params/rule/AlwaysFail;>;

  private final argonaut.DecodeJson<coursier.params.rule.SameVersion> decodeSameVersion;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #59                          // Largonaut/DecodeJson<Lcoursier/params/rule/SameVersion;>;

  private final argonaut.DecodeJson<coursier.params.rule.DontBumpRootDependencies> decodeDontBumpRootDependencies;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #61                          // Largonaut/DecodeJson<Lcoursier/params/rule/DontBumpRootDependencies;>;

  private final argonaut.DecodeJson<coursier.params.rule.Strict> decodeStrict;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #63                          // Largonaut/DecodeJson<Lcoursier/params/rule/Strict;>;

  private final scala.collection.immutable.Map<java.lang.String, argonaut.DecodeJson<coursier.params.rule.Rule>> ruleDecoders;
    descriptor: Lscala/collection/immutable/Map;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #66                          // Lscala/collection/immutable/Map<Ljava/lang/String;Largonaut/DecodeJson<Lcoursier/params/rule/Rule;>;>;

  private final argonaut.DecodeJson<scala.Tuple2<coursier.params.rule.Rule, coursier.params.rule.RuleResolution>> decodeRule;
    descriptor: Largonaut/DecodeJson;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #68                          // Largonaut/DecodeJson<Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;

  public static coursier.params.rule.RuleResolution parseRules$default$3();
    descriptor: ()Lcoursier/params/rule/RuleResolution;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #76                 // Field coursier/parse/JsonRuleParser$.MODULE$:Lcoursier/parse/JsonRuleParser$;
         3: invokevirtual #78                 // Method coursier/parse/JsonRuleParser$.parseRules$default$3:()Lcoursier/params/rule/RuleResolution;
         6: areturn

  public static coursier.params.rule.RuleResolution parseRule$default$3();
    descriptor: ()Lcoursier/params/rule/RuleResolution;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #76                 // Field coursier/parse/JsonRuleParser$.MODULE$:Lcoursier/parse/JsonRuleParser$;
         3: invokevirtual #81                 // Method coursier/parse/JsonRuleParser$.parseRule$default$3:()Lcoursier/params/rule/RuleResolution;
         6: areturn

  public argonaut.DecodeJson<coursier.core.Module> coursier$parse$JsonRuleParser$$decodeModule();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #85                 // Field coursier$parse$JsonRuleParser$$decodeModule:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 15: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #83                          // ()Largonaut/DecodeJson<Lcoursier/core/Module;>;

  public argonaut.DecodeJson<coursier.util.ModuleMatcher> coursier$parse$JsonRuleParser$$decodeModuleMatcher();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #90                 // Field coursier$parse$JsonRuleParser$$decodeModuleMatcher:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 29: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #88                          // ()Largonaut/DecodeJson<Lcoursier/util/ModuleMatcher;>;

  private argonaut.DecodeJson<coursier.util.ModuleMatchers> decodeModuleMatchers();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #93                 // Field decodeModuleMatchers:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 32: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #91                          // ()Largonaut/DecodeJson<Lcoursier/util/ModuleMatchers;>;

  private argonaut.DecodeJson<coursier.params.rule.AlwaysFail> decodeAlwaysFail();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #96                 // Field decodeAlwaysFail:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 45: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #94                          // ()Largonaut/DecodeJson<Lcoursier/params/rule/AlwaysFail;>;

  private argonaut.DecodeJson<coursier.params.rule.SameVersion> decodeSameVersion();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #99                 // Field decodeSameVersion:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 53: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #97                          // ()Largonaut/DecodeJson<Lcoursier/params/rule/SameVersion;>;

  private argonaut.DecodeJson<coursier.params.rule.DontBumpRootDependencies> decodeDontBumpRootDependencies();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #102                // Field decodeDontBumpRootDependencies:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 62: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #100                         // ()Largonaut/DecodeJson<Lcoursier/params/rule/DontBumpRootDependencies;>;

  private argonaut.DecodeJson<coursier.params.rule.Strict> decodeStrict();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #105                // Field decodeStrict:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 72: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #103                         // ()Largonaut/DecodeJson<Lcoursier/params/rule/Strict;>;

  private scala.collection.immutable.Map<java.lang.String, argonaut.DecodeJson<coursier.params.rule.Rule>> ruleDecoders();
    descriptor: ()Lscala/collection/immutable/Map;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #109                // Field ruleDecoders:Lscala/collection/immutable/Map;
         4: areturn
      LineNumberTable:
        line 85: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #107                         // ()Lscala/collection/immutable/Map<Ljava/lang/String;Largonaut/DecodeJson<Lcoursier/params/rule/Rule;>;>;

  private argonaut.DecodeJson<scala.Tuple2<coursier.params.rule.Rule, coursier.params.rule.RuleResolution>> decodeRule();
    descriptor: ()Largonaut/DecodeJson;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #112                // Field decodeRule:Largonaut/DecodeJson;
         4: areturn
      LineNumberTable:
        line 92: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/parse/JsonRuleParser;
    Signature: #110                         // ()Largonaut/DecodeJson<Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;

  public scala.util.Either<java.lang.String, scala.Tuple2<coursier.params.rule.Rule, coursier.params.rule.RuleResolution>> parseRule(java.lang.String);
    descriptor: (Ljava/lang/String;)Lscala/util/Either;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: getstatic     #121                // Field argonaut/Argonaut$.MODULE$:Largonaut/Argonaut$;
         3: aload_1
         4: invokevirtual #125                // Method argonaut/Argonaut$.StringToParseWrap:(Ljava/lang/String;)Largonaut/ParseWrap;
         7: aload_0
         8: invokespecial #127                // Method decodeRule:()Largonaut/DecodeJson;
        11: invokevirtual #133                // Method argonaut/ParseWrap.decodeEither:(Largonaut/DecodeJson;)Lscala/util/Either;
        14: areturn
      LineNumberTable:
        line 129: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lcoursier/parse/JsonRuleParser;
            0      15     1     s   Ljava/lang/String;
    Signature: #115                         // (Ljava/lang/String;)Lscala/util/Either<Ljava/lang/String;Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;
    MethodParameters:
      Name                           Flags
      s                              final

  public scala.util.Either<java.lang.String, scala.collection.immutable.Seq<scala.Tuple2<coursier.params.rule.Rule, coursier.params.rule.RuleResolution>>> parseRules(java.lang.String);
    descriptor: (Ljava/lang/String;)Lscala/util/Either;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #121                // Field argonaut/Argonaut$.MODULE$:Largonaut/Argonaut$;
         3: aload_1
         4: invokevirtual #125                // Method argonaut/Argonaut$.StringToParseWrap:(Ljava/lang/String;)Largonaut/ParseWrap;
         7: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
        10: aload_0
        11: invokespecial #127                // Method decodeRule:()Largonaut/DecodeJson;
        14: invokevirtual #144                // Method argonaut/DecodeJson$.ListDecodeJson:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
        17: invokevirtual #133                // Method argonaut/ParseWrap.decodeEither:(Largonaut/DecodeJson;)Lscala/util/Either;
        20: areturn
      LineNumberTable:
        line 132: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      21     0  this   Lcoursier/parse/JsonRuleParser;
            0      21     1     s   Ljava/lang/String;
    Signature: #135                         // (Ljava/lang/String;)Lscala/util/Either<Ljava/lang/String;Lscala/collection/immutable/Seq<Lscala/Tuple2<Lcoursier/params/rule/Rule;Lcoursier/params/rule/RuleResolution;>;>;>;
    MethodParameters:
      Name                           Flags
      s                              final

  public static final argonaut.DecodeResult $anonfun$decodeModule$2(coursier.parse.JsonRuleParser, argonaut.HCursor, java.lang.String);
    descriptor: (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=9, args_size=3
         0: getstatic     #153                // Field coursier/parse/ModuleParser$.MODULE$:Lcoursier/parse/ModuleParser$;
         3: aload_2
         4: aload_0
         5: getfield      #155                // Field defaultScalaVersion:Ljava/lang/String;
         8: invokevirtual #159                // Method coursier/parse/ModuleParser$.module:(Ljava/lang/String;Ljava/lang/String;)Lscala/util/Either;
        11: astore        4
        13: aload         4
        15: instanceof    #161                // class scala/util/Left
        18: ifeq          83
        21: aload         4
        23: checkcast     #161                // class scala/util/Left
        26: astore        5
        28: aload         5
        30: invokevirtual #165                // Method scala/util/Left.value:()Ljava/lang/Object;
        33: checkcast     #167                // class java/lang/String
        36: astore        6
        38: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
        41: new           #174                // class java/lang/StringBuilder
        44: dup
        45: ldc           #175                // int 25
        47: invokespecial #179                // Method java/lang/StringBuilder."<init>":(I)V
        50: ldc           #181                // String Cannot decode module \'
        52: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        55: aload_2
        56: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        59: ldc           #187                // String \':
        61: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        64: aload         6
        66: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        69: invokevirtual #191                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        72: aload_1
        73: invokevirtual #197                // Method argonaut/HCursor.history:()Largonaut/CursorHistory;
        76: invokevirtual #201                // Method argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
        79: astore_3
        80: goto          136
        83: goto          86
        86: aload         4
        88: instanceof    #205                // class scala/util/Right
        91: ifeq          123
        94: aload         4
        96: checkcast     #205                // class scala/util/Right
        99: astore        7
       101: aload         7
       103: invokevirtual #206                // Method scala/util/Right.value:()Ljava/lang/Object;
       106: checkcast     #208                // class coursier/core/Module
       109: astore        8
       111: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
       114: aload         8
       116: invokevirtual #212                // Method argonaut/DecodeResult$.ok:(Ljava/lang/Object;)Largonaut/DecodeResult;
       119: astore_3
       120: goto          136
       123: goto          126
       126: new           #214                // class scala/MatchError
       129: dup
       130: aload         4
       132: invokespecial #217                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       135: athrow
       136: aload_3
       137: areturn
      StackMapTable: number_of_entries = 5
        frame_type = 253 /* append */
          offset_delta = 83
          locals = [ top, class scala/util/Either ]
        frame_type = 2 /* same */
        frame_type = 36 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/parse/JsonRuleParser, class argonaut/HCursor, class java/lang/String, class argonaut/DecodeResult, class scala/util/Either ]
          stack = []
      LineNumberTable:
        line 18: 0
        line 19: 13
        line 20: 86
        line 18: 126
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           38      45     6   err   Ljava/lang/String;
          111      12     8   mod   Lcoursier/core/Module;
            0     138     0 $this   Lcoursier/parse/JsonRuleParser;
            0     138     1   c$1   Largonaut/HCursor;
            0     138     2     s   Ljava/lang/String;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      c$1                            final
      s                              final

  public static final argonaut.DecodeResult $anonfun$decodeModule$3(argonaut.HCursor);
    descriptor: (Largonaut/HCursor;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=1, args_size=1
         0: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
         3: ldc           #227                // String Invalid module
         5: aload_0
         6: invokevirtual #197                // Method argonaut/HCursor.history:()Largonaut/CursorHistory;
         9: invokevirtual #201                // Method argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
        12: areturn
      LineNumberTable:
        line 25: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0   c$1   Largonaut/HCursor;
    MethodParameters:
      Name                           Flags
      c$1                            final

  public static final argonaut.DecodeResult $anonfun$decodeModule$1(coursier.parse.JsonRuleParser, argonaut.HCursor);
    descriptor: (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_1
         1: invokevirtual #234                // Method argonaut/HCursor.focus:()Largonaut/Json;
         4: invokevirtual #240                // Method argonaut/Json.string:()Lscala/Option;
         7: aload_0
         8: aload_1
         9: invokedynamic #260,  0            // InvokeDynamic #0:apply:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Lscala/Function1;
        14: invokevirtual #266                // Method scala/Option.map:(Lscala/Function1;)Lscala/Option;
        17: astore_2
        18: aload_2
        19: aload_1
        20: invokedynamic #275,  0            // InvokeDynamic #1:apply:(Largonaut/HCursor;)Lscala/Function0;
        25: invokevirtual #279                // Method scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
        28: checkcast     #219                // class argonaut/DecodeResult
        31: areturn
      LineNumberTable:
        line 17: 0
        line 24: 18
        line 25: 19
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           18      13     2 fromStringOpt   Lscala/Option;
            0      32     0 $this   Lcoursier/parse/JsonRuleParser;
            0      32     1     c   Largonaut/HCursor;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      c                              final

  public static final coursier.util.ModuleMatcher $anonfun$decodeModuleMatcher$1(coursier.core.Module);
    descriptor: (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #289                // Field coursier/util/ModuleMatcher$.MODULE$:Lcoursier/util/ModuleMatcher$;
         3: aload_0
         4: invokevirtual #291                // Method coursier/util/ModuleMatcher$.apply:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
         7: areturn
      LineNumberTable:
        line 30: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0   x$1   Lcoursier/core/Module;
    MethodParameters:
      Name                           Flags
      x$1                            final

  private final coursier.parse.JsonRuleParser$Helper$2$ Helper$lzycompute$1(scala.runtime.LazyRef);
    descriptor: (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Helper$2$;
    flags: (0x1012) ACC_PRIVATE, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=2
         0: aload_1
         1: dup
         2: astore_2
         3: monitorenter
         4: aload_1
         5: invokevirtual #300                // Method scala/runtime/LazyRef.initialized:()Z
         8: ifeq          21
        11: aload_1
        12: invokevirtual #301                // Method scala/runtime/LazyRef.value:()Ljava/lang/Object;
        15: checkcast     #15                 // class coursier/parse/JsonRuleParser$Helper$2$
        18: goto          36
        21: aload_1
        22: new           #15                 // class coursier/parse/JsonRuleParser$Helper$2$
        25: dup
        26: aload_0
        27: invokespecial #304                // Method coursier/parse/JsonRuleParser$Helper$2$."<init>":(Lcoursier/parse/JsonRuleParser;)V
        30: invokevirtual #307                // Method scala/runtime/LazyRef.initialize:(Ljava/lang/Object;)Ljava/lang/Object;
        33: checkcast     #15                 // class coursier/parse/JsonRuleParser$Helper$2$
        36: astore_3
        37: aload_2
        38: monitorexit
        39: aload_3
        40: goto          46
        43: aload_2
        44: monitorexit
        45: athrow
        46: areturn
      Exception table:
         from    to  target type
             4    37    43   any
      StackMapTable: number_of_entries = 4
        frame_type = 252 /* append */
          offset_delta = 21
          locals = [ class scala/runtime/LazyRef ]
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class coursier/parse/JsonRuleParser$Helper$2$ ]
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/parse/JsonRuleParser, class scala/runtime/LazyRef, class scala/runtime/LazyRef, class coursier/parse/JsonRuleParser$Helper$2$ ]
          stack = [ class coursier/parse/JsonRuleParser$Helper$2$ ]
      LineNumberTable:
        line 35: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lcoursier/parse/JsonRuleParser;
            0      47     1 Helper$module$1   Lscala/runtime/LazyRef;
    MethodParameters:
      Name                           Flags
      Helper$module$1                final

  public final coursier.parse.JsonRuleParser$Helper$2$ coursier$parse$JsonRuleParser$$Helper$3(scala.runtime.LazyRef);
    descriptor: (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Helper$2$;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #300                // Method scala/runtime/LazyRef.initialized:()Z
         4: ifeq          17
         7: aload_1
         8: invokevirtual #301                // Method scala/runtime/LazyRef.value:()Ljava/lang/Object;
        11: checkcast     #15                 // class coursier/parse/JsonRuleParser$Helper$2$
        14: goto          22
        17: aload_0
        18: aload_1
        19: invokespecial #313                // Method Helper$lzycompute$1:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Helper$2$;
        22: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 17 /* same */
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class coursier/parse/JsonRuleParser$Helper$2$ ]
      LineNumberTable:
        line 35: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lcoursier/parse/JsonRuleParser;
            0      23     1 Helper$module$1   Lscala/runtime/LazyRef;
    MethodParameters:
      Name                           Flags
      Helper$module$1                final

  public static final coursier.util.ModuleMatchers $anonfun$decodeModuleMatchers$2(coursier.parse.JsonRuleParser$Helper$1);
    descriptor: (Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=1, args_size=1
         0: getstatic     #321                // Field coursier/util/ModuleMatchers$.MODULE$:Lcoursier/util/ModuleMatchers$;
         3: aload_0
         4: invokevirtual #325                // Method coursier/parse/JsonRuleParser$Helper$1.exclude:()Lscala/collection/immutable/List;
         7: invokevirtual #331                // Method scala/collection/immutable/List.toSet:()Lscala/collection/immutable/Set;
        10: aload_0
        11: invokevirtual #334                // Method coursier/parse/JsonRuleParser$Helper$1.include:()Lscala/collection/immutable/List;
        14: invokevirtual #331                // Method scala/collection/immutable/List.toSet:()Lscala/collection/immutable/Set;
        17: invokevirtual #337                // Method coursier/util/ModuleMatchers$.apply:(Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/util/ModuleMatchers;
        20: areturn
      LineNumberTable:
        line 41: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      21     0     h   Lcoursier/parse/JsonRuleParser$Helper$1;
    MethodParameters:
      Name                           Flags
      h                              final

  public static final argonaut.DecodeResult $anonfun$decodeModuleMatchers$1(argonaut.DecodeJson, argonaut.HCursor);
    descriptor: (Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokeinterface #345,  2          // InterfaceMethod argonaut/DecodeJson.apply:(Largonaut/HCursor;)Largonaut/DecodeResult;
         7: invokedynamic #352,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
        12: invokevirtual #355                // Method argonaut/DecodeResult.map:(Lscala/Function1;)Largonaut/DecodeResult;
        15: areturn
      LineNumberTable:
        line 40: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      16     0 decodeHelper$1   Largonaut/DecodeJson;
            0      16     1     c   Largonaut/HCursor;
    MethodParameters:
      Name                           Flags
      decodeHelper$1                 final
      c                              final

  public static final argonaut.DecodeResult $anonfun$decodeAlwaysFail$1(argonaut.HCursor);
    descriptor: (Largonaut/HCursor;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #234                // Method argonaut/HCursor.focus:()Largonaut/Json;
         4: invokevirtual #359                // Method argonaut/Json.isObject:()Z
         7: ifeq          25
        10: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
        13: getstatic     #364                // Field coursier/params/rule/AlwaysFail$.MODULE$:Lcoursier/params/rule/AlwaysFail$;
        16: invokevirtual #367                // Method coursier/params/rule/AlwaysFail$.apply:()Lcoursier/params/rule/AlwaysFail;
        19: invokevirtual #212                // Method argonaut/DecodeResult$.ok:(Ljava/lang/Object;)Largonaut/DecodeResult;
        22: goto          38
        25: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
        28: ldc_w         #369                // String Expected JSON object for AlwaysFail rule
        31: aload_0
        32: invokevirtual #197                // Method argonaut/HCursor.history:()Largonaut/CursorHistory;
        35: invokevirtual #201                // Method argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
        38: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 25 /* same */
        frame_type = 76 /* same_locals_1_stack_item */
          stack = [ class argonaut/DecodeResult ]
      LineNumberTable:
        line 47: 0
        line 48: 10
        line 50: 25
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      39     0     c   Largonaut/HCursor;
    MethodParameters:
      Name                           Flags
      c                              final

  private final coursier.parse.JsonRuleParser$Repr$2$ Repr$lzycompute$1(scala.runtime.LazyRef);
    descriptor: (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$2$;
    flags: (0x1012) ACC_PRIVATE, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=2
         0: aload_1
         1: dup
         2: astore_2
         3: monitorenter
         4: aload_1
         5: invokevirtual #300                // Method scala/runtime/LazyRef.initialized:()Z
         8: ifeq          21
        11: aload_1
        12: invokevirtual #301                // Method scala/runtime/LazyRef.value:()Ljava/lang/Object;
        15: checkcast     #20                 // class coursier/parse/JsonRuleParser$Repr$2$
        18: goto          36
        21: aload_1
        22: new           #20                 // class coursier/parse/JsonRuleParser$Repr$2$
        25: dup
        26: aload_0
        27: invokespecial #373                // Method coursier/parse/JsonRuleParser$Repr$2$."<init>":(Lcoursier/parse/JsonRuleParser;)V
        30: invokevirtual #307                // Method scala/runtime/LazyRef.initialize:(Ljava/lang/Object;)Ljava/lang/Object;
        33: checkcast     #20                 // class coursier/parse/JsonRuleParser$Repr$2$
        36: astore_3
        37: aload_2
        38: monitorexit
        39: aload_3
        40: goto          46
        43: aload_2
        44: monitorexit
        45: athrow
        46: areturn
      Exception table:
         from    to  target type
             4    37    43   any
      StackMapTable: number_of_entries = 4
        frame_type = 252 /* append */
          offset_delta = 21
          locals = [ class scala/runtime/LazyRef ]
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class coursier/parse/JsonRuleParser$Repr$2$ ]
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/parse/JsonRuleParser, class scala/runtime/LazyRef, class scala/runtime/LazyRef, class coursier/parse/JsonRuleParser$Repr$2$ ]
          stack = [ class coursier/parse/JsonRuleParser$Repr$2$ ]
      LineNumberTable:
        line 55: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lcoursier/parse/JsonRuleParser;
            0      47     1 Repr$module$1   Lscala/runtime/LazyRef;
    MethodParameters:
      Name                           Flags
      Repr$module$1                  final

  public final coursier.parse.JsonRuleParser$Repr$2$ coursier$parse$JsonRuleParser$$Repr$3(scala.runtime.LazyRef);
    descriptor: (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$2$;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #300                // Method scala/runtime/LazyRef.initialized:()Z
         4: ifeq          17
         7: aload_1
         8: invokevirtual #301                // Method scala/runtime/LazyRef.value:()Ljava/lang/Object;
        11: checkcast     #20                 // class coursier/parse/JsonRuleParser$Repr$2$
        14: goto          22
        17: aload_0
        18: aload_1
        19: invokespecial #376                // Method Repr$lzycompute$1:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$2$;
        22: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 17 /* same */
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class coursier/parse/JsonRuleParser$Repr$2$ ]
      LineNumberTable:
        line 55: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lcoursier/parse/JsonRuleParser;
            0      23     1 Repr$module$1   Lscala/runtime/LazyRef;
    MethodParameters:
      Name                           Flags
      Repr$module$1                  final

  public static final coursier.util.ModuleMatcher $anonfun$decodeSameVersion$2(coursier.core.Module);
    descriptor: (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #289                // Field coursier/util/ModuleMatcher$.MODULE$:Lcoursier/util/ModuleMatcher$;
         3: aload_0
         4: invokevirtual #291                // Method coursier/util/ModuleMatcher$.apply:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
         7: areturn
      LineNumberTable:
        line 58: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0   x$2   Lcoursier/core/Module;
    MethodParameters:
      Name                           Flags
      x$2                            final

  public static final coursier.params.rule.SameVersion $anonfun$decodeSameVersion$1(coursier.parse.JsonRuleParser$Repr$1);
    descriptor: (Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=1, args_size=1
         0: getstatic     #386                // Field coursier/params/rule/SameVersion$.MODULE$:Lcoursier/params/rule/SameVersion$;
         3: aload_0
         4: invokevirtual #389                // Method coursier/parse/JsonRuleParser$Repr$1.modules:()Lscala/collection/immutable/List;
         7: invokedynamic #394,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
        12: invokevirtual #397                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
        15: invokevirtual #331                // Method scala/collection/immutable/List.toSet:()Lscala/collection/immutable/Set;
        18: invokevirtual #400                // Method coursier/params/rule/SameVersion$.apply:(Lscala/collection/immutable/Set;)Lcoursier/params/rule/SameVersion;
        21: areturn
      LineNumberTable:
        line 58: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      22     0     r   Lcoursier/parse/JsonRuleParser$Repr$1;
    MethodParameters:
      Name                           Flags
      r                              final

  public static final coursier.params.rule.DontBumpRootDependencies $anonfun$decodeDontBumpRootDependencies$2(coursier.util.ModuleMatchers);
    descriptor: (Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #409                // Field coursier/params/rule/DontBumpRootDependencies$.MODULE$:Lcoursier/params/rule/DontBumpRootDependencies$;
         3: aload_0
         4: invokevirtual #411                // Method coursier/params/rule/DontBumpRootDependencies$.apply:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
         7: areturn
      LineNumberTable:
        line 66: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     m   Lcoursier/util/ModuleMatchers;
    MethodParameters:
      Name                           Flags
      m                              final

  public static final argonaut.DecodeResult $anonfun$decodeDontBumpRootDependencies$1(coursier.parse.JsonRuleParser, argonaut.HCursor);
    descriptor: (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #234                // Method argonaut/HCursor.focus:()Largonaut/Json;
         4: invokevirtual #359                // Method argonaut/Json.isObject:()Z
         7: ifeq          31
        10: aload_0
        11: invokespecial #415                // Method decodeModuleMatchers:()Largonaut/DecodeJson;
        14: aload_1
        15: invokeinterface #345,  2          // InterfaceMethod argonaut/DecodeJson.apply:(Largonaut/HCursor;)Largonaut/DecodeResult;
        20: invokedynamic #420,  0            // InvokeDynamic #4:apply:()Lscala/Function1;
        25: invokevirtual #355                // Method argonaut/DecodeResult.map:(Lscala/Function1;)Largonaut/DecodeResult;
        28: goto          44
        31: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
        34: ldc_w         #369                // String Expected JSON object for AlwaysFail rule
        37: aload_1
        38: invokevirtual #197                // Method argonaut/HCursor.history:()Largonaut/CursorHistory;
        41: invokevirtual #201                // Method argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
        44: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 31 /* same */
        frame_type = 76 /* same_locals_1_stack_item */
          stack = [ class argonaut/DecodeResult ]
      LineNumberTable:
        line 64: 0
        line 65: 10
        line 69: 31
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      45     0 $this   Lcoursier/parse/JsonRuleParser;
            0      45     1     c   Largonaut/HCursor;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      c                              final

  private final coursier.parse.JsonRuleParser$Repr$5$ Repr$lzycompute$2(scala.runtime.LazyRef);
    descriptor: (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$5$;
    flags: (0x1012) ACC_PRIVATE, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=2
         0: aload_1
         1: dup
         2: astore_2
         3: monitorenter
         4: aload_1
         5: invokevirtual #300                // Method scala/runtime/LazyRef.initialized:()Z
         8: ifeq          21
        11: aload_1
        12: invokevirtual #301                // Method scala/runtime/LazyRef.value:()Ljava/lang/Object;
        15: checkcast     #25                 // class coursier/parse/JsonRuleParser$Repr$5$
        18: goto          36
        21: aload_1
        22: new           #25                 // class coursier/parse/JsonRuleParser$Repr$5$
        25: dup
        26: aload_0
        27: invokespecial #424                // Method coursier/parse/JsonRuleParser$Repr$5$."<init>":(Lcoursier/parse/JsonRuleParser;)V
        30: invokevirtual #307                // Method scala/runtime/LazyRef.initialize:(Ljava/lang/Object;)Ljava/lang/Object;
        33: checkcast     #25                 // class coursier/parse/JsonRuleParser$Repr$5$
        36: astore_3
        37: aload_2
        38: monitorexit
        39: aload_3
        40: goto          46
        43: aload_2
        44: monitorexit
        45: athrow
        46: areturn
      Exception table:
         from    to  target type
             4    37    43   any
      StackMapTable: number_of_entries = 4
        frame_type = 252 /* append */
          offset_delta = 21
          locals = [ class scala/runtime/LazyRef ]
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class coursier/parse/JsonRuleParser$Repr$5$ ]
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/parse/JsonRuleParser, class scala/runtime/LazyRef, class scala/runtime/LazyRef, class coursier/parse/JsonRuleParser$Repr$5$ ]
          stack = [ class coursier/parse/JsonRuleParser$Repr$5$ ]
      LineNumberTable:
        line 74: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lcoursier/parse/JsonRuleParser;
            0      47     1 Repr$module$2   Lscala/runtime/LazyRef;
    MethodParameters:
      Name                           Flags
      Repr$module$2                  final

  public final coursier.parse.JsonRuleParser$Repr$5$ coursier$parse$JsonRuleParser$$Repr$6(scala.runtime.LazyRef);
    descriptor: (Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$5$;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #300                // Method scala/runtime/LazyRef.initialized:()Z
         4: ifeq          17
         7: aload_1
         8: invokevirtual #301                // Method scala/runtime/LazyRef.value:()Ljava/lang/Object;
        11: checkcast     #25                 // class coursier/parse/JsonRuleParser$Repr$5$
        14: goto          22
        17: aload_0
        18: aload_1
        19: invokespecial #427                // Method Repr$lzycompute$2:(Lscala/runtime/LazyRef;)Lcoursier/parse/JsonRuleParser$Repr$5$;
        22: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 17 /* same */
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class coursier/parse/JsonRuleParser$Repr$5$ ]
      LineNumberTable:
        line 74: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lcoursier/parse/JsonRuleParser;
            0      23     1 Repr$module$2   Lscala/runtime/LazyRef;
    MethodParameters:
      Name                           Flags
      Repr$module$2                  final

  public static final coursier.util.ModuleMatcher $anonfun$decodeStrict$2(coursier.core.Module);
    descriptor: (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #289                // Field coursier/util/ModuleMatcher$.MODULE$:Lcoursier/util/ModuleMatcher$;
         3: aload_0
         4: invokevirtual #291                // Method coursier/util/ModuleMatcher$.apply:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
         7: areturn
      LineNumberTable:
        line 77: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0   x$3   Lcoursier/core/Module;
    MethodParameters:
      Name                           Flags
      x$3                            final

  public static final coursier.util.ModuleMatcher $anonfun$decodeStrict$3(coursier.core.Module);
    descriptor: (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #289                // Field coursier/util/ModuleMatcher$.MODULE$:Lcoursier/util/ModuleMatcher$;
         3: aload_0
         4: invokevirtual #291                // Method coursier/util/ModuleMatcher$.apply:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
         7: areturn
      LineNumberTable:
        line 80: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0   x$4   Lcoursier/core/Module;
    MethodParameters:
      Name                           Flags
      x$4                            final

  public static final coursier.params.rule.Strict $anonfun$decodeStrict$1(coursier.parse.JsonRuleParser$Repr$4);
    descriptor: (Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=6, locals=2, args_size=1
         0: aload_0
         1: invokevirtual #434                // Method coursier/parse/JsonRuleParser$Repr$4.include:()Lscala/collection/immutable/List;
         4: invokevirtual #437                // Method scala/collection/immutable/List.isEmpty:()Z
         7: ifeq          47
        10: getstatic     #442                // Field scala/Predef$.MODULE$:Lscala/Predef$;
        13: invokevirtual #446                // Method scala/Predef$.Set:()Lscala/collection/immutable/Set$;
        16: getstatic     #451                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
        19: iconst_1
        20: anewarray     #453                // class coursier/util/ModuleMatcher
        23: dup
        24: iconst_0
        25: getstatic     #289                // Field coursier/util/ModuleMatcher$.MODULE$:Lcoursier/util/ModuleMatcher$;
        28: invokevirtual #457                // Method coursier/util/ModuleMatcher$.all:()Lcoursier/util/ModuleMatcher;
        31: aastore
        32: checkcast     #459                // class "[Ljava/lang/Object;"
        35: invokevirtual #463                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
        38: invokevirtual #468                // Method scala/collection/immutable/Set$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
        41: checkcast     #470                // class scala/collection/immutable/Set
        44: goto          62
        47: aload_0
        48: invokevirtual #434                // Method coursier/parse/JsonRuleParser$Repr$4.include:()Lscala/collection/immutable/List;
        51: invokedynamic #474,  0            // InvokeDynamic #5:apply:()Lscala/Function1;
        56: invokevirtual #397                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
        59: invokevirtual #331                // Method scala/collection/immutable/List.toSet:()Lscala/collection/immutable/Set;
        62: astore_1
        63: getstatic     #479                // Field coursier/params/rule/Strict$.MODULE$:Lcoursier/params/rule/Strict$;
        66: aload_1
        67: aload_0
        68: invokevirtual #480                // Method coursier/parse/JsonRuleParser$Repr$4.exclude:()Lscala/collection/immutable/List;
        71: invokedynamic #484,  0            // InvokeDynamic #6:apply:()Lscala/Function1;
        76: invokevirtual #397                // Method scala/collection/immutable/List.map:(Lscala/Function1;)Lscala/collection/immutable/List;
        79: invokevirtual #331                // Method scala/collection/immutable/List.toSet:()Lscala/collection/immutable/Set;
        82: invokevirtual #487                // Method coursier/params/rule/Strict$.apply:(Lscala/collection/immutable/Set;Lscala/collection/immutable/Set;)Lcoursier/params/rule/Strict;
        85: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 47 /* same */
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class scala/collection/immutable/Set ]
      LineNumberTable:
        line 77: 0
        line 78: 63
        line 79: 66
        line 80: 67
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           63      22     1 include   Lscala/collection/immutable/Set;
            0      86     0     r   Lcoursier/parse/JsonRuleParser$Repr$4;
    MethodParameters:
      Name                           Flags
      r                              final

  public static final coursier.params.rule.AlwaysFail $anonfun$ruleDecoders$1(coursier.params.rule.AlwaysFail);
    descriptor: (Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: areturn
      LineNumberTable:
        line 86: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0     x   Lcoursier/params/rule/AlwaysFail;
    MethodParameters:
      Name                           Flags
      x                              final

  public static final coursier.params.rule.SameVersion $anonfun$ruleDecoders$2(coursier.params.rule.SameVersion);
    descriptor: (Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: areturn
      LineNumberTable:
        line 87: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0     x   Lcoursier/params/rule/SameVersion;
    MethodParameters:
      Name                           Flags
      x                              final

  public static final coursier.params.rule.DontBumpRootDependencies $anonfun$ruleDecoders$3(coursier.params.rule.DontBumpRootDependencies);
    descriptor: (Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: areturn
      LineNumberTable:
        line 88: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0     x   Lcoursier/params/rule/DontBumpRootDependencies;
    MethodParameters:
      Name                           Flags
      x                              final

  public static final coursier.params.rule.Strict $anonfun$ruleDecoders$4(coursier.params.rule.Strict);
    descriptor: (Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: areturn
      LineNumberTable:
        line 89: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0     x   Lcoursier/params/rule/Strict;
    MethodParameters:
      Name                           Flags
      x                              final

  public static final boolean $anonfun$decodeRule$2(scala.collection.immutable.Set);
    descriptor: (Lscala/collection/immutable/Set;)Z
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: ldc_w         #507                // String action
         4: invokeinterface #511,  2          // InterfaceMethod scala/collection/immutable/Set.contains:(Ljava/lang/Object;)Z
         9: ireturn
      LineNumberTable:
        line 95: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0   x$5   Lscala/collection/immutable/Set;
    MethodParameters:
      Name                           Flags
      x$5                            final

  public static final scala.Option $anonfun$decodeRule$3(argonaut.Json);
    descriptor: (Largonaut/Json;)Lscala/Option;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #240                // Method argonaut/Json.string:()Lscala/Option;
         4: areturn
      LineNumberTable:
        line 101: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0   x$6   Largonaut/Json;
    MethodParameters:
      Name                           Flags
      x$6                            final

  public static final scala.Option $anonfun$decodeRule$4(argonaut.Json);
    descriptor: (Largonaut/Json;)Lscala/Option;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #240                // Method argonaut/Json.string:()Lscala/Option;
         4: areturn
      LineNumberTable:
        line 110: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0   x$7   Largonaut/Json;
    MethodParameters:
      Name                           Flags
      x$7                            final

  public static final coursier.params.rule.RuleResolution $anonfun$decodeRule$6(coursier.parse.JsonRuleParser);
    descriptor: (Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #521                // Field defaultRuleResolution:Lcoursier/params/rule/RuleResolution;
         4: areturn
      LineNumberTable:
        line 122: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0 $this   Lcoursier/parse/JsonRuleParser;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic

  public static final scala.Tuple2 $anonfun$decodeRule$5(coursier.parse.JsonRuleParser, scala.Option, coursier.params.rule.Rule);
    descriptor: (Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=5, locals=3, args_size=3
         0: new           #527                // class scala/Tuple2
         3: dup
         4: aload_2
         5: aload_1
         6: aload_0
         7: invokedynamic #534,  0            // InvokeDynamic #7:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function0;
        12: invokevirtual #279                // Method scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
        15: invokespecial #537                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
        18: areturn
      LineNumberTable:
        line 122: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      19     0 $this   Lcoursier/parse/JsonRuleParser;
            0      19     1 ruleResOpt$1   Lscala/Option;
            0      19     2  rule   Lcoursier/params/rule/Rule;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      ruleResOpt$1                   final
      rule                           final

  public static final argonaut.DecodeResult $anonfun$decodeRule$1(coursier.parse.JsonRuleParser, argonaut.HCursor);
    descriptor: (Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=14, args_size=2
         0: aload_1
         1: invokevirtual #542                // Method argonaut/HCursor.fieldSet:()Lscala/Option;
         4: invokedynamic #549,  0            // InvokeDynamic #8:apply:()Lscala/Function1;
         9: invokevirtual #553                // Method scala/Option.exists:(Lscala/Function1;)Z
        12: istore        4
        14: aload_1
        15: ldc_w         #507                // String action
        18: invokevirtual #557                // Method argonaut/HCursor.downField:(Ljava/lang/String;)Largonaut/ACursor;
        21: astore        5
        23: aload         5
        25: invokevirtual #561                // Method argonaut/ACursor.focus:()Lscala/Option;
        28: invokedynamic #566,  0            // InvokeDynamic #9:apply:()Lscala/Function1;
        33: invokevirtual #569                // Method scala/Option.flatMap:(Lscala/Function1;)Lscala/Option;
        36: new           #10                 // class coursier/parse/JsonRuleParser$$anonfun$1
        39: dup
        40: aconst_null
        41: invokespecial #570                // Method coursier/parse/JsonRuleParser$$anonfun$1."<init>":(Lcoursier/parse/JsonRuleParser;)V
        44: invokevirtual #574                // Method scala/Option.collect:(Lscala/PartialFunction;)Lscala/Option;
        47: astore        6
        49: iload         4
        51: ifeq          62
        54: aload         5
        56: invokevirtual #578                // Method argonaut/ACursor.deleteGoParent:()Largonaut/ACursor;
        59: goto          66
        62: aload_1
        63: invokevirtual #581                // Method argonaut/HCursor.acursor:()Largonaut/ACursor;
        66: ldc_w         #582                // String rule
        69: invokevirtual #583                // Method argonaut/ACursor.downField:(Ljava/lang/String;)Largonaut/ACursor;
        72: astore        7
        74: aload         7
        76: invokevirtual #561                // Method argonaut/ACursor.focus:()Lscala/Option;
        79: invokedynamic #587,  0            // InvokeDynamic #10:apply:()Lscala/Function1;
        84: invokevirtual #569                // Method scala/Option.flatMap:(Lscala/Function1;)Lscala/Option;
        87: astore        8
        89: getstatic     #592                // Field scala/None$.MODULE$:Lscala/None$;
        92: aload         8
        94: invokevirtual #595                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        97: ifeq          117
       100: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
       103: ldc_w         #597                // String No rule name found
       106: aload_1
       107: invokevirtual #197                // Method argonaut/HCursor.history:()Largonaut/CursorHistory;
       110: invokevirtual #201                // Method argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
       113: astore_2
       114: goto          339
       117: goto          120
       120: aload         8
       122: instanceof    #599                // class scala/Some
       125: ifeq          326
       128: aload         8
       130: checkcast     #599                // class scala/Some
       133: astore        9
       135: aload         9
       137: invokevirtual #600                // Method scala/Some.value:()Ljava/lang/Object;
       140: checkcast     #167                // class java/lang/String
       143: astore        10
       145: aload_0
       146: invokespecial #602                // Method ruleDecoders:()Lscala/collection/immutable/Map;
       149: aload         10
       151: invokeinterface #608,  2          // InterfaceMethod scala/collection/immutable/Map.get:(Ljava/lang/Object;)Lscala/Option;
       156: astore        11
       158: getstatic     #592                // Field scala/None$.MODULE$:Lscala/None$;
       161: aload         11
       163: invokevirtual #595                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       166: ifeq          253
       169: getstatic     #172                // Field argonaut/DecodeResult$.MODULE$:Largonaut/DecodeResult$;
       172: new           #174                // class java/lang/StringBuilder
       175: dup
       176: ldc_w         #609                // int 37
       179: invokespecial #179                // Method java/lang/StringBuilder."<init>":(I)V
       182: ldc_w         #611                // String Rule \'
       185: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       188: aload         10
       190: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       193: ldc_w         #613                // String \' not found (available rules:
       196: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       199: aload_0
       200: invokespecial #602                // Method ruleDecoders:()Lscala/collection/immutable/Map;
       203: invokeinterface #617,  1          // InterfaceMethod scala/collection/immutable/Map.keys:()Lscala/collection/Iterable;
       208: invokeinterface #623,  1          // InterfaceMethod scala/collection/Iterable.toVector:()Lscala/collection/immutable/Vector;
       213: getstatic     #626                // Field scala/math/Ordering$String$.MODULE$:Lscala/math/Ordering$String$;
       216: invokevirtual #632                // Method scala/collection/immutable/Vector.sorted:(Lscala/math/Ordering;)Ljava/lang/Object;
       219: checkcast     #634                // class scala/collection/IterableOnceOps
       222: ldc_w         #636                // String ,
       225: invokeinterface #640,  2          // InterfaceMethod scala/collection/IterableOnceOps.mkString:(Ljava/lang/String;)Ljava/lang/String;
       230: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       233: ldc_w         #642                // String )
       236: invokevirtual #185                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       239: invokevirtual #191                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       242: aload_1
       243: invokevirtual #197                // Method argonaut/HCursor.history:()Largonaut/CursorHistory;
       246: invokevirtual #201                // Method argonaut/DecodeResult$.fail:(Ljava/lang/String;Largonaut/CursorHistory;)Largonaut/DecodeResult;
       249: astore_3
       250: goto          321
       253: goto          256
       256: aload         11
       258: instanceof    #599                // class scala/Some
       261: ifeq          308
       264: aload         11
       266: checkcast     #599                // class scala/Some
       269: astore        12
       271: aload         12
       273: invokevirtual #600                // Method scala/Some.value:()Ljava/lang/Object;
       276: checkcast     #343                // class argonaut/DecodeJson
       279: astore        13
       281: aload         13
       283: aload         7
       285: invokevirtual #578                // Method argonaut/ACursor.deleteGoParent:()Largonaut/ACursor;
       288: invokeinterface #646,  2          // InterfaceMethod argonaut/DecodeJson.tryDecode:(Largonaut/ACursor;)Largonaut/DecodeResult;
       293: aload_0
       294: aload         6
       296: invokedynamic #654,  0            // InvokeDynamic #11:apply:(Lcoursier/parse/JsonRuleParser;Lscala/Option;)Lscala/Function1;
       301: invokevirtual #355                // Method argonaut/DecodeResult.map:(Lscala/Function1;)Largonaut/DecodeResult;
       304: astore_3
       305: goto          321
       308: goto          311
       311: new           #214                // class scala/MatchError
       314: dup
       315: aload         11
       317: invokespecial #217                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       320: athrow
       321: aload_3
       322: astore_2
       323: goto          339
       326: goto          329
       329: new           #214                // class scala/MatchError
       332: dup
       333: aload         8
       335: invokespecial #217                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       338: athrow
       339: aload_2
       340: areturn
      StackMapTable: number_of_entries = 12
        frame_type = 255 /* full_frame */
          offset_delta = 62
          locals = [ class coursier/parse/JsonRuleParser, class argonaut/HCursor, top, top, int, class argonaut/ACursor, class scala/Option ]
          stack = []
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ class argonaut/ACursor ]
        frame_type = 253 /* append */
          offset_delta = 50
          locals = [ class argonaut/ACursor, class scala/Option ]
        frame_type = 2 /* same */
        frame_type = 254 /* append */
          offset_delta = 132
          locals = [ class scala/Some, class java/lang/String, class scala/Option ]
        frame_type = 2 /* same */
        frame_type = 51 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/parse/JsonRuleParser, class argonaut/HCursor, top, class argonaut/DecodeResult, int, class argonaut/ACursor, class scala/Option, class argonaut/ACursor, class scala/Option, class scala/Some, class java/lang/String, class scala/Option ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 4
          locals = [ class coursier/parse/JsonRuleParser, class argonaut/HCursor, top, top, int, class argonaut/ACursor, class scala/Option, class argonaut/ACursor, class scala/Option ]
          stack = []
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/parse/JsonRuleParser, class argonaut/HCursor, class argonaut/DecodeResult, top, int, class argonaut/ACursor, class scala/Option, class argonaut/ACursor, class scala/Option ]
          stack = []
      LineNumberTable:
        line 95: 0
        line 96: 14
        line 99: 23
        line 101: 28
        line 102: 36
        line 108: 49
        line 110: 74
        line 111: 89
        line 112: 100
        line 111: 117
        line 113: 120
        line 114: 145
        line 115: 158
        line 116: 169
        line 117: 172
        line 118: 242
        line 115: 253
        line 120: 256
        line 121: 281
        line 120: 308
        line 114: 311
        line 113: 326
        line 110: 329
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
          281      27    13 ruleDecoder   Largonaut/DecodeJson;
          145     181    10  name   Ljava/lang/String;
           14     326     4 hasAction   Z
           23     317     5 ruleResCursor   Largonaut/ACursor;
           49     291     6 ruleResOpt   Lscala/Option;
           74     266     7 ruleCursor   Largonaut/ACursor;
            0     341     0 $this   Lcoursier/parse/JsonRuleParser;
            0     341     1     c   Largonaut/HCursor;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      c                              final

  public coursier.parse.JsonRuleParser(java.lang.String, coursier.params.rule.RuleResolution);
    descriptor: (Ljava/lang/String;Lcoursier/params/rule/RuleResolution;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=10, locals=10, args_size=3
         0: aload_0
         1: aload_1
         2: putfield      #155                // Field defaultScalaVersion:Ljava/lang/String;
         5: aload_0
         6: aload_2
         7: putfield      #521                // Field defaultRuleResolution:Lcoursier/params/rule/RuleResolution;
        10: aload_0
        11: invokespecial #666                // Method java/lang/Object."<init>":()V
        14: aload_0
        15: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
        18: aload_0
        19: invokedynamic #673,  0            // InvokeDynamic #12:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
        24: invokevirtual #676                // Method argonaut/DecodeJson$.apply:(Lscala/Function1;)Largonaut/DecodeJson;
        27: putfield      #85                 // Field coursier$parse$JsonRuleParser$$decodeModule:Largonaut/DecodeJson;
        30: aload_0
        31: aload_0
        32: invokevirtual #678                // Method coursier$parse$JsonRuleParser$$decodeModule:()Largonaut/DecodeJson;
        35: invokedynamic #682,  0            // InvokeDynamic #13:apply:()Lscala/Function1;
        40: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
        45: putfield      #90                 // Field coursier$parse$JsonRuleParser$$decodeModuleMatcher:Largonaut/DecodeJson;
        48: aload_0
        49: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
        52: new           #296                // class scala/runtime/LazyRef
        55: dup
        56: invokespecial #685                // Method scala/runtime/LazyRef."<init>":()V
        59: astore_3
        60: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
        63: getstatic     #690                // Field argonaut/ArgonautShapeless$.MODULE$:Largonaut/ArgonautShapeless$;
        66: aconst_null
        67: new           #27                 // class coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1
        70: dup
        71: aload_0
        72: aload_3
        73: invokespecial #693                // Method coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1."<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
        76: invokevirtual #697                // Method coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1.inst$macro$4:()Largonaut/derive/MkDecodeJson;
        79: astore        5
        81: getstatic     #702                // Field shapeless/Strict$.MODULE$:Lshapeless/Strict$;
        84: aload         5
        86: invokevirtual #705                // Method shapeless/Strict$.apply:(Ljava/lang/Object;)Lshapeless/Strict;
        89: invokevirtual #709                // Method argonaut/ArgonautShapeless$.derivedDecodeJson:(Lshapeless/LowPriority;Lshapeless/Strict;)Largonaut/DecodeJson;
        92: invokevirtual #712                // Method argonaut/DecodeJson$.of:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
        95: astore        4
        97: aload         4
        99: invokedynamic #718,  0            // InvokeDynamic #14:apply:(Largonaut/DecodeJson;)Lscala/Function1;
       104: invokevirtual #676                // Method argonaut/DecodeJson$.apply:(Lscala/Function1;)Largonaut/DecodeJson;
       107: putfield      #93                 // Field decodeModuleMatchers:Largonaut/DecodeJson;
       110: aload_0
       111: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
       114: invokedynamic #722,  0            // InvokeDynamic #15:apply:()Lscala/Function1;
       119: invokevirtual #676                // Method argonaut/DecodeJson$.apply:(Lscala/Function1;)Largonaut/DecodeJson;
       122: putfield      #96                 // Field decodeAlwaysFail:Largonaut/DecodeJson;
       125: aload_0
       126: new           #296                // class scala/runtime/LazyRef
       129: dup
       130: invokespecial #685                // Method scala/runtime/LazyRef."<init>":()V
       133: astore        6
       135: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
       138: getstatic     #690                // Field argonaut/ArgonautShapeless$.MODULE$:Largonaut/ArgonautShapeless$;
       141: aconst_null
       142: new           #29                 // class coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1
       145: dup
       146: aload_0
       147: aload         6
       149: invokespecial #723                // Method coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1."<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
       152: invokevirtual #726                // Method coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1.inst$macro$28:()Largonaut/derive/MkDecodeJson;
       155: astore        7
       157: getstatic     #702                // Field shapeless/Strict$.MODULE$:Lshapeless/Strict$;
       160: aload         7
       162: invokevirtual #705                // Method shapeless/Strict$.apply:(Ljava/lang/Object;)Lshapeless/Strict;
       165: invokevirtual #709                // Method argonaut/ArgonautShapeless$.derivedDecodeJson:(Lshapeless/LowPriority;Lshapeless/Strict;)Largonaut/DecodeJson;
       168: invokevirtual #712                // Method argonaut/DecodeJson$.of:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
       171: invokedynamic #731,  0            // InvokeDynamic #16:apply:()Lscala/Function1;
       176: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
       181: putfield      #99                 // Field decodeSameVersion:Largonaut/DecodeJson;
       184: aload_0
       185: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
       188: aload_0
       189: invokedynamic #735,  0            // InvokeDynamic #17:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
       194: invokevirtual #676                // Method argonaut/DecodeJson$.apply:(Lscala/Function1;)Largonaut/DecodeJson;
       197: putfield      #102                // Field decodeDontBumpRootDependencies:Largonaut/DecodeJson;
       200: aload_0
       201: new           #296                // class scala/runtime/LazyRef
       204: dup
       205: invokespecial #685                // Method scala/runtime/LazyRef."<init>":()V
       208: astore        8
       210: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
       213: getstatic     #690                // Field argonaut/ArgonautShapeless$.MODULE$:Largonaut/ArgonautShapeless$;
       216: aconst_null
       217: new           #31                 // class coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1
       220: dup
       221: aload_0
       222: aload         8
       224: invokespecial #736                // Method coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1."<init>":(Lcoursier/parse/JsonRuleParser;Lscala/runtime/LazyRef;)V
       227: invokevirtual #739                // Method coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1.inst$macro$47:()Largonaut/derive/MkDecodeJson;
       230: astore        9
       232: getstatic     #702                // Field shapeless/Strict$.MODULE$:Lshapeless/Strict$;
       235: aload         9
       237: invokevirtual #705                // Method shapeless/Strict$.apply:(Ljava/lang/Object;)Lshapeless/Strict;
       240: invokevirtual #709                // Method argonaut/ArgonautShapeless$.derivedDecodeJson:(Lshapeless/LowPriority;Lshapeless/Strict;)Largonaut/DecodeJson;
       243: invokevirtual #712                // Method argonaut/DecodeJson$.of:(Largonaut/DecodeJson;)Largonaut/DecodeJson;
       246: invokedynamic #744,  0            // InvokeDynamic #18:apply:()Lscala/Function1;
       251: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
       256: putfield      #105                // Field decodeStrict:Largonaut/DecodeJson;
       259: aload_0
       260: getstatic     #442                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       263: invokevirtual #748                // Method scala/Predef$.Map:()Lscala/collection/immutable/Map$;
       266: getstatic     #451                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       269: iconst_4
       270: anewarray     #527                // class scala/Tuple2
       273: dup
       274: iconst_0
       275: getstatic     #751                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
       278: getstatic     #442                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       281: ldc_w         #753                // String always-fail
       284: invokevirtual #756                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
       287: aload_0
       288: invokespecial #758                // Method decodeAlwaysFail:()Largonaut/DecodeJson;
       291: invokedynamic #763,  0            // InvokeDynamic #19:apply:()Lscala/Function1;
       296: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
       301: invokevirtual #767                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       304: aastore
       305: dup
       306: iconst_1
       307: getstatic     #751                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
       310: getstatic     #442                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       313: ldc_w         #769                // String same-version
       316: invokevirtual #756                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
       319: aload_0
       320: invokespecial #771                // Method decodeSameVersion:()Largonaut/DecodeJson;
       323: invokedynamic #776,  0            // InvokeDynamic #20:apply:()Lscala/Function1;
       328: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
       333: invokevirtual #767                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       336: aastore
       337: dup
       338: iconst_2
       339: getstatic     #751                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
       342: getstatic     #442                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       345: ldc_w         #778                // String dont-bump-root-dependencies
       348: invokevirtual #756                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
       351: aload_0
       352: invokespecial #780                // Method decodeDontBumpRootDependencies:()Largonaut/DecodeJson;
       355: invokedynamic #785,  0            // InvokeDynamic #21:apply:()Lscala/Function1;
       360: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
       365: invokevirtual #767                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       368: aastore
       369: dup
       370: iconst_3
       371: getstatic     #751                // Field scala/Predef$ArrowAssoc$.MODULE$:Lscala/Predef$ArrowAssoc$;
       374: getstatic     #442                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       377: ldc_w         #787                // String strict
       380: invokevirtual #756                // Method scala/Predef$.ArrowAssoc:(Ljava/lang/Object;)Ljava/lang/Object;
       383: aload_0
       384: invokespecial #789                // Method decodeStrict:()Largonaut/DecodeJson;
       387: invokedynamic #794,  0            // InvokeDynamic #22:apply:()Lscala/Function1;
       392: invokeinterface #684,  2          // InterfaceMethod argonaut/DecodeJson.map:(Lscala/Function1;)Largonaut/DecodeJson;
       397: invokevirtual #767                // Method scala/Predef$ArrowAssoc$.$minus$greater$extension:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Tuple2;
       400: aastore
       401: checkcast     #459                // class "[Ljava/lang/Object;"
       404: invokevirtual #463                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
       407: invokevirtual #797                // Method scala/collection/immutable/Map$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
       410: checkcast     #604                // class scala/collection/immutable/Map
       413: putfield      #109                // Field ruleDecoders:Lscala/collection/immutable/Map;
       416: aload_0
       417: getstatic     #140                // Field argonaut/DecodeJson$.MODULE$:Largonaut/DecodeJson$;
       420: aload_0
       421: invokedynamic #801,  0            // InvokeDynamic #23:apply:(Lcoursier/parse/JsonRuleParser;)Lscala/Function1;
       426: invokevirtual #676                // Method argonaut/DecodeJson$.apply:(Lscala/Function1;)Largonaut/DecodeJson;
       429: putfield      #112                // Field decodeRule:Largonaut/DecodeJson;
       432: return
      LineNumberTable:
        line 11: 0
        line 12: 5
        line 136: 10
        line 15: 14
        line 16: 15
        line 15: 27
        line 29: 30
        line 30: 31
        line 29: 45
        line 32: 48
        line 33: 49
        line 35: 52
        line 37: 60
        line 39: 97
        line 32: 107
        line 45: 110
        line 46: 111
        line 45: 122
        line 53: 125
        line 55: 126
        line 57: 135
        line 53: 181
        line 62: 184
        line 63: 185
        line 62: 197
        line 72: 200
        line 74: 201
        line 76: 210
        line 72: 256
        line 85: 259
        line 86: 278
        line 87: 310
        line 88: 342
        line 89: 374
        line 85: 413
        line 92: 416
        line 93: 417
        line 92: 429
        line 10: 432
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           81       8     5 inst$macro$24   Largonaut/derive/MkDecodeJson;
           60      44     3 Helper$module   Lscala/runtime/LazyRef;
           97       7     4 decodeHelper   Largonaut/DecodeJson;
          157       8     7 inst$macro$43   Largonaut/derive/MkDecodeJson;
          135      46     6 Repr$module   Lscala/runtime/LazyRef;
          232       8     9 inst$macro$67   Largonaut/derive/MkDecodeJson;
          210      46     8 Repr$module   Lscala/runtime/LazyRef;
            0     433     0  this   Lcoursier/parse/JsonRuleParser;
            0     433     1 defaultScalaVersion   Ljava/lang/String;
            0     433     2 defaultRuleResolution   Lcoursier/params/rule/RuleResolution;
    MethodParameters:
      Name                           Flags
      defaultScalaVersion            final
      defaultRuleResolution          final

  public static final java.lang.Object $anonfun$decodeRule$2$adapted(scala.collection.immutable.Set);
    descriptor: (Lscala/collection/immutable/Set;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #810                // Method $anonfun$decodeRule$2:(Lscala/collection/immutable/Set;)Z
         4: invokestatic  #816                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
         7: areturn
      LineNumberTable:
        line 95: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0   x$5   Lscala/collection/immutable/Set;
    MethodParameters:
      Name                           Flags
      x$5                            final

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #828,  0            // InvokeDynamic #24:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public final #10;                       // class coursier/parse/JsonRuleParser$$anonfun$1
  public final #13= #12;                  // 1=class coursier/parse/JsonRuleParser$Helper$1
  public #16= #15;                        // =class coursier/parse/JsonRuleParser$Helper$2$
  public final #13= #18;                  // 1=class coursier/parse/JsonRuleParser$Repr$1
  public #16= #20;                        // =class coursier/parse/JsonRuleParser$Repr$2$
  public final #23= #22;                  // 4=class coursier/parse/JsonRuleParser$Repr$4
  public #16= #25;                        // =class coursier/parse/JsonRuleParser$Repr$5$
  public final #13= #27;                  // 1=class coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$23$1
  public final #13= #29;                  // 1=class coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$42$1
  public final #13= #31;                  // 1=class coursier/parse/JsonRuleParser$anon$derivedDecodeJson$macro$66$1
  public static final #36= #33 of #35;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  public static #16= #38 of #40;          // =class scala/Predef$ArrowAssoc$ of class scala/Predef
  public static #16= #42 of #44;          // =class scala/math/Ordering$String$ of class scala/math/Ordering
SourceFile: "JsonRuleParser.scala"
RuntimeVisibleAnnotations:
  0: #6(#7=s#8)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\u00055e\u0001B\u0010!\u0001\u0015B\u0001\u0002\f\u0001\u0003\u0002\u0003\u0006I!\f\u0005\tq\u0001\u0011\t\u0011)A\u0005s!)\u0011\t\u0001C\u0001\u0005\"9q\t\u0001b\u0001\n\u0017A\u0005BB+\u0001A\u0003%\u0011\nC\u0004W\u0001\t\u0007I1B,\t\r}\u0003\u0001\u0015!\u0003Y\u0011\u001d\u0001\u0007A1A\u0005\f\u0005DaA\u001a\u0001!\u0002\u0013\u0011\u0007bB4\u0001\u0005\u0004%I\u0001\u001b\u0005\u0007[\u0002\u0001\u000b\u0011B5\t\u000f9\u0004!\u0019!C\u0005_\"1A\u000f\u0001Q\u0001\nADq!\u001e\u0001C\u0002\u0013%a\u000f\u0003\u0004|\u0001\u0001\u0006Ia\u001e\u0005\by\u0002\u0011\r\u0011\"\u0003~\u0011\u001d\t)\u0001\u0001Q\u0001\nyD\u0011\"a\u0002\u0001\u0005\u0004%I!!\u0003\t\u0011\u0005\r\u0002\u0001)A\u0005\u0003\u0017A\u0011\"!\n\u0001\u0005\u0004%I!a\n\t\u0011\u0005E\u0002\u0001)A\u0005\u0003SAq!a\r\u0001\t\u0003\t)\u0004C\u0004\u0002N\u0001!\t!a\u0014\b\u000f\u0005m\u0003\u0005#\u0001\u0002^\u00191q\u0004\tE\u0001\u0003?Ba!Q\r\u0005\u0002\u0005\u0005\u0004bBA\u001a3\u0011\u0005\u00111\r\u0005\n\u0003WJ\u0012\u0013!C\u0001\u0003[Bq!!\u0014\u001a\t\u0003\t\u0019\tC\u0005\u0002\ff\t\n\u0011\"\u0001\u0002n\tq!j]8o%VdW\rU1sg\u0016\u0014(BA\u0011#\u0003\u0015\u0001\u0018M]:f\u0015\u0005\u0019\u0013\u0001C2pkJ\u001c\u0018.\u001a:\u0004\u0001M\u0011\u0001A\n\t\u0003O)j\u0011\u0001\u000b\u0006\u0002S\u0005)1oY1mC&\u00111\u0006\u000b\u0002\u0007\u0003:L(+\u001a4\u0002\'\u0011,g-Y;miN\u001b\u0017\r\\1WKJ\u001c\u0018n\u001c8\u0011\u00059*dBA\u00184!\t\u0001\u0004&D\u00012\u0015\t\u0011D%\u0001\u0004=e>|GOP\u0005\u0003i!\na\u0001\u0015:fI\u00164\u0017B\u0001\u001c8\u0005\u0019\u0019FO]5oO*\u0011A\u0007K\u0001\u0016I\u00164\u0017-\u001e7u%VdWMU3t_2,H/[8o!\tQt(D\u0001<\u0015\taT(\u0001\u0003sk2,\'B\u0001 #\u0003\u0019\u0001\u0018M]1ng&\u0011\u0001i\u000f\u0002\u000f%VdWMU3t_2,H/[8o\u0003\u0019a\u0014N\\5u}Q\u00191)\u0012$\u0011\u0005\u0011\u0003Q\"\u0001\u0011\t\u000b1\u001a\u0001\u0019A\u0017\t\u000ba\u001a\u0001\u0019A\u001d\u0002\u0019\u0011,7m\u001c3f\u001b>$W\u000f\\3\u0016\u0003%\u00032AS\'P\u001b\u0005Y%\"\u0001\'\u0002\u0011\u0005\u0014xm\u001c8bkRL!AT&\u0003\u0015\u0011+7m\u001c3f\u0015N|g\u000e\u0005\u0002Q\'6\t\u0011K\u0003\u0002SE\u0005!1m\u001c:f\u0013\t!\u0016K\u0001\u0004N_\u0012,H.Z\u0001\u000eI\u0016\u001cw\u000eZ3N_\u0012,H.\u001a\u0011\u0002\'\u0011,7m\u001c3f\u001b>$W\u000f\\3NCR\u001c\u0007.\u001a:\u0016\u0003a\u00032AS\'Z!\tQV,D\u0001\\\u0015\ta&%\u0001\u0003vi&d\u0017B\u00010\\\u00055iu\u000eZ;mK6\u000bGo\u00195fe\u0006!B-Z2pI\u0016lu\u000eZ;mK6\u000bGo\u00195fe\u0002\nA\u0003Z3d_\u0012,Wj\u001c3vY\u0016l\u0015\r^2iKJ\u001cX#\u00012\u0011\u0007)k5\r\u0005\u0002[I&\u0011Qm\u0017\u0002\u000f\u001b>$W\u000f\\3NCR\u001c\u0007.\u001a:t\u0003U!WmY8eK6{G-\u001e7f\u001b\u0006$8\r[3sg\u0002\n\u0001\u0003Z3d_\u0012,\u0017\t\\<bsN4\u0015-\u001b7\u0016\u0003%\u00042AS\'k!\tQ4.\u0003\u0002mw\tQ\u0011\t\\<bsN4\u0015-\u001b7\u0002#\u0011,7m\u001c3f\u00032<\u0018-_:GC&d\u0007%A\teK\u000e|G-Z*b[\u00164VM]:j_:,\u0012\u0001\u001d\t\u0004\u00156\u000b\bC\u0001\u001es\u0013\t\u00198HA\u0006TC6,g+\u001a:tS>t\u0017A\u00053fG>$WmU1nKZ+\'o]5p]\u0002\na\u0004Z3d_\u0012,Gi\u001c8u\u0005Vl\u0007OU8pi\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:\u0016\u0003]\u00042AS\'y!\tQ\u00140\u0003\u0002{w\tABi\u001c8u\u0005Vl\u0007OU8pi\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:\u0002?\u0011,7m\u001c3f\t>tGOQ;naJ{w\u000e\u001e#fa\u0016tG-\u001a8dS\u0016\u001c\b%\u0001\u0007eK\u000e|G-Z*ue&\u001cG/F\u0001\u007f!\rQUj \t\u0004u\u0005\u0005\u0011bAA\u0002w\t11\u000b\u001e:jGR\fQ\u0002Z3d_\u0012,7\u000b\u001e:jGR\u0004\u0013\u0001\u0004:vY\u0016$UmY8eKJ\u001cXCAA\u0006!\u001d\ti!a\u0006.\u00037i!!a\u0004\u000b\t\u0005E\u00111C\u0001\nS6lW\u000f^1cY\u0016T1!!\u0006)\u0003)\u0019w\u000e\u001c7fGRLwN\\\u0005\u0005\u00033\tyAA\u0002NCB\u0004BAS\'\u0002\u001eA\u0019!(a\b\n\u0007\u0005\u00052H\u0001\u0003Sk2,\u0017!\u0004:vY\u0016$UmY8eKJ\u001c\b%\u0001\u0006eK\u000e|G-\u001a*vY\u0016,\"!!\u000b\u0011\t)k\u00151\u0006\t\u0007O\u00055\u0012QD\u001d\n\u0007\u0005=\u0002F\u0001\u0004UkBdWMM\u0001\fI\u0016\u001cw\u000eZ3Sk2,\u0007%A\u0005qCJ\u001cXMU;mKR!\u0011qGA%!\u001d\tI$a\u0011.\u0003WqA!a\u000f\u0002@9\u0019\u0001\'!\u0010\n\u0003%J1!!\u0011)\u0003\u001d\u0001\u0018mY6bO\u0016LA!!\u0012\u0002H\t1Q)\u001b;iKJT1!!\u0011)\u0011\u0019\tYE\u0006a\u0001[\u0005\t1/\u0001\u0006qCJ\u001cXMU;mKN$B!!\u0015\u0002ZA9\u0011\u0011HA\"[\u0005M\u0003CBA\u001d\u0003+\nY#\u0003\u0003\u0002X\u0005\u001d#aA*fc\"1\u00111J\fA\u00025\naBS:p]J+H.\u001a)beN,\'\u000f\u0005\u0002E3M\u0011\u0011D\n\u000b\u0003\u0003;\"\u0002\"a\u000e\u0002f\u0005\u001d\u0014\u0011\u000e\u0005\u0007\u0003\u0017Z\u0002\u0019A\u0017\t\u000b1Z\u0002\u0019A\u0017\t\u000faZ\u0002\u0013!a\u0001s\u0005\u0019\u0002/\u0019:tKJ+H.\u001a\u0013eK\u001a\fW\u000f\u001c;%gU\u0011\u0011q\u000e\u0016\u0004s\u0005E4FAA:!\u0011\t)(a \u000e\u0005\u0005]$\u0002BA=\u0003w\n\u0011\"\u001e8dQ\u0016\u001c7.\u001a3\u000b\u0007\u0005u\u0004&\u0001\u0006b]:|G/\u0019;j_:LA!!!\u0002x\t\tRO\\2iK\u000e\\W\r\u001a,be&\fgnY3\u0015\u0011\u0005E\u0013QQAD\u0003\u0013Ca!a\u0013\u001e\u0001\u0004i\u0003\"\u0002\u0017\u001e\u0001\u0004i\u0003b\u0002\u001d\u001e!\u0003\u0005\r!O\u0001\u0015a\u0006\u00148/\u001a*vY\u0016\u001cH\u0005Z3gCVdG\u000fJ\u001a"
    )
BootstrapMethods:
  0: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #245 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$2:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
      #247 (Ljava/lang/String;)Largonaut/DecodeResult;
      #248 5
      #249 1
      #247 (Ljava/lang/String;)Largonaut/DecodeResult;
  1: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #267 ()Ljava/lang/Object;
      #270 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$3:(Largonaut/HCursor;)Largonaut/DecodeResult;
      #272 ()Largonaut/DecodeResult;
      #248 5
      #249 1
      #272 ()Largonaut/DecodeResult;
  2: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #348 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$2:(Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
      #349 (Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
      #248 5
      #249 1
      #349 (Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
  3: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #392 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #248 5
      #249 1
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  4: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #418 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$2:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
      #419 (Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
      #248 5
      #249 1
      #419 (Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
  5: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #473 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #248 5
      #249 1
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  6: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #483 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$3:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #248 5
      #249 1
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  7: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #267 ()Ljava/lang/Object;
      #530 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$6:(Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
      #531 ()Lcoursier/params/rule/RuleResolution;
      #248 5
      #249 1
      #531 ()Lcoursier/params/rule/RuleResolution;
  8: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #547 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$2$adapted:(Lscala/collection/immutable/Set;)Ljava/lang/Object;
      #548 (Lscala/collection/immutable/Set;)Ljava/lang/Object;
      #248 5
      #249 1
      #548 (Lscala/collection/immutable/Set;)Ljava/lang/Object;
  9: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #564 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$3:(Largonaut/Json;)Lscala/Option;
      #565 (Largonaut/Json;)Lscala/Option;
      #248 5
      #249 1
      #565 (Largonaut/Json;)Lscala/Option;
  10: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #586 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$4:(Largonaut/Json;)Lscala/Option;
      #565 (Largonaut/Json;)Lscala/Option;
      #248 5
      #249 1
      #565 (Largonaut/Json;)Lscala/Option;
  11: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #649 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$5:(Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
      #651 (Lcoursier/params/rule/Rule;)Lscala/Tuple2;
      #248 5
      #249 1
      #651 (Lcoursier/params/rule/Rule;)Lscala/Tuple2;
  12: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #669 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
      #248 5
      #249 1
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
  13: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #681 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatcher$1:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #248 5
      #249 1
      #393 (Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
  14: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #715 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$1:(Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
      #248 5
      #249 1
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
  15: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #721 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeAlwaysFail$1:(Largonaut/HCursor;)Largonaut/DecodeResult;
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
      #248 5
      #249 1
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
  16: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #729 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$1:(Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
      #730 (Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
      #248 5
      #249 1
      #730 (Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
  17: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #734 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
      #248 5
      #249 1
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
  18: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #742 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$1:(Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
      #743 (Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
      #248 5
      #249 1
      #743 (Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
  19: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #761 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$1:(Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
      #762 (Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
      #248 5
      #249 1
      #762 (Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
  20: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #774 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$2:(Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
      #775 (Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
      #248 5
      #249 1
      #775 (Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
  21: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #783 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$3:(Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
      #784 (Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
      #248 5
      #249 1
      #784 (Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
  22: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #792 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$4:(Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
      #793 (Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
      #248 5
      #249 1
      #793 (Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  23: #256 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #242 (Ljava/lang/Object;)Ljava/lang/Object;
      #800 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
      #248 5
      #249 1
      #670 (Largonaut/HCursor;)Largonaut/DecodeResult;
  24: #825 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #721 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeAlwaysFail$1:(Largonaut/HCursor;)Largonaut/DecodeResult;
      #734 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
      #418 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeDontBumpRootDependencies$2:(Lcoursier/util/ModuleMatchers;)Lcoursier/params/rule/DontBumpRootDependencies;
      #669 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
      #245 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$2:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;Ljava/lang/String;)Largonaut/DecodeResult;
      #270 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModule$3:(Largonaut/HCursor;)Largonaut/DecodeResult;
      #681 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatcher$1:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #715 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$1:(Largonaut/DecodeJson;Largonaut/HCursor;)Largonaut/DecodeResult;
      #348 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeModuleMatchers$2:(Lcoursier/parse/JsonRuleParser$Helper$1;)Lcoursier/util/ModuleMatchers;
      #800 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$1:(Lcoursier/parse/JsonRuleParser;Largonaut/HCursor;)Largonaut/DecodeResult;
      #547 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$2$adapted:(Lscala/collection/immutable/Set;)Ljava/lang/Object;
      #564 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$3:(Largonaut/Json;)Lscala/Option;
      #586 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$4:(Largonaut/Json;)Lscala/Option;
      #649 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$5:(Lcoursier/parse/JsonRuleParser;Lscala/Option;Lcoursier/params/rule/Rule;)Lscala/Tuple2;
      #530 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeRule$6:(Lcoursier/parse/JsonRuleParser;)Lcoursier/params/rule/RuleResolution;
      #729 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$1:(Lcoursier/parse/JsonRuleParser$Repr$1;)Lcoursier/params/rule/SameVersion;
      #392 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeSameVersion$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #742 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$1:(Lcoursier/parse/JsonRuleParser$Repr$4;)Lcoursier/params/rule/Strict;
      #473 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$2:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #483 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$decodeStrict$3:(Lcoursier/core/Module;)Lcoursier/util/ModuleMatcher;
      #761 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$1:(Lcoursier/params/rule/AlwaysFail;)Lcoursier/params/rule/AlwaysFail;
      #774 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$2:(Lcoursier/params/rule/SameVersion;)Lcoursier/params/rule/SameVersion;
      #783 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$3:(Lcoursier/params/rule/DontBumpRootDependencies;)Lcoursier/params/rule/DontBumpRootDependencies;
      #792 REF_invokeStatic coursier/parse/JsonRuleParser.$anonfun$ruleDecoders$4:(Lcoursier/params/rule/Strict;)Lcoursier/params/rule/Strict;
  ScalaInlineInfo: length = 0xDB (unknown attribute)
   01 00 00 2B 01 6C 00 E9 01 01 A5 00 ED 01 01 9A
   01 9B 01 00 EC 00 ED 01 00 99 00 9A 01 00 E8 00
   E9 01 01 22 01 23 01 01 5B 01 5C 01 01 42 01 43
   01 02 23 00 ED 01 01 FF 02 00 01 02 27 02 28 01
   02 08 02 09 01 02 0C 02 09 01 02 12 02 13 01 02
   0E 02 0F 01 01 83 01 84 01 01 81 01 23 01 01 B8
   01 B9 01 01 B4 01 23 01 01 B6 01 23 01 01 F2 01
   F3 01 01 F6 01 F7 01 01 F9 01 FA 01 01 FC 01 FD
   01 00 B8 02 9F 00 01 2C 01 2D 01 01 7A 01 7B 01
   01 AD 01 AE 01 01 3F 01 2D 01 01 7E 01 7B 01 01
   B1 01 AE 01 00 39 00 5A 01 00 3C 00 5A 01 00 40
   00 5A 01 00 44 00 5A 01 00 3E 00 5A 01 00 4B 00
   5A 01 00 42 00 5A 01 00 46 00 5A 01 00 79 00 7A
   00 00 8E 00 7A 00 00 48 00 72 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
