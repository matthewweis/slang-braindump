Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.class
  Last modified May 29, 2022; size 3820 bytes
  SHA-256 checksum a21833d8e40a221e276c96ce44fe3d8a2b89e60b1706f9ad306b79f25b82a206
  Compiled from "ConcurrentReferenceHashMap.java"
final class concurrentrefhashmap.ConcurrentReferenceHashMap$HashEntry<K extends java.lang.Object, V extends java.lang.Object> extends java.lang.Object
  minor version: 0
  major version: 52
  flags: (0x0030) ACC_FINAL, ACC_SUPER
  this_class: #22                         // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry
  super_class: #23                        // java/lang/Object
  interfaces: 0, fields: 4, methods: 8, attributes: 3
Constant pool:
    #1 = Methodref          #23.#65       // java/lang/Object."<init>":()V
    #2 = Fieldref           #22.#66       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.hash:I
    #3 = Fieldref           #22.#67       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.next:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
    #4 = Methodref          #22.#68       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.newKeyReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
    #5 = Fieldref           #22.#69       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.keyRef:Ljava/lang/Object;
    #6 = Methodref          #22.#70       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.newValueReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
    #7 = Fieldref           #22.#71       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.valueRef:Ljava/lang/Object;
    #8 = Fieldref           #36.#72       // concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType.WEAK:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
    #9 = Class              #74           // concurrentrefhashmap/ConcurrentReferenceHashMap$WeakKeyReference
   #10 = Methodref          #9.#76        // concurrentrefhashmap/ConcurrentReferenceHashMap$WeakKeyReference."<init>":(Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #11 = Fieldref           #36.#77       // concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType.SOFT:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
   #12 = Class              #78           // concurrentrefhashmap/ConcurrentReferenceHashMap$SoftKeyReference
   #13 = Methodref          #12.#76       // concurrentrefhashmap/ConcurrentReferenceHashMap$SoftKeyReference."<init>":(Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #14 = Class              #80           // concurrentrefhashmap/ConcurrentReferenceHashMap$WeakValueReference
   #15 = Methodref          #14.#82       // concurrentrefhashmap/ConcurrentReferenceHashMap$WeakValueReference."<init>":(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #16 = Class              #83           // concurrentrefhashmap/ConcurrentReferenceHashMap$SoftValueReference
   #17 = Methodref          #16.#82       // concurrentrefhashmap/ConcurrentReferenceHashMap$SoftValueReference."<init>":(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #18 = Class              #85           // concurrentrefhashmap/ConcurrentReferenceHashMap$KeyReference
   #19 = Class              #87           // java/lang/ref/Reference
   #20 = Methodref          #19.#88       // java/lang/ref/Reference.get:()Ljava/lang/Object;
   #21 = Methodref          #22.#89       // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry.dereferenceValue:(Ljava/lang/Object;)Ljava/lang/Object;
   #22 = Class              #90           // concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry
   #23 = Class              #91           // java/lang/Object
   #24 = Utf8               keyRef
   #25 = Utf8               Ljava/lang/Object;
   #26 = Utf8               hash
   #27 = Utf8               I
   #28 = Utf8               valueRef
   #29 = Utf8               next
   #30 = Utf8               HashEntry
   #31 = Utf8               InnerClasses
   #32 = Utf8               Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
   #33 = Utf8               Signature
   #34 = Utf8               Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry<TK;TV;>;
   #35 = Utf8               <init>
   #36 = Class              #92           // concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType
   #37 = Utf8               ReferenceType
   #38 = Utf8               (Ljava/lang/Object;ILconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)V
   #39 = Utf8               Code
   #40 = Utf8               LineNumberTable
   #41 = Utf8               (TK;ILconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry<TK;TV;>;TV;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)V
   #42 = Utf8               newKeyReference
   #43 = Utf8               (Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
   #44 = Utf8               StackMapTable
   #45 = Utf8               (TK;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)Ljava/lang/Object;
   #46 = Utf8               newValueReference
   #47 = Utf8               (TV;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)Ljava/lang/Object;
   #48 = Utf8               key
   #49 = Utf8               ()Ljava/lang/Object;
   #50 = Utf8               ()TK;
   #51 = Utf8               value
   #52 = Utf8               ()TV;
   #53 = Utf8               dereferenceValue
   #54 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
   #55 = Utf8               (Ljava/lang/Object;)TV;
   #56 = Utf8               setValue
   #57 = Utf8               (Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)V
   #58 = Utf8               (TV;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)V
   #59 = Utf8               newArray
   #60 = Utf8               (I)[Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
   #61 = Utf8               <K:Ljava/lang/Object;V:Ljava/lang/Object;>(I)[Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry<TK;TV;>;
   #62 = Utf8               <K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;
   #63 = Utf8               SourceFile
   #64 = Utf8               ConcurrentReferenceHashMap.java
   #65 = NameAndType        #35:#93       // "<init>":()V
   #66 = NameAndType        #26:#27       // hash:I
   #67 = NameAndType        #29:#32       // next:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
   #68 = NameAndType        #42:#43       // newKeyReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
   #69 = NameAndType        #24:#25       // keyRef:Ljava/lang/Object;
   #70 = NameAndType        #46:#43       // newValueReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
   #71 = NameAndType        #28:#25       // valueRef:Ljava/lang/Object;
   #72 = NameAndType        #94:#95       // WEAK:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
   #73 = Class              #96           // concurrentrefhashmap/ConcurrentReferenceHashMap
   #74 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$WeakKeyReference
   #75 = Utf8               WeakKeyReference
   #76 = NameAndType        #35:#97       // "<init>":(Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #77 = NameAndType        #98:#95       // SOFT:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
   #78 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$SoftKeyReference
   #79 = Utf8               SoftKeyReference
   #80 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$WeakValueReference
   #81 = Utf8               WeakValueReference
   #82 = NameAndType        #35:#99       // "<init>":(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #83 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$SoftValueReference
   #84 = Utf8               SoftValueReference
   #85 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$KeyReference
   #86 = Utf8               KeyReference
   #87 = Utf8               java/lang/ref/Reference
   #88 = NameAndType        #100:#49      // get:()Ljava/lang/Object;
   #89 = NameAndType        #53:#54       // dereferenceValue:(Ljava/lang/Object;)Ljava/lang/Object;
   #90 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry
   #91 = Utf8               java/lang/Object
   #92 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType
   #93 = Utf8               ()V
   #94 = Utf8               WEAK
   #95 = Utf8               Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
   #96 = Utf8               concurrentrefhashmap/ConcurrentReferenceHashMap
   #97 = Utf8               (Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
   #98 = Utf8               SOFT
   #99 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
  #100 = Utf8               get
{
  final java.lang.Object keyRef;
    descriptor: Ljava/lang/Object;
    flags: (0x0010) ACC_FINAL

  final int hash;
    descriptor: I
    flags: (0x0010) ACC_FINAL

  volatile java.lang.Object valueRef;
    descriptor: Ljava/lang/Object;
    flags: (0x0040) ACC_VOLATILE

  final concurrentrefhashmap.ConcurrentReferenceHashMap$HashEntry<K, V> next;
    descriptor: Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
    flags: (0x0010) ACC_FINAL
    Signature: #34                          // Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry<TK;TV;>;

  concurrentrefhashmap.ConcurrentReferenceHashMap$HashEntry(K, int, concurrentrefhashmap.ConcurrentReferenceHashMap$HashEntry<K, V>, V, concurrentrefhashmap.ConcurrentReferenceHashMap$ReferenceType, concurrentrefhashmap.ConcurrentReferenceHashMap$ReferenceType, java.lang.ref.ReferenceQueue<java.lang.Object>);
    descriptor: (Ljava/lang/Object;ILconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)V
    flags: (0x0000)
    Code:
      stack=5, locals=8, args_size=8
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: iload_2
         6: putfield      #2                  // Field hash:I
         9: aload_0
        10: aload_3
        11: putfield      #3                  // Field next:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
        14: aload_0
        15: aload_0
        16: aload_1
        17: aload         5
        19: aload         7
        21: invokevirtual #4                  // Method newKeyReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
        24: putfield      #5                  // Field keyRef:Ljava/lang/Object;
        27: aload_0
        28: aload_0
        29: aload         4
        31: aload         6
        33: aload         7
        35: invokevirtual #6                  // Method newValueReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
        38: putfield      #7                  // Field valueRef:Ljava/lang/Object;
        41: return
      LineNumberTable:
        line 399: 0
        line 400: 4
        line 401: 9
        line 402: 14
        line 403: 27
        line 404: 41
    Signature: #41                          // (TK;ILconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry<TK;TV;>;TV;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)V

  final java.lang.Object newKeyReference(K, concurrentrefhashmap.ConcurrentReferenceHashMap$ReferenceType, java.lang.ref.ReferenceQueue<java.lang.Object>);
    descriptor: (Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
    flags: (0x0010) ACC_FINAL
    Code:
      stack=5, locals=4, args_size=4
         0: aload_2
         1: getstatic     #8                  // Field concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType.WEAK:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
         4: if_acmpne     21
         7: new           #9                  // class concurrentrefhashmap/ConcurrentReferenceHashMap$WeakKeyReference
        10: dup
        11: aload_1
        12: aload_0
        13: getfield      #2                  // Field hash:I
        16: aload_3
        17: invokespecial #10                 // Method concurrentrefhashmap/ConcurrentReferenceHashMap$WeakKeyReference."<init>":(Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
        20: areturn
        21: aload_2
        22: getstatic     #11                 // Field concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType.SOFT:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
        25: if_acmpne     42
        28: new           #12                 // class concurrentrefhashmap/ConcurrentReferenceHashMap$SoftKeyReference
        31: dup
        32: aload_1
        33: aload_0
        34: getfield      #2                  // Field hash:I
        37: aload_3
        38: invokespecial #13                 // Method concurrentrefhashmap/ConcurrentReferenceHashMap$SoftKeyReference."<init>":(Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
        41: areturn
        42: aload_1
        43: areturn
      LineNumberTable:
        line 409: 0
        line 410: 7
        line 412: 21
        line 413: 28
        line 416: 42
      StackMapTable: number_of_entries = 2
        frame_type = 21 /* same */
        frame_type = 20 /* same */
    Signature: #45                          // (TK;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)Ljava/lang/Object;

  final java.lang.Object newValueReference(V, concurrentrefhashmap.ConcurrentReferenceHashMap$ReferenceType, java.lang.ref.ReferenceQueue<java.lang.Object>);
    descriptor: (Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
    flags: (0x0010) ACC_FINAL
    Code:
      stack=6, locals=4, args_size=4
         0: aload_2
         1: getstatic     #8                  // Field concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType.WEAK:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
         4: if_acmpne     25
         7: new           #14                 // class concurrentrefhashmap/ConcurrentReferenceHashMap$WeakValueReference
        10: dup
        11: aload_1
        12: aload_0
        13: getfield      #5                  // Field keyRef:Ljava/lang/Object;
        16: aload_0
        17: getfield      #2                  // Field hash:I
        20: aload_3
        21: invokespecial #15                 // Method concurrentrefhashmap/ConcurrentReferenceHashMap$WeakValueReference."<init>":(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
        24: areturn
        25: aload_2
        26: getstatic     #11                 // Field concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType.SOFT:Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;
        29: if_acmpne     50
        32: new           #16                 // class concurrentrefhashmap/ConcurrentReferenceHashMap$SoftValueReference
        35: dup
        36: aload_1
        37: aload_0
        38: getfield      #5                  // Field keyRef:Ljava/lang/Object;
        41: aload_0
        42: getfield      #2                  // Field hash:I
        45: aload_3
        46: invokespecial #17                 // Method concurrentrefhashmap/ConcurrentReferenceHashMap$SoftValueReference."<init>":(Ljava/lang/Object;Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
        49: areturn
        50: aload_1
        51: areturn
      LineNumberTable:
        line 422: 0
        line 423: 7
        line 425: 25
        line 426: 32
        line 429: 50
      StackMapTable: number_of_entries = 2
        frame_type = 25 /* same */
        frame_type = 24 /* same */
    Signature: #47                          // (TV;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)Ljava/lang/Object;

  final K key();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0010) ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #5                  // Field keyRef:Ljava/lang/Object;
         4: instanceof    #18                 // class concurrentrefhashmap/ConcurrentReferenceHashMap$KeyReference
         7: ifeq          21
        10: aload_0
        11: getfield      #5                  // Field keyRef:Ljava/lang/Object;
        14: checkcast     #19                 // class java/lang/ref/Reference
        17: invokevirtual #20                 // Method java/lang/ref/Reference.get:()Ljava/lang/Object;
        20: areturn
        21: aload_0
        22: getfield      #5                  // Field keyRef:Ljava/lang/Object;
        25: areturn
      LineNumberTable:
        line 434: 0
        line 435: 10
        line 438: 21
      StackMapTable: number_of_entries = 1
        frame_type = 21 /* same */
    Signature: #50                          // ()TK;

  final V value();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0010) ACC_FINAL
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: aload_0
         2: getfield      #7                  // Field valueRef:Ljava/lang/Object;
         5: invokevirtual #21                 // Method dereferenceValue:(Ljava/lang/Object;)Ljava/lang/Object;
         8: areturn
      LineNumberTable:
        line 442: 0
    Signature: #52                          // ()TV;

  final V dereferenceValue(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: (0x0010) ACC_FINAL
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1
         1: instanceof    #18                 // class concurrentrefhashmap/ConcurrentReferenceHashMap$KeyReference
         4: ifeq          15
         7: aload_1
         8: checkcast     #19                 // class java/lang/ref/Reference
        11: invokevirtual #20                 // Method java/lang/ref/Reference.get:()Ljava/lang/Object;
        14: areturn
        15: aload_1
        16: areturn
      LineNumberTable:
        line 447: 0
        line 448: 7
        line 451: 15
      StackMapTable: number_of_entries = 1
        frame_type = 15 /* same */
    Signature: #55                          // (Ljava/lang/Object;)TV;

  final void setValue(V, concurrentrefhashmap.ConcurrentReferenceHashMap$ReferenceType, java.lang.ref.ReferenceQueue<java.lang.Object>);
    descriptor: (Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)V
    flags: (0x0010) ACC_FINAL
    Code:
      stack=5, locals=4, args_size=4
         0: aload_0
         1: aload_0
         2: aload_1
         3: aload_2
         4: aload_3
         5: invokevirtual #6                  // Method newValueReference:(Ljava/lang/Object;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue;)Ljava/lang/Object;
         8: putfield      #7                  // Field valueRef:Ljava/lang/Object;
        11: return
      LineNumberTable:
        line 455: 0
        line 456: 11
    Signature: #58                          // (TV;Lconcurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType;Ljava/lang/ref/ReferenceQueue<Ljava/lang/Object;>;)V

  static final <K extends java.lang.Object, V extends java.lang.Object> concurrentrefhashmap.ConcurrentReferenceHashMap$HashEntry<K, V>[] newArray(int);
    descriptor: (I)[Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry;
    flags: (0x0018) ACC_STATIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: iload_0
         1: anewarray     #22                 // class concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry
         4: areturn
      LineNumberTable:
        line 460: 0
    Signature: #61                          // <K:Ljava/lang/Object;V:Ljava/lang/Object;>(I)[Lconcurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry<TK;TV;>;
}
Signature: #62                          // <K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;
SourceFile: "ConcurrentReferenceHashMap.java"
InnerClasses:
  static final #30= #22 of #73;           // HashEntry=class concurrentrefhashmap/ConcurrentReferenceHashMap$HashEntry of class concurrentrefhashmap/ConcurrentReferenceHashMap
  public static final #37= #36 of #73;    // ReferenceType=class concurrentrefhashmap/ConcurrentReferenceHashMap$ReferenceType of class concurrentrefhashmap/ConcurrentReferenceHashMap
  static final #75= #9 of #73;            // WeakKeyReference=class concurrentrefhashmap/ConcurrentReferenceHashMap$WeakKeyReference of class concurrentrefhashmap/ConcurrentReferenceHashMap
  static final #79= #12 of #73;           // SoftKeyReference=class concurrentrefhashmap/ConcurrentReferenceHashMap$SoftKeyReference of class concurrentrefhashmap/ConcurrentReferenceHashMap
  static final #81= #14 of #73;           // WeakValueReference=class concurrentrefhashmap/ConcurrentReferenceHashMap$WeakValueReference of class concurrentrefhashmap/ConcurrentReferenceHashMap
  static final #84= #16 of #73;           // SoftValueReference=class concurrentrefhashmap/ConcurrentReferenceHashMap$SoftValueReference of class concurrentrefhashmap/ConcurrentReferenceHashMap
  static #86= #18 of #73;                 // KeyReference=class concurrentrefhashmap/ConcurrentReferenceHashMap$KeyReference of class concurrentrefhashmap/ConcurrentReferenceHashMap
