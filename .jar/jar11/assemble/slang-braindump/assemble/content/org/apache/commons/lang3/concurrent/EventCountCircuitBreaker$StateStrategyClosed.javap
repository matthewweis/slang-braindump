Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed.class
  Last modified May 29, 2022; size 1844 bytes
  SHA-256 checksum d79b1c75c1588c3366ba879061bd2d1cd6a52597b0ff6e301103987402671b54
  Compiled from "EventCountCircuitBreaker.java"
class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed extends org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy
  minor version: 0
  major version: 52
  flags: (0x0020) ACC_SUPER
  this_class: #6                          // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed
  super_class: #7                         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy
  interfaces: 0, fields: 0, methods: 4, attributes: 2
Constant pool:
   #1 = Methodref          #6.#35         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed."<init>":()V
   #2 = Methodref          #7.#36         // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy."<init>":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
   #3 = Methodref          #18.#37        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getEventCount:()I
   #4 = Methodref          #38.#39        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getOpeningThreshold:()I
   #5 = Methodref          #38.#40        // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getOpeningInterval:()J
   #6 = Class              #41            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed
   #7 = Class              #42            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy
   #8 = Utf8               <init>
   #9 = Utf8               ()V
  #10 = Utf8               Code
  #11 = Utf8               LineNumberTable
  #12 = Utf8               LocalVariableTable
  #13 = Utf8               this
  #14 = Utf8               StateStrategyClosed
  #15 = Utf8               InnerClasses
  #16 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed;
  #17 = Utf8               isStateTransition
  #18 = Class              #44            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
  #19 = Utf8               CheckIntervalData
  #20 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z
  #21 = Utf8               breaker
  #22 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;
  #23 = Utf8               currentData
  #24 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;
  #25 = Utf8               nextData
  #26 = Utf8               StackMapTable
  #27 = Utf8               fetchCheckInterval
  #28 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J
  #29 = Class              #45            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1
  #30 = Utf8               (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
  #31 = Utf8               x0
  #32 = Utf8               Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;
  #33 = Utf8               SourceFile
  #34 = Utf8               EventCountCircuitBreaker.java
  #35 = NameAndType        #8:#9          // "<init>":()V
  #36 = NameAndType        #8:#30         // "<init>":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
  #37 = NameAndType        #46:#47        // getEventCount:()I
  #38 = Class              #48            // org/apache/commons/lang3/concurrent/EventCountCircuitBreaker
  #39 = NameAndType        #49:#47        // getOpeningThreshold:()I
  #40 = NameAndType        #50:#51        // getOpeningInterval:()J
  #41 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed
  #42 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy
  #43 = Utf8               StateStrategy
  #44 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData
  #45 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1
  #46 = Utf8               getEventCount
  #47 = Utf8               ()I
  #48 = Utf8               org/apache/commons/lang3/concurrent/EventCountCircuitBreaker
  #49 = Utf8               getOpeningThreshold
  #50 = Utf8               getOpeningInterval
  #51 = Utf8               ()J
{
  private org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed();
    descriptor: ()V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: aconst_null
         2: invokespecial #2                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy."<init>":(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
         5: return
      LineNumberTable:
        line 522: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed;

  public boolean isStateTransition(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData);
    descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=4
         0: aload_3
         1: invokevirtual #3                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData.getEventCount:()I
         4: aload_1
         5: invokevirtual #4                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getOpeningThreshold:()I
         8: if_icmple     15
        11: iconst_1
        12: goto          16
        15: iconst_0
        16: ireturn
      LineNumberTable:
        line 530: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed;
            0      17     1 breaker   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;
            0      17     2 currentData   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;
            0      17     3 nextData   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]

  protected long fetchCheckInterval(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker);
    descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J
    flags: (0x0004) ACC_PROTECTED
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #5                  // Method org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.getOpeningInterval:()J
         4: lreturn
      LineNumberTable:
        line 538: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed;
            0       5     1 breaker   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;

  org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$1);
    descriptor: (Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V
    flags: (0x1000) ACC_SYNTHETIC
    Code:
      stack=1, locals=2, args_size=2
         0: aload_0
         1: invokespecial #1                  // Method "<init>":()V
         4: return
      LineNumberTable:
        line 522: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed;
            0       5     1    x0   Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;
}
SourceFile: "EventCountCircuitBreaker.java"
InnerClasses:
  private static #14= #6 of #38;          // StateStrategyClosed=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategyClosed of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker
  private static #19= #18 of #38;         // CheckIntervalData=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker
  static #29;                             // class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1
  private static abstract #43= #7 of #38; // StateStrategy=class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy of class org/apache/commons/lang3/concurrent/EventCountCircuitBreaker
