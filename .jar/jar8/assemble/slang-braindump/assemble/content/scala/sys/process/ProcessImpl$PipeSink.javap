Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/sys/process/ProcessImpl$PipeSink.class
  Last modified May 29, 2022; size 4806 bytes
  SHA-256 checksum f1d44839ff138bea28bb3f5391f28b6038b378fd852ba28476131147fd1c28ff
  Compiled from "ProcessImpl.scala"
public class scala.sys.process.ProcessImpl$PipeSink extends scala.sys.process.ProcessImpl$PipeThread
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // scala/sys/process/ProcessImpl$PipeSink
  super_class: #4                         // scala/sys/process/ProcessImpl$PipeThread
  interfaces: 0, fields: 2, methods: 12, attributes: 5
Constant pool:
    #1 = Utf8               scala/sys/process/ProcessImpl$PipeSink
    #2 = Class              #1            // scala/sys/process/ProcessImpl$PipeSink
    #3 = Utf8               scala/sys/process/ProcessImpl$PipeThread
    #4 = Class              #3            // scala/sys/process/ProcessImpl$PipeThread
    #5 = Utf8               ProcessImpl.scala
    #6 = Utf8               java/lang/invoke/MethodHandles$Lookup
    #7 = Class              #6            // java/lang/invoke/MethodHandles$Lookup
    #8 = Utf8               java/lang/invoke/MethodHandles
    #9 = Class              #8            // java/lang/invoke/MethodHandles
   #10 = Utf8               Lookup
   #11 = Utf8               scala/sys/process/ProcessImpl
   #12 = Class              #11           // scala/sys/process/ProcessImpl
   #13 = Utf8               PipeSink
   #14 = Utf8               PipeThread
   #15 = Utf8               scala/sys/process/processInternal$$anonfun$onInterrupt$1
   #16 = Class              #15           // scala/sys/process/processInternal$$anonfun$onInterrupt$1
   #17 = Utf8               pipe
   #18 = Utf8               Ljava/io/PipedInputStream;
   #19 = Utf8               sink
   #20 = Utf8               Ljava/util/concurrent/LinkedBlockingQueue;
   #21 = Utf8               Ljava/util/concurrent/LinkedBlockingQueue<Lscala/Option<Ljava/io/OutputStream;>;>;
   #22 = Utf8               ()Ljava/io/PipedInputStream;
   #23 = NameAndType        #17:#18       // pipe:Ljava/io/PipedInputStream;
   #24 = Fieldref           #2.#23        // scala/sys/process/ProcessImpl$PipeSink.pipe:Ljava/io/PipedInputStream;
   #25 = Utf8               this
   #26 = Utf8               Lscala/sys/process/ProcessImpl$PipeSink;
   #27 = Utf8               ()Ljava/util/concurrent/LinkedBlockingQueue;
   #28 = Utf8               ()Ljava/util/concurrent/LinkedBlockingQueue<Lscala/Option<Ljava/io/OutputStream;>;>;
   #29 = NameAndType        #19:#20       // sink:Ljava/util/concurrent/LinkedBlockingQueue;
   #30 = Fieldref           #2.#29        // scala/sys/process/ProcessImpl$PipeSink.sink:Ljava/util/concurrent/LinkedBlockingQueue;
   #31 = Utf8               run
   #32 = Utf8               ()V
   #33 = Utf8               java/lang/Throwable
   #34 = Class              #33           // java/lang/Throwable
   #35 = Utf8               go$2
   #36 = NameAndType        #35:#32       // go$2:()V
   #37 = Methodref          #2.#36        // scala/sys/process/ProcessImpl$PipeSink.go$2:()V
   #38 = Utf8               scala/sys/process/processInternal$
   #39 = Class              #38           // scala/sys/process/processInternal$
   #40 = Utf8               MODULE$
   #41 = Utf8               Lscala/sys/process/processInternal$;
   #42 = NameAndType        #40:#41       // MODULE$:Lscala/sys/process/processInternal$;
   #43 = Fieldref           #39.#42       // scala/sys/process/processInternal$.MODULE$:Lscala/sys/process/processInternal$;
   #44 = MethodType         #32           //  ()V
   #45 = Utf8               $anonfun$run$2
   #46 = NameAndType        #45:#32       // $anonfun$run$2:()V
   #47 = Methodref          #2.#46        // scala/sys/process/ProcessImpl$PipeSink.$anonfun$run$2:()V
   #48 = MethodHandle       6:#47         // REF_invokeStatic scala/sys/process/ProcessImpl$PipeSink.$anonfun$run$2:()V
   #49 = Integer            1
   #50 = Utf8               java/lang/invoke/LambdaMetafactory
   #51 = Class              #50           // java/lang/invoke/LambdaMetafactory
   #52 = Utf8               altMetafactory
   #53 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #54 = NameAndType        #52:#53       // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #55 = Methodref          #51.#54       // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #56 = MethodHandle       6:#55         // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #57 = Utf8               apply$mcV$sp
   #58 = Utf8               ()Lscala/runtime/java8/JFunction0$mcV$sp;
   #59 = NameAndType        #57:#58       // apply$mcV$sp:()Lscala/runtime/java8/JFunction0$mcV$sp;
   #60 = InvokeDynamic      #0:#59        // #0:apply$mcV$sp:()Lscala/runtime/java8/JFunction0$mcV$sp;
   #61 = Utf8               <init>
   #62 = Utf8               (Lscala/Function0;)V
   #63 = NameAndType        #61:#62       // "<init>":(Lscala/Function0;)V
   #64 = Methodref          #16.#63       // scala/sys/process/processInternal$$anonfun$onInterrupt$1."<init>":(Lscala/Function0;)V
   #65 = Utf8               isDefinedAt
   #66 = Utf8               (Ljava/lang/Throwable;)Z
   #67 = NameAndType        #65:#66       // isDefinedAt:(Ljava/lang/Throwable;)Z
   #68 = Methodref          #16.#67       // scala/sys/process/processInternal$$anonfun$onInterrupt$1.isDefinedAt:(Ljava/lang/Throwable;)Z
   #69 = Utf8               scala/PartialFunction
   #70 = Class              #69           // scala/PartialFunction
   #71 = Utf8               apply
   #72 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
   #73 = NameAndType        #71:#72       // apply:(Ljava/lang/Object;)Ljava/lang/Object;
   #74 = InterfaceMethodref #70.#73       // scala/PartialFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
   #75 = Utf8               scala/sys/process/BasicIO$
   #76 = Class              #75           // scala/sys/process/BasicIO$
   #77 = Utf8               Lscala/sys/process/BasicIO$;
   #78 = NameAndType        #40:#77       // MODULE$:Lscala/sys/process/BasicIO$;
   #79 = Fieldref           #76.#78       // scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
   #80 = NameAndType        #17:#22       // pipe:()Ljava/io/PipedInputStream;
   #81 = Methodref          #2.#80        // scala/sys/process/ProcessImpl$PipeSink.pipe:()Ljava/io/PipedInputStream;
   #82 = Utf8               close
   #83 = Utf8               (Ljava/io/Closeable;)V
   #84 = NameAndType        #82:#83       // close:(Ljava/io/Closeable;)V
   #85 = Methodref          #76.#84       // scala/sys/process/BasicIO$.close:(Ljava/io/Closeable;)V
   #86 = Utf8               catchExpr$6
   #87 = Utf8               Lscala/PartialFunction;
   #88 = Utf8               x$14
   #89 = Utf8               Ljava/lang/Throwable;
   #90 = Utf8               onInterrupt_handler
   #91 = Utf8               Lscala/Function0;
   #92 = Utf8               connectOut
   #93 = Utf8               (Ljava/io/OutputStream;)V
   #94 = Utf8               out
   #95 = NameAndType        #19:#27       // sink:()Ljava/util/concurrent/LinkedBlockingQueue;
   #96 = Methodref          #2.#95        // scala/sys/process/ProcessImpl$PipeSink.sink:()Ljava/util/concurrent/LinkedBlockingQueue;
   #97 = Utf8               scala/Some
   #98 = Class              #97           // scala/Some
   #99 = Utf8               (Ljava/lang/Object;)V
  #100 = NameAndType        #61:#99       // "<init>":(Ljava/lang/Object;)V
  #101 = Methodref          #98.#100      // scala/Some."<init>":(Ljava/lang/Object;)V
  #102 = Utf8               java/util/concurrent/LinkedBlockingQueue
  #103 = Class              #102          // java/util/concurrent/LinkedBlockingQueue
  #104 = Utf8               put
  #105 = NameAndType        #104:#99      // put:(Ljava/lang/Object;)V
  #106 = Methodref          #103.#105     // java/util/concurrent/LinkedBlockingQueue.put:(Ljava/lang/Object;)V
  #107 = Utf8               Ljava/io/OutputStream;
  #108 = Utf8               connectIn
  #109 = Utf8               (Ljava/io/PipedOutputStream;)V
  #110 = Utf8               pipeOut
  #111 = Utf8               java/io/PipedInputStream
  #112 = Class              #111          // java/io/PipedInputStream
  #113 = Utf8               connect
  #114 = NameAndType        #113:#109     // connect:(Ljava/io/PipedOutputStream;)V
  #115 = Methodref          #112.#114     // java/io/PipedInputStream.connect:(Ljava/io/PipedOutputStream;)V
  #116 = Utf8               Ljava/io/PipedOutputStream;
  #117 = Utf8               release
  #118 = Utf8               interrupt
  #119 = NameAndType        #118:#32      // interrupt:()V
  #120 = Methodref          #2.#119       // scala/sys/process/ProcessImpl$PipeSink.interrupt:()V
  #121 = Utf8               done
  #122 = NameAndType        #121:#32      // done:()V
  #123 = Methodref          #2.#122       // scala/sys/process/ProcessImpl$PipeSink.done:()V
  #124 = Utf8               join
  #125 = NameAndType        #124:#32      // join:()V
  #126 = Methodref          #2.#125       // scala/sys/process/ProcessImpl$PipeSink.join:()V
  #127 = Utf8               scala/None$
  #128 = Class              #127          // scala/None$
  #129 = Utf8               Lscala/None$;
  #130 = NameAndType        #40:#129      // MODULE$:Lscala/None$;
  #131 = Fieldref           #128.#130     // scala/None$.MODULE$:Lscala/None$;
  #132 = Utf8               scala$sys$process$ProcessImpl$PipeSink$$$outer
  #133 = Utf8               ()Lscala/sys/process/Process$;
  #134 = Utf8               $outer
  #135 = Utf8               Lscala/sys/process/Process$;
  #136 = NameAndType        #134:#135     // $outer:Lscala/sys/process/Process$;
  #137 = Fieldref           #2.#136       // scala/sys/process/ProcessImpl$PipeSink.$outer:Lscala/sys/process/Process$;
  #138 = Utf8               take
  #139 = Utf8               ()Ljava/lang/Object;
  #140 = NameAndType        #138:#139     // take:()Ljava/lang/Object;
  #141 = Methodref          #103.#140     // java/util/concurrent/LinkedBlockingQueue.take:()Ljava/lang/Object;
  #142 = Utf8               scala/Option
  #143 = Class              #142          // scala/Option
  #144 = Utf8               value
  #145 = NameAndType        #144:#139     // value:()Ljava/lang/Object;
  #146 = Methodref          #98.#145      // scala/Some.value:()Ljava/lang/Object;
  #147 = Utf8               java/io/OutputStream
  #148 = Class              #147          // java/io/OutputStream
  #149 = Utf8               runloop
  #150 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;)V
  #151 = NameAndType        #149:#150     // runloop:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
  #152 = Methodref          #2.#151       // scala/sys/process/ProcessImpl$PipeSink.runloop:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
  #153 = Utf8               java/lang/Object
  #154 = Class              #153          // java/lang/Object
  #155 = Utf8               equals
  #156 = Utf8               (Ljava/lang/Object;)Z
  #157 = NameAndType        #155:#156     // equals:(Ljava/lang/Object;)Z
  #158 = Methodref          #154.#157     // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #159 = Utf8               scala/MatchError
  #160 = Class              #159          // scala/MatchError
  #161 = Methodref          #160.#100     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #162 = Utf8               (Lscala/sys/process/Process$;Lscala/Function0;)V
  #163 = Utf8               (Lscala/Function0<Ljava/lang/String;>;)V
  #164 = Utf8               label
  #165 = Utf8               (Lscala/sys/process/Process$;ZLscala/Function0;)V
  #166 = NameAndType        #61:#165      // "<init>":(Lscala/sys/process/Process$;ZLscala/Function0;)V
  #167 = Methodref          #4.#166       // scala/sys/process/ProcessImpl$PipeThread."<init>":(Lscala/sys/process/Process$;ZLscala/Function0;)V
  #168 = Utf8               java/lang/StringBuilder
  #169 = Class              #168          // java/lang/StringBuilder
  #170 = Integer            11
  #171 = Utf8               (I)V
  #172 = NameAndType        #61:#171      // "<init>":(I)V
  #173 = Methodref          #169.#172     // java/lang/StringBuilder."<init>":(I)V
  #174 = Utf8               PipeSink(
  #175 = String             #174          // PipeSink(
  #176 = Utf8               append
  #177 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #178 = NameAndType        #176:#177     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #179 = Methodref          #169.#178     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #180 = Utf8               scala/Function0
  #181 = Class              #180          // scala/Function0
  #182 = NameAndType        #71:#139      // apply:()Ljava/lang/Object;
  #183 = InterfaceMethodref #181.#182     // scala/Function0.apply:()Ljava/lang/Object;
  #184 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #185 = NameAndType        #176:#184     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #186 = Methodref          #169.#185     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #187 = Utf8               )-
  #188 = String             #187          // )-
  #189 = Utf8               getName
  #190 = Utf8               ()Ljava/lang/String;
  #191 = NameAndType        #189:#190     // getName:()Ljava/lang/String;
  #192 = Methodref          #2.#191       // scala/sys/process/ProcessImpl$PipeSink.getName:()Ljava/lang/String;
  #193 = Utf8               toString
  #194 = NameAndType        #193:#190     // toString:()Ljava/lang/String;
  #195 = Methodref          #169.#194     // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #196 = Utf8               setName
  #197 = Utf8               (Ljava/lang/String;)V
  #198 = NameAndType        #196:#197     // setName:(Ljava/lang/String;)V
  #199 = Methodref          #2.#198       // scala/sys/process/ProcessImpl$PipeSink.setName:(Ljava/lang/String;)V
  #200 = NameAndType        #61:#32       // "<init>":()V
  #201 = Methodref          #112.#200     // java/io/PipedInputStream."<init>":()V
  #202 = Methodref          #103.#172     // java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
  #203 = Utf8               $deserializeLambda$
  #204 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #205 = Utf8               scala/runtime/LambdaDeserialize
  #206 = Class              #205          // scala/runtime/LambdaDeserialize
  #207 = Utf8               bootstrap
  #208 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #209 = NameAndType        #207:#208     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #210 = Methodref          #206.#209     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #211 = MethodHandle       6:#210        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #212 = Utf8               lambdaDeserialize
  #213 = NameAndType        #212:#204     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #214 = InvokeDynamic      #1:#213       // #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #215 = Utf8               Signature
  #216 = Utf8               Code
  #217 = Utf8               LineNumberTable
  #218 = Utf8               LocalVariableTable
  #219 = Utf8               StackMapTable
  #220 = Utf8               MethodParameters
  #221 = Utf8               InnerClasses
  #222 = Utf8               SourceFile
  #223 = Utf8               BootstrapMethods
  #224 = Utf8               ScalaInlineInfo
  #225 = Utf8               Scala
{
  private final java.io.PipedInputStream pipe;
    descriptor: Ljava/io/PipedInputStream;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.util.concurrent.LinkedBlockingQueue<scala.Option<java.io.OutputStream>> sink;
    descriptor: Ljava/util/concurrent/LinkedBlockingQueue;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #21                          // Ljava/util/concurrent/LinkedBlockingQueue<Lscala/Option<Ljava/io/OutputStream;>;>;

  public java.io.PipedInputStream pipe();
    descriptor: ()Ljava/io/PipedInputStream;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #24                 // Field pipe:Ljava/io/PipedInputStream;
         4: areturn
      LineNumberTable:
        line 220: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/sys/process/ProcessImpl$PipeSink;

  public java.util.concurrent.LinkedBlockingQueue<scala.Option<java.io.OutputStream>> sink();
    descriptor: ()Ljava/util/concurrent/LinkedBlockingQueue;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #30                 // Field sink:Ljava/util/concurrent/LinkedBlockingQueue;
         4: areturn
      LineNumberTable:
        line 221: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/sys/process/ProcessImpl$PipeSink;
    Signature: #28                          // ()Ljava/util/concurrent/LinkedBlockingQueue<Lscala/Option<Ljava/io/OutputStream;>;>;

  public void run();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=5, args_size=1
         0: aload_0
         1: invokespecial #37                 // Method go$2:()V
         4: goto          66
         7: astore_1
         8: getstatic     #43                 // Field scala/sys/process/processInternal$.MODULE$:Lscala/sys/process/processInternal$;
        11: pop
        12: invokedynamic #60,  0             // InvokeDynamic #0:apply$mcV$sp:()Lscala/runtime/java8/JFunction0$mcV$sp;
        17: astore        4
        19: new           #16                 // class scala/sys/process/processInternal$$anonfun$onInterrupt$1
        22: dup
        23: aload         4
        25: invokespecial #64                 // Method scala/sys/process/processInternal$$anonfun$onInterrupt$1."<init>":(Lscala/Function0;)V
        28: aconst_null
        29: astore        4
        31: astore_2
        32: aload_2
        33: aload_1
        34: invokevirtual #68                 // Method scala/sys/process/processInternal$$anonfun$onInterrupt$1.isDefinedAt:(Ljava/lang/Throwable;)Z
        37: ifeq          51
        40: aload_2
        41: aload_1
        42: invokeinterface #74,  2           // InterfaceMethod scala/PartialFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
        47: pop
        48: goto          66
        51: aload_1
        52: athrow
        53: astore_3
        54: getstatic     #79                 // Field scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
        57: aload_0
        58: invokevirtual #81                 // Method pipe:()Ljava/io/PipedInputStream;
        61: invokevirtual #85                 // Method scala/sys/process/BasicIO$.close:(Ljava/io/Closeable;)V
        64: aload_3
        65: athrow
        66: getstatic     #79                 // Field scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
        69: aload_0
        70: invokevirtual #81                 // Method pipe:()Ljava/io/PipedInputStream;
        73: invokevirtual #85                 // Method scala/sys/process/BasicIO$.close:(Ljava/io/Closeable;)V
        76: return
      Exception table:
         from    to  target type
             0     4     7   Class java/lang/Throwable
             0    53    53   any
      StackMapTable: number_of_entries = 4
        frame_type = 71 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 43
          locals = [ class scala/sys/process/ProcessImpl$PipeSink, class java/lang/Throwable, class scala/sys/process/processInternal$$anonfun$onInterrupt$1, top, null ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class scala/sys/process/ProcessImpl$PipeSink ]
          stack = [ class java/lang/Throwable ]
        frame_type = 12 /* same */
      LineNumberTable:
        line 228: 0
        line 229: 8
        line 230: 54
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           32      21     2 catchExpr$6   Lscala/PartialFunction;
            7      46     1  x$14   Ljava/lang/Throwable;
            0      77     0  this   Lscala/sys/process/ProcessImpl$PipeSink;
           19       9     4 onInterrupt_handler   Lscala/Function0;

  public void connectOut(java.io.OutputStream);
    descriptor: (Ljava/io/OutputStream;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: invokevirtual #96                 // Method sink:()Ljava/util/concurrent/LinkedBlockingQueue;
         4: new           #98                 // class scala/Some
         7: dup
         8: aload_1
         9: invokespecial #101                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        12: invokevirtual #106                // Method java/util/concurrent/LinkedBlockingQueue.put:(Ljava/lang/Object;)V
        15: return
      LineNumberTable:
        line 232: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      16     0  this   Lscala/sys/process/ProcessImpl$PipeSink;
            0      16     1   out   Ljava/io/OutputStream;
    MethodParameters:
      Name                           Flags
      out                            final

  public void connectIn(java.io.PipedOutputStream);
    descriptor: (Ljava/io/PipedOutputStream;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: invokevirtual #81                 // Method pipe:()Ljava/io/PipedInputStream;
         4: aload_1
         5: invokevirtual #115                // Method java/io/PipedInputStream.connect:(Ljava/io/PipedOutputStream;)V
         8: return
      LineNumberTable:
        line 233: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/sys/process/ProcessImpl$PipeSink;
            0       9     1 pipeOut   Ljava/io/PipedOutputStream;
    MethodParameters:
      Name                           Flags
      pipeOut                        final

  public void release();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #120                // Method interrupt:()V
         4: aload_0
         5: invokevirtual #123                // Method done:()V
         8: aload_0
         9: invokevirtual #126                // Method join:()V
        12: return
      LineNumberTable:
        line 235: 0
        line 236: 4
        line 237: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lscala/sys/process/ProcessImpl$PipeSink;

  public void done();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #96                 // Method sink:()Ljava/util/concurrent/LinkedBlockingQueue;
         4: getstatic     #131                // Field scala/None$.MODULE$:Lscala/None$;
         7: invokevirtual #106                // Method java/util/concurrent/LinkedBlockingQueue.put:(Ljava/lang/Object;)V
        10: return
      LineNumberTable:
        line 239: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      11     0  this   Lscala/sys/process/ProcessImpl$PipeSink;

  public scala.sys.process.Process$ scala$sys$process$ProcessImpl$PipeSink$$$outer();
    descriptor: ()Lscala/sys/process/Process$;
    flags: (0x1001) ACC_PUBLIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #137                // Field $outer:Lscala/sys/process/Process$;
         4: areturn
      LineNumberTable:
        line 218: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/sys/process/ProcessImpl$PipeSink;

  private final void go$2();
    descriptor: ()V
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=3, locals=3, args_size=1
         0: aload_0
         1: invokevirtual #96                 // Method sink:()Ljava/util/concurrent/LinkedBlockingQueue;
         4: invokevirtual #141                // Method java/util/concurrent/LinkedBlockingQueue.take:()Ljava/lang/Object;
         7: checkcast     #143                // class scala/Option
        10: astore_1
        11: aload_1
        12: instanceof    #98                 // class scala/Some
        15: ifeq          41
        18: aload_1
        19: checkcast     #98                 // class scala/Some
        22: invokevirtual #146                // Method scala/Some.value:()Ljava/lang/Object;
        25: checkcast     #148                // class java/io/OutputStream
        28: astore_2
        29: aload_0
        30: aload_0
        31: invokevirtual #81                 // Method pipe:()Ljava/io/PipedInputStream;
        34: aload_2
        35: invokevirtual #152                // Method runloop:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
        38: goto          0
        41: getstatic     #131                // Field scala/None$.MODULE$:Lscala/None$;
        44: aload_1
        45: invokevirtual #158                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        48: ifeq          52
        51: return
        52: new           #160                // class scala/MatchError
        55: dup
        56: aload_1
        57: invokespecial #161                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
        60: athrow
      StackMapTable: number_of_entries = 3
        frame_type = 0 /* same */
        frame_type = 252 /* append */
          offset_delta = 40
          locals = [ class scala/Option ]
        frame_type = 10 /* same */
      LineNumberTable:
        line 224: 0
        line 225: 11
        line 226: 41
        line 224: 52
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           29      12     2   out   Ljava/io/OutputStream;
            0      61     0  this   Lscala/sys/process/ProcessImpl$PipeSink;

  public static final void $anonfun$run$2();
    descriptor: ()V
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=0, locals=0, args_size=0
         0: return
      LineNumberTable:
        line 229: 0

  public scala.sys.process.ProcessImpl$PipeSink(scala.Function0<java.lang.String>);
    descriptor: (Lscala/sys/process/Process$;Lscala/Function0;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: iconst_1
         3: aload_2
         4: invokespecial #167                // Method scala/sys/process/ProcessImpl$PipeThread."<init>":(Lscala/sys/process/Process$;ZLscala/Function0;)V
         7: aload_0
         8: new           #169                // class java/lang/StringBuilder
        11: dup
        12: ldc           #170                // int 11
        14: invokespecial #173                // Method java/lang/StringBuilder."<init>":(I)V
        17: ldc           #175                // String PipeSink(
        19: invokevirtual #179                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        22: aload_2
        23: invokeinterface #183,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
        28: invokevirtual #186                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        31: ldc           #188                // String )-
        33: invokevirtual #179                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        36: aload_0
        37: invokevirtual #192                // Method getName:()Ljava/lang/String;
        40: invokevirtual #179                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        43: invokevirtual #195                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        46: invokevirtual #199                // Method setName:(Ljava/lang/String;)V
        49: aload_0
        50: new           #112                // class java/io/PipedInputStream
        53: dup
        54: invokespecial #201                // Method java/io/PipedInputStream."<init>":()V
        57: putfield      #24                 // Field pipe:Ljava/io/PipedInputStream;
        60: aload_0
        61: new           #103                // class java/util/concurrent/LinkedBlockingQueue
        64: dup
        65: iconst_1
        66: invokespecial #202                // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
        69: putfield      #30                 // Field sink:Ljava/util/concurrent/LinkedBlockingQueue;
        72: return
      LineNumberTable:
        line 218: 0
        line 219: 7
        line 220: 49
        line 221: 60
        line 218: 72
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      73     0  this   Lscala/sys/process/ProcessImpl$PipeSink;
            0      73     1 $outer   Lscala/sys/process/Process$;
            0      73     2 label   Lscala/Function0;
    Signature: #163                         // (Lscala/Function0<Ljava/lang/String;>;)V
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      label                          final

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #214,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #10= #7 of #9;      // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  public #13= #2 of #12;                  // PipeSink=class scala/sys/process/ProcessImpl$PipeSink of class scala/sys/process/ProcessImpl
  public abstract #14= #4 of #12;         // PipeThread=class scala/sys/process/ProcessImpl$PipeThread of class scala/sys/process/ProcessImpl
  public final #16;                       // class scala/sys/process/processInternal$$anonfun$onInterrupt$1
SourceFile: "ProcessImpl.scala"
BootstrapMethods:
  0: #56 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #44 ()V
      #48 REF_invokeStatic scala/sys/process/ProcessImpl$PipeSink.$anonfun$run$2:()V
      #44 ()V
      #49 1
  1: #211 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #48 REF_invokeStatic scala/sys/process/ProcessImpl$PipeSink.$anonfun$run$2:()V
  ScalaInlineInfo: length = 0x3B (unknown attribute)
   01 00 00 0B 00 2D 00 20 01 00 3D 00 A2 00 00 6C
   00 6D 00 00 5C 00 5D 00 00 79 00 20 00 00 23 00
   20 01 00 11 00 16 00 00 75 00 20 00 00 1F 00 20
   00 00 84 00 85 00 00 13 00 1B 00
  Scala: length = 0x0 (unknown attribute)

