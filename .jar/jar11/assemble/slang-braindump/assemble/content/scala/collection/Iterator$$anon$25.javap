Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/scala/collection/Iterator$$anon$25.class
  Last modified May 29, 2022; size 2089 bytes
  SHA-256 checksum a20e424125f5e6cf20aebabae024a47048d8d74f36a1a08c05ea19a4b8581b44
  Compiled from "Iterator.scala"
public final class scala.collection.Iterator$$anon$25 extends scala.collection.AbstractIterator<java.lang.Object>
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // scala/collection/Iterator$$anon$25
  super_class: #5                         // scala/collection/AbstractIterator
  interfaces: 0, fields: 4, methods: 5, attributes: 6
Constant pool:
   #1 = Utf8               scala/collection/Iterator$$anon$25
   #2 = Class              #1             // scala/collection/Iterator$$anon$25
   #3 = Utf8               Lscala/collection/AbstractIterator<Ljava/lang/Object;>;
   #4 = Utf8               scala/collection/AbstractIterator
   #5 = Class              #4             // scala/collection/AbstractIterator
   #6 = Utf8               Iterator.scala
   #7 = Utf8               scala/collection/Iterator$
   #8 = Class              #7             // scala/collection/Iterator$
   #9 = Utf8               range
  #10 = Utf8               (III)Lscala/collection/Iterator;
  #11 = NameAndType        #9:#10         // range:(III)Lscala/collection/Iterator;
  #12 = Utf8               i
  #13 = Utf8               I
  #14 = Utf8               hasOverflowed
  #15 = Utf8               Z
  #16 = Utf8               end$2
  #17 = Utf8               step$2
  #18 = Utf8               knownSize
  #19 = Utf8               ()I
  #20 = Utf8               scala/math/package$
  #21 = Class              #20            // scala/math/package$
  #22 = Utf8               MODULE$
  #23 = Utf8               Lscala/math/package$;
  #24 = NameAndType        #22:#23        // MODULE$:Lscala/math/package$;
  #25 = Fieldref           #21.#24        // scala/math/package$.MODULE$:Lscala/math/package$;
  #26 = NameAndType        #16:#13        // end$2:I
  #27 = Fieldref           #2.#26         // scala/collection/Iterator$$anon$25.end$2:I
  #28 = NameAndType        #12:#13        // i:I
  #29 = Fieldref           #2.#28         // scala/collection/Iterator$$anon$25.i:I
  #30 = NameAndType        #17:#13        // step$2:I
  #31 = Fieldref           #2.#30         // scala/collection/Iterator$$anon$25.step$2:I
  #32 = Utf8               java/lang/Math
  #33 = Class              #32            // java/lang/Math
  #34 = Utf8               ceil
  #35 = Utf8               (D)D
  #36 = NameAndType        #34:#35        // ceil:(D)D
  #37 = Methodref          #33.#36        // java/lang/Math.ceil:(D)D
  #38 = Integer            2147483647
  #39 = Utf8               this
  #40 = Utf8               Lscala/collection/Iterator$$anon$25;
  #41 = Utf8               hasNext
  #42 = Utf8               ()Z
  #43 = NameAndType        #14:#15        // hasOverflowed:Z
  #44 = Fieldref           #2.#43         // scala/collection/Iterator$$anon$25.hasOverflowed:Z
  #45 = Utf8               next
  #46 = NameAndType        #41:#42        // hasNext:()Z
  #47 = Methodref          #2.#46         // scala/collection/Iterator$$anon$25.hasNext:()Z
  #48 = Utf8               Lscala/collection/Iterator$;
  #49 = NameAndType        #22:#48        // MODULE$:Lscala/collection/Iterator$;
  #50 = Fieldref           #8.#49         // scala/collection/Iterator$.MODULE$:Lscala/collection/Iterator$;
  #51 = Utf8               scala$collection$Iterator$$_empty
  #52 = Utf8               Lscala/collection/Iterator;
  #53 = NameAndType        #51:#52        // scala$collection$Iterator$$_empty:Lscala/collection/Iterator;
  #54 = Fieldref           #8.#53         // scala/collection/Iterator$.scala$collection$Iterator$$_empty:Lscala/collection/Iterator;
  #55 = Utf8               scala/collection/Iterator
  #56 = Class              #55            // scala/collection/Iterator
  #57 = Utf8               ()Ljava/lang/Object;
  #58 = NameAndType        #45:#57        // next:()Ljava/lang/Object;
  #59 = InterfaceMethodref #56.#58        // scala/collection/Iterator.next:()Ljava/lang/Object;
  #60 = Utf8               scala/runtime/BoxesRunTime
  #61 = Class              #60            // scala/runtime/BoxesRunTime
  #62 = Utf8               unboxToInt
  #63 = Utf8               (Ljava/lang/Object;)I
  #64 = NameAndType        #62:#63        // unboxToInt:(Ljava/lang/Object;)I
  #65 = Methodref          #61.#64        // scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
  #66 = Utf8               result
  #67 = Utf8               nextValue
  #68 = NameAndType        #45:#19        // next:()I
  #69 = Methodref          #2.#68         // scala/collection/Iterator$$anon$25.next:()I
  #70 = Utf8               boxToInteger
  #71 = Utf8               (I)Ljava/lang/Integer;
  #72 = NameAndType        #70:#71        // boxToInteger:(I)Ljava/lang/Integer;
  #73 = Methodref          #61.#72        // scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
  #74 = Utf8               <init>
  #75 = Utf8               (III)V
  #76 = Utf8               start$2
  #77 = Utf8               ()V
  #78 = NameAndType        #74:#77        // "<init>":()V
  #79 = Methodref          #5.#78         // scala/collection/AbstractIterator."<init>":()V
  #80 = Utf8               java/lang/IllegalArgumentException
  #81 = Class              #80            // java/lang/IllegalArgumentException
  #82 = Utf8               zero step
  #83 = String             #82            // zero step
  #84 = Utf8               (Ljava/lang/String;)V
  #85 = NameAndType        #74:#84        // "<init>":(Ljava/lang/String;)V
  #86 = Methodref          #81.#85        // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
  #87 = Utf8               Code
  #88 = Utf8               StackMapTable
  #89 = Utf8               LineNumberTable
  #90 = Utf8               LocalVariableTable
  #91 = Utf8               MethodParameters
  #92 = Utf8               InnerClasses
  #93 = Utf8               EnclosingMethod
  #94 = Utf8               Signature
  #95 = Utf8               SourceFile
  #96 = Utf8               ScalaInlineInfo
  #97 = Utf8               Scala
{
  private int i;
    descriptor: I
    flags: (0x0002) ACC_PRIVATE

  private boolean hasOverflowed;
    descriptor: Z
    flags: (0x0002) ACC_PRIVATE

  private final int end$2;
    descriptor: I
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final int step$2;
    descriptor: I
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public int knownSize();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=1
         0: getstatic     #25                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
         3: pop
         4: aload_0
         5: getfield      #27                 // Field end$2:I
         8: i2l
         9: aload_0
        10: getfield      #29                 // Field i:I
        13: i2l
        14: lsub
        15: l2d
        16: aload_0
        17: getfield      #31                 // Field step$2:I
        20: i2d
        21: ddiv
        22: invokestatic  #37                 // Method java/lang/Math.ceil:(D)D
        25: dstore_1
        26: dload_1
        27: iconst_0
        28: i2d
        29: dcmpg
        30: ifge          35
        33: iconst_0
        34: ireturn
        35: dload_1
        36: ldc           #38                 // int 2147483647
        38: i2d
        39: dcmpl
        40: ifle          45
        43: iconst_m1
        44: ireturn
        45: dload_1
        46: d2i
        47: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 35
          locals = [ double ]
        frame_type = 9 /* same */
      LineNumberTable:
        line 1071: 0
        line 1072: 26
        line 1073: 35
        line 1074: 45
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lscala/collection/Iterator$$anon$25;

  public boolean hasNext();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #31                 // Field step$2:I
         4: iconst_0
         5: if_icmple     19
         8: aload_0
         9: getfield      #29                 // Field i:I
        12: aload_0
        13: getfield      #27                 // Field end$2:I
        16: if_icmpge     47
        19: aload_0
        20: getfield      #31                 // Field step$2:I
        23: iconst_0
        24: if_icmpge     38
        27: aload_0
        28: getfield      #29                 // Field i:I
        31: aload_0
        32: getfield      #27                 // Field end$2:I
        35: if_icmple     47
        38: aload_0
        39: getfield      #44                 // Field hasOverflowed:Z
        42: ifne          47
        45: iconst_1
        46: ireturn
        47: iconst_0
        48: ireturn
      StackMapTable: number_of_entries = 3
        frame_type = 19 /* same */
        frame_type = 18 /* same */
        frame_type = 8 /* same */
      LineNumberTable:
        line 1077: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      49     0  this   Lscala/collection/Iterator$$anon$25;

  public int next();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=1
         0: aload_0
         1: invokevirtual #47                 // Method hasNext:()Z
         4: ifeq          67
         7: aload_0
         8: getfield      #29                 // Field i:I
        11: istore_1
        12: aload_0
        13: getfield      #29                 // Field i:I
        16: aload_0
        17: getfield      #31                 // Field step$2:I
        20: iadd
        21: istore_2
        22: aload_0
        23: aload_0
        24: getfield      #31                 // Field step$2:I
        27: iconst_0
        28: if_icmple     35
        31: iconst_1
        32: goto          36
        35: iconst_0
        36: iload_2
        37: aload_0
        38: getfield      #29                 // Field i:I
        41: if_icmpge     48
        44: iconst_1
        45: goto          49
        48: iconst_0
        49: if_icmpne     56
        52: iconst_1
        53: goto          57
        56: iconst_0
        57: putfield      #44                 // Field hasOverflowed:Z
        60: aload_0
        61: iload_2
        62: putfield      #29                 // Field i:I
        65: iload_1
        66: ireturn
        67: getstatic     #50                 // Field scala/collection/Iterator$.MODULE$:Lscala/collection/Iterator$;
        70: pop
        71: getstatic     #54                 // Field scala/collection/Iterator$.scala$collection$Iterator$$_empty:Lscala/collection/Iterator;
        74: invokeinterface #59,  1           // InterfaceMethod scala/collection/Iterator.next:()Ljava/lang/Object;
        79: invokestatic  #65                 // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
        82: ireturn
      StackMapTable: number_of_entries = 7
        frame_type = 255 /* full_frame */
          offset_delta = 35
          locals = [ class scala/collection/Iterator$$anon$25, int, int ]
          stack = [ class scala/collection/Iterator$$anon$25 ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class scala/collection/Iterator$$anon$25, int, int ]
          stack = [ class scala/collection/Iterator$$anon$25, int ]
        frame_type = 255 /* full_frame */
          offset_delta = 11
          locals = [ class scala/collection/Iterator$$anon$25, int, int ]
          stack = [ class scala/collection/Iterator$$anon$25, int ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class scala/collection/Iterator$$anon$25, int, int ]
          stack = [ class scala/collection/Iterator$$anon$25, int, int ]
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class scala/collection/Iterator$$anon$25 ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class scala/collection/Iterator$$anon$25, int, int ]
          stack = [ class scala/collection/Iterator$$anon$25, int ]
        frame_type = 249 /* chop */
          offset_delta = 9
      LineNumberTable:
        line 1080: 0
        line 1081: 7
        line 1082: 12
        line 1083: 22
        line 1084: 60
        line 1085: 65
        line 1087: 67
        line 980: 71
        line 1087: 74
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           12      54     1 result   I
           22      44     2 nextValue   I
            0      83     0  this   Lscala/collection/Iterator$$anon$25;

  public java.lang.Object next();
    descriptor: ()Ljava/lang/Object;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #69                 // Method next:()I
         4: invokestatic  #73                 // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
         7: areturn
      LineNumberTable:
        line 1066: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lscala/collection/Iterator$$anon$25;

  public scala.collection.Iterator$$anon$25(int, int, int);
    descriptor: (III)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=4, args_size=4
         0: aload_0
         1: iload_3
         2: putfield      #27                 // Field end$2:I
         5: aload_0
         6: iload_1
         7: putfield      #31                 // Field step$2:I
        10: aload_0
        11: invokespecial #79                 // Method scala/collection/AbstractIterator."<init>":()V
        14: iload_1
        15: iconst_0
        16: if_icmpne     29
        19: new           #81                 // class java/lang/IllegalArgumentException
        22: dup
        23: ldc           #83                 // String zero step
        25: invokespecial #86                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        28: athrow
        29: aload_0
        30: iload_2
        31: putfield      #29                 // Field i:I
        34: aload_0
        35: iconst_0
        36: putfield      #44                 // Field hasOverflowed:Z
        39: return
      StackMapTable: number_of_entries = 1
        frame_type = 255 /* full_frame */
          offset_delta = 29
          locals = [ class scala/collection/Iterator$$anon$25, int, int, int ]
          stack = []
      LineNumberTable:
        line 1066: 0
        line 1067: 14
        line 1068: 29
        line 1069: 34
        line 1066: 39
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      40     0  this   Lscala/collection/Iterator$$anon$25;
            0      40     1 step$2   I
            0      40     2 start$2   I
            0      40     3 end$2   I
    MethodParameters:
      Name                           Flags
      step$2                         final
      start$2                        final
      end$2                          final
}
InnerClasses:
  public final #2;                        // class scala/collection/Iterator$$anon$25
EnclosingMethod: #8.#11                 // scala.collection.Iterator$.range
Signature: #3                           // Lscala/collection/AbstractIterator<Ljava/lang/Object;>;
SourceFile: "Iterator.scala"
  ScalaInlineInfo: length = 0x1D (unknown attribute)
   01 01 00 05 00 4A 00 4B 01 00 29 00 2A 01 00 12
   00 13 01 00 2D 00 13 01 00 2D 00 39 01
  Scala: length = 0x0 (unknown attribute)

