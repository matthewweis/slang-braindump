Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/concurrent/BatchingExecutor$AbstractBatch.class
  Last modified May 29, 2022; size 3022 bytes
  SHA-256 checksum f8f51ef97f75449c9065ee2fb89012050cb12ba2d28d5e86dd76db8a733e1eb0
  Compiled from "BatchingExecutor.scala"
public abstract class scala.concurrent.BatchingExecutor$AbstractBatch
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #2                          // scala/concurrent/BatchingExecutor$AbstractBatch
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 4, methods: 11, attributes: 4
Constant pool:
    #1 = Utf8               scala/concurrent/BatchingExecutor$AbstractBatch
    #2 = Class              #1            // scala/concurrent/BatchingExecutor$AbstractBatch
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               BatchingExecutor.scala
    #6 = Utf8               scala/concurrent/BatchingExecutor
    #7 = Class              #6            // scala/concurrent/BatchingExecutor
    #8 = Utf8               AbstractBatch
    #9 = Utf8               first
   #10 = Utf8               Ljava/lang/Runnable;
   #11 = Utf8               other
   #12 = Utf8               [Ljava/lang/Runnable;
   #13 = Utf8               size
   #14 = Utf8               I
   #15 = Utf8               $outer
   #16 = Utf8               Lscala/concurrent/BatchingExecutor;
   #17 = Utf8               ()Ljava/lang/Runnable;
   #18 = NameAndType        #9:#10        // first:Ljava/lang/Runnable;
   #19 = Fieldref           #2.#18        // scala/concurrent/BatchingExecutor$AbstractBatch.first:Ljava/lang/Runnable;
   #20 = Utf8               this
   #21 = Utf8               Lscala/concurrent/BatchingExecutor$AbstractBatch;
   #22 = Utf8               first_$eq
   #23 = Utf8               (Ljava/lang/Runnable;)V
   #24 = Utf8               x$1
   #25 = Utf8               ()[Ljava/lang/Runnable;
   #26 = NameAndType        #11:#12       // other:[Ljava/lang/Runnable;
   #27 = Fieldref           #2.#26        // scala/concurrent/BatchingExecutor$AbstractBatch.other:[Ljava/lang/Runnable;
   #28 = Utf8               other_$eq
   #29 = Utf8               ([Ljava/lang/Runnable;)V
   #30 = Utf8               ()I
   #31 = NameAndType        #13:#14       // size:I
   #32 = Fieldref           #2.#31        // scala/concurrent/BatchingExecutor$AbstractBatch.size:I
   #33 = Utf8               size_$eq
   #34 = Utf8               (I)V
   #35 = Utf8               ensureCapacity
   #36 = Utf8               (I)[Ljava/lang/Runnable;
   #37 = Utf8               curSize
   #38 = NameAndType        #11:#25       // other:()[Ljava/lang/Runnable;
   #39 = Methodref          #2.#38        // scala/concurrent/BatchingExecutor$AbstractBatch.other:()[Ljava/lang/Runnable;
   #40 = Utf8               java/lang/StackOverflowError
   #41 = Class              #40           // java/lang/StackOverflowError
   #42 = Utf8               java/lang/StringBuilder
   #43 = Class              #42           // java/lang/StringBuilder
   #44 = Integer            43
   #45 = Utf8               <init>
   #46 = NameAndType        #45:#34       // "<init>":(I)V
   #47 = Methodref          #43.#46       // java/lang/StringBuilder."<init>":(I)V
   #48 = Utf8               Space limit of asynchronous stack reached:
   #49 = String             #48           // Space limit of asynchronous stack reached:
   #50 = Utf8               append
   #51 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
   #52 = NameAndType        #50:#51       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #53 = Methodref          #43.#52       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #54 = Utf8               (I)Ljava/lang/StringBuilder;
   #55 = NameAndType        #50:#54       // append:(I)Ljava/lang/StringBuilder;
   #56 = Methodref          #43.#55       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   #57 = Utf8               toString
   #58 = Utf8               ()Ljava/lang/String;
   #59 = NameAndType        #57:#58       // toString:()Ljava/lang/String;
   #60 = Methodref          #43.#59       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #61 = Utf8               (Ljava/lang/String;)V
   #62 = NameAndType        #45:#61       // "<init>":(Ljava/lang/String;)V
   #63 = Methodref          #41.#62       // java/lang/StackOverflowError."<init>":(Ljava/lang/String;)V
   #64 = Utf8               java/lang/Runnable
   #65 = Class              #64           // java/lang/Runnable
   #66 = Utf8               java/lang/System
   #67 = Class              #66           // java/lang/System
   #68 = Utf8               arraycopy
   #69 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V
   #70 = NameAndType        #68:#69       // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
   #71 = Methodref          #67.#70       // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
   #72 = NameAndType        #28:#29       // other_$eq:([Ljava/lang/Runnable;)V
   #73 = Methodref          #2.#72        // scala/concurrent/BatchingExecutor$AbstractBatch.other_$eq:([Ljava/lang/Runnable;)V
   #74 = Utf8               newLen
   #75 = Utf8               newOther
   #76 = Utf8               curOther
   #77 = Utf8               curLen
   #78 = Class              #12           // "[Ljava/lang/Runnable;"
   #79 = Utf8               push
   #80 = Utf8               r
   #81 = NameAndType        #13:#30       // size:()I
   #82 = Methodref          #2.#81        // scala/concurrent/BatchingExecutor$AbstractBatch.size:()I
   #83 = NameAndType        #35:#36       // ensureCapacity:(I)[Ljava/lang/Runnable;
   #84 = Methodref          #2.#83        // scala/concurrent/BatchingExecutor$AbstractBatch.ensureCapacity:(I)[Ljava/lang/Runnable;
   #85 = NameAndType        #33:#34       // size_$eq:(I)V
   #86 = Methodref          #2.#85        // scala/concurrent/BatchingExecutor$AbstractBatch.size_$eq:(I)V
   #87 = Utf8               sz
   #88 = Utf8               runN
   #89 = Utf8               n
   #90 = NameAndType        #9:#17        // first:()Ljava/lang/Runnable;
   #91 = Methodref          #2.#90        // scala/concurrent/BatchingExecutor$AbstractBatch.first:()Ljava/lang/Runnable;
   #92 = NameAndType        #22:#23       // first_$eq:(Ljava/lang/Runnable;)V
   #93 = Methodref          #2.#92        // scala/concurrent/BatchingExecutor$AbstractBatch.first_$eq:(Ljava/lang/Runnable;)V
   #94 = Utf8               run
   #95 = Utf8               ()V
   #96 = NameAndType        #94:#95       // run:()V
   #97 = InterfaceMethodref #65.#96       // java/lang/Runnable.run:()V
   #98 = Utf8               next
   #99 = Utf8               o
  #100 = Utf8               scala$concurrent$BatchingExecutor$AbstractBatch$$$outer
  #101 = Utf8               ()Lscala/concurrent/BatchingExecutor;
  #102 = NameAndType        #15:#16       // $outer:Lscala/concurrent/BatchingExecutor;
  #103 = Fieldref           #2.#102       // scala/concurrent/BatchingExecutor$AbstractBatch.$outer:Lscala/concurrent/BatchingExecutor;
  #104 = Utf8               (Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
  #105 = NameAndType        #45:#95       // "<init>":()V
  #106 = Methodref          #4.#105       // java/lang/Object."<init>":()V
  #107 = Utf8               Code
  #108 = Utf8               LineNumberTable
  #109 = Utf8               LocalVariableTable
  #110 = Utf8               MethodParameters
  #111 = Utf8               StackMapTable
  #112 = Utf8               InnerClasses
  #113 = Utf8               SourceFile
  #114 = Utf8               ScalaInlineInfo
  #115 = Utf8               Scala
{
  private java.lang.Runnable first;
    descriptor: Ljava/lang/Runnable;
    flags: (0x0002) ACC_PRIVATE

  private java.lang.Runnable[] other;
    descriptor: [Ljava/lang/Runnable;
    flags: (0x0002) ACC_PRIVATE

  private int size;
    descriptor: I
    flags: (0x0002) ACC_PRIVATE

  public final scala.concurrent.BatchingExecutor $outer;
    descriptor: Lscala/concurrent/BatchingExecutor;
    flags: (0x1011) ACC_PUBLIC, ACC_FINAL, ACC_SYNTHETIC

  public final java.lang.Runnable first();
    descriptor: ()Ljava/lang/Runnable;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #19                 // Field first:Ljava/lang/Runnable;
         4: areturn
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;

  public final void first_$eq(java.lang.Runnable);
    descriptor: (Ljava/lang/Runnable;)V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #19                 // Field first:Ljava/lang/Runnable;
         5: return
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0       6     1   x$1   Ljava/lang/Runnable;
    MethodParameters:
      Name                           Flags
      x$1                            final

  public final java.lang.Runnable[] other();
    descriptor: ()[Ljava/lang/Runnable;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #27                 // Field other:[Ljava/lang/Runnable;
         4: areturn
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;

  public final void other_$eq(java.lang.Runnable[]);
    descriptor: ([Ljava/lang/Runnable;)V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #27                 // Field other:[Ljava/lang/Runnable;
         5: return
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0       6     1   x$1   [Ljava/lang/Runnable;
    MethodParameters:
      Name                           Flags
      x$1                            final

  public final int size();
    descriptor: ()I
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #32                 // Field size:I
         4: ireturn
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;

  public final void size_$eq(int);
    descriptor: (I)V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: putfield      #32                 // Field size:I
         5: return
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0       6     1   x$1   I
    MethodParameters:
      Name                           Flags
      x$1                            final

  private final java.lang.Runnable[] ensureCapacity(int);
    descriptor: (I)[Ljava/lang/Runnable;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=5, locals=6, args_size=2
         0: aload_0
         1: invokevirtual #39                 // Method other:()[Ljava/lang/Runnable;
         4: astore_2
         5: aload_2
         6: arraylength
         7: istore_3
         8: iload_1
         9: iload_3
        10: if_icmpgt     15
        13: aload_2
        14: areturn
        15: iload_3
        16: iconst_0
        17: if_icmpne     24
        20: iconst_4
        21: goto          27
        24: iload_3
        25: iconst_1
        26: ishl
        27: istore        4
        29: iload         4
        31: iload_3
        32: if_icmpgt     64
        35: new           #41                 // class java/lang/StackOverflowError
        38: dup
        39: new           #43                 // class java/lang/StringBuilder
        42: dup
        43: ldc           #44                 // int 43
        45: invokespecial #47                 // Method java/lang/StringBuilder."<init>":(I)V
        48: ldc           #49                 // String Space limit of asynchronous stack reached:
        50: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        53: iload_3
        54: invokevirtual #56                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        57: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        60: invokespecial #63                 // Method java/lang/StackOverflowError."<init>":(Ljava/lang/String;)V
        63: athrow
        64: iload         4
        66: anewarray     #65                 // class java/lang/Runnable
        69: astore        5
        71: aload_2
        72: iconst_0
        73: aload         5
        75: iconst_0
        76: iload_3
        77: invokestatic  #71                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
        80: aload_0
        81: aload         5
        83: invokevirtual #73                 // Method other_$eq:([Ljava/lang/Runnable;)V
        86: aload         5
        88: areturn
      StackMapTable: number_of_entries = 4
        frame_type = 253 /* append */
          offset_delta = 15
          locals = [ class "[Ljava/lang/Runnable;", int ]
        frame_type = 8 /* same */
        frame_type = 66 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 252 /* append */
          offset_delta = 36
          locals = [ int ]
      LineNumberTable:
        line 103: 0
        line 104: 5
        line 105: 8
        line 107: 15
        line 109: 29
        line 110: 64
        line 111: 71
        line 112: 80
        line 113: 86
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           29      59     4 newLen   I
           71      17     5 newOther   [Ljava/lang/Runnable;
            5      83     2 curOther   [Ljava/lang/Runnable;
            8      80     3 curLen   I
            0      89     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0      89     1 curSize   I
    MethodParameters:
      Name                           Flags
      curSize                        final

  public final void push(java.lang.Runnable);
    descriptor: (Ljava/lang/Runnable;)V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: invokevirtual #82                 // Method size:()I
         4: istore_2
         5: iload_2
         6: iconst_0
         7: if_icmpne     18
        10: aload_0
        11: aload_1
        12: putfield      #19                 // Field first:Ljava/lang/Runnable;
        15: goto          28
        18: aload_0
        19: iload_2
        20: invokespecial #84                 // Method ensureCapacity:(I)[Ljava/lang/Runnable;
        23: iload_2
        24: iconst_1
        25: isub
        26: aload_1
        27: aastore
        28: aload_0
        29: iload_2
        30: iconst_1
        31: iadd
        32: invokevirtual #86                 // Method size_$eq:(I)V
        35: return
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 18
          locals = [ int ]
        frame_type = 9 /* same */
      LineNumberTable:
        line 118: 0
        line 119: 5
        line 100: 10
        line 122: 18
        line 123: 28
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            5      30     2    sz   I
            0      36     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0      36     1     r   Ljava/lang/Runnable;
    MethodParameters:
      Name                           Flags
      r                              final

  public final void runN(int);
    descriptor: (I)V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=6, args_size=2
         0: iload_1
         1: iconst_0
         2: if_icmple     103
         5: aload_0
         6: invokevirtual #82                 // Method size:()I
         9: istore_2
        10: iload_2
        11: tableswitch   { // 0 to 1
                       0: 32
                       1: 33
                 default: 61
            }
        32: return
        33: aload_0
        34: invokevirtual #91                 // Method first:()Ljava/lang/Runnable;
        37: astore_3
        38: aload_0
        39: aconst_null
        40: invokevirtual #93                 // Method first_$eq:(Ljava/lang/Runnable;)V
        43: aload_0
        44: iconst_0
        45: invokevirtual #86                 // Method size_$eq:(I)V
        48: aload_3
        49: invokeinterface #97,  1           // InterfaceMethod java/lang/Runnable.run:()V
        54: iload_1
        55: iconst_1
        56: isub
        57: istore_1
        58: goto          0
        61: aload_0
        62: invokevirtual #39                 // Method other:()[Ljava/lang/Runnable;
        65: astore        4
        67: aload         4
        69: iload_2
        70: iconst_2
        71: isub
        72: aaload
        73: astore        5
        75: aload         4
        77: iload_2
        78: iconst_2
        79: isub
        80: aconst_null
        81: aastore
        82: aload_0
        83: iload_2
        84: iconst_1
        85: isub
        86: invokevirtual #86                 // Method size_$eq:(I)V
        89: aload         5
        91: invokeinterface #97,  1           // InterfaceMethod java/lang/Runnable.run:()V
        96: iload_1
        97: iconst_1
        98: isub
        99: istore_1
       100: goto          0
       103: return
      StackMapTable: number_of_entries = 5
        frame_type = 0 /* same */
        frame_type = 252 /* append */
          offset_delta = 31
          locals = [ int ]
        frame_type = 0 /* same */
        frame_type = 27 /* same */
        frame_type = 250 /* chop */
          offset_delta = 41
      LineNumberTable:
        line 127: 0
        line 128: 5
        line 129: 32
        line 131: 33
        line 132: 38
        line 133: 43
        line 134: 48
        line 135: 54
        line 137: 61
        line 138: 67
        line 139: 75
        line 140: 82
        line 141: 89
        line 142: 96
        line 127: 103
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           38      23     3  next   Ljava/lang/Runnable;
           67      36     4     o   [Ljava/lang/Runnable;
           75      28     5  next   Ljava/lang/Runnable;
            0     104     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0     104     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.concurrent.BatchingExecutor scala$concurrent$BatchingExecutor$AbstractBatch$$$outer();
    descriptor: ()Lscala/concurrent/BatchingExecutor;
    flags: (0x1001) ACC_PUBLIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #103                // Field $outer:Lscala/concurrent/BatchingExecutor;
         4: areturn
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;

  public scala.concurrent.BatchingExecutor$AbstractBatch(scala.concurrent.BatchingExecutor, java.lang.Runnable, java.lang.Runnable[], int);
    descriptor: (Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=5, args_size=5
         0: aload_0
         1: aload_2
         2: putfield      #19                 // Field first:Ljava/lang/Runnable;
         5: aload_0
         6: aload_3
         7: putfield      #27                 // Field other:[Ljava/lang/Runnable;
        10: aload_0
        11: iload         4
        13: putfield      #32                 // Field size:I
        16: aload_1
        17: ifnonnull     22
        20: aconst_null
        21: athrow
        22: aload_0
        23: aload_1
        24: putfield      #103                // Field $outer:Lscala/concurrent/BatchingExecutor;
        27: aload_0
        28: invokespecial #106                // Method java/lang/Object."<init>":()V
        31: return
      StackMapTable: number_of_entries = 1
        frame_type = 22 /* same */
      LineNumberTable:
        line 100: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      32     0  this   Lscala/concurrent/BatchingExecutor$AbstractBatch;
            0      32     1 $outer   Lscala/concurrent/BatchingExecutor;
            0      32     2 first   Ljava/lang/Runnable;
            0      32     3 other   [Ljava/lang/Runnable;
            0      32     4  size   I
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      first                          final
      other                          final
      size                           final
}
InnerClasses:
  private abstract #8= #2 of #7;          // AbstractBatch=class scala/concurrent/BatchingExecutor$AbstractBatch of class scala/concurrent/BatchingExecutor
SourceFile: "BatchingExecutor.scala"
  ScalaInlineInfo: length = 0x3B (unknown attribute)
   01 00 00 0B 00 2D 00 68 01 00 23 00 24 01 00 09
   00 11 01 00 16 00 17 01 00 0B 00 19 01 00 1C 00
   1D 01 00 4F 00 17 01 00 58 00 22 01 00 64 00 65
   01 00 0D 00 1E 01 00 21 00 22 01
  Scala: length = 0x0 (unknown attribute)

