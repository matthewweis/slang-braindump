Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.class
  Last modified May 29, 2022; size 3064 bytes
  SHA-256 checksum 960ada8e1278053de6418883db7213b7e985446407b2460a6f06bd27c8227e51
  Compiled from "ByteBufferSerializer.java"
public class com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<java.nio.ByteBuffer>
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #20                         // com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer
  super_class: #21                        // com/fasterxml/jackson/databind/ser/std/StdScalarSerializer
  interfaces: 0, fields: 0, methods: 4, attributes: 2
Constant pool:
    #1 = Class              #61           // java/nio/ByteBuffer
    #2 = Methodref          #21.#62       // com/fasterxml/jackson/databind/ser/std/StdScalarSerializer."<init>":(Ljava/lang/Class;)V
    #3 = Methodref          #1.#63        // java/nio/ByteBuffer.hasArray:()Z
    #4 = Methodref          #1.#64        // java/nio/ByteBuffer.position:()I
    #5 = Methodref          #1.#65        // java/nio/ByteBuffer.array:()[B
    #6 = Methodref          #1.#66        // java/nio/ByteBuffer.arrayOffset:()I
    #7 = Methodref          #1.#67        // java/nio/ByteBuffer.limit:()I
    #8 = Methodref          #68.#69       // com/fasterxml/jackson/core/JsonGenerator.writeBinary:([BII)V
    #9 = Methodref          #1.#70        // java/nio/ByteBuffer.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;
   #10 = Methodref          #1.#71        // java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
   #11 = Class              #72           // com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream
   #12 = Methodref          #11.#73       // com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream."<init>":(Ljava/nio/ByteBuffer;)V
   #13 = Methodref          #1.#74        // java/nio/ByteBuffer.remaining:()I
   #14 = Methodref          #68.#75       // com/fasterxml/jackson/core/JsonGenerator.writeBinary:(Ljava/io/InputStream;I)I
   #15 = Methodref          #76.#77       // java/io/InputStream.close:()V
   #16 = InterfaceMethodref #78.#79       // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.expectArrayFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
   #17 = Fieldref           #80.#81       // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.INTEGER:Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;
   #18 = InterfaceMethodref #82.#83       // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.itemsFormat:(Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;)V
   #19 = Methodref          #20.#84       // com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.serialize:(Ljava/nio/ByteBuffer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
   #20 = Class              #85           // com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer
   #21 = Class              #86           // com/fasterxml/jackson/databind/ser/std/StdScalarSerializer
   #22 = Utf8               <init>
   #23 = Utf8               ()V
   #24 = Utf8               Code
   #25 = Utf8               LineNumberTable
   #26 = Utf8               LocalVariableTable
   #27 = Utf8               this
   #28 = Utf8               Lcom/fasterxml/jackson/databind/ser/std/ByteBufferSerializer;
   #29 = Utf8               serialize
   #30 = Utf8               (Ljava/nio/ByteBuffer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
   #31 = Utf8               pos
   #32 = Utf8               I
   #33 = Utf8               bbuf
   #34 = Utf8               Ljava/nio/ByteBuffer;
   #35 = Utf8               gen
   #36 = Utf8               Lcom/fasterxml/jackson/core/JsonGenerator;
   #37 = Utf8               provider
   #38 = Utf8               Lcom/fasterxml/jackson/databind/SerializerProvider;
   #39 = Utf8               copy
   #40 = Utf8               in
   #41 = Utf8               Ljava/io/InputStream;
   #42 = Utf8               StackMapTable
   #43 = Class              #61           // java/nio/ByteBuffer
   #44 = Utf8               Exceptions
   #45 = Class              #87           // java/io/IOException
   #46 = Utf8               acceptJsonFormatVisitor
   #47 = Utf8               (Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper;Lcom/fasterxml/jackson/databind/JavaType;)V
   #48 = Utf8               visitor
   #49 = Utf8               Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper;
   #50 = Utf8               typeHint
   #51 = Utf8               Lcom/fasterxml/jackson/databind/JavaType;
   #52 = Utf8               v2
   #53 = Utf8               Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
   #54 = Class              #88           // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor
   #55 = Class              #89           // com/fasterxml/jackson/databind/JsonMappingException
   #56 = Utf8               (Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
   #57 = Utf8               Signature
   #58 = Utf8               Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/nio/ByteBuffer;>;
   #59 = Utf8               SourceFile
   #60 = Utf8               ByteBufferSerializer.java
   #61 = Utf8               java/nio/ByteBuffer
   #62 = NameAndType        #22:#90       // "<init>":(Ljava/lang/Class;)V
   #63 = NameAndType        #91:#92       // hasArray:()Z
   #64 = NameAndType        #93:#94       // position:()I
   #65 = NameAndType        #95:#96       // array:()[B
   #66 = NameAndType        #97:#94       // arrayOffset:()I
   #67 = NameAndType        #98:#94       // limit:()I
   #68 = Class              #99           // com/fasterxml/jackson/core/JsonGenerator
   #69 = NameAndType        #100:#101     // writeBinary:([BII)V
   #70 = NameAndType        #102:#103     // asReadOnlyBuffer:()Ljava/nio/ByteBuffer;
   #71 = NameAndType        #104:#105     // rewind:()Ljava/nio/Buffer;
   #72 = Utf8               com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream
   #73 = NameAndType        #22:#106      // "<init>":(Ljava/nio/ByteBuffer;)V
   #74 = NameAndType        #107:#94      // remaining:()I
   #75 = NameAndType        #100:#108     // writeBinary:(Ljava/io/InputStream;I)I
   #76 = Class              #109          // java/io/InputStream
   #77 = NameAndType        #110:#23      // close:()V
   #78 = Class              #111          // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper
   #79 = NameAndType        #112:#113     // expectArrayFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
   #80 = Class              #114          // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes
   #81 = NameAndType        #115:#116     // INTEGER:Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;
   #82 = Class              #88           // com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor
   #83 = NameAndType        #117:#118     // itemsFormat:(Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;)V
   #84 = NameAndType        #29:#30       // serialize:(Ljava/nio/ByteBuffer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
   #85 = Utf8               com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer
   #86 = Utf8               com/fasterxml/jackson/databind/ser/std/StdScalarSerializer
   #87 = Utf8               java/io/IOException
   #88 = Utf8               com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor
   #89 = Utf8               com/fasterxml/jackson/databind/JsonMappingException
   #90 = Utf8               (Ljava/lang/Class;)V
   #91 = Utf8               hasArray
   #92 = Utf8               ()Z
   #93 = Utf8               position
   #94 = Utf8               ()I
   #95 = Utf8               array
   #96 = Utf8               ()[B
   #97 = Utf8               arrayOffset
   #98 = Utf8               limit
   #99 = Utf8               com/fasterxml/jackson/core/JsonGenerator
  #100 = Utf8               writeBinary
  #101 = Utf8               ([BII)V
  #102 = Utf8               asReadOnlyBuffer
  #103 = Utf8               ()Ljava/nio/ByteBuffer;
  #104 = Utf8               rewind
  #105 = Utf8               ()Ljava/nio/Buffer;
  #106 = Utf8               (Ljava/nio/ByteBuffer;)V
  #107 = Utf8               remaining
  #108 = Utf8               (Ljava/io/InputStream;I)I
  #109 = Utf8               java/io/InputStream
  #110 = Utf8               close
  #111 = Utf8               com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper
  #112 = Utf8               expectArrayFormat
  #113 = Utf8               (Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
  #114 = Utf8               com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes
  #115 = Utf8               INTEGER
  #116 = Utf8               Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;
  #117 = Utf8               itemsFormat
  #118 = Utf8               (Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;)V
{
  public com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: ldc           #1                  // class java/nio/ByteBuffer
         3: invokespecial #2                  // Method com/fasterxml/jackson/databind/ser/std/StdScalarSerializer."<init>":(Ljava/lang/Class;)V
         6: return
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lcom/fasterxml/jackson/databind/ser/std/ByteBufferSerializer;

  public void serialize(java.nio.ByteBuffer, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
    descriptor: (Ljava/nio/ByteBuffer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=6, args_size=4
         0: aload_1
         1: invokevirtual #3                  // Method java/nio/ByteBuffer.hasArray:()Z
         4: ifeq          36
         7: aload_1
         8: invokevirtual #4                  // Method java/nio/ByteBuffer.position:()I
        11: istore        4
        13: aload_2
        14: aload_1
        15: invokevirtual #5                  // Method java/nio/ByteBuffer.array:()[B
        18: aload_1
        19: invokevirtual #6                  // Method java/nio/ByteBuffer.arrayOffset:()I
        22: iload         4
        24: iadd
        25: aload_1
        26: invokevirtual #7                  // Method java/nio/ByteBuffer.limit:()I
        29: iload         4
        31: isub
        32: invokevirtual #8                  // Method com/fasterxml/jackson/core/JsonGenerator.writeBinary:([BII)V
        35: return
        36: aload_1
        37: invokevirtual #9                  // Method java/nio/ByteBuffer.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;
        40: astore        4
        42: aload         4
        44: invokevirtual #4                  // Method java/nio/ByteBuffer.position:()I
        47: ifle          56
        50: aload         4
        52: invokevirtual #10                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
        55: pop
        56: new           #11                 // class com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream
        59: dup
        60: aload         4
        62: invokespecial #12                 // Method com/fasterxml/jackson/databind/util/ByteBufferBackedInputStream."<init>":(Ljava/nio/ByteBuffer;)V
        65: astore        5
        67: aload_2
        68: aload         5
        70: aload         4
        72: invokevirtual #13                 // Method java/nio/ByteBuffer.remaining:()I
        75: invokevirtual #14                 // Method com/fasterxml/jackson/core/JsonGenerator.writeBinary:(Ljava/io/InputStream;I)I
        78: pop
        79: aload         5
        81: invokevirtual #15                 // Method java/io/InputStream.close:()V
        84: return
      LineNumberTable:
        line 22: 0
        line 23: 7
        line 24: 13
        line 25: 35
        line 29: 36
        line 30: 42
        line 31: 50
        line 33: 56
        line 34: 67
        line 35: 79
        line 36: 84
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           13      23     4   pos   I
            0      85     0  this   Lcom/fasterxml/jackson/databind/ser/std/ByteBufferSerializer;
            0      85     1  bbuf   Ljava/nio/ByteBuffer;
            0      85     2   gen   Lcom/fasterxml/jackson/core/JsonGenerator;
            0      85     3 provider   Lcom/fasterxml/jackson/databind/SerializerProvider;
           42      43     4  copy   Ljava/nio/ByteBuffer;
           67      18     5    in   Ljava/io/InputStream;
      StackMapTable: number_of_entries = 2
        frame_type = 36 /* same */
        frame_type = 252 /* append */
          offset_delta = 19
          locals = [ class java/nio/ByteBuffer ]
    Exceptions:
      throws java.io.IOException

  public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException;
    descriptor: (Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper;Lcom/fasterxml/jackson/databind/JavaType;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=3
         0: aload_1
         1: aload_2
         2: invokeinterface #16,  2           // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.expectArrayFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
         7: astore_3
         8: aload_3
         9: ifnull        21
        12: aload_3
        13: getstatic     #17                 // Field com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.INTEGER:Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;
        16: invokeinterface #18,  2           // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.itemsFormat:(Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;)V
        21: return
      LineNumberTable:
        line 43: 0
        line 44: 8
        line 45: 12
        line 47: 21
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      22     0  this   Lcom/fasterxml/jackson/databind/ser/std/ByteBufferSerializer;
            0      22     1 visitor   Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper;
            0      22     2 typeHint   Lcom/fasterxml/jackson/databind/JavaType;
            8      14     3    v2   Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 21
          locals = [ class com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor ]
    Exceptions:
      throws com.fasterxml.jackson.databind.JsonMappingException

  public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
    descriptor: (Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: aload_1
         2: checkcast     #1                  // class java/nio/ByteBuffer
         5: aload_2
         6: aload_3
         7: invokevirtual #19                 // Method serialize:(Ljava/nio/ByteBuffer;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
        10: return
      LineNumberTable:
        line 13: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      11     0  this   Lcom/fasterxml/jackson/databind/ser/std/ByteBufferSerializer;
    Exceptions:
      throws java.io.IOException
}
Signature: #58                          // Lcom/fasterxml/jackson/databind/ser/std/StdScalarSerializer<Ljava/nio/ByteBuffer;>;
SourceFile: "ByteBufferSerializer.java"
