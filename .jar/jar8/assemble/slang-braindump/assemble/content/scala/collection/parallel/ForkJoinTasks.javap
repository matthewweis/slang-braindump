Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/collection/parallel/ForkJoinTasks.class
  Last modified May 29, 2022; size 5925 bytes
  SHA-256 checksum 744145c14259021a0811201af9a32fb35ed5b47944c4753aaa3af74d3c06ad6a
  Compiled from "Tasks.scala"
public interface scala.collection.parallel.ForkJoinTasks extends scala.collection.parallel.Tasks,scala.collection.parallel.HavingForkJoinPool
  minor version: 0
  major version: 52
  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT
  this_class: #2                          // scala/collection/parallel/ForkJoinTasks
  super_class: #4                         // java/lang/Object
  interfaces: 2, fields: 0, methods: 14, attributes: 6
Constant pool:
    #1 = Utf8               scala/collection/parallel/ForkJoinTasks
    #2 = Class              #1            // scala/collection/parallel/ForkJoinTasks
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               scala/collection/parallel/Tasks
    #6 = Class              #5            // scala/collection/parallel/Tasks
    #7 = Utf8               scala/collection/parallel/HavingForkJoinPool
    #8 = Class              #7            // scala/collection/parallel/HavingForkJoinPool
    #9 = Utf8               Tasks.scala
   #10 = Utf8               Lscala/reflect/ScalaSignature;
   #11 = Utf8               bytes
   #12 = Utf8               \u0006\u0005\u0005%aaB\t\u0013!\u0003\r\t!\u0007\u0005\u0006K\u0001!\tA\n\u0004\bU\u0001\u0001\n1!\u0001,\u0011\u0015)#\u0001\"\u0001\'\u0011\u0015I%\u0001\"\u0001\'\u0011\u0015Q%\u0001\"\u0001\'\u0011\u0015Y%\u0001\"\u0001M\u0011\u0015\u0001\u0006A\"\u0005R\u0011\u0015i\u0006\u0001\"\u0001_\u0011\u001d\u0011\u0007A1A\u0007\u0002yCQa\u0019\u0001\u0005\u0002\u0011DQ\u0001\u001d\u0001\u0005\u0002EDQ!\u001f\u0001\u0005\u0002i<QA \n\t\u0002}4a!\u0005\n\t\u0002\u0005\u0005\u0001bBA\u0002\u001d\u0011\u0005\u0011Q\u0001\u0005\n\u0003\u000fq\u0001R1A\u0005\u0002y\u0013QBR8sW*{\u0017N\u001c+bg.\u001c(BA\n\u0015\u0003!\u0001\u0018M]1mY\u0016d\'BA\u000b\u0017\u0003)\u0019w\u000e\u001c7fGRLwN\u001c\u0006\u0002/\u0005)1oY1mC\u000e\u00011\u0003\u0002\u0001\u001b=\t\u0002\"a\u0007\u000f\u000e\u0003YI!!\b\f\u0003\r\u0005s\u0017PU3g!\ty\u0002%D\u0001\u0013\u0013\t\t#CA\u0003UCN\\7\u000f\u0005\u0002 G%\u0011AE\u0005\u0002\u0013\u0011\u00064\u0018N\\4G_J\\\'j\\5o!>|G.\u0001\u0004%S:LG\u000f\n\u000b\u0002OA\u00111\u0004K\u0005\u0003SY\u0011A!\u00168ji\nqaI\u0013+Xe\u0006\u0004\b/\u001a3UCN\\Wc\u0001\u0017>\u000fN\u0019!!L\u001c\u0011\u00059*T\"A\u0018\u000b\u0005A\n\u0014AC2p]\u000e,(O]3oi*\u0011!gM\u0001\u0005kRLGNC\u00015\u0003\u0011Q\u0017M^1\n\u0005Yz#a\u0004*fGV\u00148/\u001b<f\u0003\u000e$\u0018n\u001c8\u0011\taJ4HR\u0007\u0002\u0001%\u0011!\b\t\u0002\f/J\f\u0007\u000f]3e)\u0006\u001c8\u000e\u0005\u0002={1\u0001A!\u0002 \u0003\u0005\u0004y$!\u0001*\u0012\u0005\u0001\u001b\u0005CA\u000eB\u0013\t\u0011eCA\u0004O_RD\u0017N\\4\u0011\u0005m!\u0015BA#\u0017\u0005\r\te.\u001f\t\u0003y\u001d#a\u0001\u0013\u0002\u0005\u0006\u0004y$A\u0001+q\u0003\u0015\u0019H/\u0019:u\u0003\u0011\u0019\u0018P\\2\u0002\u0013Q\u0014\u0018pQ1oG\u0016dG#A\'\u0011\u0005mq\u0015BA(\u0017\u0005\u001d\u0011un\u001c7fC:\faB\\3x/J\f\u0007\u000f]3e)\u0006\u001c8.F\u0002S+^#\"a\u0015-\u0011\ta\u0012AK\u0016\t\u0003yU#QAP\u0004C\u0002}\u0002\"\u0001P,\u0005\u000b!;!\u0019A \t\u000be;\u0001\u0019\u0001.\u0002\u0003\t\u0004BaH.U-&\u0011AL\u0005\u0002\u0005)\u0006\u001c8.\u0001\u0007g_J\\\'j\\5o!>|G.F\u0001`!\tq\u0003-\u0003\u0002b_\taai\u001c:l\u0015>Lg\u000eU8pY\u0006YQM\u001c<je>tW.\u001a8u\u0003\u001d)\u00070Z2vi\u0016,2!\u001a6p)\t17\u000eE\u0002\u001cO&L!\u0001\u001b\f\u0003\u0013\u0019+hn\u0019;j_:\u0004\u0004C\u0001\u001fk\t\u0015q$B1\u0001@\u0011\u0015a\'\u00021\u0001n\u0003\u0011!\u0018m]6\u0011\t}Y\u0016N\u001c\t\u0003y=$Q\u0001\u0013\u0006C\u0002}\nA#\u001a=fGV$X-\u00118e/\u0006LGOU3tk2$Xc\u0001:uqR\u00111/\u001e\t\u0003yQ$QAP\u0006C\u0002}BQ\u0001\\\u0006A\u0002Y\u0004BaH.toB\u0011A\b\u001f\u0003\u0006\u0011.\u0011\raP\u0001\u0011a\u0006\u0014\u0018\r\u001c7fY&\u001cX\u000eT3wK2,\u0012a\u001f\t\u00037qL!! \f\u0003\u0007%sG/A\u0007G_J\\\'j\\5o)\u0006\u001c8n\u001d\t\u0003?9\u0019\"A\u0004\u000e\u0002\rqJg.\u001b;?)\u0005y\u0018a\u00053fM\u0006,H\u000e\u001e$pe.Tu.\u001b8Q_>d\u0007
   #13 = Utf8               java/lang/invoke/MethodHandles$Lookup
   #14 = Class              #13           // java/lang/invoke/MethodHandles$Lookup
   #15 = Utf8               java/lang/invoke/MethodHandles
   #16 = Class              #15           // java/lang/invoke/MethodHandles
   #17 = Utf8               Lookup
   #18 = Utf8               scala/collection/parallel/ForkJoinTasks$FJTWrappedTask
   #19 = Class              #18           // scala/collection/parallel/ForkJoinTasks$FJTWrappedTask
   #20 = Utf8               FJTWrappedTask
   #21 = Utf8               defaultForkJoinPool
   #22 = Utf8               ()Ljava/util/concurrent/ForkJoinPool;
   #23 = Utf8               scala/collection/parallel/ForkJoinTasks$
   #24 = Class              #23           // scala/collection/parallel/ForkJoinTasks$
   #25 = Utf8               MODULE$
   #26 = Utf8               Lscala/collection/parallel/ForkJoinTasks$;
   #27 = NameAndType        #25:#26       // MODULE$:Lscala/collection/parallel/ForkJoinTasks$;
   #28 = Fieldref           #24.#27       // scala/collection/parallel/ForkJoinTasks$.MODULE$:Lscala/collection/parallel/ForkJoinTasks$;
   #29 = NameAndType        #21:#22       // defaultForkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
   #30 = Methodref          #24.#29       // scala/collection/parallel/ForkJoinTasks$.defaultForkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
   #31 = Utf8               newWrappedTask
   #32 = Utf8               (Lscala/collection/parallel/Task;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
   #33 = Utf8               <R:Ljava/lang/Object;Tp:Ljava/lang/Object;>(Lscala/collection/parallel/Task<TR;TTp;>;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask<TR;TTp;>;
   #34 = Utf8               b
   #35 = Utf8               forkJoinPool$
   #36 = Utf8               (Lscala/collection/parallel/ForkJoinTasks;)Ljava/util/concurrent/ForkJoinPool;
   #37 = Utf8               $this
   #38 = Utf8               forkJoinPool
   #39 = NameAndType        #38:#22       // forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
   #40 = InterfaceMethodref #2.#39        // scala/collection/parallel/ForkJoinTasks.forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
   #41 = Utf8               Lscala/collection/parallel/ForkJoinTasks;
   #42 = Utf8               environment
   #43 = NameAndType        #42:#22       // environment:()Ljava/util/concurrent/ForkJoinPool;
   #44 = InterfaceMethodref #2.#43        // scala/collection/parallel/ForkJoinTasks.environment:()Ljava/util/concurrent/ForkJoinPool;
   #45 = Utf8               this
   #46 = Utf8               execute$
   #47 = Utf8               (Lscala/collection/parallel/ForkJoinTasks;Lscala/collection/parallel/Task;)Lscala/Function0;
   #48 = Utf8               task
   #49 = Utf8               execute
   #50 = Utf8               (Lscala/collection/parallel/Task;)Lscala/Function0;
   #51 = NameAndType        #49:#50       // execute:(Lscala/collection/parallel/Task;)Lscala/Function0;
   #52 = InterfaceMethodref #2.#51        // scala/collection/parallel/ForkJoinTasks.execute:(Lscala/collection/parallel/Task;)Lscala/Function0;
   #53 = Utf8               Lscala/collection/parallel/Task;
   #54 = Utf8               <R:Ljava/lang/Object;Tp:Ljava/lang/Object;>(Lscala/collection/parallel/Task<TR;TTp;>;)Lscala/Function0<TR;>;
   #55 = NameAndType        #31:#32       // newWrappedTask:(Lscala/collection/parallel/Task;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
   #56 = InterfaceMethodref #2.#55        // scala/collection/parallel/ForkJoinTasks.newWrappedTask:(Lscala/collection/parallel/Task;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
   #57 = Utf8               java/lang/Thread
   #58 = Class              #57           // java/lang/Thread
   #59 = Utf8               currentThread
   #60 = Utf8               ()Ljava/lang/Thread;
   #61 = NameAndType        #59:#60       // currentThread:()Ljava/lang/Thread;
   #62 = Methodref          #58.#61       // java/lang/Thread.currentThread:()Ljava/lang/Thread;
   #63 = Utf8               java/util/concurrent/ForkJoinWorkerThread
   #64 = Class              #63           // java/util/concurrent/ForkJoinWorkerThread
   #65 = Utf8               getPool
   #66 = NameAndType        #65:#22       // getPool:()Ljava/util/concurrent/ForkJoinPool;
   #67 = Methodref          #64.#66       // java/util/concurrent/ForkJoinWorkerThread.getPool:()Ljava/util/concurrent/ForkJoinPool;
   #68 = Utf8               java/util/concurrent/ForkJoinTask
   #69 = Class              #68           // java/util/concurrent/ForkJoinTask
   #70 = Utf8               fork
   #71 = Utf8               ()Ljava/util/concurrent/ForkJoinTask;
   #72 = NameAndType        #70:#71       // fork:()Ljava/util/concurrent/ForkJoinTask;
   #73 = Methodref          #69.#72       // java/util/concurrent/ForkJoinTask.fork:()Ljava/util/concurrent/ForkJoinTask;
   #74 = Utf8               java/util/concurrent/ForkJoinPool
   #75 = Class              #74           // java/util/concurrent/ForkJoinPool
   #76 = Utf8               (Ljava/util/concurrent/ForkJoinTask;)V
   #77 = NameAndType        #49:#76       // execute:(Ljava/util/concurrent/ForkJoinTask;)V
   #78 = Methodref          #75.#77       // java/util/concurrent/ForkJoinPool.execute:(Ljava/util/concurrent/ForkJoinTask;)V
   #79 = Utf8               scala/runtime/BoxedUnit
   #80 = Class              #79           // scala/runtime/BoxedUnit
   #81 = Utf8               UNIT
   #82 = Utf8               Lscala/runtime/BoxedUnit;
   #83 = NameAndType        #81:#82       // UNIT:Lscala/runtime/BoxedUnit;
   #84 = Fieldref           #80.#83       // scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   #85 = Utf8               ()Ljava/lang/Object;
   #86 = MethodType         #85           //  ()Ljava/lang/Object;
   #87 = Utf8               $anonfun$execute$1
   #88 = Utf8               (Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
   #89 = NameAndType        #87:#88       // $anonfun$execute$1:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
   #90 = InterfaceMethodref #2.#89        // scala/collection/parallel/ForkJoinTasks.$anonfun$execute$1:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
   #91 = MethodHandle       6:#90         // REF_invokeStatic scala/collection/parallel/ForkJoinTasks.$anonfun$execute$1:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
   #92 = Integer            1
   #93 = Utf8               java/lang/invoke/LambdaMetafactory
   #94 = Class              #93           // java/lang/invoke/LambdaMetafactory
   #95 = Utf8               altMetafactory
   #96 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #97 = NameAndType        #95:#96       // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #98 = Methodref          #94.#97       // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #99 = MethodHandle       6:#98         // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #100 = Utf8               apply
  #101 = Utf8               (Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Lscala/Function0;
  #102 = NameAndType        #100:#101     // apply:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Lscala/Function0;
  #103 = InvokeDynamic      #0:#102       // #0:apply:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Lscala/Function0;
  #104 = Utf8               fjtask
  #105 = Utf8               Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
  #106 = Utf8               scala/collection/parallel/Task
  #107 = Class              #106          // scala/collection/parallel/Task
  #108 = Utf8               executeAndWaitResult$
  #109 = Utf8               (Lscala/collection/parallel/ForkJoinTasks;Lscala/collection/parallel/Task;)Ljava/lang/Object;
  #110 = Utf8               executeAndWaitResult
  #111 = Utf8               (Lscala/collection/parallel/Task;)Ljava/lang/Object;
  #112 = NameAndType        #110:#111     // executeAndWaitResult:(Lscala/collection/parallel/Task;)Ljava/lang/Object;
  #113 = InterfaceMethodref #2.#112       // scala/collection/parallel/ForkJoinTasks.executeAndWaitResult:(Lscala/collection/parallel/Task;)Ljava/lang/Object;
  #114 = Utf8               <R:Ljava/lang/Object;Tp:Ljava/lang/Object;>(Lscala/collection/parallel/Task<TR;TTp;>;)TR;
  #115 = Utf8               sync
  #116 = Utf8               ()V
  #117 = NameAndType        #115:#116     // sync:()V
  #118 = InterfaceMethodref #19.#117      // scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.sync:()V
  #119 = Utf8               body
  #120 = Utf8               ()Lscala/collection/parallel/Task;
  #121 = NameAndType        #119:#120     // body:()Lscala/collection/parallel/Task;
  #122 = InterfaceMethodref #19.#121      // scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.body:()Lscala/collection/parallel/Task;
  #123 = Utf8               forwardThrowable
  #124 = NameAndType        #123:#116     // forwardThrowable:()V
  #125 = InterfaceMethodref #107.#124     // scala/collection/parallel/Task.forwardThrowable:()V
  #126 = Utf8               result
  #127 = NameAndType        #126:#85      // result:()Ljava/lang/Object;
  #128 = InterfaceMethodref #107.#127     // scala/collection/parallel/Task.result:()Ljava/lang/Object;
  #129 = Utf8               parallelismLevel$
  #130 = Utf8               (Lscala/collection/parallel/ForkJoinTasks;)I
  #131 = Utf8               parallelismLevel
  #132 = Utf8               ()I
  #133 = NameAndType        #131:#132     // parallelismLevel:()I
  #134 = InterfaceMethodref #2.#133       // scala/collection/parallel/ForkJoinTasks.parallelismLevel:()I
  #135 = Utf8               getParallelism
  #136 = NameAndType        #135:#132     // getParallelism:()I
  #137 = Methodref          #75.#136      // java/util/concurrent/ForkJoinPool.getParallelism:()I
  #138 = Utf8               fjtask$1
  #139 = Utf8               $init$
  #140 = Utf8               (Lscala/collection/parallel/ForkJoinTasks;)V
  #141 = Utf8               $deserializeLambda$
  #142 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #143 = Utf8               scala/runtime/LambdaDeserialize
  #144 = Class              #143          // scala/runtime/LambdaDeserialize
  #145 = Utf8               bootstrap
  #146 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #147 = NameAndType        #145:#146     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #148 = Methodref          #144.#147     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #149 = MethodHandle       6:#148        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #150 = Utf8               lambdaDeserialize
  #151 = NameAndType        #150:#142     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #152 = InvokeDynamic      #1:#151       // #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #153 = Utf8               Code
  #154 = Utf8               Signature
  #155 = Utf8               MethodParameters
  #156 = Utf8               LineNumberTable
  #157 = Utf8               LocalVariableTable
  #158 = Utf8               StackMapTable
  #159 = Utf8               InnerClasses
  #160 = Utf8               SourceFile
  #161 = Utf8               RuntimeVisibleAnnotations
  #162 = Utf8               BootstrapMethods
  #163 = Utf8               ScalaInlineInfo
  #164 = Utf8               ScalaSig
{
  public static java.util.concurrent.ForkJoinPool defaultForkJoinPool();
    descriptor: ()Ljava/util/concurrent/ForkJoinPool;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #28                 // Field scala/collection/parallel/ForkJoinTasks$.MODULE$:Lscala/collection/parallel/ForkJoinTasks$;
         3: invokevirtual #30                 // Method scala/collection/parallel/ForkJoinTasks$.defaultForkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
         6: areturn

  public abstract <R extends java.lang.Object, Tp extends java.lang.Object> scala.collection.parallel.ForkJoinTasks$FJTWrappedTask<R, Tp> newWrappedTask(scala.collection.parallel.Task<R, Tp>);
    descriptor: (Lscala/collection/parallel/Task;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #33                          // <R:Ljava/lang/Object;Tp:Ljava/lang/Object;>(Lscala/collection/parallel/Task<TR;TTp;>;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask<TR;TTp;>;
    MethodParameters:
      Name                           Flags
      b                              final

  public static java.util.concurrent.ForkJoinPool forkJoinPool$(scala.collection.parallel.ForkJoinTasks);
    descriptor: (Lscala/collection/parallel/ForkJoinTasks;)Ljava/util/concurrent/ForkJoinPool;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #40                 // InterfaceMethod forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
         4: areturn
      LineNumberTable:
        line 252: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0 $this   Lscala/collection/parallel/ForkJoinTasks;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic

  public default java.util.concurrent.ForkJoinPool forkJoinPool();
    descriptor: ()Ljava/util/concurrent/ForkJoinPool;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #44,  1           // InterfaceMethod environment:()Ljava/util/concurrent/ForkJoinPool;
         6: areturn
      LineNumberTable:
        line 252: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lscala/collection/parallel/ForkJoinTasks;

  public abstract java.util.concurrent.ForkJoinPool environment();
    descriptor: ()Ljava/util/concurrent/ForkJoinPool;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public static scala.Function0 execute$(scala.collection.parallel.ForkJoinTasks, scala.collection.parallel.Task);
    descriptor: (Lscala/collection/parallel/ForkJoinTasks;Lscala/collection/parallel/Task;)Lscala/Function0;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokespecial #52                 // InterfaceMethod execute:(Lscala/collection/parallel/Task;)Lscala/Function0;
         5: areturn
      LineNumberTable:
        line 259: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/collection/parallel/ForkJoinTasks;
            0       6     1  task   Lscala/collection/parallel/Task;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      task                           final

  public default <R extends java.lang.Object, Tp extends java.lang.Object> scala.Function0<R> execute(scala.collection.parallel.Task<R, Tp>);
    descriptor: (Lscala/collection/parallel/Task;)Lscala/Function0;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=6, args_size=2
         0: aload_0
         1: aload_1
         2: invokeinterface #56,  2           // InterfaceMethod newWrappedTask:(Lscala/collection/parallel/Task;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
         7: astore_3
         8: invokestatic  #62                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
        11: astore        4
        13: aload         4
        15: instanceof    #64                 // class java/util/concurrent/ForkJoinWorkerThread
        18: ifeq          56
        21: aload         4
        23: checkcast     #64                 // class java/util/concurrent/ForkJoinWorkerThread
        26: astore        5
        28: aload         5
        30: invokevirtual #67                 // Method java/util/concurrent/ForkJoinWorkerThread.getPool:()Ljava/util/concurrent/ForkJoinPool;
        33: aload_0
        34: invokeinterface #40,  1           // InterfaceMethod forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
        39: if_acmpne     53
        42: aload_3
        43: checkcast     #69                 // class java/util/concurrent/ForkJoinTask
        46: invokevirtual #73                 // Method java/util/concurrent/ForkJoinTask.fork:()Ljava/util/concurrent/ForkJoinTask;
        49: astore_2
        50: goto          79
        53: goto          59
        56: goto          59
        59: aload_0
        60: invokeinterface #40,  1           // InterfaceMethod forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
        65: aload_3
        66: checkcast     #69                 // class java/util/concurrent/ForkJoinTask
        69: invokevirtual #78                 // Method java/util/concurrent/ForkJoinPool.execute:(Ljava/util/concurrent/ForkJoinTask;)V
        72: getstatic     #84                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
        75: astore_2
        76: goto          79
        79: aload_2
        80: pop
        81: aload_3
        82: invokedynamic #103,  0            // InvokeDynamic #0:apply:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Lscala/Function0;
        87: areturn
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 53
          locals = [ class scala/collection/parallel/ForkJoinTasks, class scala/collection/parallel/Task, top, class scala/collection/parallel/ForkJoinTasks$FJTWrappedTask, class java/lang/Thread, class java/util/concurrent/ForkJoinWorkerThread ]
          stack = []
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 19
          locals = [ class scala/collection/parallel/ForkJoinTasks, class scala/collection/parallel/Task, class java/lang/Object, class scala/collection/parallel/ForkJoinTasks$FJTWrappedTask, class java/lang/Thread ]
          stack = []
      LineNumberTable:
        line 260: 0
        line 262: 8
        line 263: 13
        line 264: 59
        line 262: 79
        line 266: 81
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            8      79     3 fjtask   Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
            0      88     0  this   Lscala/collection/parallel/ForkJoinTasks;
            0      88     1  task   Lscala/collection/parallel/Task;
    Signature: #54                          // <R:Ljava/lang/Object;Tp:Ljava/lang/Object;>(Lscala/collection/parallel/Task<TR;TTp;>;)Lscala/Function0<TR;>;
    MethodParameters:
      Name                           Flags
      task                           final

  public static java.lang.Object executeAndWaitResult$(scala.collection.parallel.ForkJoinTasks, scala.collection.parallel.Task);
    descriptor: (Lscala/collection/parallel/ForkJoinTasks;Lscala/collection/parallel/Task;)Ljava/lang/Object;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokespecial #113                // InterfaceMethod executeAndWaitResult:(Lscala/collection/parallel/Task;)Ljava/lang/Object;
         5: areturn
      LineNumberTable:
        line 280: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/collection/parallel/ForkJoinTasks;
            0       6     1  task   Lscala/collection/parallel/Task;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      task                           final

  public default <R extends java.lang.Object, Tp extends java.lang.Object> R executeAndWaitResult(scala.collection.parallel.Task<R, Tp>);
    descriptor: (Lscala/collection/parallel/Task;)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=6, args_size=2
         0: aload_0
         1: aload_1
         2: invokeinterface #56,  2           // InterfaceMethod newWrappedTask:(Lscala/collection/parallel/Task;)Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
         7: astore_3
         8: invokestatic  #62                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
        11: astore        4
        13: aload         4
        15: instanceof    #64                 // class java/util/concurrent/ForkJoinWorkerThread
        18: ifeq          56
        21: aload         4
        23: checkcast     #64                 // class java/util/concurrent/ForkJoinWorkerThread
        26: astore        5
        28: aload         5
        30: invokevirtual #67                 // Method java/util/concurrent/ForkJoinWorkerThread.getPool:()Ljava/util/concurrent/ForkJoinPool;
        33: aload_0
        34: invokeinterface #40,  1           // InterfaceMethod forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
        39: if_acmpne     53
        42: aload_3
        43: checkcast     #69                 // class java/util/concurrent/ForkJoinTask
        46: invokevirtual #73                 // Method java/util/concurrent/ForkJoinTask.fork:()Ljava/util/concurrent/ForkJoinTask;
        49: astore_2
        50: goto          79
        53: goto          59
        56: goto          59
        59: aload_0
        60: invokeinterface #40,  1           // InterfaceMethod forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
        65: aload_3
        66: checkcast     #69                 // class java/util/concurrent/ForkJoinTask
        69: invokevirtual #78                 // Method java/util/concurrent/ForkJoinPool.execute:(Ljava/util/concurrent/ForkJoinTask;)V
        72: getstatic     #84                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
        75: astore_2
        76: goto          79
        79: aload_2
        80: pop
        81: aload_3
        82: invokeinterface #118,  1          // InterfaceMethod scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.sync:()V
        87: aload_3
        88: invokeinterface #122,  1          // InterfaceMethod scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.body:()Lscala/collection/parallel/Task;
        93: invokeinterface #125,  1          // InterfaceMethod scala/collection/parallel/Task.forwardThrowable:()V
        98: aload_3
        99: invokeinterface #122,  1          // InterfaceMethod scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.body:()Lscala/collection/parallel/Task;
       104: invokeinterface #128,  1          // InterfaceMethod scala/collection/parallel/Task.result:()Ljava/lang/Object;
       109: areturn
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 53
          locals = [ class scala/collection/parallel/ForkJoinTasks, class scala/collection/parallel/Task, top, class scala/collection/parallel/ForkJoinTasks$FJTWrappedTask, class java/lang/Thread, class java/util/concurrent/ForkJoinWorkerThread ]
          stack = []
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 19
          locals = [ class scala/collection/parallel/ForkJoinTasks, class scala/collection/parallel/Task, class java/lang/Object, class scala/collection/parallel/ForkJoinTasks$FJTWrappedTask, class java/lang/Thread ]
          stack = []
      LineNumberTable:
        line 281: 0
        line 283: 8
        line 284: 13
        line 285: 59
        line 283: 79
        line 287: 81
        line 289: 87
        line 290: 98
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            8     101     3 fjtask   Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
            0     110     0  this   Lscala/collection/parallel/ForkJoinTasks;
            0     110     1  task   Lscala/collection/parallel/Task;
    Signature: #114                         // <R:Ljava/lang/Object;Tp:Ljava/lang/Object;>(Lscala/collection/parallel/Task<TR;TTp;>;)TR;
    MethodParameters:
      Name                           Flags
      task                           final

  public static int parallelismLevel$(scala.collection.parallel.ForkJoinTasks);
    descriptor: (Lscala/collection/parallel/ForkJoinTasks;)I
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #134                // InterfaceMethod parallelismLevel:()I
         4: ireturn
      LineNumberTable:
        line 293: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0 $this   Lscala/collection/parallel/ForkJoinTasks;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic

  public default int parallelismLevel();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #40,  1           // InterfaceMethod forkJoinPool:()Ljava/util/concurrent/ForkJoinPool;
         6: invokevirtual #137                // Method java/util/concurrent/ForkJoinPool.getParallelism:()I
         9: ireturn
      LineNumberTable:
        line 293: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lscala/collection/parallel/ForkJoinTasks;

  public static java.lang.Object $anonfun$execute$1(scala.collection.parallel.ForkJoinTasks$FJTWrappedTask);
    descriptor: (Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #118,  1          // InterfaceMethod scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.sync:()V
         6: aload_0
         7: invokeinterface #122,  1          // InterfaceMethod scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.body:()Lscala/collection/parallel/Task;
        12: invokeinterface #125,  1          // InterfaceMethod scala/collection/parallel/Task.forwardThrowable:()V
        17: aload_0
        18: invokeinterface #122,  1          // InterfaceMethod scala/collection/parallel/ForkJoinTasks$FJTWrappedTask.body:()Lscala/collection/parallel/Task;
        23: invokeinterface #128,  1          // InterfaceMethod scala/collection/parallel/Task.result:()Ljava/lang/Object;
        28: areturn
      LineNumberTable:
        line 267: 0
        line 268: 6
        line 269: 17
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      29     0 fjtask$1   Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;
    MethodParameters:
      Name                           Flags
      fjtask$1                       final

  public static void $init$(scala.collection.parallel.ForkJoinTasks);
    descriptor: (Lscala/collection/parallel/ForkJoinTasks;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 239: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0 $this   Lscala/collection/parallel/ForkJoinTasks;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #152,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #17= #14 of #16;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  public #20= #19 of #2;                  // FJTWrappedTask=class scala/collection/parallel/ForkJoinTasks$FJTWrappedTask of class scala/collection/parallel/ForkJoinTasks
SourceFile: "Tasks.scala"
RuntimeVisibleAnnotations:
  0: #10(#11=s#12)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\u0005%aaB\t\u0013!\u0003\r\t!\u0007\u0005\u0006K\u0001!\tA\n\u0004\bU\u0001\u0001\n1!\u0001,\u0011\u0015)#\u0001\"\u0001\'\u0011\u0015I%\u0001\"\u0001\'\u0011\u0015Q%\u0001\"\u0001\'\u0011\u0015Y%\u0001\"\u0001M\u0011\u0015\u0001\u0006A\"\u0005R\u0011\u0015i\u0006\u0001\"\u0001_\u0011\u001d\u0011\u0007A1A\u0007\u0002yCQa\u0019\u0001\u0005\u0002\u0011DQ\u0001\u001d\u0001\u0005\u0002EDQ!\u001f\u0001\u0005\u0002i<QA \n\t\u0002}4a!\u0005\n\t\u0002\u0005\u0005\u0001bBA\u0002\u001d\u0011\u0005\u0011Q\u0001\u0005\n\u0003\u000fq\u0001R1A\u0005\u0002y\u0013QBR8sW*{\u0017N\u001c+bg.\u001c(BA\n\u0015\u0003!\u0001\u0018M]1mY\u0016d\'BA\u000b\u0017\u0003)\u0019w\u000e\u001c7fGRLwN\u001c\u0006\u0002/\u0005)1oY1mC\u000e\u00011\u0003\u0002\u0001\u001b=\t\u0002\"a\u0007\u000f\u000e\u0003YI!!\b\f\u0003\r\u0005s\u0017PU3g!\ty\u0002%D\u0001\u0013\u0013\t\t#CA\u0003UCN\\7\u000f\u0005\u0002 G%\u0011AE\u0005\u0002\u0013\u0011\u00064\u0018N\\4G_J\\\'j\\5o!>|G.\u0001\u0004%S:LG\u000f\n\u000b\u0002OA\u00111\u0004K\u0005\u0003SY\u0011A!\u00168ji\nqaI\u0013+Xe\u0006\u0004\b/\u001a3UCN\\Wc\u0001\u0017>\u000fN\u0019!!L\u001c\u0011\u00059*T\"A\u0018\u000b\u0005A\n\u0014AC2p]\u000e,(O]3oi*\u0011!gM\u0001\u0005kRLGNC\u00015\u0003\u0011Q\u0017M^1\n\u0005Yz#a\u0004*fGV\u00148/\u001b<f\u0003\u000e$\u0018n\u001c8\u0011\taJ4HR\u0007\u0002\u0001%\u0011!\b\t\u0002\f/J\f\u0007\u000f]3e)\u0006\u001c8\u000e\u0005\u0002={1\u0001A!\u0002 \u0003\u0005\u0004y$!\u0001*\u0012\u0005\u0001\u001b\u0005CA\u000eB\u0013\t\u0011eCA\u0004O_RD\u0017N\\4\u0011\u0005m!\u0015BA#\u0017\u0005\r\te.\u001f\t\u0003y\u001d#a\u0001\u0013\u0002\u0005\u0006\u0004y$A\u0001+q\u0003\u0015\u0019H/\u0019:u\u0003\u0011\u0019\u0018P\\2\u0002\u0013Q\u0014\u0018pQ1oG\u0016dG#A\'\u0011\u0005mq\u0015BA(\u0017\u0005\u001d\u0011un\u001c7fC:\faB\\3x/J\f\u0007\u000f]3e)\u0006\u001c8.F\u0002S+^#\"a\u0015-\u0011\ta\u0012AK\u0016\t\u0003yU#QAP\u0004C\u0002}\u0002\"\u0001P,\u0005\u000b!;!\u0019A \t\u000be;\u0001\u0019\u0001.\u0002\u0003\t\u0004BaH.U-&\u0011AL\u0005\u0002\u0005)\u0006\u001c8.\u0001\u0007g_J\\\'j\\5o!>|G.F\u0001`!\tq\u0003-\u0003\u0002b_\taai\u001c:l\u0015>Lg\u000eU8pY\u0006YQM\u001c<je>tW.\u001a8u\u0003\u001d)\u00070Z2vi\u0016,2!\u001a6p)\t17\u000eE\u0002\u001cO&L!\u0001\u001b\f\u0003\u0013\u0019+hn\u0019;j_:\u0004\u0004C\u0001\u001fk\t\u0015q$B1\u0001@\u0011\u0015a\'\u00021\u0001n\u0003\u0011!\u0018m]6\u0011\t}Y\u0016N\u001c\t\u0003y=$Q\u0001\u0013\u0006C\u0002}\nA#\u001a=fGV$X-\u00118e/\u0006LGOU3tk2$Xc\u0001:uqR\u00111/\u001e\t\u0003yQ$QAP\u0006C\u0002}BQ\u0001\\\u0006A\u0002Y\u0004BaH.toB\u0011A\b\u001f\u0003\u0006\u0011.\u0011\raP\u0001\u0011a\u0006\u0014\u0018\r\u001c7fY&\u001cX\u000eT3wK2,\u0012a\u001f\t\u00037qL!! \f\u0003\u0007%sG/A\u0007G_J\\\'j\\5o)\u0006\u001c8n\u001d\t\u0003?9\u0019\"A\u0004\u000e\u0002\rqJg.\u001b;?)\u0005y\u0018a\u00053fM\u0006,H\u000e\u001e$pe.Tu.\u001b8Q_>d\u0007"
    )
BootstrapMethods:
  0: #99 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #86 ()Ljava/lang/Object;
      #91 REF_invokeStatic scala/collection/parallel/ForkJoinTasks.$anonfun$execute$1:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
      #86 ()Ljava/lang/Object;
      #92 1
  1: #149 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #91 REF_invokeStatic scala/collection/parallel/ForkJoinTasks.$anonfun$execute$1:(Lscala/collection/parallel/ForkJoinTasks$FJTWrappedTask;)Ljava/lang/Object;
  ScalaInlineInfo: length = 0x40 (unknown attribute)
   01 00 00 0C 00 57 00 58 01 00 8B 00 8C 01 00 2A
   00 16 00 00 31 00 32 00 00 2E 00 2F 01 00 6E 00
   6F 00 00 6C 00 6D 01 00 26 00 16 00 00 23 00 24
   01 00 1F 00 20 00 00 83 00 84 00 00 81 00 82 01

  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
