Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/coursier/paths/CachePath.class
  Last modified May 29, 2022; size 6039 bytes
  SHA-256 checksum e8dd2cd728bb55737c61a2dbc646cf452aa95e5a12e691764a0c5d44a1f6dd38
  Compiled from "CachePath.java"
public class coursier.paths.CachePath
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // coursier/paths/CachePath
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 13, attributes: 1
Constant pool:
    #1 = Utf8               coursier/paths/CachePath
    #2 = Class              #1            // coursier/paths/CachePath
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               CachePath.java
    #6 = Utf8               internedStrings
    #7 = Utf8               Ljava/util/concurrent/ConcurrentHashMap;
    #8 = Utf8               Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
    #9 = Utf8               <init>
   #10 = Utf8               ()V
   #11 = NameAndType        #9:#10        // "<init>":()V
   #12 = Methodref          #4.#11        // java/lang/Object."<init>":()V
   #13 = Utf8               escape
   #14 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
   #15 = Utf8               java/lang/StringBuilder
   #16 = Class              #15           // java/lang/StringBuilder
   #17 = Methodref          #16.#11       // java/lang/StringBuilder."<init>":()V
   #18 = Utf8               java/lang/String
   #19 = Class              #18           // java/lang/String
   #20 = Utf8               toCharArray
   #21 = Utf8               ()[C
   #22 = NameAndType        #20:#21       // toCharArray:()[C
   #23 = Methodref          #19.#22       // java/lang/String.toCharArray:()[C
   #24 = Utf8               [C
   #25 = Class              #24           // "[C"
   #26 = Utf8               isUnsafe
   #27 = Utf8               (C)Z
   #28 = NameAndType        #26:#27       // isUnsafe:(C)Z
   #29 = Methodref          #2.#28        // coursier/paths/CachePath.isUnsafe:(C)Z
   #30 = Utf8               append
   #31 = Utf8               (C)Ljava/lang/StringBuilder;
   #32 = NameAndType        #30:#31       // append:(C)Ljava/lang/StringBuilder;
   #33 = Methodref          #16.#32       // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
   #34 = Utf8               toHex
   #35 = Utf8               (I)C
   #36 = NameAndType        #34:#35       // toHex:(I)C
   #37 = Methodref          #2.#36        // coursier/paths/CachePath.toHex:(I)C
   #38 = Utf8               toString
   #39 = Utf8               ()Ljava/lang/String;
   #40 = NameAndType        #38:#39       // toString:()Ljava/lang/String;
   #41 = Methodref          #16.#40       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #42 = Utf8                %$&+,:;=?@<>#%
   #43 = String             #42           //  %$&+,:;=?@<>#%
   #44 = Utf8               indexOf
   #45 = Utf8               (I)I
   #46 = NameAndType        #44:#45       // indexOf:(I)I
   #47 = Methodref          #19.#46       // java/lang/String.indexOf:(I)I
   #48 = Utf8               localFile
   #49 = Utf8               (Ljava/lang/String;Ljava/io/File;Ljava/lang/String;Z)Ljava/io/File;
   #50 = Utf8               java/net/MalformedURLException
   #51 = Class              #50           // java/net/MalformedURLException
   #52 = Utf8               java/net/URISyntaxException
   #53 = Class              #52           // java/net/URISyntaxException
   #54 = Utf8               file:/
   #55 = String             #54           // file:/
   #56 = Utf8               startsWith
   #57 = Utf8               (Ljava/lang/String;)Z
   #58 = NameAndType        #56:#57       // startsWith:(Ljava/lang/String;)Z
   #59 = Methodref          #19.#58       // java/lang/String.startsWith:(Ljava/lang/String;)Z
   #60 = Utf8               java/net/URI
   #61 = Class              #60           // java/net/URI
   #62 = Utf8               (Ljava/lang/String;)V
   #63 = NameAndType        #9:#62        // "<init>":(Ljava/lang/String;)V
   #64 = Methodref          #61.#63       // java/net/URI."<init>":(Ljava/lang/String;)V
   #65 = Utf8               java/nio/file/Paths
   #66 = Class              #65           // java/nio/file/Paths
   #67 = Utf8               get
   #68 = Utf8               (Ljava/net/URI;)Ljava/nio/file/Path;
   #69 = NameAndType        #67:#68       // get:(Ljava/net/URI;)Ljava/nio/file/Path;
   #70 = Methodref          #66.#69       // java/nio/file/Paths.get:(Ljava/net/URI;)Ljava/nio/file/Path;
   #71 = Utf8               java/nio/file/Path
   #72 = Class              #71           // java/nio/file/Path
   #73 = Utf8               toFile
   #74 = Utf8               ()Ljava/io/File;
   #75 = NameAndType        #73:#74       // toFile:()Ljava/io/File;
   #76 = InterfaceMethodref #72.#75       // java/nio/file/Path.toFile:()Ljava/io/File;
   #77 = Utf8               file:///
   #78 = String             #77           // file:///
   #79 = Utf8               java/io/File
   #80 = Class              #79           // java/io/File
   #81 = Utf8               file://
   #82 = String             #81           // file://
   #83 = Utf8               length
   #84 = Utf8               ()I
   #85 = NameAndType        #83:#84       // length:()I
   #86 = Methodref          #19.#85       // java/lang/String.length:()I
   #87 = Utf8               substring
   #88 = Utf8               (I)Ljava/lang/String;
   #89 = NameAndType        #87:#88       // substring:(I)Ljava/lang/String;
   #90 = Methodref          #19.#89       // java/lang/String.substring:(I)Ljava/lang/String;
   #91 = Methodref          #80.#63       // java/io/File."<init>":(Ljava/lang/String;)V
   #92 = Utf8               file:
   #93 = String             #92           // file:
   #94 = Utf8               :
   #95 = String             #94           // :
   #96 = Utf8               split
   #97 = Utf8               (Ljava/lang/String;I)[Ljava/lang/String;
   #98 = NameAndType        #96:#97       // split:(Ljava/lang/String;I)[Ljava/lang/String;
   #99 = Methodref          #19.#98       // java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
  #100 = Utf8               No protocol found in URL
  #101 = String             #100          // No protocol found in URL
  #102 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #103 = NameAndType        #30:#102      // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #104 = Methodref          #16.#103      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #105 = Methodref          #51.#63       // java/net/MalformedURLException."<init>":(Ljava/lang/String;)V
  #106 = Utf8               [Ljava/lang/String;
  #107 = Class              #106          // "[Ljava/lang/String;"
  #108 = Utf8               ///
  #109 = String             #108          // ///
  #110 = Utf8               /
  #111 = String             #110          // /
  #112 = Utf8               URL
  #113 = String             #112          // URL
  #114 = Utf8                doesn\'t contain an absolute path
  #115 = String             #114          //  doesn\'t contain an absolute path
  #116 = Utf8               endsWith
  #117 = NameAndType        #116:#57      // endsWith:(Ljava/lang/String;)Z
  #118 = Methodref          #19.#117      // java/lang/String.endsWith:(Ljava/lang/String;)Z
  #119 = Utf8               .directory
  #120 = String             #119          // .directory
  #121 = Utf8
  #122 = String             #121          //
  #123 = Utf8               @
  #124 = String             #123          // @
  #125 = NameAndType        #13:#14       // escape:(Ljava/lang/String;)Ljava/lang/String;
  #126 = Methodref          #2.#125       // coursier/paths/CachePath.escape:(Ljava/lang/String;)Ljava/lang/String;
  #127 = Utf8               (Ljava/io/File;Ljava/lang/String;)V
  #128 = NameAndType        #9:#127       // "<init>":(Ljava/io/File;Ljava/lang/String;)V
  #129 = Methodref          #80.#128      // java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
  #130 = Utf8               temporaryFile
  #131 = Utf8               (Ljava/io/File;)Ljava/io/File;
  #132 = Utf8               getParentFile
  #133 = NameAndType        #132:#74      // getParentFile:()Ljava/io/File;
  #134 = Methodref          #80.#133      // java/io/File.getParentFile:()Ljava/io/File;
  #135 = Utf8               getName
  #136 = NameAndType        #135:#39      // getName:()Ljava/lang/String;
  #137 = Methodref          #80.#136      // java/io/File.getName:()Ljava/lang/String;
  #138 = Utf8               .
  #139 = String             #138          // .
  #140 = Utf8               .part
  #141 = String             #140          // .part
  #142 = Utf8               lockFile
  #143 = Utf8               (Ljava/nio/file/Path;)Ljava/nio/file/Path;
  #144 = Utf8               getParent
  #145 = Utf8               ()Ljava/nio/file/Path;
  #146 = NameAndType        #144:#145     // getParent:()Ljava/nio/file/Path;
  #147 = InterfaceMethodref #72.#146      // java/nio/file/Path.getParent:()Ljava/nio/file/Path;
  #148 = Utf8               getFileName
  #149 = NameAndType        #148:#145     // getFileName:()Ljava/nio/file/Path;
  #150 = InterfaceMethodref #72.#149      // java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
  #151 = InterfaceMethodref #72.#40       // java/nio/file/Path.toString:()Ljava/lang/String;
  #152 = Utf8               .lock
  #153 = String             #152          // .lock
  #154 = Utf8               resolve
  #155 = Utf8               (Ljava/lang/String;)Ljava/nio/file/Path;
  #156 = NameAndType        #154:#155     // resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
  #157 = InterfaceMethodref #72.#156      // java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
  #158 = Utf8               defaultCacheDirectory
  #159 = Utf8               java/io/IOException
  #160 = Class              #159          // java/io/IOException
  #161 = Utf8               coursier/paths/CoursierPaths
  #162 = Class              #161          // coursier/paths/CoursierPaths
  #163 = Utf8               cacheDirectory
  #164 = NameAndType        #163:#74      // cacheDirectory:()Ljava/io/File;
  #165 = Methodref          #162.#164     // coursier/paths/CoursierPaths.cacheDirectory:()Ljava/io/File;
  #166 = Utf8               lockFor
  #167 = Utf8               (Ljava/nio/file/Path;)Ljava/lang/Object;
  #168 = Utf8               coursier-jvm-lock-
  #169 = String             #168          // coursier-jvm-lock-
  #170 = NameAndType        #6:#7         // internedStrings:Ljava/util/concurrent/ConcurrentHashMap;
  #171 = Fieldref           #2.#170       // coursier/paths/CachePath.internedStrings:Ljava/util/concurrent/ConcurrentHashMap;
  #172 = Utf8               java/util/concurrent/ConcurrentHashMap
  #173 = Class              #172          // java/util/concurrent/ConcurrentHashMap
  #174 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #175 = NameAndType        #67:#174      // get:(Ljava/lang/Object;)Ljava/lang/Object;
  #176 = Methodref          #173.#175     // java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
  #177 = Utf8               intern
  #178 = NameAndType        #177:#39      // intern:()Ljava/lang/String;
  #179 = Methodref          #19.#178      // java/lang/String.intern:()Ljava/lang/String;
  #180 = Utf8               putIfAbsent
  #181 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #182 = NameAndType        #180:#181     // putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #183 = Methodref          #173.#182     // java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #184 = Utf8               withStructureLock
  #185 = Utf8               (Ljava/io/File;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
  #186 = Utf8               <V:Ljava/lang/Object;>(Ljava/io/File;Ljava/util/concurrent/Callable<TV;>;)TV;
  #187 = Utf8               java/lang/Exception
  #188 = Class              #187          // java/lang/Exception
  #189 = Utf8               toPath
  #190 = NameAndType        #189:#145     // toPath:()Ljava/nio/file/Path;
  #191 = Methodref          #80.#190      // java/io/File.toPath:()Ljava/nio/file/Path;
  #192 = NameAndType        #166:#167     // lockFor:(Ljava/nio/file/Path;)Ljava/lang/Object;
  #193 = Methodref          #2.#192       // coursier/paths/CachePath.lockFor:(Ljava/nio/file/Path;)Ljava/lang/Object;
  #194 = Utf8               .structure.lock
  #195 = String             #194          // .structure.lock
  #196 = Utf8               coursier/paths/Util
  #197 = Class              #196          // coursier/paths/Util
  #198 = Utf8               createDirectories
  #199 = Utf8               (Ljava/nio/file/Path;)V
  #200 = NameAndType        #198:#199     // createDirectories:(Ljava/nio/file/Path;)V
  #201 = Methodref          #197.#200     // coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
  #202 = Utf8               java/io/FileOutputStream
  #203 = Class              #202          // java/io/FileOutputStream
  #204 = Utf8               (Ljava/io/File;)V
  #205 = NameAndType        #9:#204       // "<init>":(Ljava/io/File;)V
  #206 = Methodref          #203.#205     // java/io/FileOutputStream."<init>":(Ljava/io/File;)V
  #207 = Utf8               getChannel
  #208 = Utf8               ()Ljava/nio/channels/FileChannel;
  #209 = NameAndType        #207:#208     // getChannel:()Ljava/nio/channels/FileChannel;
  #210 = Methodref          #203.#209     // java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;
  #211 = Utf8               java/nio/channels/FileChannel
  #212 = Class              #211          // java/nio/channels/FileChannel
  #213 = Utf8               lock
  #214 = Utf8               ()Ljava/nio/channels/FileLock;
  #215 = NameAndType        #213:#214     // lock:()Ljava/nio/channels/FileLock;
  #216 = Methodref          #212.#215     // java/nio/channels/FileChannel.lock:()Ljava/nio/channels/FileLock;
  #217 = Utf8               java/util/concurrent/Callable
  #218 = Class              #217          // java/util/concurrent/Callable
  #219 = Utf8               call
  #220 = Utf8               ()Ljava/lang/Object;
  #221 = NameAndType        #219:#220     // call:()Ljava/lang/Object;
  #222 = InterfaceMethodref #218.#221     // java/util/concurrent/Callable.call:()Ljava/lang/Object;
  #223 = Utf8               java/nio/channels/FileLock
  #224 = Class              #223          // java/nio/channels/FileLock
  #225 = Utf8               release
  #226 = NameAndType        #225:#10      // release:()V
  #227 = Methodref          #224.#226     // java/nio/channels/FileLock.release:()V
  #228 = Utf8               close
  #229 = NameAndType        #228:#10      // close:()V
  #230 = Methodref          #203.#229     // java/io/FileOutputStream.close:()V
  #231 = Utf8               delete
  #232 = Utf8               ()Z
  #233 = NameAndType        #231:#232     // delete:()Z
  #234 = Methodref          #80.#233      // java/io/File.delete:()Z
  #235 = Utf8               java/lang/Throwable
  #236 = Class              #235          // java/lang/Throwable
  #237 = Utf8               (Ljava/nio/file/Path;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
  #238 = Utf8               <V:Ljava/lang/Object;>(Ljava/nio/file/Path;Ljava/util/concurrent/Callable<TV;>;)TV;
  #239 = Utf8               java/nio/file/OpenOption
  #240 = Class              #239          // java/nio/file/OpenOption
  #241 = Utf8               java/nio/file/StandardOpenOption
  #242 = Class              #241          // java/nio/file/StandardOpenOption
  #243 = Utf8               CREATE
  #244 = Utf8               Ljava/nio/file/StandardOpenOption;
  #245 = NameAndType        #243:#244     // CREATE:Ljava/nio/file/StandardOpenOption;
  #246 = Fieldref           #242.#245     // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
  #247 = Utf8               WRITE
  #248 = NameAndType        #247:#244     // WRITE:Ljava/nio/file/StandardOpenOption;
  #249 = Fieldref           #242.#248     // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
  #250 = Utf8               DELETE_ON_CLOSE
  #251 = NameAndType        #250:#244     // DELETE_ON_CLOSE:Ljava/nio/file/StandardOpenOption;
  #252 = Fieldref           #242.#251     // java/nio/file/StandardOpenOption.DELETE_ON_CLOSE:Ljava/nio/file/StandardOpenOption;
  #253 = Utf8               open
  #254 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
  #255 = NameAndType        #253:#254     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
  #256 = Methodref          #212.#255     // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
  #257 = Methodref          #212.#229     // java/nio/channels/FileChannel.close:()V
  #258 = Utf8               <clinit>
  #259 = Methodref          #173.#11      // java/util/concurrent/ConcurrentHashMap."<init>":()V
  #260 = Utf8               Signature
  #261 = Utf8               Code
  #262 = Utf8               LineNumberTable
  #263 = Utf8               StackMapTable
  #264 = Utf8               Exceptions
  #265 = Utf8               SourceFile
{
  private static java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Object> internedStrings;
    descriptor: Ljava/util/concurrent/ConcurrentHashMap;
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Signature: #8                           // Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

  public coursier.paths.CachePath();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #12                 // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 21: 0

  private static java.lang.String escape(java.lang.String);
    descriptor: (Ljava/lang/String;)Ljava/lang/String;
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Code:
      stack=3, locals=6, args_size=1
         0: new           #16                 // class java/lang/StringBuilder
         3: dup
         4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
         7: astore_1
         8: aload_0
         9: invokevirtual #23                 // Method java/lang/String.toCharArray:()[C
        12: astore_2
        13: aload_2
        14: arraylength
        15: istore_3
        16: iconst_0
        17: istore        4
        19: iload         4
        21: iload_3
        22: if_icmpge     88
        25: aload_2
        26: iload         4
        28: caload
        29: istore        5
        31: iload         5
        33: invokestatic  #29                 // Method isUnsafe:(C)Z
        36: ifeq          75
        39: aload_1
        40: bipush        37
        42: invokevirtual #33                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
        45: pop
        46: aload_1
        47: iload         5
        49: bipush        16
        51: idiv
        52: invokestatic  #37                 // Method toHex:(I)C
        55: invokevirtual #33                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
        58: pop
        59: aload_1
        60: iload         5
        62: bipush        16
        64: irem
        65: invokestatic  #37                 // Method toHex:(I)C
        68: invokevirtual #33                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
        71: pop
        72: goto          82
        75: aload_1
        76: iload         5
        78: invokevirtual #33                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
        81: pop
        82: iinc          4, 1
        85: goto          19
        88: aload_1
        89: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        92: areturn
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 19
          locals = [ class java/lang/String, class java/lang/StringBuilder, class "[C", int, int ]
          stack = []
        frame_type = 252 /* append */
          offset_delta = 55
          locals = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 6
        frame_type = 248 /* chop */
          offset_delta = 5
      LineNumberTable:
        line 26: 0
        line 27: 8
        line 28: 31
        line 29: 39
        line 30: 46
        line 31: 59
        line 33: 75
        line 27: 82
        line 36: 88

  private static char toHex(int);
    descriptor: (I)C
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: iload_0
         1: bipush        10
         3: if_icmpge     13
         6: bipush        48
         8: iload_0
         9: iadd
        10: goto          20
        13: bipush        65
        15: iload_0
        16: iadd
        17: bipush        10
        19: isub
        20: i2c
        21: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 13 /* same */
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 40: 0

  private static boolean isUnsafe(char);
    descriptor: (C)Z
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: iload_0
         1: sipush        128
         4: if_icmpgt     16
         7: ldc           #43                 // String  %$&+,:;=?@<>#%
         9: iload_0
        10: invokevirtual #47                 // Method java/lang/String.indexOf:(I)I
        13: iflt          20
        16: iconst_1
        17: goto          21
        20: iconst_0
        21: ireturn
      StackMapTable: number_of_entries = 3
        frame_type = 16 /* same */
        frame_type = 3 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 44: 0

  public static java.io.File localFile(java.lang.String, java.io.File, java.lang.String, boolean) throws java.net.MalformedURLException;
    descriptor: (Ljava/lang/String;Ljava/io/File;Ljava/lang/String;Z)Ljava/io/File;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=8, args_size=4
         0: aload_0
         1: ldc           #55                 // String file:/
         3: invokevirtual #59                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
         6: ifeq          75
         9: iload_3
        10: ifne          75
        13: new           #61                 // class java/net/URI
        16: dup
        17: aload_0
        18: invokespecial #64                 // Method java/net/URI."<init>":(Ljava/lang/String;)V
        21: invokestatic  #70                 // Method java/nio/file/Paths.get:(Ljava/net/URI;)Ljava/nio/file/Path;
        24: invokeinterface #76,  1           // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
        29: areturn
        30: astore        4
        32: aload_0
        33: ldc           #78                 // String file:///
        35: invokevirtual #59                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
        38: ifeq          58
        41: new           #80                 // class java/io/File
        44: dup
        45: aload_0
        46: ldc           #82                 // String file://
        48: invokevirtual #86                 // Method java/lang/String.length:()I
        51: invokevirtual #90                 // Method java/lang/String.substring:(I)Ljava/lang/String;
        54: invokespecial #91                 // Method java/io/File."<init>":(Ljava/lang/String;)V
        57: areturn
        58: new           #80                 // class java/io/File
        61: dup
        62: aload_0
        63: ldc           #93                 // String file:
        65: invokevirtual #86                 // Method java/lang/String.length:()I
        68: invokevirtual #90                 // Method java/lang/String.substring:(I)Ljava/lang/String;
        71: invokespecial #91                 // Method java/io/File."<init>":(Ljava/lang/String;)V
        74: areturn
        75: aload_0
        76: ldc           #95                 // String :
        78: iconst_2
        79: invokevirtual #99                 // Method java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
        82: astore        4
        84: aload         4
        86: arraylength
        87: iconst_2
        88: if_icmpeq     118
        91: new           #51                 // class java/net/MalformedURLException
        94: dup
        95: new           #16                 // class java/lang/StringBuilder
        98: dup
        99: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       102: ldc           #101                // String No protocol found in URL
       104: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       107: aload_0
       108: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       111: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       114: invokespecial #105                // Method java/net/MalformedURLException."<init>":(Ljava/lang/String;)V
       117: athrow
       118: aload         4
       120: iconst_0
       121: aaload
       122: astore        5
       124: aload         4
       126: iconst_1
       127: aaload
       128: astore        6
       130: aload         6
       132: ldc           #109                // String ///
       134: invokevirtual #59                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       137: ifeq          155
       140: aload         6
       142: ldc           #109                // String ///
       144: invokevirtual #86                 // Method java/lang/String.length:()I
       147: invokevirtual #90                 // Method java/lang/String.substring:(I)Ljava/lang/String;
       150: astore        6
       152: goto          212
       155: aload         6
       157: ldc           #111                // String /
       159: invokevirtual #59                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       162: ifeq          180
       165: aload         6
       167: ldc           #111                // String /
       169: invokevirtual #86                 // Method java/lang/String.length:()I
       172: invokevirtual #90                 // Method java/lang/String.substring:(I)Ljava/lang/String;
       175: astore        6
       177: goto          212
       180: new           #51                 // class java/net/MalformedURLException
       183: dup
       184: new           #16                 // class java/lang/StringBuilder
       187: dup
       188: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       191: ldc           #113                // String URL
       193: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       196: aload_0
       197: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       200: ldc           #115                // String  doesn\'t contain an absolute path
       202: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       205: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       208: invokespecial #105                // Method java/net/MalformedURLException."<init>":(Ljava/lang/String;)V
       211: athrow
       212: aload         6
       214: ldc           #111                // String /
       216: invokevirtual #118                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
       219: ifeq          244
       222: new           #16                 // class java/lang/StringBuilder
       225: dup
       226: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       229: aload         6
       231: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       234: ldc           #120                // String .directory
       236: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       239: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       242: astore        6
       244: aload         6
       246: ldc           #111                // String /
       248: invokevirtual #59                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       251: ifeq          265
       254: aload         6
       256: iconst_1
       257: invokevirtual #90                 // Method java/lang/String.substring:(I)Ljava/lang/String;
       260: astore        6
       262: goto          244
       265: ldc           #122                // String
       267: astore        7
       269: aload_2
       270: ifnull        294
       273: new           #16                 // class java/lang/StringBuilder
       276: dup
       277: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       280: aload_2
       281: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       284: ldc           #124                // String @
       286: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       289: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       292: astore        7
       294: new           #80                 // class java/io/File
       297: dup
       298: aload_1
       299: new           #16                 // class java/lang/StringBuilder
       302: dup
       303: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       306: aload         5
       308: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       311: ldc           #111                // String /
       313: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       316: aload         7
       318: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       321: aload         6
       323: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       326: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       329: invokestatic  #126                // Method escape:(Ljava/lang/String;)Ljava/lang/String;
       332: invokespecial #129                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
       335: areturn
      Exception table:
         from    to  target type
            13    29    30   Class java/net/URISyntaxException
      StackMapTable: number_of_entries = 10
        frame_type = 94 /* same_locals_1_stack_item */
          stack = [ class java/net/URISyntaxException ]
        frame_type = 252 /* append */
          offset_delta = 27
          locals = [ class java/net/URISyntaxException ]
        frame_type = 250 /* chop */
          offset_delta = 16
        frame_type = 252 /* append */
          offset_delta = 42
          locals = [ class "[Ljava/lang/String;" ]
        frame_type = 253 /* append */
          offset_delta = 36
          locals = [ class java/lang/String, class java/lang/String ]
        frame_type = 24 /* same */
        frame_type = 31 /* same */
        frame_type = 31 /* same */
        frame_type = 20 /* same */
        frame_type = 252 /* append */
          offset_delta = 28
          locals = [ class java/lang/String ]
      LineNumberTable:
        line 49: 0
        line 51: 13
        line 52: 30
        line 55: 32
        line 56: 41
        line 58: 58
        line 62: 75
        line 63: 84
        line 64: 91
        line 66: 118
        line 67: 124
        line 69: 130
        line 70: 140
        line 71: 155
        line 72: 165
        line 74: 180
        line 76: 212
        line 78: 222
        line 80: 244
        line 81: 254
        line 83: 265
        line 84: 269
        line 85: 273
        line 87: 294
    Exceptions:
      throws java.net.MalformedURLException

  public static java.io.File temporaryFile(java.io.File);
    descriptor: (Ljava/io/File;)Ljava/io/File;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=3, args_size=1
         0: aload_0
         1: invokevirtual #134                // Method java/io/File.getParentFile:()Ljava/io/File;
         4: astore_1
         5: aload_0
         6: invokevirtual #137                // Method java/io/File.getName:()Ljava/lang/String;
         9: astore_2
        10: new           #80                 // class java/io/File
        13: dup
        14: aload_1
        15: new           #16                 // class java/lang/StringBuilder
        18: dup
        19: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
        22: ldc           #139                // String .
        24: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        27: aload_2
        28: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        31: ldc           #141                // String .part
        33: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        36: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        39: invokespecial #129                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
        42: areturn
      LineNumberTable:
        line 91: 0
        line 92: 5
        line 93: 10

  public static java.nio.file.Path lockFile(java.nio.file.Path);
    descriptor: (Ljava/nio/file/Path;)Ljava/nio/file/Path;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #147,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
         6: new           #16                 // class java/lang/StringBuilder
         9: dup
        10: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
        13: aload_0
        14: invokeinterface #150,  1          // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
        19: invokeinterface #151,  1          // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
        24: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        27: ldc           #153                // String .lock
        29: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        32: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        35: invokeinterface #157,  2          // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
        40: areturn
      LineNumberTable:
        line 97: 0

  public static java.io.File lockFile(java.io.File);
    descriptor: (Ljava/io/File;)Ljava/io/File;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=1, args_size=1
         0: new           #80                 // class java/io/File
         3: dup
         4: aload_0
         5: invokevirtual #134                // Method java/io/File.getParentFile:()Ljava/io/File;
         8: new           #16                 // class java/lang/StringBuilder
        11: dup
        12: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
        15: aload_0
        16: invokevirtual #137                // Method java/io/File.getName:()Ljava/lang/String;
        19: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        22: ldc           #153                // String .lock
        24: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        27: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        30: invokespecial #129                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
        33: areturn
      LineNumberTable:
        line 101: 0

  public static java.io.File defaultCacheDirectory() throws java.io.IOException;
    descriptor: ()Ljava/io/File;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: invokestatic  #165                // Method coursier/paths/CoursierPaths.cacheDirectory:()Ljava/io/File;
         3: areturn
      LineNumberTable:
        line 105: 0
    Exceptions:
      throws java.io.IOException

  private static java.lang.Object lockFor(java.nio.file.Path);
    descriptor: (Ljava/nio/file/Path;)Ljava/lang/Object;
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Code:
      stack=3, locals=4, args_size=1
         0: new           #16                 // class java/lang/StringBuilder
         3: dup
         4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
         7: ldc           #169                // String coursier-jvm-lock-
         9: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        12: aload_0
        13: invokeinterface #151,  1          // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
        18: invokevirtual #104                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        21: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        24: astore_1
        25: getstatic     #171                // Field internedStrings:Ljava/util/concurrent/ConcurrentHashMap;
        28: aload_1
        29: invokevirtual #176                // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
        32: astore_2
        33: aload_2
        34: ifnonnull     53
        37: aload_1
        38: invokevirtual #179                // Method java/lang/String.intern:()Ljava/lang/String;
        41: astore_3
        42: getstatic     #171                // Field internedStrings:Ljava/util/concurrent/ConcurrentHashMap;
        45: aload_3
        46: aload_3
        47: invokevirtual #183                // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        50: pop
        51: aload_3
        52: astore_2
        53: aload_2
        54: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 253 /* append */
          offset_delta = 53
          locals = [ class java/lang/String, class java/lang/Object ]
      LineNumberTable:
        line 115: 0
        line 116: 25
        line 117: 33
        line 118: 37
        line 119: 42
        line 120: 51
        line 122: 53

  public static <V extends java.lang.Object> V withStructureLock(java.io.File, java.util.concurrent.Callable<V>) throws java.lang.Exception;
    descriptor: (Ljava/io/File;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=13, args_size=2
         0: aload_0
         1: invokevirtual #191                // Method java/io/File.toPath:()Ljava/nio/file/Path;
         4: astore_2
         5: aload_2
         6: invokestatic  #193                // Method lockFor:(Ljava/nio/file/Path;)Ljava/lang/Object;
         9: astore_3
        10: aload_3
        11: dup
        12: astore        4
        14: monitorenter
        15: new           #80                 // class java/io/File
        18: dup
        19: aload_0
        20: ldc           #195                // String .structure.lock
        22: invokespecial #129                // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
        25: astore        5
        27: aload         5
        29: invokevirtual #191                // Method java/io/File.toPath:()Ljava/nio/file/Path;
        32: invokeinterface #147,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
        37: invokestatic  #201                // Method coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
        40: aconst_null
        41: astore        6
        43: new           #203                // class java/io/FileOutputStream
        46: dup
        47: aload         5
        49: invokespecial #206                // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
        52: astore        6
        54: aconst_null
        55: astore        7
        57: aload         6
        59: invokevirtual #210                // Method java/io/FileOutputStream.getChannel:()Ljava/nio/channels/FileChannel;
        62: invokevirtual #216                // Method java/nio/channels/FileChannel.lock:()Ljava/nio/channels/FileLock;
        65: astore        7
        67: aload_1
        68: invokeinterface #222,  1          // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
        73: astore        8
        75: aload         7
        77: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
        80: aconst_null
        81: astore        7
        83: aload         6
        85: invokevirtual #230                // Method java/io/FileOutputStream.close:()V
        88: aconst_null
        89: astore        6
        91: aload         5
        93: invokevirtual #234                // Method java/io/File.delete:()Z
        96: pop
        97: aload         7
        99: ifnull        107
       102: aload         7
       104: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
       107: aload         6
       109: ifnull        117
       112: aload         6
       114: invokevirtual #230                // Method java/io/FileOutputStream.close:()V
       117: aload         4
       119: monitorexit
       120: aload         8
       122: areturn
       123: astore        9
       125: aload         7
       127: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
       130: aconst_null
       131: astore        7
       133: aload         6
       135: invokevirtual #230                // Method java/io/FileOutputStream.close:()V
       138: aconst_null
       139: astore        6
       141: aload         5
       143: invokevirtual #234                // Method java/io/File.delete:()Z
       146: pop
       147: aload         9
       149: athrow
       150: astore        10
       152: aload         7
       154: ifnull        162
       157: aload         7
       159: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
       162: aload         10
       164: athrow
       165: astore        11
       167: aload         6
       169: ifnull        177
       172: aload         6
       174: invokevirtual #230                // Method java/io/FileOutputStream.close:()V
       177: aload         11
       179: athrow
       180: astore        12
       182: aload         4
       184: monitorexit
       185: aload         12
       187: athrow
      Exception table:
         from    to  target type
            67    75   123   any
           123   125   123   any
            57    97   150   any
           123   152   150   any
            43   107   165   any
           123   167   165   any
            15   120   180   any
           123   185   180   any
      StackMapTable: number_of_entries = 8
        frame_type = 255 /* full_frame */
          offset_delta = 107
          locals = [ class java/io/File, class java/util/concurrent/Callable, class java/nio/file/Path, class java/lang/Object, class java/lang/Object, class java/io/File, class java/io/FileOutputStream, class java/nio/channels/FileLock, class java/lang/Object ]
          stack = []
        frame_type = 9 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 5
          locals = [ class java/io/File, class java/util/concurrent/Callable, class java/nio/file/Path, class java/lang/Object, class java/lang/Object, class java/io/File, class java/io/FileOutputStream, class java/nio/channels/FileLock ]
          stack = [ class java/lang/Throwable ]
        frame_type = 90 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 254 /* append */
          offset_delta = 11
          locals = [ top, top, class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class java/io/File, class java/util/concurrent/Callable, class java/nio/file/Path, class java/lang/Object, class java/lang/Object, class java/io/File, class java/io/FileOutputStream ]
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 11
          locals = [ class java/io/File, class java/util/concurrent/Callable, class java/nio/file/Path, class java/lang/Object, class java/lang/Object, class java/io/File, class java/io/FileOutputStream, top, top, top, top, class java/lang/Throwable ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class java/io/File, class java/util/concurrent/Callable, class java/nio/file/Path, class java/lang/Object, class java/lang/Object ]
          stack = [ class java/lang/Throwable ]
      LineNumberTable:
        line 131: 0
        line 132: 5
        line 134: 10
        line 135: 15
        line 136: 27
        line 137: 40
        line 140: 43
        line 142: 54
        line 144: 57
        line 147: 67
        line 150: 75
        line 151: 80
        line 152: 83
        line 153: 88
        line 154: 91
        line 158: 97
        line 161: 107
        line 147: 120
        line 150: 123
        line 151: 130
        line 152: 133
        line 153: 138
        line 154: 141
        line 155: 147
        line 158: 150
        line 159: 162
        line 161: 165
        line 162: 177
        line 163: 180
    Exceptions:
      throws java.lang.Exception
    Signature: #186                         // <V:Ljava/lang/Object;>(Ljava/io/File;Ljava/util/concurrent/Callable<TV;>;)TV;

  public static <V extends java.lang.Object> V withStructureLock(java.nio.file.Path, java.util.concurrent.Callable<V>) throws java.lang.Exception;
    descriptor: (Ljava/nio/file/Path;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=5, locals=12, args_size=2
         0: aload_0
         1: invokestatic  #193                // Method lockFor:(Ljava/nio/file/Path;)Ljava/lang/Object;
         4: astore_2
         5: aload_2
         6: dup
         7: astore_3
         8: monitorenter
         9: aload_0
        10: ldc           #195                // String .structure.lock
        12: invokeinterface #157,  2          // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
        17: astore        4
        19: aload         4
        21: invokeinterface #147,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
        26: invokestatic  #201                // Method coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
        29: aconst_null
        30: astore        5
        32: aload         4
        34: iconst_3
        35: anewarray     #240                // class java/nio/file/OpenOption
        38: dup
        39: iconst_0
        40: getstatic     #246                // Field java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
        43: aastore
        44: dup
        45: iconst_1
        46: getstatic     #249                // Field java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
        49: aastore
        50: dup
        51: iconst_2
        52: getstatic     #252                // Field java/nio/file/StandardOpenOption.DELETE_ON_CLOSE:Ljava/nio/file/StandardOpenOption;
        55: aastore
        56: invokestatic  #256                // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
        59: astore        5
        61: aconst_null
        62: astore        6
        64: aload         5
        66: invokevirtual #216                // Method java/nio/channels/FileChannel.lock:()Ljava/nio/channels/FileLock;
        69: astore        6
        71: aload_1
        72: invokeinterface #222,  1          // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
        77: astore        7
        79: aload         6
        81: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
        84: aconst_null
        85: astore        6
        87: aload         5
        89: invokevirtual #257                // Method java/nio/channels/FileChannel.close:()V
        92: aconst_null
        93: astore        5
        95: aload         6
        97: ifnull        105
       100: aload         6
       102: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
       105: aload         5
       107: ifnull        115
       110: aload         5
       112: invokevirtual #257                // Method java/nio/channels/FileChannel.close:()V
       115: aload_3
       116: monitorexit
       117: aload         7
       119: areturn
       120: astore        8
       122: aload         6
       124: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
       127: aconst_null
       128: astore        6
       130: aload         5
       132: invokevirtual #257                // Method java/nio/channels/FileChannel.close:()V
       135: aconst_null
       136: astore        5
       138: aload         8
       140: athrow
       141: astore        9
       143: aload         6
       145: ifnull        153
       148: aload         6
       150: invokevirtual #227                // Method java/nio/channels/FileLock.release:()V
       153: aload         9
       155: athrow
       156: astore        10
       158: aload         5
       160: ifnull        168
       163: aload         5
       165: invokevirtual #257                // Method java/nio/channels/FileChannel.close:()V
       168: aload         10
       170: athrow
       171: astore        11
       173: aload_3
       174: monitorexit
       175: aload         11
       177: athrow
      Exception table:
         from    to  target type
            71    79   120   any
           120   122   120   any
            64    95   141   any
           120   143   141   any
            32   105   156   any
           120   158   156   any
             9   117   171   any
           120   175   171   any
      StackMapTable: number_of_entries = 8
        frame_type = 255 /* full_frame */
          offset_delta = 105
          locals = [ class java/nio/file/Path, class java/util/concurrent/Callable, class java/lang/Object, class java/lang/Object, class java/nio/file/Path, class java/nio/channels/FileChannel, class java/nio/channels/FileLock, class java/lang/Object ]
          stack = []
        frame_type = 9 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 4
          locals = [ class java/nio/file/Path, class java/util/concurrent/Callable, class java/lang/Object, class java/lang/Object, class java/nio/file/Path, class java/nio/channels/FileChannel, class java/nio/channels/FileLock ]
          stack = [ class java/lang/Throwable ]
        frame_type = 84 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 254 /* append */
          offset_delta = 11
          locals = [ top, top, class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class java/nio/file/Path, class java/util/concurrent/Callable, class java/lang/Object, class java/lang/Object, class java/nio/file/Path, class java/nio/channels/FileChannel ]
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 11
          locals = [ class java/nio/file/Path, class java/util/concurrent/Callable, class java/lang/Object, class java/lang/Object, class java/nio/file/Path, class java/nio/channels/FileChannel, top, top, top, top, class java/lang/Throwable ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class java/nio/file/Path, class java/util/concurrent/Callable, class java/lang/Object, class java/lang/Object ]
          stack = [ class java/lang/Throwable ]
      LineNumberTable:
        line 168: 0
        line 170: 5
        line 171: 9
        line 172: 19
        line 173: 29
        line 177: 32
        line 184: 61
        line 186: 64
        line 189: 71
        line 192: 79
        line 193: 84
        line 194: 87
        line 195: 92
        line 199: 95
        line 202: 105
        line 189: 117
        line 192: 120
        line 193: 127
        line 194: 130
        line 195: 135
        line 196: 138
        line 199: 141
        line 200: 153
        line 202: 156
        line 203: 168
        line 204: 171
    Exceptions:
      throws java.lang.Exception
    Signature: #238                         // <V:Ljava/lang/Object;>(Ljava/nio/file/Path;Ljava/util/concurrent/Callable<TV;>;)TV;

  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #173                // class java/util/concurrent/ConcurrentHashMap
         3: dup
         4: invokespecial #259                // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
         7: putstatic     #171                // Field internedStrings:Ljava/util/concurrent/ConcurrentHashMap;
        10: return
      LineNumberTable:
        line 109: 0
}
SourceFile: "CachePath.java"
