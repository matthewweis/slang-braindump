Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/sys/process/ProcessImpl$PipeThread.class
  Last modified May 29, 2022; size 3722 bytes
  SHA-256 checksum 390c377effe244bf52d1b8916b47e8c5c76d4cb3d3c77d2fb7797d90c7139b5e
  Compiled from "ProcessImpl.scala"
public abstract class scala.sys.process.ProcessImpl$PipeThread extends java.lang.Thread
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #2                          // scala/sys/process/ProcessImpl$PipeThread
  super_class: #4                         // java/lang/Thread
  interfaces: 0, fields: 2, methods: 8, attributes: 5
Constant pool:
    #1 = Utf8               scala/sys/process/ProcessImpl$PipeThread
    #2 = Class              #1            // scala/sys/process/ProcessImpl$PipeThread
    #3 = Utf8               java/lang/Thread
    #4 = Class              #3            // java/lang/Thread
    #5 = Utf8               ProcessImpl.scala
    #6 = Utf8               java/lang/invoke/MethodHandles$Lookup
    #7 = Class              #6            // java/lang/invoke/MethodHandles$Lookup
    #8 = Utf8               java/lang/invoke/MethodHandles
    #9 = Class              #8            // java/lang/invoke/MethodHandles
   #10 = Utf8               Lookup
   #11 = Utf8               scala/sys/process/ProcessImpl
   #12 = Class              #11           // scala/sys/process/ProcessImpl
   #13 = Utf8               PipeThread
   #14 = Utf8               scala/sys/process/processInternal$$anonfun$ioFailure$1
   #15 = Class              #14           // scala/sys/process/processInternal$$anonfun$ioFailure$1
   #16 = Utf8               isSink
   #17 = Utf8               Z
   #18 = Utf8               $outer
   #19 = Utf8               Lscala/sys/process/Process$;
   #20 = Utf8               run
   #21 = Utf8               ()V
   #22 = Utf8               runloop
   #23 = Utf8               (Ljava/io/InputStream;Ljava/io/OutputStream;)V
   #24 = Utf8               src
   #25 = Utf8               dst
   #26 = Utf8               java/lang/Throwable
   #27 = Class              #26           // java/lang/Throwable
   #28 = Utf8               scala/sys/process/BasicIO$
   #29 = Class              #28           // scala/sys/process/BasicIO$
   #30 = Utf8               MODULE$
   #31 = Utf8               Lscala/sys/process/BasicIO$;
   #32 = NameAndType        #30:#31       // MODULE$:Lscala/sys/process/BasicIO$;
   #33 = Fieldref           #29.#32       // scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
   #34 = Utf8               transferFully
   #35 = NameAndType        #34:#23       // transferFully:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
   #36 = Methodref          #29.#35       // scala/sys/process/BasicIO$.transferFully:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
   #37 = Utf8               scala/sys/process/processInternal$
   #38 = Class              #37           // scala/sys/process/processInternal$
   #39 = Utf8               Lscala/sys/process/processInternal$;
   #40 = NameAndType        #30:#39       // MODULE$:Lscala/sys/process/processInternal$;
   #41 = Fieldref           #38.#40       // scala/sys/process/processInternal$.MODULE$:Lscala/sys/process/processInternal$;
   #42 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
   #43 = MethodType         #42           //  (Ljava/lang/Object;)Ljava/lang/Object;
   #44 = Utf8               $anonfun$runloop$1$adapted
   #45 = Utf8               (Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
   #46 = NameAndType        #44:#45       // $anonfun$runloop$1$adapted:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
   #47 = Methodref          #2.#46        // scala/sys/process/ProcessImpl$PipeThread.$anonfun$runloop$1$adapted:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
   #48 = MethodHandle       6:#47         // REF_invokeStatic scala/sys/process/ProcessImpl$PipeThread.$anonfun$runloop$1$adapted:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
   #49 = Utf8               (Ljava/io/IOException;)Ljava/lang/Object;
   #50 = MethodType         #49           //  (Ljava/io/IOException;)Ljava/lang/Object;
   #51 = Integer            5
   #52 = Integer            1
   #53 = Utf8               java/lang/invoke/LambdaMetafactory
   #54 = Class              #53           // java/lang/invoke/LambdaMetafactory
   #55 = Utf8               altMetafactory
   #56 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #57 = NameAndType        #55:#56       // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #58 = Methodref          #54.#57       // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #59 = MethodHandle       6:#58         // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #60 = Utf8               apply
   #61 = Utf8               (Lscala/sys/process/ProcessImpl$PipeThread;)Lscala/Function1;
   #62 = NameAndType        #60:#61       // apply:(Lscala/sys/process/ProcessImpl$PipeThread;)Lscala/Function1;
   #63 = InvokeDynamic      #0:#62        // #0:apply:(Lscala/sys/process/ProcessImpl$PipeThread;)Lscala/Function1;
   #64 = Utf8               <init>
   #65 = Utf8               (Lscala/Function1;)V
   #66 = NameAndType        #64:#65       // "<init>":(Lscala/Function1;)V
   #67 = Methodref          #15.#66       // scala/sys/process/processInternal$$anonfun$ioFailure$1."<init>":(Lscala/Function1;)V
   #68 = Utf8               isDefinedAt
   #69 = Utf8               (Ljava/lang/Throwable;)Z
   #70 = NameAndType        #68:#69       // isDefinedAt:(Ljava/lang/Throwable;)Z
   #71 = Methodref          #15.#70       // scala/sys/process/processInternal$$anonfun$ioFailure$1.isDefinedAt:(Ljava/lang/Throwable;)Z
   #72 = Utf8               scala/PartialFunction
   #73 = Class              #72           // scala/PartialFunction
   #74 = NameAndType        #60:#42       // apply:(Ljava/lang/Object;)Ljava/lang/Object;
   #75 = InterfaceMethodref #73.#74       // scala/PartialFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
   #76 = NameAndType        #16:#17       // isSink:Z
   #77 = Fieldref           #2.#76        // scala/sys/process/ProcessImpl$PipeThread.isSink:Z
   #78 = Utf8               close
   #79 = Utf8               (Ljava/io/Closeable;)V
   #80 = NameAndType        #78:#79       // close:(Ljava/io/Closeable;)V
   #81 = Methodref          #29.#80       // scala/sys/process/BasicIO$.close:(Ljava/io/Closeable;)V
   #82 = Utf8               catchExpr$4
   #83 = Utf8               Lscala/PartialFunction;
   #84 = Utf8               x$12
   #85 = Utf8               Ljava/lang/Throwable;
   #86 = Utf8               this
   #87 = Utf8               Lscala/sys/process/ProcessImpl$PipeThread;
   #88 = Utf8               Ljava/io/InputStream;
   #89 = Utf8               Ljava/io/OutputStream;
   #90 = Utf8               ioFailure_handler
   #91 = Utf8               Lscala/Function1;
   #92 = Utf8               java/io/InputStream
   #93 = Class              #92           // java/io/InputStream
   #94 = Utf8               java/io/OutputStream
   #95 = Class              #94           // java/io/OutputStream
   #96 = Utf8               java/lang/Object
   #97 = Class              #96           // java/lang/Object
   #98 = Utf8               ioHandler
   #99 = Utf8               (Ljava/io/IOException;)V
  #100 = Utf8               e
  #101 = Utf8               java/io/IOException
  #102 = Class              #101          // java/io/IOException
  #103 = Utf8               printStackTrace
  #104 = NameAndType        #103:#21      // printStackTrace:()V
  #105 = Methodref          #102.#104     // java/io/IOException.printStackTrace:()V
  #106 = Utf8               Ljava/io/IOException;
  #107 = Utf8               scala$sys$process$ProcessImpl$PipeThread$$$outer
  #108 = Utf8               ()Lscala/sys/process/Process$;
  #109 = NameAndType        #18:#19       // $outer:Lscala/sys/process/Process$;
  #110 = Fieldref           #2.#109       // scala/sys/process/ProcessImpl$PipeThread.$outer:Lscala/sys/process/Process$;
  #111 = Utf8               $anonfun$runloop$1
  #112 = Utf8               (Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)V
  #113 = Utf8               $this
  #114 = NameAndType        #98:#99       // ioHandler:(Ljava/io/IOException;)V
  #115 = Methodref          #2.#114       // scala/sys/process/ProcessImpl$PipeThread.ioHandler:(Ljava/io/IOException;)V
  #116 = Utf8               (Lscala/sys/process/Process$;ZLscala/Function0;)V
  #117 = Utf8               (ZLscala/Function0<Ljava/lang/String;>;)V
  #118 = Utf8               labelFn
  #119 = NameAndType        #64:#21       // "<init>":()V
  #120 = Methodref          #4.#119       // java/lang/Thread."<init>":()V
  #121 = Utf8               Lscala/Function0;
  #122 = NameAndType        #111:#112     // $anonfun$runloop$1:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)V
  #123 = Methodref          #2.#122       // scala/sys/process/ProcessImpl$PipeThread.$anonfun$runloop$1:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)V
  #124 = Utf8               scala/runtime/BoxedUnit
  #125 = Class              #124          // scala/runtime/BoxedUnit
  #126 = Utf8               UNIT
  #127 = Utf8               Lscala/runtime/BoxedUnit;
  #128 = NameAndType        #126:#127     // UNIT:Lscala/runtime/BoxedUnit;
  #129 = Fieldref           #125.#128     // scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
  #130 = Utf8               $deserializeLambda$
  #131 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #132 = Utf8               scala/runtime/LambdaDeserialize
  #133 = Class              #132          // scala/runtime/LambdaDeserialize
  #134 = Utf8               bootstrap
  #135 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #136 = NameAndType        #134:#135     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #137 = Methodref          #133.#136     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #138 = MethodHandle       6:#137        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #139 = Utf8               lambdaDeserialize
  #140 = NameAndType        #139:#131     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #141 = InvokeDynamic      #1:#140       // #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #142 = Utf8               Code
  #143 = Utf8               StackMapTable
  #144 = Utf8               LineNumberTable
  #145 = Utf8               LocalVariableTable
  #146 = Utf8               MethodParameters
  #147 = Utf8               Signature
  #148 = Utf8               InnerClasses
  #149 = Utf8               SourceFile
  #150 = Utf8               BootstrapMethods
  #151 = Utf8               ScalaInlineInfo
  #152 = Utf8               Scala
{
  private final boolean isSink;
    descriptor: Z
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public final scala.sys.process.Process$ $outer;
    descriptor: Lscala/sys/process/Process$;
    flags: (0x1011) ACC_PUBLIC, ACC_FINAL, ACC_SYNTHETIC

  public abstract void run();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public void runloop(java.io.InputStream, java.io.OutputStream);
    descriptor: (Ljava/io/InputStream;Ljava/io/OutputStream;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=7, args_size=3
         0: getstatic     #33                 // Field scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
         3: aload_1
         4: aload_2
         5: invokevirtual #36                 // Method scala/sys/process/BasicIO$.transferFully:(Ljava/io/InputStream;Ljava/io/OutputStream;)V
         8: goto          84
        11: astore_3
        12: getstatic     #41                 // Field scala/sys/process/processInternal$.MODULE$:Lscala/sys/process/processInternal$;
        15: pop
        16: aload_0
        17: invokedynamic #63,  0             // InvokeDynamic #0:apply:(Lscala/sys/process/ProcessImpl$PipeThread;)Lscala/Function1;
        22: astore        6
        24: new           #15                 // class scala/sys/process/processInternal$$anonfun$ioFailure$1
        27: dup
        28: aload         6
        30: invokespecial #67                 // Method scala/sys/process/processInternal$$anonfun$ioFailure$1."<init>":(Lscala/Function1;)V
        33: aconst_null
        34: astore        6
        36: astore        4
        38: aload         4
        40: aload_3
        41: invokevirtual #71                 // Method scala/sys/process/processInternal$$anonfun$ioFailure$1.isDefinedAt:(Ljava/lang/Throwable;)Z
        44: ifeq          59
        47: aload         4
        49: aload_3
        50: invokeinterface #75,  2           // InterfaceMethod scala/PartialFunction.apply:(Ljava/lang/Object;)Ljava/lang/Object;
        55: pop
        56: goto          84
        59: aload_3
        60: athrow
        61: astore        5
        63: getstatic     #33                 // Field scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
        66: aload_0
        67: getfield      #77                 // Field isSink:Z
        70: ifeq          77
        73: aload_2
        74: goto          78
        77: aload_1
        78: invokevirtual #81                 // Method scala/sys/process/BasicIO$.close:(Ljava/io/Closeable;)V
        81: aload         5
        83: athrow
        84: getstatic     #33                 // Field scala/sys/process/BasicIO$.MODULE$:Lscala/sys/process/BasicIO$;
        87: aload_0
        88: getfield      #77                 // Field isSink:Z
        91: ifeq          98
        94: aload_2
        95: goto          99
        98: aload_1
        99: invokevirtual #81                 // Method scala/sys/process/BasicIO$.close:(Ljava/io/Closeable;)V
       102: return
      Exception table:
         from    to  target type
             0     8    11   Class java/lang/Throwable
             0    61    61   any
      StackMapTable: number_of_entries = 8
        frame_type = 75 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 47
          locals = [ class scala/sys/process/ProcessImpl$PipeThread, class java/io/InputStream, class java/io/OutputStream, class java/lang/Throwable, class scala/sys/process/processInternal$$anonfun$ioFailure$1, top, null ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class scala/sys/process/ProcessImpl$PipeThread, class java/io/InputStream, class java/io/OutputStream ]
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 15
          locals = [ class scala/sys/process/ProcessImpl$PipeThread, class java/io/InputStream, class java/io/OutputStream, top, top, class java/lang/Throwable ]
          stack = [ class scala/sys/process/BasicIO$ ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class scala/sys/process/ProcessImpl$PipeThread, class java/io/InputStream, class java/io/OutputStream, top, top, class java/lang/Throwable ]
          stack = [ class scala/sys/process/BasicIO$, class java/lang/Object ]
        frame_type = 248 /* chop */
          offset_delta = 5
        frame_type = 77 /* same_locals_1_stack_item */
          stack = [ class scala/sys/process/BasicIO$ ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class scala/sys/process/ProcessImpl$PipeThread, class java/io/InputStream, class java/io/OutputStream ]
          stack = [ class scala/sys/process/BasicIO$, class java/lang/Object ]
      LineNumberTable:
        line 186: 0
        line 187: 12
        line 188: 63
        line 189: 66
        line 188: 84
        line 189: 87
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           38      23     4 catchExpr$4   Lscala/PartialFunction;
           11      50     3  x$12   Ljava/lang/Throwable;
            0     103     0  this   Lscala/sys/process/ProcessImpl$PipeThread;
            0     103     1   src   Ljava/io/InputStream;
            0     103     2   dst   Ljava/io/OutputStream;
           24       9     6 ioFailure_handler   Lscala/Function1;
    MethodParameters:
      Name                           Flags
      src                            final
      dst                            final

  private void ioHandler(java.io.IOException);
    descriptor: (Ljava/io/IOException;)V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #105                // Method java/io/IOException.printStackTrace:()V
         4: return
      LineNumberTable:
        line 192: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/sys/process/ProcessImpl$PipeThread;
            0       5     1     e   Ljava/io/IOException;
    MethodParameters:
      Name                           Flags
      e                              final

  public scala.sys.process.Process$ scala$sys$process$ProcessImpl$PipeThread$$$outer();
    descriptor: ()Lscala/sys/process/Process$;
    flags: (0x1001) ACC_PUBLIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #110                // Field $outer:Lscala/sys/process/Process$;
         4: areturn
      LineNumberTable:
        line 182: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/sys/process/ProcessImpl$PipeThread;

  public static final void $anonfun$runloop$1(scala.sys.process.ProcessImpl$PipeThread, java.io.IOException);
    descriptor: (Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)V
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokespecial #115                // Method ioHandler:(Ljava/io/IOException;)V
         5: return
      LineNumberTable:
        line 187: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/sys/process/ProcessImpl$PipeThread;
            0       6     1     e   Ljava/io/IOException;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      e                              final

  public scala.sys.process.ProcessImpl$PipeThread(boolean, scala.Function0<java.lang.String>);
    descriptor: (Lscala/sys/process/Process$;ZLscala/Function0;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=4
         0: aload_0
         1: iload_2
         2: putfield      #77                 // Field isSink:Z
         5: aload_1
         6: ifnonnull     11
         9: aconst_null
        10: athrow
        11: aload_0
        12: aload_1
        13: putfield      #110                // Field $outer:Lscala/sys/process/Process$;
        16: aload_0
        17: invokespecial #120                // Method java/lang/Thread."<init>":()V
        20: return
      StackMapTable: number_of_entries = 1
        frame_type = 11 /* same */
      LineNumberTable:
        line 182: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      21     0  this   Lscala/sys/process/ProcessImpl$PipeThread;
            0      21     1 $outer   Lscala/sys/process/Process$;
            0      21     2 isSink   Z
            0      21     3 labelFn   Lscala/Function0;
    Signature: #117                         // (ZLscala/Function0<Ljava/lang/String;>;)V
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      isSink                         final
      labelFn                        final

  public static final java.lang.Object $anonfun$runloop$1$adapted(scala.sys.process.ProcessImpl$PipeThread, java.io.IOException);
    descriptor: (Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #123                // Method $anonfun$runloop$1:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)V
         5: getstatic     #129                // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
         8: areturn
      LineNumberTable:
        line 187: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 $this   Lscala/sys/process/ProcessImpl$PipeThread;
            0       9     1     e   Ljava/io/IOException;
    MethodParameters:
      Name                           Flags
      $this                          final
      e                              final

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #141,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #10= #7 of #9;      // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  public abstract #13= #2 of #12;         // PipeThread=class scala/sys/process/ProcessImpl$PipeThread of class scala/sys/process/ProcessImpl
  public final #15;                       // class scala/sys/process/processInternal$$anonfun$ioFailure$1
SourceFile: "ProcessImpl.scala"
BootstrapMethods:
  0: #59 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #43 (Ljava/lang/Object;)Ljava/lang/Object;
      #48 REF_invokeStatic scala/sys/process/ProcessImpl$PipeThread.$anonfun$runloop$1$adapted:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
      #50 (Ljava/io/IOException;)Ljava/lang/Object;
      #51 5
      #52 1
      #50 (Ljava/io/IOException;)Ljava/lang/Object;
  1: #138 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #48 REF_invokeStatic scala/sys/process/ProcessImpl$PipeThread.$anonfun$runloop$1$adapted:(Lscala/sys/process/ProcessImpl$PipeThread;Ljava/io/IOException;)Ljava/lang/Object;
  ScalaInlineInfo: length = 0x27 (unknown attribute)
   01 00 00 07 00 6F 00 70 01 00 2C 00 2D 01 00 40
   00 74 00 00 62 00 63 01 00 14 00 15 00 00 16 00
   17 00 00 6B 00 6C 00
  Scala: length = 0x0 (unknown attribute)

