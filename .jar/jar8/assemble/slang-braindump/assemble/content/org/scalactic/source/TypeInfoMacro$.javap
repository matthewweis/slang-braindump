Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/scalactic/source/TypeInfoMacro$.class
  Last modified May 29, 2022; size 6317 bytes
  SHA-256 checksum 157d10a6f759042dac428d2ccff8f4cfc9c216ebc5d838f49e9925be80644914
  Compiled from "TypeInfoMacro.scala"
public final class org.scalactic.source.TypeInfoMacro$
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // org/scalactic/source/TypeInfoMacro$
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 3, attributes: 4
Constant pool:
    #1 = Utf8               org/scalactic/source/TypeInfoMacro$
    #2 = Class              #1            // org/scalactic/source/TypeInfoMacro$
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               TypeInfoMacro.scala
    #6 = Utf8               scala/collection/SeqFactory$UnapplySeqWrapper
    #7 = Class              #6            // scala/collection/SeqFactory$UnapplySeqWrapper
    #8 = Utf8               scala/collection/SeqFactory
    #9 = Class              #8            // scala/collection/SeqFactory
   #10 = Utf8               UnapplySeqWrapper
   #11 = Utf8               scala/collection/SeqFactory$UnapplySeqWrapper$
   #12 = Class              #11           // scala/collection/SeqFactory$UnapplySeqWrapper$
   #13 = Utf8               UnapplySeqWrapper$
   #14 = Utf8               scala/reflect/api/Constants$ConstantApi
   #15 = Class              #14           // scala/reflect/api/Constants$ConstantApi
   #16 = Utf8               scala/reflect/api/Constants
   #17 = Class              #16           // scala/reflect/api/Constants
   #18 = Utf8               ConstantApi
   #19 = Utf8               scala/reflect/api/Constants$ConstantExtractor
   #20 = Class              #19           // scala/reflect/api/Constants$ConstantExtractor
   #21 = Utf8               ConstantExtractor
   #22 = Utf8               scala/reflect/api/Exprs$Expr
   #23 = Class              #22           // scala/reflect/api/Exprs$Expr
   #24 = Utf8               scala/reflect/api/Exprs
   #25 = Class              #24           // scala/reflect/api/Exprs
   #26 = Utf8               Expr
   #27 = Utf8               scala/reflect/api/Names$NameApi
   #28 = Class              #27           // scala/reflect/api/Names$NameApi
   #29 = Utf8               scala/reflect/api/Names
   #30 = Class              #29           // scala/reflect/api/Names
   #31 = Utf8               NameApi
   #32 = Utf8               scala/reflect/api/Names$TermNameApi
   #33 = Class              #32           // scala/reflect/api/Names$TermNameApi
   #34 = Utf8               TermNameApi
   #35 = Utf8               scala/reflect/api/Trees$ApplyApi
   #36 = Class              #35           // scala/reflect/api/Trees$ApplyApi
   #37 = Utf8               scala/reflect/api/Trees
   #38 = Class              #37           // scala/reflect/api/Trees
   #39 = Utf8               ApplyApi
   #40 = Utf8               scala/reflect/api/Trees$ApplyExtractor
   #41 = Class              #40           // scala/reflect/api/Trees$ApplyExtractor
   #42 = Utf8               ApplyExtractor
   #43 = Utf8               scala/reflect/api/Trees$IdentApi
   #44 = Class              #43           // scala/reflect/api/Trees$IdentApi
   #45 = Utf8               IdentApi
   #46 = Utf8               scala/reflect/api/Trees$IdentExtractor
   #47 = Class              #46           // scala/reflect/api/Trees$IdentExtractor
   #48 = Utf8               IdentExtractor
   #49 = Utf8               scala/reflect/api/Trees$LiteralApi
   #50 = Class              #49           // scala/reflect/api/Trees$LiteralApi
   #51 = Utf8               LiteralApi
   #52 = Utf8               scala/reflect/api/Trees$LiteralExtractor
   #53 = Class              #52           // scala/reflect/api/Trees$LiteralExtractor
   #54 = Utf8               LiteralExtractor
   #55 = Utf8               scala/reflect/api/Trees$SelectApi
   #56 = Class              #55           // scala/reflect/api/Trees$SelectApi
   #57 = Utf8               SelectApi
   #58 = Utf8               scala/reflect/api/Trees$SelectExtractor
   #59 = Class              #58           // scala/reflect/api/Trees$SelectExtractor
   #60 = Utf8               SelectExtractor
   #61 = Utf8               scala/reflect/api/Trees$TreeApi
   #62 = Class              #61           // scala/reflect/api/Trees$TreeApi
   #63 = Utf8               TreeApi
   #64 = Utf8               scala/reflect/api/Trees$TypeApplyApi
   #65 = Class              #64           // scala/reflect/api/Trees$TypeApplyApi
   #66 = Utf8               TypeApplyApi
   #67 = Utf8               scala/reflect/api/Trees$TypeApplyExtractor
   #68 = Class              #67           // scala/reflect/api/Trees$TypeApplyExtractor
   #69 = Utf8               TypeApplyExtractor
   #70 = Utf8               scala/reflect/api/TypeTags$WeakTypeTag
   #71 = Class              #70           // scala/reflect/api/TypeTags$WeakTypeTag
   #72 = Utf8               scala/reflect/api/TypeTags
   #73 = Class              #72           // scala/reflect/api/TypeTags
   #74 = Utf8               WeakTypeTag
   #75 = Utf8               MODULE$
   #76 = Utf8               Lorg/scalactic/source/TypeInfoMacro$;
   #77 = Utf8               <clinit>
   #78 = Utf8               ()V
   #79 = Utf8               <init>
   #80 = NameAndType        #79:#78       // "<init>":()V
   #81 = Methodref          #2.#80        // org/scalactic/source/TypeInfoMacro$."<init>":()V
   #82 = NameAndType        #75:#76       // MODULE$:Lorg/scalactic/source/TypeInfoMacro$;
   #83 = Fieldref           #2.#82        // org/scalactic/source/TypeInfoMacro$.MODULE$:Lorg/scalactic/source/TypeInfoMacro$;
   #84 = Utf8               genTypeInfo
   #85 = Utf8               (Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;
   #86 = Utf8               <T:Ljava/lang/Object;>(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag<TT;>;)Lscala/reflect/api/Exprs$Expr<TT;>;
   #87 = Utf8               context
   #88 = Utf8               evidence$1
   #89 = Utf8               scala/reflect/macros/whitebox/Context
   #90 = Class              #89           // scala/reflect/macros/whitebox/Context
   #91 = Utf8               macroApplication
   #92 = Utf8               ()Lscala/reflect/api/Trees$TreeApi;
   #93 = NameAndType        #91:#92       // macroApplication:()Lscala/reflect/api/Trees$TreeApi;
   #94 = InterfaceMethodref #90.#93       // scala/reflect/macros/whitebox/Context.macroApplication:()Lscala/reflect/api/Trees$TreeApi;
   #95 = Utf8               universe
   #96 = Utf8               ()Lscala/reflect/macros/Universe;
   #97 = NameAndType        #95:#96       // universe:()Lscala/reflect/macros/Universe;
   #98 = InterfaceMethodref #90.#97       // scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
   #99 = Utf8               scala/reflect/macros/Universe
  #100 = Class              #99           // scala/reflect/macros/Universe
  #101 = Utf8               TypeApplyTag
  #102 = Utf8               ()Lscala/reflect/ClassTag;
  #103 = NameAndType        #101:#102     // TypeApplyTag:()Lscala/reflect/ClassTag;
  #104 = Methodref          #100.#103     // scala/reflect/macros/Universe.TypeApplyTag:()Lscala/reflect/ClassTag;
  #105 = Utf8               scala/reflect/ClassTag
  #106 = Class              #105          // scala/reflect/ClassTag
  #107 = Utf8               unapply
  #108 = Utf8               (Ljava/lang/Object;)Lscala/Option;
  #109 = NameAndType        #107:#108     // unapply:(Ljava/lang/Object;)Lscala/Option;
  #110 = InterfaceMethodref #106.#109     // scala/reflect/ClassTag.unapply:(Ljava/lang/Object;)Lscala/Option;
  #111 = Utf8               scala/Option
  #112 = Class              #111          // scala/Option
  #113 = Utf8               isEmpty
  #114 = Utf8               ()Z
  #115 = NameAndType        #113:#114     // isEmpty:()Z
  #116 = Methodref          #112.#115     // scala/Option.isEmpty:()Z
  #117 = Utf8               get
  #118 = Utf8               ()Ljava/lang/Object;
  #119 = NameAndType        #117:#118     // get:()Ljava/lang/Object;
  #120 = Methodref          #112.#119     // scala/Option.get:()Ljava/lang/Object;
  #121 = Utf8               TypeApply
  #122 = Utf8               ()Lscala/reflect/api/Trees$TypeApplyExtractor;
  #123 = NameAndType        #121:#122     // TypeApply:()Lscala/reflect/api/Trees$TypeApplyExtractor;
  #124 = Methodref          #100.#123     // scala/reflect/macros/Universe.TypeApply:()Lscala/reflect/api/Trees$TypeApplyExtractor;
  #125 = Utf8               (Lscala/reflect/api/Trees$TypeApplyApi;)Lscala/Option;
  #126 = NameAndType        #107:#125     // unapply:(Lscala/reflect/api/Trees$TypeApplyApi;)Lscala/Option;
  #127 = Methodref          #68.#126      // scala/reflect/api/Trees$TypeApplyExtractor.unapply:(Lscala/reflect/api/Trees$TypeApplyApi;)Lscala/Option;
  #128 = Utf8               scala/Tuple2
  #129 = Class              #128          // scala/Tuple2
  #130 = Utf8               _2
  #131 = NameAndType        #130:#118     // _2:()Ljava/lang/Object;
  #132 = Methodref          #129.#131     // scala/Tuple2._2:()Ljava/lang/Object;
  #133 = Utf8               scala/collection/immutable/List
  #134 = Class              #133          // scala/collection/immutable/List
  #135 = Utf8               scala/package$
  #136 = Class              #135          // scala/package$
  #137 = Utf8               Lscala/package$;
  #138 = NameAndType        #75:#137      // MODULE$:Lscala/package$;
  #139 = Fieldref           #136.#138     // scala/package$.MODULE$:Lscala/package$;
  #140 = Utf8               List
  #141 = Utf8               ()Lscala/collection/immutable/List$;
  #142 = NameAndType        #140:#141     // List:()Lscala/collection/immutable/List$;
  #143 = Methodref          #136.#142     // scala/package$.List:()Lscala/collection/immutable/List$;
  #144 = Utf8               scala/collection/immutable/List$
  #145 = Class              #144          // scala/collection/immutable/List$
  #146 = Utf8               unapplySeq
  #147 = Utf8               (Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
  #148 = NameAndType        #146:#147     // unapplySeq:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
  #149 = Methodref          #145.#148     // scala/collection/immutable/List$.unapplySeq:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
  #150 = Utf8               Lscala/collection/SeqFactory$UnapplySeqWrapper$;
  #151 = NameAndType        #75:#150      // MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
  #152 = Fieldref           #12.#151      // scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
  #153 = Utf8               isEmpty$extension
  #154 = Utf8               (Lscala/collection/SeqOps;)Z
  #155 = NameAndType        #153:#154     // isEmpty$extension:(Lscala/collection/SeqOps;)Z
  #156 = Methodref          #12.#155      // scala/collection/SeqFactory$UnapplySeqWrapper$.isEmpty$extension:(Lscala/collection/SeqOps;)Z
  #157 = Utf8               get$extension
  #158 = NameAndType        #157:#147     // get$extension:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
  #159 = Methodref          #12.#158      // scala/collection/SeqFactory$UnapplySeqWrapper$.get$extension:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
  #160 = Utf8               (Lscala/collection/SeqOps;)V
  #161 = NameAndType        #79:#160      // "<init>":(Lscala/collection/SeqOps;)V
  #162 = Methodref          #7.#161       // scala/collection/SeqFactory$UnapplySeqWrapper."<init>":(Lscala/collection/SeqOps;)V
  #163 = Utf8               lengthCompare$extension
  #164 = Utf8               (Lscala/collection/SeqOps;I)I
  #165 = NameAndType        #163:#164     // lengthCompare$extension:(Lscala/collection/SeqOps;I)I
  #166 = Methodref          #12.#165      // scala/collection/SeqFactory$UnapplySeqWrapper$.lengthCompare$extension:(Lscala/collection/SeqOps;I)I
  #167 = Utf8               apply$extension
  #168 = Utf8               (Lscala/collection/SeqOps;I)Ljava/lang/Object;
  #169 = NameAndType        #167:#168     // apply$extension:(Lscala/collection/SeqOps;I)Ljava/lang/Object;
  #170 = Methodref          #12.#169      // scala/collection/SeqFactory$UnapplySeqWrapper$.apply$extension:(Lscala/collection/SeqOps;I)Ljava/lang/Object;
  #171 = Utf8               scala/MatchError
  #172 = Class              #171          // scala/MatchError
  #173 = Utf8               (Ljava/lang/Object;)V
  #174 = NameAndType        #79:#173      // "<init>":(Ljava/lang/Object;)V
  #175 = Methodref          #172.#174     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #176 = Utf8               Apply
  #177 = Utf8               ()Lscala/reflect/api/Trees$ApplyExtractor;
  #178 = NameAndType        #176:#177     // Apply:()Lscala/reflect/api/Trees$ApplyExtractor;
  #179 = Methodref          #100.#178     // scala/reflect/macros/Universe.Apply:()Lscala/reflect/api/Trees$ApplyExtractor;
  #180 = Utf8               Select
  #181 = Utf8               ()Lscala/reflect/api/Trees$SelectExtractor;
  #182 = NameAndType        #180:#181     // Select:()Lscala/reflect/api/Trees$SelectExtractor;
  #183 = Methodref          #100.#182     // scala/reflect/macros/Universe.Select:()Lscala/reflect/api/Trees$SelectExtractor;
  #184 = Utf8               Ident
  #185 = Utf8               ()Lscala/reflect/api/Trees$IdentExtractor;
  #186 = NameAndType        #184:#185     // Ident:()Lscala/reflect/api/Trees$IdentExtractor;
  #187 = Methodref          #100.#186     // scala/reflect/macros/Universe.Ident:()Lscala/reflect/api/Trees$IdentExtractor;
  #188 = Utf8               _root_
  #189 = String             #188          // _root_
  #190 = Utf8               newTermName
  #191 = Utf8               (Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
  #192 = NameAndType        #190:#191     // newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
  #193 = Methodref          #100.#192     // scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
  #194 = Utf8               apply
  #195 = Utf8               (Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$IdentApi;
  #196 = NameAndType        #194:#195     // apply:(Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$IdentApi;
  #197 = Methodref          #47.#196      // scala/reflect/api/Trees$IdentExtractor.apply:(Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$IdentApi;
  #198 = Utf8               org
  #199 = String             #198          // org
  #200 = Utf8               (Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
  #201 = NameAndType        #194:#200     // apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
  #202 = Methodref          #59.#201      // scala/reflect/api/Trees$SelectExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
  #203 = Utf8               scalactic
  #204 = String             #203          // scalactic
  #205 = Utf8               source
  #206 = String             #205          // source
  #207 = Utf8               TypeInfo
  #208 = String             #207          // TypeInfo
  #209 = String             #194          // apply
  #210 = Utf8               scala/runtime/ScalaRunTime$
  #211 = Class              #210          // scala/runtime/ScalaRunTime$
  #212 = Utf8               Lscala/runtime/ScalaRunTime$;
  #213 = NameAndType        #75:#212      // MODULE$:Lscala/runtime/ScalaRunTime$;
  #214 = Fieldref           #211.#213     // scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
  #215 = Utf8               duplicate
  #216 = NameAndType        #215:#92      // duplicate:()Lscala/reflect/api/Trees$TreeApi;
  #217 = InterfaceMethodref #62.#216      // scala/reflect/api/Trees$TreeApi.duplicate:()Lscala/reflect/api/Trees$TreeApi;
  #218 = Utf8               [Ljava/lang/Object;
  #219 = Class              #218          // "[Ljava/lang/Object;"
  #220 = Utf8               wrapRefArray
  #221 = Utf8               ([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #222 = NameAndType        #220:#221     // wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #223 = Methodref          #211.#222     // scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #224 = Utf8               (Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #225 = NameAndType        #194:#224     // apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #226 = Methodref          #145.#225     // scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #227 = Utf8               (Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$TypeApplyApi;
  #228 = NameAndType        #194:#227     // apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$TypeApplyApi;
  #229 = Methodref          #68.#228      // scala/reflect/api/Trees$TypeApplyExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$TypeApplyApi;
  #230 = Utf8               Literal
  #231 = Utf8               ()Lscala/reflect/api/Trees$LiteralExtractor;
  #232 = NameAndType        #230:#231     // Literal:()Lscala/reflect/api/Trees$LiteralExtractor;
  #233 = Methodref          #100.#232     // scala/reflect/macros/Universe.Literal:()Lscala/reflect/api/Trees$LiteralExtractor;
  #234 = Utf8               Constant
  #235 = Utf8               ()Lscala/reflect/api/Constants$ConstantExtractor;
  #236 = NameAndType        #234:#235     // Constant:()Lscala/reflect/api/Constants$ConstantExtractor;
  #237 = Methodref          #100.#236     // scala/reflect/macros/Universe.Constant:()Lscala/reflect/api/Constants$ConstantExtractor;
  #238 = Utf8               toString
  #239 = Utf8               ()Ljava/lang/String;
  #240 = NameAndType        #238:#239     // toString:()Ljava/lang/String;
  #241 = InterfaceMethodref #62.#240      // scala/reflect/api/Trees$TreeApi.toString:()Ljava/lang/String;
  #242 = Utf8               (Ljava/lang/Object;)Lscala/reflect/api/Constants$ConstantApi;
  #243 = NameAndType        #194:#242     // apply:(Ljava/lang/Object;)Lscala/reflect/api/Constants$ConstantApi;
  #244 = Methodref          #20.#243      // scala/reflect/api/Constants$ConstantExtractor.apply:(Ljava/lang/Object;)Lscala/reflect/api/Constants$ConstantApi;
  #245 = Utf8               (Lscala/reflect/api/Constants$ConstantApi;)Lscala/reflect/api/Trees$LiteralApi;
  #246 = NameAndType        #194:#245     // apply:(Lscala/reflect/api/Constants$ConstantApi;)Lscala/reflect/api/Trees$LiteralApi;
  #247 = Methodref          #53.#246      // scala/reflect/api/Trees$LiteralExtractor.apply:(Lscala/reflect/api/Constants$ConstantApi;)Lscala/reflect/api/Trees$LiteralApi;
  #248 = Utf8               (Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$ApplyApi;
  #249 = NameAndType        #194:#248     // apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$ApplyApi;
  #250 = Methodref          #41.#249      // scala/reflect/api/Trees$ApplyExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$ApplyApi;
  #251 = Utf8               (Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;
  #252 = NameAndType        #26:#251      // Expr:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;
  #253 = InterfaceMethodref #90.#252      // scala/reflect/macros/whitebox/Context.Expr:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;
  #254 = Utf8               org/scalactic/MacroOwnerRepair
  #255 = Class              #254          // org/scalactic/MacroOwnerRepair
  #256 = Utf8               (Lscala/reflect/macros/whitebox/Context;)V
  #257 = NameAndType        #79:#256      // "<init>":(Lscala/reflect/macros/whitebox/Context;)V
  #258 = Methodref          #255.#257     // org/scalactic/MacroOwnerRepair."<init>":(Lscala/reflect/macros/whitebox/Context;)V
  #259 = Utf8               repairOwners
  #260 = Utf8               (Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Exprs$Expr;
  #261 = NameAndType        #259:#260     // repairOwners:(Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Exprs$Expr;
  #262 = Methodref          #255.#261     // org/scalactic/MacroOwnerRepair.repairOwners:(Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Exprs$Expr;
  #263 = Utf8               typeTree
  #264 = Utf8               Lscala/reflect/api/Trees$TreeApi;
  #265 = Utf8               expandedCode
  #266 = Utf8               Lscala/reflect/api/Exprs$Expr;
  #267 = Utf8               ownerRepair
  #268 = Utf8               Lorg/scalactic/MacroOwnerRepair;
  #269 = Utf8               this
  #270 = Utf8               Lscala/reflect/macros/whitebox/Context;
  #271 = Utf8               Lscala/reflect/api/TypeTags$WeakTypeTag;
  #272 = Utf8               scala/collection/SeqOps
  #273 = Class              #272          // scala/collection/SeqOps
  #274 = Methodref          #4.#80        // java/lang/Object."<init>":()V
  #275 = Utf8               Code
  #276 = Utf8               LineNumberTable
  #277 = Utf8               StackMapTable
  #278 = Utf8               LocalVariableTable
  #279 = Utf8               Signature
  #280 = Utf8               MethodParameters
  #281 = Utf8               InnerClasses
  #282 = Utf8               SourceFile
  #283 = Utf8               ScalaInlineInfo
  #284 = Utf8               Scala
{
  public static final org.scalactic.source.TypeInfoMacro$ MODULE$;
    descriptor: Lorg/scalactic/source/TypeInfoMacro$;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static {};
    descriptor: ()V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #2                  // class org/scalactic/source/TypeInfoMacro$
         3: dup
         4: invokespecial #81                 // Method "<init>":()V
         7: putstatic     #83                 // Field MODULE$:Lorg/scalactic/source/TypeInfoMacro$;
        10: return
      LineNumberTable:
        line 25: 0

  public <T extends java.lang.Object> scala.reflect.api.Exprs$Expr<T> genTypeInfo(scala.reflect.macros.whitebox.Context, scala.reflect.api.TypeTags$WeakTypeTag<T>);
    descriptor: (Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=11, locals=15, args_size=3
         0: aload_2
         1: astore        4
         3: aload_1
         4: invokeinterface #94,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.macroApplication:()Lscala/reflect/api/Trees$TreeApi;
         9: astore        6
        11: aload         6
        13: ifnull        204
        16: aload_1
        17: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
        22: invokevirtual #104                // Method scala/reflect/macros/Universe.TypeApplyTag:()Lscala/reflect/ClassTag;
        25: aload         6
        27: invokeinterface #110,  2          // InterfaceMethod scala/reflect/ClassTag.unapply:(Ljava/lang/Object;)Lscala/Option;
        32: astore        7
        34: aload         7
        36: invokevirtual #116                // Method scala/Option.isEmpty:()Z
        39: ifne          201
        42: aload         7
        44: invokevirtual #120                // Method scala/Option.get:()Ljava/lang/Object;
        47: checkcast     #65                 // class scala/reflect/api/Trees$TypeApplyApi
        50: astore        8
        52: aload         8
        54: ifnull        198
        57: aload_1
        58: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
        63: invokevirtual #124                // Method scala/reflect/macros/Universe.TypeApply:()Lscala/reflect/api/Trees$TypeApplyExtractor;
        66: aload         8
        68: invokevirtual #127                // Method scala/reflect/api/Trees$TypeApplyExtractor.unapply:(Lscala/reflect/api/Trees$TypeApplyApi;)Lscala/Option;
        71: astore        9
        73: aload         9
        75: invokevirtual #116                // Method scala/Option.isEmpty:()Z
        78: ifne          195
        81: aload         9
        83: invokevirtual #120                // Method scala/Option.get:()Ljava/lang/Object;
        86: checkcast     #129                // class scala/Tuple2
        89: invokevirtual #132                // Method scala/Tuple2._2:()Ljava/lang/Object;
        92: checkcast     #134                // class scala/collection/immutable/List
        95: astore        10
        97: aload         10
        99: ifnull        192
       102: getstatic     #139                // Field scala/package$.MODULE$:Lscala/package$;
       105: invokevirtual #143                // Method scala/package$.List:()Lscala/collection/immutable/List$;
       108: aload         10
       110: invokevirtual #149                // Method scala/collection/immutable/List$.unapplySeq:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
       113: astore        11
       115: getstatic     #152                // Field scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
       118: aload         11
       120: invokevirtual #156                // Method scala/collection/SeqFactory$UnapplySeqWrapper$.isEmpty$extension:(Lscala/collection/SeqOps;)Z
       123: ifne          189
       126: new           #7                  // class scala/collection/SeqFactory$UnapplySeqWrapper
       129: dup
       130: getstatic     #152                // Field scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
       133: aload         11
       135: invokevirtual #159                // Method scala/collection/SeqFactory$UnapplySeqWrapper$.get$extension:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
       138: invokespecial #162                // Method scala/collection/SeqFactory$UnapplySeqWrapper."<init>":(Lscala/collection/SeqOps;)V
       141: ifnull        189
       144: getstatic     #152                // Field scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
       147: getstatic     #152                // Field scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
       150: aload         11
       152: invokevirtual #159                // Method scala/collection/SeqFactory$UnapplySeqWrapper$.get$extension:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
       155: iconst_1
       156: invokevirtual #166                // Method scala/collection/SeqFactory$UnapplySeqWrapper$.lengthCompare$extension:(Lscala/collection/SeqOps;I)I
       159: iconst_0
       160: if_icmpne     189
       163: getstatic     #152                // Field scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
       166: getstatic     #152                // Field scala/collection/SeqFactory$UnapplySeqWrapper$.MODULE$:Lscala/collection/SeqFactory$UnapplySeqWrapper$;
       169: aload         11
       171: invokevirtual #159                // Method scala/collection/SeqFactory$UnapplySeqWrapper$.get$extension:(Lscala/collection/SeqOps;)Lscala/collection/SeqOps;
       174: iconst_0
       175: invokevirtual #170                // Method scala/collection/SeqFactory$UnapplySeqWrapper$.apply$extension:(Lscala/collection/SeqOps;I)Ljava/lang/Object;
       178: checkcast     #62                 // class scala/reflect/api/Trees$TreeApi
       181: astore        12
       183: aload         12
       185: astore_3
       186: goto          217
       189: goto          207
       192: goto          207
       195: goto          207
       198: goto          207
       201: goto          207
       204: goto          207
       207: new           #172                // class scala/MatchError
       210: dup
       211: aload         6
       213: invokespecial #175                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       216: athrow
       217: aload_3
       218: astore        5
       220: aload_1
       221: aload_1
       222: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       227: invokevirtual #179                // Method scala/reflect/macros/Universe.Apply:()Lscala/reflect/api/Trees$ApplyExtractor;
       230: aload_1
       231: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       236: invokevirtual #124                // Method scala/reflect/macros/Universe.TypeApply:()Lscala/reflect/api/Trees$TypeApplyExtractor;
       239: aload_1
       240: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       245: invokevirtual #183                // Method scala/reflect/macros/Universe.Select:()Lscala/reflect/api/Trees$SelectExtractor;
       248: aload_1
       249: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       254: invokevirtual #183                // Method scala/reflect/macros/Universe.Select:()Lscala/reflect/api/Trees$SelectExtractor;
       257: aload_1
       258: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       263: invokevirtual #183                // Method scala/reflect/macros/Universe.Select:()Lscala/reflect/api/Trees$SelectExtractor;
       266: aload_1
       267: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       272: invokevirtual #183                // Method scala/reflect/macros/Universe.Select:()Lscala/reflect/api/Trees$SelectExtractor;
       275: aload_1
       276: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       281: invokevirtual #183                // Method scala/reflect/macros/Universe.Select:()Lscala/reflect/api/Trees$SelectExtractor;
       284: aload_1
       285: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       290: invokevirtual #187                // Method scala/reflect/macros/Universe.Ident:()Lscala/reflect/api/Trees$IdentExtractor;
       293: aload_1
       294: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       299: ldc           #189                // String _root_
       301: invokevirtual #193                // Method scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
       304: checkcast     #28                 // class scala/reflect/api/Names$NameApi
       307: invokevirtual #197                // Method scala/reflect/api/Trees$IdentExtractor.apply:(Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$IdentApi;
       310: aload_1
       311: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       316: ldc           #199                // String org
       318: invokevirtual #193                // Method scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
       321: checkcast     #28                 // class scala/reflect/api/Names$NameApi
       324: invokevirtual #202                // Method scala/reflect/api/Trees$SelectExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
       327: aload_1
       328: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       333: ldc           #204                // String scalactic
       335: invokevirtual #193                // Method scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
       338: checkcast     #28                 // class scala/reflect/api/Names$NameApi
       341: invokevirtual #202                // Method scala/reflect/api/Trees$SelectExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
       344: aload_1
       345: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       350: ldc           #206                // String source
       352: invokevirtual #193                // Method scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
       355: checkcast     #28                 // class scala/reflect/api/Names$NameApi
       358: invokevirtual #202                // Method scala/reflect/api/Trees$SelectExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
       361: aload_1
       362: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       367: ldc           #208                // String TypeInfo
       369: invokevirtual #193                // Method scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
       372: checkcast     #28                 // class scala/reflect/api/Names$NameApi
       375: invokevirtual #202                // Method scala/reflect/api/Trees$SelectExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
       378: aload_1
       379: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       384: ldc           #209                // String apply
       386: invokevirtual #193                // Method scala/reflect/macros/Universe.newTermName:(Ljava/lang/String;)Lscala/reflect/api/Names$TermNameApi;
       389: checkcast     #28                 // class scala/reflect/api/Names$NameApi
       392: invokevirtual #202                // Method scala/reflect/api/Trees$SelectExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/Names$NameApi;)Lscala/reflect/api/Trees$SelectApi;
       395: getstatic     #139                // Field scala/package$.MODULE$:Lscala/package$;
       398: invokevirtual #143                // Method scala/package$.List:()Lscala/collection/immutable/List$;
       401: getstatic     #214                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       404: iconst_1
       405: anewarray     #62                 // class scala/reflect/api/Trees$TreeApi
       408: dup
       409: iconst_0
       410: aload         5
       412: invokeinterface #217,  1          // InterfaceMethod scala/reflect/api/Trees$TreeApi.duplicate:()Lscala/reflect/api/Trees$TreeApi;
       417: aastore
       418: checkcast     #219                // class "[Ljava/lang/Object;"
       421: invokevirtual #223                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
       424: invokevirtual #226                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
       427: checkcast     #134                // class scala/collection/immutable/List
       430: invokevirtual #229                // Method scala/reflect/api/Trees$TypeApplyExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$TypeApplyApi;
       433: getstatic     #139                // Field scala/package$.MODULE$:Lscala/package$;
       436: invokevirtual #143                // Method scala/package$.List:()Lscala/collection/immutable/List$;
       439: getstatic     #214                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       442: iconst_1
       443: anewarray     #50                 // class scala/reflect/api/Trees$LiteralApi
       446: dup
       447: iconst_0
       448: aload_1
       449: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       454: invokevirtual #233                // Method scala/reflect/macros/Universe.Literal:()Lscala/reflect/api/Trees$LiteralExtractor;
       457: aload_1
       458: invokeinterface #98,  1           // InterfaceMethod scala/reflect/macros/whitebox/Context.universe:()Lscala/reflect/macros/Universe;
       463: invokevirtual #237                // Method scala/reflect/macros/Universe.Constant:()Lscala/reflect/api/Constants$ConstantExtractor;
       466: aload         5
       468: invokeinterface #241,  1          // InterfaceMethod scala/reflect/api/Trees$TreeApi.toString:()Ljava/lang/String;
       473: invokevirtual #244                // Method scala/reflect/api/Constants$ConstantExtractor.apply:(Ljava/lang/Object;)Lscala/reflect/api/Constants$ConstantApi;
       476: invokevirtual #247                // Method scala/reflect/api/Trees$LiteralExtractor.apply:(Lscala/reflect/api/Constants$ConstantApi;)Lscala/reflect/api/Trees$LiteralApi;
       479: aastore
       480: checkcast     #219                // class "[Ljava/lang/Object;"
       483: invokevirtual #223                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
       486: invokevirtual #226                // Method scala/collection/immutable/List$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
       489: checkcast     #134                // class scala/collection/immutable/List
       492: invokevirtual #250                // Method scala/reflect/api/Trees$ApplyExtractor.apply:(Lscala/reflect/api/Trees$TreeApi;Lscala/collection/immutable/List;)Lscala/reflect/api/Trees$ApplyApi;
       495: aload         4
       497: invokeinterface #253,  3          // InterfaceMethod scala/reflect/macros/whitebox/Context.Expr:(Lscala/reflect/api/Trees$TreeApi;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;
       502: astore        13
       504: new           #255                // class org/scalactic/MacroOwnerRepair
       507: dup
       508: aload_1
       509: invokespecial #258                // Method org/scalactic/MacroOwnerRepair."<init>":(Lscala/reflect/macros/whitebox/Context;)V
       512: astore        14
       514: aload         14
       516: aload         13
       518: invokevirtual #262                // Method org/scalactic/MacroOwnerRepair.repairOwners:(Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Exprs$Expr;
       521: areturn
      StackMapTable: number_of_entries = 8
        frame_type = 255 /* full_frame */
          offset_delta = 189
          locals = [ class org/scalactic/source/TypeInfoMacro$, class scala/reflect/macros/whitebox/Context, class scala/reflect/api/TypeTags$WeakTypeTag, top, class scala/reflect/api/TypeTags$WeakTypeTag, top, class scala/reflect/api/Trees$TreeApi, class scala/Option, class scala/reflect/api/Trees$TypeApplyApi, class scala/Option, class scala/collection/immutable/List, class scala/collection/SeqOps ]
          stack = []
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class org/scalactic/source/TypeInfoMacro$, class scala/reflect/macros/whitebox/Context, class scala/reflect/api/TypeTags$WeakTypeTag, class scala/reflect/api/Trees$TreeApi, class scala/reflect/api/TypeTags$WeakTypeTag, top, class scala/reflect/api/Trees$TreeApi, class scala/Option, class scala/reflect/api/Trees$TypeApplyApi, class scala/Option, class scala/collection/immutable/List, class scala/collection/SeqOps, class scala/reflect/api/Trees$TreeApi ]
          stack = []
      LineNumberTable:
        line 30: 0
        line 33: 3
        line 36: 220
        line 37: 221
        line 38: 230
        line 39: 239
        line 40: 248
        line 41: 257
        line 42: 266
        line 43: 275
        line 44: 284
        line 45: 310
        line 47: 327
        line 49: 344
        line 51: 361
        line 53: 378
        line 55: 395
        line 57: 433
        line 58: 448
        line 36: 495
        line 63: 504
        line 64: 514
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
          183       6    12 typeTree   Lscala/reflect/api/Trees$TreeApi;
          220     301     5 typeTree   Lscala/reflect/api/Trees$TreeApi;
          504      17    13 expandedCode   Lscala/reflect/api/Exprs$Expr;
          514       7    14 ownerRepair   Lorg/scalactic/MacroOwnerRepair;
            0     522     0  this   Lorg/scalactic/source/TypeInfoMacro$;
            0     522     1 context   Lscala/reflect/macros/whitebox/Context;
            0     522     2 evidence$1   Lscala/reflect/api/TypeTags$WeakTypeTag;
    Signature: #86                          // <T:Ljava/lang/Object;>(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag<TT;>;)Lscala/reflect/api/Exprs$Expr<TT;>;
    MethodParameters:
      Name                           Flags
      context                        final
      evidence$1                     final

  private org.scalactic.source.TypeInfoMacro$();
    descriptor: ()V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #274                // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 67: 0
        line 25: 4
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/source/TypeInfoMacro$;
}
InnerClasses:
  public static final #10= #7 of #9;      // UnapplySeqWrapper=class scala/collection/SeqFactory$UnapplySeqWrapper of class scala/collection/SeqFactory
  public static #13= #12 of #9;           // UnapplySeqWrapper$=class scala/collection/SeqFactory$UnapplySeqWrapper$ of class scala/collection/SeqFactory
  public abstract #18= #15 of #17;        // ConstantApi=class scala/reflect/api/Constants$ConstantApi of class scala/reflect/api/Constants
  public abstract #21= #20 of #17;        // ConstantExtractor=class scala/reflect/api/Constants$ConstantExtractor of class scala/reflect/api/Constants
  public #26= #23 of #25;                 // Expr=class scala/reflect/api/Exprs$Expr of class scala/reflect/api/Exprs
  public abstract #31= #28 of #30;        // NameApi=class scala/reflect/api/Names$NameApi of class scala/reflect/api/Names
  public #34= #33 of #30;                 // TermNameApi=class scala/reflect/api/Names$TermNameApi of class scala/reflect/api/Names
  public #39= #36 of #38;                 // ApplyApi=class scala/reflect/api/Trees$ApplyApi of class scala/reflect/api/Trees
  public abstract #42= #41 of #38;        // ApplyExtractor=class scala/reflect/api/Trees$ApplyExtractor of class scala/reflect/api/Trees
  public #45= #44 of #38;                 // IdentApi=class scala/reflect/api/Trees$IdentApi of class scala/reflect/api/Trees
  public abstract #48= #47 of #38;        // IdentExtractor=class scala/reflect/api/Trees$IdentExtractor of class scala/reflect/api/Trees
  public #51= #50 of #38;                 // LiteralApi=class scala/reflect/api/Trees$LiteralApi of class scala/reflect/api/Trees
  public abstract #54= #53 of #38;        // LiteralExtractor=class scala/reflect/api/Trees$LiteralExtractor of class scala/reflect/api/Trees
  public #57= #56 of #38;                 // SelectApi=class scala/reflect/api/Trees$SelectApi of class scala/reflect/api/Trees
  public abstract #60= #59 of #38;        // SelectExtractor=class scala/reflect/api/Trees$SelectExtractor of class scala/reflect/api/Trees
  public #63= #62 of #38;                 // TreeApi=class scala/reflect/api/Trees$TreeApi of class scala/reflect/api/Trees
  public #66= #65 of #38;                 // TypeApplyApi=class scala/reflect/api/Trees$TypeApplyApi of class scala/reflect/api/Trees
  public abstract #69= #68 of #38;        // TypeApplyExtractor=class scala/reflect/api/Trees$TypeApplyExtractor of class scala/reflect/api/Trees
  public #74= #71 of #73;                 // WeakTypeTag=class scala/reflect/api/TypeTags$WeakTypeTag of class scala/reflect/api/TypeTags
SourceFile: "TypeInfoMacro.scala"
  ScalaInlineInfo: length = 0xE (unknown attribute)
   01 01 00 02 00 4F 00 4E 01 00 54 00 55 01
  Scala: length = 0x0 (unknown attribute)

