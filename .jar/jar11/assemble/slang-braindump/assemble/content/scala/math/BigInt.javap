Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/scala/math/BigInt.class
  Last modified May 29, 2022; size 21777 bytes
  SHA-256 checksum b6dea7de0ec7d6cd088fab8128bb3d833964c153a56cd326e078df887d867472
  Compiled from "BigInt.scala"
public final class scala.math.BigInt extends scala.math.ScalaNumber implements scala.math.ScalaNumericConversions, scala.math.Ordered<scala.math.BigInt>
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // scala/math/BigInt
  super_class: #5                         // scala/math/ScalaNumber
  interfaces: 2, fields: 2, methods: 96, attributes: 6
Constant pool:
    #1 = Utf8               scala/math/BigInt
    #2 = Class              #1            // scala/math/BigInt
    #3 = Utf8               Lscala/math/ScalaNumber;Lscala/math/ScalaNumericConversions;Lscala/math/Ordered<Lscala/math/BigInt;>;
    #4 = Utf8               scala/math/ScalaNumber
    #5 = Class              #4            // scala/math/ScalaNumber
    #6 = Utf8               scala/math/ScalaNumericConversions
    #7 = Class              #6            // scala/math/ScalaNumericConversions
    #8 = Utf8               scala/math/Ordered
    #9 = Class              #8            // scala/math/Ordered
   #10 = Utf8               BigInt.scala
   #11 = Utf8               Lscala/reflect/ScalaSignature;
   #12 = Utf8               bytes
   #13 = Utf8               \u0006\u0005\r%u!\u00022d\u0011\u0003Ag!\u00026d\u0011\u0003Y\u0007\"\u0002=\u0002\t\u0003I\bb\u0002>\u0002\u0005\u0004%Ia\u001f\u0005\b\u0003\u0007\t\u0001\u0015!\u0003}\u0011%\t)!\u0001b\u0001\n\u0013\t9\u0001\u0003\u0005\u0003v\u0006\u0001\u000b\u0011BA\u0005\u0011!\u001190\u0001Q\u0001\n\u0005\r\u0004\u0002\u0003B}\u0003\u0001\u0006I!a\u0019\t\u0011\tm\u0018\u0001)A\u0005\u0005{D\u0001Ba@\u0002A\u0013%1\u0011\u0001\u0005\t\u0007\u000f\t!\u0019!C\u0005w\"91\u0011B\u0001!\u0002\u0013a\bbBB\u0006\u0003\u0011\u00051Q\u0002\u0005\b\u0007\u0017\tA\u0011AB\t\u0011\u001d\u0019Y!\u0001C\u0001\u0007/Aqaa\u0003\u0002\t\u0003\u0019i\u0002C\u0004\u0004\f\u0005!\ta!\n\t\u000f\r-\u0011\u0001\"\u0001\u0004>!911B\u0001\u0005\u0002\r\u0015\u0003bBB\u0006\u0003\u0011\u00051\u0011\n\u0005\b\u0007\u0017\tA\u0011AB(\u0011\u001d\u0019\u0019&\u0001C\u0001\u0007+Bqaa\u0017\u0002\t\u0007\u0019i\u0006C\u0004\u0004b\u0005!\u0019aa\u0019\t\u000f\r\u001d\u0014\u0001b\u0001\u0004j!91QN\u0001\u0005\n\r=\u0004\"CB=\u0003\u0005\u0005I\u0011BB>\r\u0015Q7MAA\u0006\u0011%\tY\u0003\bBA\u0002\u0013%1\u0010\u0003\u0006\u0002.q\u0011\t\u0019!C\u0005\u0003_A\u0011\"a\u000f\u001d\u0005\u0003\u0005\u000b\u0015\u0002?\t\u0015\u0005uBD!b\u0001\n\u0013\ty\u0004\u0003\u0006\u0002Hq\u0011\t\u0011)A\u0005\u0003\u0003Ba\u0001\u001f\u000f\u0005\n\u0005%\u0003B\u0002=\u001d\t\u0003\ty\u0005C\u0004\u0002Vq!I!a\u0016\t\r\u0005MC\u0004\"\u0001|\u0011\u001d\ty\u0006\bC!\u0003CBq!!\u001b\u001d\t\u0003\nY\u0007C\u0004\u0002xq!\t%a\u0016\t\u000f\u0005eD\u0004\"\u0011\u0002X!9\u00111\u0010\u000f\u0005B\u0005]\u0003bBA?9\u0011\u0005\u0013q\u000b\u0005\b\u0003\u007fbB\u0011AA,\u0011\u001d\t\t\t\bC\u0001\u0003/Bq!a!\u001d\t\u0003\t9\u0006C\u0004\u0002\u0006r!I!a\u0016\t\u000f\u0005\u001dE\u0004\"\u0001\u0002X!9\u0011\u0011\u0012\u000f\u0005\u0002\u0005-\u0005bBA59\u0011\u0005\u0011Q\u0012\u0005\b\u0003#cB\u0011AAJ\u0011\u001d\t9\n\bC\u0001\u00033Cq!!(\u001d\t\u0003\ty\nC\u0004\u0002$r!\t!!*\t\u000f\u0005%F\u0004\"\u0001\u0002,\"9\u0011q\u0016\u000f\u0005\u0002\u0005E\u0006bBA[9\u0011\u0005\u0011q\u0017\u0005\b\u0003\u0003dB\u0011AAb\u0011\u001d\tI\r\bC\u0001\u0003\u0017Dq!a4\u001d\t\u0003\t\t\u000eC\u0004\u0002Vr!\t!a6\t\u000f\u0005mG\u0004\"\u0001\u0002^\"9\u0011\u0011\u001d\u000f\u0005\u0002\u0005\r\bbBAt9\u0011\u0005\u0011\u0011\u001e\u0005\b\u0003[dB\u0011AAx\u0011\u001d\t\u0019\u0010\bC\u0001\u0003kDq!!?\u001d\t\u0003\tY\u0010C\u0004\u0002\u0000r!\tA!\u0001\t\u000f\t\u001dA\u0004\"\u0001\u0003\n!9!\u0011\u0003\u000f\u0005\u0002\tM\u0001b\u0002B\f9\u0011\u0005\u0011q\u0001\u0005\b\u00053aB\u0011AA\u0004\u0011\u001d\u0011Y\u0002\bC\u0001\u0005;AqAa\b\u001d\t\u0003\t9\u0001C\u0004\u0003\"q!\t!a\u0002\t\u000f\t\rB\u0004\"\u0001\u0003&!9!\u0011\u0006\u000f\u0005\u0002\t-\u0002b\u0002B\u00189\u0011\u0005!\u0011\u0007\u0005\b\u0005kaB\u0011\u0001B\u001c\u0011\u001d\u0011Y\u0004\bC\u0001\u0005;AqA!\u0010\u001d\t\u0003\u0011i\u0002C\u0004\u0003@q!\tA!\b\t\u000f\t\u0005C\u0004\"\u0001\u0003D!9!\u0011\n\u000f\u0005B\t-\u0003b\u0002B*9\u0011\u0005#Q\u000b\u0005\b\u0005;bB\u0011\u0001B0\u0011\u001d\u00119\u0007\bC\u0001\u0005;AqA!\u001b\u001d\t\u0003\ty\u0004C\u0004\u0003lq!\tA!\u001c\t\u000f\tUD\u0004\"\u0001\u0003x!9!q\u0010\u000f\u0005\u0002\t\u0005\u0005\"\u0003BR9E\u0005I\u0011\u0001BS\u0011\u001d\u0011Y\f\bC\u0001\u0005{C\u0011B!3\u001d#\u0003%\tA!*\t\u000f\t-G\u0004\"\u0011\u0003N\"9!1\u001a\u000f\u0005\u0002\t\u0015\bb\u0002Bv9\u0011\u0005!Q^\u0001\u0007\u0005&<\u0017J\u001c;\u000b\u0005\u0011,\u0017\u0001B7bi\"T\u0011AZ\u0001\u0006g\u000e\fG.Y\u0002\u0001!\tI\u0017!D\u0001d\u0005\u0019\u0011\u0015nZ%oiN\u0019\u0011\u0001\u001c9\u0011\u00055tW\"A3\n\u0005=,\'AB!osJ+g\r\u0005\u0002rm6\t!O\u0003\u0002ti\u0006\u0011\u0011n\u001c\u0006\u0002k\u0006!!.\u0019<b\u0013\t9(O\u0001\u0007TKJL\u0017\r\\5{C\ndW-\u0001\u0004=S:LGO\u0010\u000b\u0002Q\u00061Bn\u001c8h\u001b&tg+\u00197vK\nKw-\u00138uK\u001e,\'/F\u0001}!\tix0D\u0001\u007f\u0015\t!G/C\u0002\u0002\u0002y\u0014!BQ5h\u0013:$XmZ3s\u0003]awN\\4NS:4\u0016\r\\;f\u0005&<\u0017J\u001c;fO\u0016\u0014\b%\u0001\u0007m_:<W*\u001b8WC2,X-\u0006\u0002\u0002\nA\u0011\u0011\u000eH\n\n9\u00055\u00111CA\r\u0003K\u00012![A\b\u0013\r\t\tb\u0019\u0002\f\'\u000e\fG.\u0019(v[\n,\'\u000fE\u0002j\u0003+I1!a\u0006d\u0005]\u00196-\u00197b\u001dVlWM]5d\u0007>tg/\u001a:tS>t7\u000f\u0005\u0003\u0002\u001c\u0005\u0005bbA7\u0002\u001e%\u0019\u0011qD3\u0002\u000fA\f7m[1hK&\u0019q/a\t\u000b\u0007\u0005}Q\rE\u0003j\u0003O\tI!C\u0002\u0002*\r\u0014qa\u0014:eKJ,G-A\u0006`E&<\u0017J\u001c;fO\u0016\u0014\u0018aD0cS\u001eLe\u000e^3hKJ|F%Z9\u0015\t\u0005E\u0012q\u0007\t\u0004[\u0006M\u0012bAA\u001bK\n!QK\\5u\u0011!\tIDHA\u0001\u0002\u0004a\u0018a\u0001=%c\u0005aqLY5h\u0013:$XmZ3sA\u0005)q\f\\8oOV\u0011\u0011\u0011\t\t\u0004[\u0006\r\u0013bAA#K\n!Aj\u001c8h\u0003\u0019yFn\u001c8hAQ1\u0011\u0011BA&\u0003\u001bBa!a\u000b#\u0001\u0004a\bbBA\u001fE\u0001\u0007\u0011\u0011\t\u000b\u0005\u0003\u0013\t\t\u0006\u0003\u0004\u0002T\r\u0002\r\u0001`\u0001\u000bE&<\u0017J\u001c;fO\u0016\u0014\u0018\u0001\u00047p]\u001e,enY8eS:<WCAA-!\ri\u00171L\u0005\u0004\u0003;*\'a\u0002\"p_2,\u0017M\\\u0001\tQ\u0006\u001c\bnQ8eKR\u0011\u00111\r\t\u0004[\u0006\u0015\u0014bAA4K\n\u0019\u0011J\u001c;\u0002\r\u0015\fX/\u00197t)\u0011\tI&!\u001c\t\u000f\u0005=t\u00051\u0001\u0002r\u0005!A\u000f[1u!\ri\u00171O\u0005\u0004\u0003k*\'aA!os\u0006Y\u0011n\u001d,bY&$\')\u001f;f\u00031I7OV1mS\u0012\u001c\u0006n\u001c:u\u0003-I7OV1mS\u0012\u001c\u0005.\u0019:\u0002\u0015%\u001ch+\u00197jI&sG/A\u0006jgZ\u000bG.\u001b3M_:<\u0017\u0001D5t-\u0006d\u0017\u000e\u001a$m_\u0006$\u0018!D5t-\u0006d\u0017\u000e\u001a#pk\ndW-A\tcSRdUM\\4uQ>3XM\u001d4m_^\fq![:XQ>dW-\u0001\u0006v]\u0012,\'\u000f\\=j]\u001e$\u0012\u0001 \u000b\u0005\u00033\ny\tC\u0004\u0002pI\u0002\r!!\u0003\u0002\u000f\r|W\u000e]1sKR!\u00111MAK\u0011\u001d\tyg\ra\u0001\u0003\u0013\tQ\u0001\n9mkN$B!!\u0003\u0002\u001c\"9\u0011q\u000e\u001bA\u0002\u0005%\u0011A\u0002\u0013nS:,8\u000f\u0006\u0003\u0002\n\u0005\u0005\u0006bBA8k\u0001\u0007\u0011\u0011B\u0001\u0007IQLW.Z:\u0015\t\u0005%\u0011q\u0015\u0005\b\u0003_2\u0004\u0019AA\u0005\u0003\u0011!C-\u001b<\u0015\t\u0005%\u0011Q\u0016\u0005\b\u0003_:\u0004\u0019AA\u0005\u0003!!\u0003/\u001a:dK:$H\u0003BA\u0005\u0003gCq!a\u001c9\u0001\u0004\tI!\u0001\u0007%I&4H\u0005]3sG\u0016tG\u000f\u0006\u0003\u0002:\u0006}\u0006cB7\u0002<\u0006%\u0011\u0011B\u0005\u0004\u0003{+\'A\u0002+va2,\'\u0007C\u0004\u0002pe\u0002\r!!\u0003\u0002\u0015\u0011bWm]:%Y\u0016\u001c8\u000f\u0006\u0003\u0002\n\u0005\u0015\u0007bBAdu\u0001\u0007\u00111M\u0001\u0002]\u0006\u0001Be\u001a:fCR,\'\u000fJ4sK\u0006$XM\u001d\u000b\u0005\u0003\u0013\ti\rC\u0004\u0002Hn\u0002\r!a\u0019\u0002\t\u0011\nW\u000e\u001d\u000b\u0005\u0003\u0013\t\u0019\u000eC\u0004\u0002pq\u0002\r!!\u0003\u0002\t\u0011\u0012\u0017M\u001d\u000b\u0005\u0003\u0013\tI\u000eC\u0004\u0002pu\u0002\r!!\u0003\u0002\u0007\u0011*\b\u000f\u0006\u0003\u0002\n\u0005}\u0007bBA8}\u0001\u0007\u0011\u0011B\u0001\u000bI\u0005l\u0007\u000f\n;jY\u0012,G\u0003BA\u0005\u0003KDq!a\u001c@\u0001\u0004\tI!A\u0002hG\u0012$B!!\u0003\u0002l\"9\u0011q\u000e!A\u0002\u0005%\u0011aA7pIR!\u0011\u0011BAy\u0011\u001d\ty\'\u0011a\u0001\u0003\u0013\t1!\\5o)\u0011\tI!a>\t\u000f\u0005=$\t1\u0001\u0002\n\u0005\u0019Q.\u0019=\u0015\t\u0005%\u0011Q \u0005\b\u0003_\u001a\u0005\u0019AA\u0005\u0003\r\u0001xn\u001e\u000b\u0005\u0003\u0013\u0011\u0019\u0001C\u0004\u0003\u0006\u0011\u0003\r!a\u0019\u0002\u0007\u0015D\b/\u0001\u0004n_\u0012\u0004vn\u001e\u000b\u0007\u0003\u0013\u0011YA!\u0004\t\u000f\t\u0015Q\t1\u0001\u0002\n!9!qB#A\u0002\u0005%\u0011!A7\u0002\u00155|G-\u00138wKJ\u001cX\r\u0006\u0003\u0002\n\tU\u0001b\u0002B\b\r\u0002\u0007\u0011\u0011B\u0001\rk:\f\'/_0%[&tWo]\u0001\u0004C\n\u001c\u0018AB:jO:,X.\u0006\u0002\u0002d\u0005!1/[4o\u00031)h.\u0019:z?\u0012\"\u0018\u000e\u001c3f\u0003\u001d!Xm\u001d;CSR$B!!\u0017\u0003(!9\u0011q\u0019\'A\u0002\u0005\r\u0014AB:fi\nKG\u000f\u0006\u0003\u0002\n\t5\u0002bBAd\u001b\u0002\u0007\u00111M\u0001\tG2,\u0017M\u001d\"jiR!\u0011\u0011\u0002B\u001a\u0011\u001d\t9M\u0014a\u0001\u0003G\nqA\u001a7ja\nKG\u000f\u0006\u0003\u0002\n\te\u0002bBAd\u001f\u0002\u0007\u00111M\u0001\rY><Xm\u001d;TKR\u0014\u0015\u000e^\u0001\nE&$H*\u001a8hi\"\f\u0001BY5u\u0007>,h\u000e^\u0001\u0010SN\u0004&o\u001c2bE2,\u0007K]5nKR!\u0011\u0011\fB#\u0011\u001d\u00119e\u0015a\u0001\u0003G\n\u0011bY3si\u0006Lg\u000e^=\u0002\u0013\tLH/\u001a,bYV,WC\u0001B\'!\ri\'qJ\u0005\u0004\u0005#*\'\u0001\u0002\"zi\u0016\f!b\u001d5peR4\u0016\r\\;f+\t\u00119\u0006E\u0002n\u00053J1Aa\u0017f\u0005\u0015\u0019\u0006n\u001c:u\u0003%\u0019\u0007.\u0019:WC2,X-\u0006\u0002\u0003bA\u0019QNa\u0019\n\u0007\t\u0015TM\u0001\u0003DQ\u0006\u0014\u0018\u0001C5oiZ\u000bG.^3\u0002\u00131|gn\u001a,bYV,\u0017A\u00034m_\u0006$h+\u00197vKV\u0011!q\u000e\t\u0004[\nE\u0014b\u0001B:K\n)a\t\\8bi\u0006YAm\\;cY\u00164\u0016\r\\;f+\t\u0011I\bE\u0002n\u0005wJ1A! f\u0005\u0019!u.\u001e2mK\u0006)QO\u001c;jYR1!1\u0011BN\u0005?\u0003bA!\"\u0003\u0016\u0006%a\u0002\u0002BD\u0005#k!A!#\u000b\t\t-%QR\u0001\nS6lW\u000f^1cY\u0016T1Aa$f\u0003)\u0019w\u000e\u001c7fGRLwN\\\u0005\u0005\u0005\'\u0013I)\u0001\u0007Ok6,\'/[2SC:<W-\u0003\u0003\u0003\u0018\ne%!C#yG2,8/\u001b<f\u0015\u0011\u0011\u0019J!#\t\u000f\tu5\f1\u0001\u0002\n\u0005\u0019QM\u001c3\t\u0013\t\u00056\f%AA\u0002\u0005%\u0011\u0001B:uKB\fq\"\u001e8uS2$C-\u001a4bk2$HEM\u000b\u0003\u0005OSC!!\u0003\u0003*.\u0012!1\u0016\t\u0005\u0005[\u00139,\u0004\u0002\u00030*!!\u0011\u0017BZ\u0003%)hn\u00195fG.,GMC\u0002\u00036\u0016\f!\"\u00198o_R\fG/[8o\u0013\u0011\u0011ILa,\u0003#Ut7\r[3dW\u0016$g+\u0019:jC:\u001cW-\u0001\u0002u_R1!q\u0018Bc\u0005\u000f\u0004bA!\"\u0003B\u0006%\u0011\u0002\u0002Bb\u00053\u0013\u0011\"\u00138dYV\u001c\u0018N^3\t\u000f\tuU\f1\u0001\u0002\n!I!\u0011U/\u0011\u0002\u0003\u0007\u0011\u0011B\u0001\ri>$C-\u001a4bk2$HEM\u0001\ti>\u001cFO]5oOR\u0011!q\u001a\t\u0005\u0005#\u0014yN\u0004\u0003\u0003T\nm\u0007c\u0001BkK6\u0011!q\u001b\u0006\u0004\u00053<\u0017A\u0002\u001fs_>$h(C\u0002\u0003^\u0016\fa\u0001\u0015:fI\u00164\u0017\u0002\u0002Bq\u0005G\u0014aa\u0015;sS:<\'b\u0001BoKR!!q\u001aBt\u0011\u001d\u0011I\u000f\u0019a\u0001\u0003G\nQA]1eSb\f1\u0002^8CsR,\u0017I\u001d:bsV\u0011!q\u001e\t\u0006[\nE(QJ\u0005\u0004\u0005g,\'!B!se\u0006L\u0018!\u00047p]\u001el\u0015N\u001c,bYV,\u0007%A\u0005nS:\u001c\u0015m\u00195fI\u0006IQ.\u0019=DC\u000eDW\rZ\u0001\u0006G\u0006\u001c\u0007.\u001a\t\u0006[\nE\u0018\u0011B\u0001\nO\u0016$8)Y2iK\u0012$B!!\u0003\u0004\u0004!91Q\u0001\u0006A\u0002\u0005\r\u0014!A5\u0002\u00115Lg.^:P]\u0016\f\u0011\"\\5okN|e.\u001a\u0011\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\t\u0005%1q\u0002\u0005\b\u0007\u000bi\u0001\u0019AA2)\u0011\tIaa\u0005\t\u000f\rUa\u00021\u0001\u0002B\u0005\tA\u000e\u0006\u0003\u0002\n\re\u0001bBB\u000e\u001f\u0001\u0007!q^\u0001\u0002qR1\u0011\u0011BB\u0010\u0007CAqAa\u0007\u0011\u0001\u0004\t\u0019\u0007C\u0004\u0004$A\u0001\rAa<\u0002\u00135\fwM\\5uk\u0012,G\u0003CA\u0005\u0007O\u0019Yc!\f\t\u000f\r%\u0012\u00031\u0001\u0002d\u0005I!-\u001b;mK:<G\u000f\u001b\u0005\b\u0005\u000f\n\u0002\u0019AA2\u0011\u001d\u0019y#\u0005a\u0001\u0007c\t1A\u001d8e!\u0011\u0019\u0019d!\u000f\u000e\u0005\rU\"bAB\u001cK\u0006!Q\u000f^5m\u0013\u0011\u0019Yd!\u000e\u0003\rI\u000bg\u000eZ8n)\u0019\tIaa\u0010\u0004D!91\u0011\t\nA\u0002\u0005\r\u0014a\u00028v[\nLGo\u001d\u0005\b\u0007_\u0011\u0002\u0019AB\u0019)\u0011\tIaa\u0012\t\u000f\rm1\u00031\u0001\u0003PR1\u0011\u0011BB&\u0007\u001bBqaa\u0007\u0015\u0001\u0004\u0011y\rC\u0004\u0003jR\u0001\r!a\u0019\u0015\t\u0005%1\u0011\u000b\u0005\u0007\u00077)\u0002\u0019\u0001?\u0002\u001bA\u0014xNY1cY\u0016\u0004&/[7f)\u0019\tIaa\u0016\u0004Z!9!Q\b\fA\u0002\u0005\r\u0004bBB\u0018-\u0001\u00071\u0011G\u0001\u000bS:$(GY5h\u0013:$H\u0003BA\u0005\u0007?Bqa!\u0002\u0018\u0001\u0004\t\u0019\'A\u0006m_:<\'GY5h\u0013:$H\u0003BA\u0005\u0007KBqa!\u0006\u0019\u0001\u0004\t\t%A\u000bkCZ\f\')[4J]R,w-\u001a:3E&<\u0017J\u001c;\u0015\t\u0005%11\u000e\u0005\u0007\u00077I\u0002\u0019\u0001?\u0002\u000f1|gnZ$dIR1\u0011\u0011IB9\u0007kBqaa\u001d\u001b\u0001\u0004\t\t%A\u0001b\u0011\u001d\u00199H\u0007a\u0001\u0003\u0003\n\u0011AY\u0001\roJLG/\u001a*fa2\f7-\u001a\u000b\u0003\u0007{\u0002Baa \u0004\u00066\u00111\u0011\u0011\u0006\u0004\u0007\u0007#\u0018\u0001\u00027b]\u001eLAaa\"\u0004\u0002\n1qJ\u00196fGR\u0004
   #14 = Utf8               scala/collection/immutable/NumericRange$Exclusive
   #15 = Class              #14           // scala/collection/immutable/NumericRange$Exclusive
   #16 = Utf8               scala/collection/immutable/NumericRange
   #17 = Class              #16           // scala/collection/immutable/NumericRange
   #18 = Utf8               Exclusive
   #19 = Utf8               scala/collection/immutable/NumericRange$Inclusive
   #20 = Class              #19           // scala/collection/immutable/NumericRange$Inclusive
   #21 = Utf8               Inclusive
   #22 = Utf8               scala/collection/immutable/Range$BigInt$
   #23 = Class              #22           // scala/collection/immutable/Range$BigInt$
   #24 = Utf8               scala/collection/immutable/Range
   #25 = Class              #24           // scala/collection/immutable/Range
   #26 = Utf8               BigInt$
   #27 = Utf8               scala/math/Numeric$BigIntIsIntegral$
   #28 = Class              #27           // scala/math/Numeric$BigIntIsIntegral$
   #29 = Utf8               scala/math/Numeric
   #30 = Class              #29           // scala/math/Numeric
   #31 = Utf8               BigIntIsIntegral$
   #32 = Utf8               _bigInteger
   #33 = Utf8               Ljava/math/BigInteger;
   #34 = Utf8               _long
   #35 = Utf8               J
   #36 = Utf8               javaBigInteger2bigInt
   #37 = Utf8               (Ljava/math/BigInteger;)Lscala/math/BigInt;
   #38 = Utf8               x
   #39 = Utf8               scala/math/BigInt$
   #40 = Class              #39           // scala/math/BigInt$
   #41 = Utf8               MODULE$
   #42 = Utf8               Lscala/math/BigInt$;
   #43 = NameAndType        #41:#42       // MODULE$:Lscala/math/BigInt$;
   #44 = Fieldref           #40.#43       // scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
   #45 = Utf8               apply
   #46 = NameAndType        #45:#37       // apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
   #47 = Methodref          #40.#46       // scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
   #48 = Utf8               long2bigInt
   #49 = Utf8               (J)Lscala/math/BigInt;
   #50 = Utf8               l
   #51 = NameAndType        #45:#49       // apply:(J)Lscala/math/BigInt;
   #52 = Methodref          #40.#51       // scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
   #53 = Utf8               int2bigInt
   #54 = Utf8               (I)Lscala/math/BigInt;
   #55 = Utf8               i
   #56 = NameAndType        #45:#54       // apply:(I)Lscala/math/BigInt;
   #57 = Methodref          #40.#56       // scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
   #58 = Utf8               I
   #59 = Utf8               probablePrime
   #60 = Utf8               (ILscala/util/Random;)Lscala/math/BigInt;
   #61 = Utf8               bitLength
   #62 = Utf8               rnd
   #63 = NameAndType        #59:#60       // probablePrime:(ILscala/util/Random;)Lscala/math/BigInt;
   #64 = Methodref          #40.#63       // scala/math/BigInt$.probablePrime:(ILscala/util/Random;)Lscala/math/BigInt;
   #65 = Utf8               Lscala/util/Random;
   #66 = Utf8               (Ljava/lang/String;I)Lscala/math/BigInt;
   #67 = Utf8               radix
   #68 = NameAndType        #45:#66       // apply:(Ljava/lang/String;I)Lscala/math/BigInt;
   #69 = Methodref          #40.#68       // scala/math/BigInt$.apply:(Ljava/lang/String;I)Lscala/math/BigInt;
   #70 = Utf8               Ljava/lang/String;
   #71 = Utf8               (Ljava/lang/String;)Lscala/math/BigInt;
   #72 = NameAndType        #45:#71       // apply:(Ljava/lang/String;)Lscala/math/BigInt;
   #73 = Methodref          #40.#72       // scala/math/BigInt$.apply:(Ljava/lang/String;)Lscala/math/BigInt;
   #74 = Utf8               numbits
   #75 = NameAndType        #45:#60       // apply:(ILscala/util/Random;)Lscala/math/BigInt;
   #76 = Methodref          #40.#75       // scala/math/BigInt$.apply:(ILscala/util/Random;)Lscala/math/BigInt;
   #77 = Utf8               (IILscala/util/Random;)Lscala/math/BigInt;
   #78 = Utf8               bitlength
   #79 = Utf8               certainty
   #80 = NameAndType        #45:#77       // apply:(IILscala/util/Random;)Lscala/math/BigInt;
   #81 = Methodref          #40.#80       // scala/math/BigInt$.apply:(IILscala/util/Random;)Lscala/math/BigInt;
   #82 = Utf8               (I[B)Lscala/math/BigInt;
   #83 = Utf8               signum
   #84 = Utf8               magnitude
   #85 = NameAndType        #45:#82       // apply:(I[B)Lscala/math/BigInt;
   #86 = Methodref          #40.#85       // scala/math/BigInt$.apply:(I[B)Lscala/math/BigInt;
   #87 = Utf8               [B
   #88 = Utf8               ([B)Lscala/math/BigInt;
   #89 = NameAndType        #45:#88       // apply:([B)Lscala/math/BigInt;
   #90 = Methodref          #40.#89       // scala/math/BigInt$.apply:([B)Lscala/math/BigInt;
   #91 = Utf8               $less
   #92 = Utf8               (Ljava/lang/Object;)Z
   #93 = Utf8               that
   #94 = Utf8               $less$
   #95 = Utf8               (Lscala/math/Ordered;Ljava/lang/Object;)Z
   #96 = NameAndType        #94:#95       // $less$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
   #97 = InterfaceMethodref #9.#96        // scala/math/Ordered.$less$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
   #98 = Utf8               this
   #99 = Utf8               Lscala/math/BigInt;
  #100 = Utf8               Ljava/lang/Object;
  #101 = Utf8               $greater
  #102 = Utf8               $greater$
  #103 = NameAndType        #102:#95      // $greater$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
  #104 = InterfaceMethodref #9.#103       // scala/math/Ordered.$greater$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
  #105 = Utf8               $less$eq
  #106 = Utf8               $less$eq$
  #107 = NameAndType        #106:#95      // $less$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
  #108 = InterfaceMethodref #9.#107       // scala/math/Ordered.$less$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
  #109 = Utf8               $greater$eq
  #110 = Utf8               $greater$eq$
  #111 = NameAndType        #110:#95      // $greater$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
  #112 = InterfaceMethodref #9.#111       // scala/math/Ordered.$greater$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
  #113 = Utf8               compareTo
  #114 = Utf8               (Ljava/lang/Object;)I
  #115 = Utf8               compareTo$
  #116 = Utf8               (Lscala/math/Ordered;Ljava/lang/Object;)I
  #117 = NameAndType        #115:#116     // compareTo$:(Lscala/math/Ordered;Ljava/lang/Object;)I
  #118 = InterfaceMethodref #9.#117       // scala/math/Ordered.compareTo$:(Lscala/math/Ordered;Ljava/lang/Object;)I
  #119 = Utf8               toChar
  #120 = Utf8               ()C
  #121 = Utf8               scala/math/ScalaNumericAnyConversions
  #122 = Class              #121          // scala/math/ScalaNumericAnyConversions
  #123 = Utf8               toChar$
  #124 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)C
  #125 = NameAndType        #123:#124     // toChar$:(Lscala/math/ScalaNumericAnyConversions;)C
  #126 = InterfaceMethodref #122.#125     // scala/math/ScalaNumericAnyConversions.toChar$:(Lscala/math/ScalaNumericAnyConversions;)C
  #127 = Utf8               toByte
  #128 = Utf8               ()B
  #129 = Utf8               toByte$
  #130 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)B
  #131 = NameAndType        #129:#130     // toByte$:(Lscala/math/ScalaNumericAnyConversions;)B
  #132 = InterfaceMethodref #122.#131     // scala/math/ScalaNumericAnyConversions.toByte$:(Lscala/math/ScalaNumericAnyConversions;)B
  #133 = Utf8               toShort
  #134 = Utf8               ()S
  #135 = Utf8               toShort$
  #136 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)S
  #137 = NameAndType        #135:#136     // toShort$:(Lscala/math/ScalaNumericAnyConversions;)S
  #138 = InterfaceMethodref #122.#137     // scala/math/ScalaNumericAnyConversions.toShort$:(Lscala/math/ScalaNumericAnyConversions;)S
  #139 = Utf8               toInt
  #140 = Utf8               ()I
  #141 = Utf8               toInt$
  #142 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)I
  #143 = NameAndType        #141:#142     // toInt$:(Lscala/math/ScalaNumericAnyConversions;)I
  #144 = InterfaceMethodref #122.#143     // scala/math/ScalaNumericAnyConversions.toInt$:(Lscala/math/ScalaNumericAnyConversions;)I
  #145 = Utf8               toLong
  #146 = Utf8               ()J
  #147 = Utf8               toLong$
  #148 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)J
  #149 = NameAndType        #147:#148     // toLong$:(Lscala/math/ScalaNumericAnyConversions;)J
  #150 = InterfaceMethodref #122.#149     // scala/math/ScalaNumericAnyConversions.toLong$:(Lscala/math/ScalaNumericAnyConversions;)J
  #151 = Utf8               toFloat
  #152 = Utf8               ()F
  #153 = Utf8               toFloat$
  #154 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)F
  #155 = NameAndType        #153:#154     // toFloat$:(Lscala/math/ScalaNumericAnyConversions;)F
  #156 = InterfaceMethodref #122.#155     // scala/math/ScalaNumericAnyConversions.toFloat$:(Lscala/math/ScalaNumericAnyConversions;)F
  #157 = Utf8               toDouble
  #158 = Utf8               ()D
  #159 = Utf8               toDouble$
  #160 = Utf8               (Lscala/math/ScalaNumericAnyConversions;)D
  #161 = NameAndType        #159:#160     // toDouble$:(Lscala/math/ScalaNumericAnyConversions;)D
  #162 = InterfaceMethodref #122.#161     // scala/math/ScalaNumericAnyConversions.toDouble$:(Lscala/math/ScalaNumericAnyConversions;)D
  #163 = Utf8               unifiedPrimitiveHashcode
  #164 = Utf8               unifiedPrimitiveHashcode$
  #165 = NameAndType        #164:#142     // unifiedPrimitiveHashcode$:(Lscala/math/ScalaNumericAnyConversions;)I
  #166 = InterfaceMethodref #122.#165     // scala/math/ScalaNumericAnyConversions.unifiedPrimitiveHashcode$:(Lscala/math/ScalaNumericAnyConversions;)I
  #167 = Utf8               unifiedPrimitiveEquals
  #168 = Utf8               unifiedPrimitiveEquals$
  #169 = Utf8               (Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)Z
  #170 = NameAndType        #168:#169     // unifiedPrimitiveEquals$:(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)Z
  #171 = InterfaceMethodref #122.#170     // scala/math/ScalaNumericAnyConversions.unifiedPrimitiveEquals$:(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)Z
  #172 = Utf8               ()Ljava/math/BigInteger;
  #173 = NameAndType        #32:#33       // _bigInteger:Ljava/math/BigInteger;
  #174 = Fieldref           #2.#173       // scala/math/BigInt._bigInteger:Ljava/math/BigInteger;
  #175 = Utf8               _bigInteger_$eq
  #176 = Utf8               (Ljava/math/BigInteger;)V
  #177 = Utf8               x$1
  #178 = NameAndType        #34:#35       // _long:J
  #179 = Fieldref           #2.#178       // scala/math/BigInt._long:J
  #180 = Utf8               longEncoding
  #181 = Utf8               ()Z
  #182 = NameAndType        #34:#146      // _long:()J
  #183 = Methodref          #2.#182       // scala/math/BigInt._long:()J
  #184 = Long               -9223372036854775808l
  #186 = Utf8               bigInteger
  #187 = NameAndType        #32:#172      // _bigInteger:()Ljava/math/BigInteger;
  #188 = Methodref          #2.#187       // scala/math/BigInt._bigInteger:()Ljava/math/BigInteger;
  #189 = Utf8               java/math/BigInteger
  #190 = Class              #189          // java/math/BigInteger
  #191 = Utf8               valueOf
  #192 = Utf8               (J)Ljava/math/BigInteger;
  #193 = NameAndType        #191:#192     // valueOf:(J)Ljava/math/BigInteger;
  #194 = Methodref          #190.#193     // java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
  #195 = NameAndType        #175:#176     // _bigInteger_$eq:(Ljava/math/BigInteger;)V
  #196 = Methodref          #2.#195       // scala/math/BigInt._bigInteger_$eq:(Ljava/math/BigInteger;)V
  #197 = Utf8               write
  #198 = Utf8               read
  #199 = Utf8               hashCode
  #200 = Utf8               isValidLong
  #201 = NameAndType        #200:#181     // isValidLong:()Z
  #202 = Methodref          #2.#201       // scala/math/BigInt.isValidLong:()Z
  #203 = NameAndType        #186:#172     // bigInteger:()Ljava/math/BigInteger;
  #204 = Methodref          #2.#203       // scala/math/BigInt.bigInteger:()Ljava/math/BigInteger;
  #205 = Utf8               scala/runtime/Statics
  #206 = Class              #205          // scala/runtime/Statics
  #207 = Utf8               anyHash
  #208 = NameAndType        #207:#114     // anyHash:(Ljava/lang/Object;)I
  #209 = Methodref          #206.#208     // scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
  #210 = Utf8               equals
  #211 = Utf8               (Lscala/math/BigInt;)Z
  #212 = NameAndType        #210:#211     // equals:(Lscala/math/BigInt;)Z
  #213 = Methodref          #2.#212       // scala/math/BigInt.equals:(Lscala/math/BigInt;)Z
  #214 = Utf8               scala/math/BigDecimal
  #215 = Class              #214          // scala/math/BigDecimal
  #216 = NameAndType        #210:#92      // equals:(Ljava/lang/Object;)Z
  #217 = Methodref          #215.#216     // scala/math/BigDecimal.equals:(Ljava/lang/Object;)Z
  #218 = Utf8               java/lang/Double
  #219 = Class              #218          // java/lang/Double
  #220 = Utf8               scala/runtime/BoxesRunTime
  #221 = Class              #220          // scala/runtime/BoxesRunTime
  #222 = Utf8               unboxToDouble
  #223 = Utf8               (Ljava/lang/Object;)D
  #224 = NameAndType        #222:#223     // unboxToDouble:(Ljava/lang/Object;)D
  #225 = Methodref          #221.#224     // scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
  #226 = Utf8               isValidDouble
  #227 = NameAndType        #226:#181     // isValidDouble:()Z
  #228 = Methodref          #2.#227       // scala/math/BigInt.isValidDouble:()Z
  #229 = Utf8               doubleValue
  #230 = NameAndType        #229:#158     // doubleValue:()D
  #231 = InterfaceMethodref #122.#230     // scala/math/ScalaNumericAnyConversions.doubleValue:()D
  #232 = Utf8               java/lang/Float
  #233 = Class              #232          // java/lang/Float
  #234 = Utf8               unboxToFloat
  #235 = Utf8               (Ljava/lang/Object;)F
  #236 = NameAndType        #234:#235     // unboxToFloat:(Ljava/lang/Object;)F
  #237 = Methodref          #221.#236     // scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
  #238 = Utf8               isValidFloat
  #239 = NameAndType        #238:#181     // isValidFloat:()Z
  #240 = Methodref          #2.#239       // scala/math/BigInt.isValidFloat:()Z
  #241 = Utf8               floatValue
  #242 = NameAndType        #241:#152     // floatValue:()F
  #243 = InterfaceMethodref #122.#242     // scala/math/ScalaNumericAnyConversions.floatValue:()F
  #244 = Utf8               java/lang/Object
  #245 = Class              #244          // java/lang/Object
  #246 = Utf8               isValidByte
  #247 = Utf8               isValidShort
  #248 = Utf8               isValidChar
  #249 = Integer            65535
  #250 = Utf8               isValidInt
  #251 = Long               -2147483648l
  #253 = Long               2147483647l
  #255 = NameAndType        #180:#181     // longEncoding:()Z
  #256 = Methodref          #2.#255       // scala/math/BigInt.longEncoding:()Z
  #257 = Utf8               scala$math$BigInt$$longMinValueBigInteger
  #258 = NameAndType        #257:#172     // scala$math$BigInt$$longMinValueBigInteger:()Ljava/math/BigInteger;
  #259 = Methodref          #40.#258      // scala/math/BigInt$.scala$math$BigInt$$longMinValueBigInteger:()Ljava/math/BigInteger;
  #260 = Utf8               equalsNumNum
  #261 = Utf8               (Ljava/lang/Number;Ljava/lang/Number;)Z
  #262 = NameAndType        #260:#261     // equalsNumNum:(Ljava/lang/Number;Ljava/lang/Number;)Z
  #263 = Methodref          #221.#262     // scala/runtime/BoxesRunTime.equalsNumNum:(Ljava/lang/Number;Ljava/lang/Number;)Z
  #264 = NameAndType        #61:#140      // bitLength:()I
  #265 = Methodref          #2.#264       // scala/math/BigInt.bitLength:()I
  #266 = Utf8               lowestSetBit
  #267 = NameAndType        #266:#140     // lowestSetBit:()I
  #268 = Methodref          #2.#267       // scala/math/BigInt.lowestSetBit:()I
  #269 = Utf8               bitLengthOverflow
  #270 = NameAndType        #269:#181     // bitLengthOverflow:()Z
  #271 = Methodref          #2.#270       // scala/math/BigInt.bitLengthOverflow:()Z
  #272 = Utf8               lowest
  #273 = Utf8               bitLen
  #274 = Integer            2147483647
  #275 = Utf8               shiftRight
  #276 = Utf8               (I)Ljava/math/BigInteger;
  #277 = NameAndType        #275:#276     // shiftRight:(I)Ljava/math/BigInteger;
  #278 = Methodref          #190.#277     // java/math/BigInteger.shiftRight:(I)Ljava/math/BigInteger;
  #279 = NameAndType        #83:#140      // signum:()I
  #280 = Methodref          #190.#279     // java/math/BigInteger.signum:()I
  #281 = Utf8               scala$math$BigInt$$minusOne
  #282 = NameAndType        #281:#172     // scala$math$BigInt$$minusOne:()Ljava/math/BigInteger;
  #283 = Methodref          #40.#282      // scala/math/BigInt$.scala$math$BigInt$$minusOne:()Ljava/math/BigInteger;
  #284 = Methodref          #190.#216     // java/math/BigInteger.equals:(Ljava/lang/Object;)Z
  #285 = Utf8               shifted
  #286 = Utf8               isWhole
  #287 = Utf8               underlying
  #288 = Utf8               compare
  #289 = Utf8               (Lscala/math/BigInt;)I
  #290 = Utf8               java/lang/Long
  #291 = Class              #290          // java/lang/Long
  #292 = Utf8               (JJ)I
  #293 = NameAndType        #288:#292     // compare:(JJ)I
  #294 = Methodref          #291.#293     // java/lang/Long.compare:(JJ)I
  #295 = Utf8               (Ljava/math/BigInteger;)I
  #296 = NameAndType        #113:#295     // compareTo:(Ljava/math/BigInteger;)I
  #297 = Methodref          #190.#296     // java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
  #298 = Utf8               $plus
  #299 = Utf8               (Lscala/math/BigInt;)Lscala/math/BigInt;
  #300 = Long               -1l
  #302 = Utf8               add
  #303 = Utf8               (Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #304 = NameAndType        #302:#303     // add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #305 = Methodref          #190.#304     // java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #306 = Utf8               y
  #307 = Utf8               z
  #308 = Utf8               $minus
  #309 = Utf8               subtract
  #310 = NameAndType        #309:#303     // subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #311 = Methodref          #190.#310     // java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #312 = Utf8               $times
  #313 = Utf8               multiply
  #314 = NameAndType        #313:#303     // multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #315 = Methodref          #190.#314     // java/math/BigInteger.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #316 = Utf8               $div
  #317 = Utf8               divide
  #318 = NameAndType        #317:#303     // divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #319 = Methodref          #190.#318     // java/math/BigInteger.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #320 = Utf8               $percent
  #321 = Utf8               remainder
  #322 = NameAndType        #321:#303     // remainder:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #323 = Methodref          #190.#322     // java/math/BigInteger.remainder:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #324 = Utf8               $div$percent
  #325 = Utf8               (Lscala/math/BigInt;)Lscala/Tuple2;
  #326 = Utf8               (Lscala/math/BigInt;)Lscala/Tuple2<Lscala/math/BigInt;Lscala/math/BigInt;>;
  #327 = Utf8               scala/Tuple2
  #328 = Class              #327          // scala/Tuple2
  #329 = Utf8               <init>
  #330 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #331 = NameAndType        #329:#330     // "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
  #332 = Methodref          #328.#331     // scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
  #333 = Utf8               divideAndRemainder
  #334 = Utf8               (Ljava/math/BigInteger;)[Ljava/math/BigInteger;
  #335 = NameAndType        #333:#334     // divideAndRemainder:(Ljava/math/BigInteger;)[Ljava/math/BigInteger;
  #336 = Methodref          #190.#335     // java/math/BigInteger.divideAndRemainder:(Ljava/math/BigInteger;)[Ljava/math/BigInteger;
  #337 = Utf8               dr
  #338 = Utf8               [Ljava/math/BigInteger;
  #339 = Utf8               $less$less
  #340 = Utf8               n
  #341 = Utf8               $greater$greater
  #342 = NameAndType        #341:#54      // $greater$greater:(I)Lscala/math/BigInt;
  #343 = Methodref          #2.#342       // scala/math/BigInt.$greater$greater:(I)Lscala/math/BigInt;
  #344 = Utf8               shiftLeft
  #345 = NameAndType        #344:#276     // shiftLeft:(I)Ljava/math/BigInteger;
  #346 = Methodref          #190.#345     // java/math/BigInteger.shiftLeft:(I)Ljava/math/BigInteger;
  #347 = Utf8               $amp
  #348 = Utf8               and
  #349 = NameAndType        #348:#303     // and:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #350 = Methodref          #190.#349     // java/math/BigInteger.and:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #351 = Utf8               $bar
  #352 = Utf8               or
  #353 = NameAndType        #352:#303     // or:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #354 = Methodref          #190.#353     // java/math/BigInteger.or:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #355 = Utf8               $up
  #356 = Utf8               xor
  #357 = NameAndType        #356:#303     // xor:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #358 = Methodref          #190.#357     // java/math/BigInteger.xor:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #359 = Utf8               $amp$tilde
  #360 = Utf8               andNot
  #361 = NameAndType        #360:#303     // andNot:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #362 = Methodref          #190.#361     // java/math/BigInteger.andNot:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #363 = Utf8               gcd
  #364 = Utf8               abs
  #365 = Utf8               ()Lscala/math/BigInt;
  #366 = NameAndType        #364:#365     // abs:()Lscala/math/BigInt;
  #367 = Methodref          #2.#366       // scala/math/BigInt.abs:()Lscala/math/BigInt;
  #368 = Utf8               scala/runtime/RichLong$
  #369 = Class              #368          // scala/runtime/RichLong$
  #370 = Utf8               Lscala/runtime/RichLong$;
  #371 = NameAndType        #41:#370      // MODULE$:Lscala/runtime/RichLong$;
  #372 = Fieldref           #369.#371     // scala/runtime/RichLong$.MODULE$:Lscala/runtime/RichLong$;
  #373 = Utf8               scala/math/package$
  #374 = Class              #373          // scala/math/package$
  #375 = Utf8               Lscala/math/package$;
  #376 = NameAndType        #41:#375      // MODULE$:Lscala/math/package$;
  #377 = Fieldref           #374.#376     // scala/math/package$.MODULE$:Lscala/math/package$;
  #378 = Utf8               java/lang/Math
  #379 = Class              #378          // java/lang/Math
  #380 = Utf8               (J)J
  #381 = NameAndType        #364:#380     // abs:(J)J
  #382 = Methodref          #379.#381     // java/lang/Math.abs:(J)J
  #383 = Utf8               scala$math$BigInt$$longGcd
  #384 = Utf8               (JJ)J
  #385 = NameAndType        #383:#384     // scala$math$BigInt$$longGcd:(JJ)J
  #386 = Methodref          #40.#385      // scala/math/BigInt$.scala$math$BigInt$$longGcd:(JJ)J
  #387 = Utf8               mod
  #388 = NameAndType        #387:#303     // mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #389 = Methodref          #190.#388     // java/math/BigInteger.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #390 = Utf8               longValue
  #391 = NameAndType        #390:#146     // longValue:()J
  #392 = Methodref          #190.#391     // java/math/BigInteger.longValue:()J
  #393 = NameAndType        #363:#303     // gcd:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #394 = Methodref          #190.#393     // java/math/BigInteger.gcd:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #395 = Utf8               red
  #396 = Utf8               res
  #397 = Utf8               min
  #398 = Utf8               max
  #399 = Utf8               pow
  #400 = Utf8               exp
  #401 = NameAndType        #399:#276     // pow:(I)Ljava/math/BigInteger;
  #402 = Methodref          #190.#401     // java/math/BigInteger.pow:(I)Ljava/math/BigInteger;
  #403 = Utf8               modPow
  #404 = Utf8               (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/math/BigInt;
  #405 = Utf8               m
  #406 = Utf8               (Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #407 = NameAndType        #403:#406     // modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #408 = Methodref          #190.#407     // java/math/BigInteger.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #409 = Utf8               modInverse
  #410 = NameAndType        #409:#303     // modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #411 = Methodref          #190.#410     // java/math/BigInteger.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
  #412 = Utf8               unary_$minus
  #413 = Utf8               negate
  #414 = NameAndType        #413:#172     // negate:()Ljava/math/BigInteger;
  #415 = Methodref          #190.#414     // java/math/BigInteger.negate:()Ljava/math/BigInteger;
  #416 = Methodref          #2.#279       // scala/math/BigInt.signum:()I
  #417 = NameAndType        #412:#365     // unary_$minus:()Lscala/math/BigInt;
  #418 = Methodref          #2.#417       // scala/math/BigInt.unary_$minus:()Lscala/math/BigInt;
  #419 = Utf8               (J)I
  #420 = NameAndType        #83:#419      // signum:(J)I
  #421 = Methodref          #291.#420     // java/lang/Long.signum:(J)I
  #422 = Utf8               sign
  #423 = Utf8               unary_$tilde
  #424 = Long               9223372036854775807l
  #426 = Utf8               not
  #427 = NameAndType        #426:#172     // not:()Ljava/math/BigInteger;
  #428 = Methodref          #190.#427     // java/math/BigInteger.not:()Ljava/math/BigInteger;
  #429 = Utf8               testBit
  #430 = Utf8               (I)Z
  #431 = NameAndType        #429:#430     // testBit:(I)Z
  #432 = Methodref          #190.#431     // java/math/BigInteger.testBit:(I)Z
  #433 = Utf8               setBit
  #434 = NameAndType        #433:#276     // setBit:(I)Ljava/math/BigInteger;
  #435 = Methodref          #190.#434     // java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;
  #436 = Utf8               clearBit
  #437 = NameAndType        #436:#276     // clearBit:(I)Ljava/math/BigInteger;
  #438 = Methodref          #190.#437     // java/math/BigInteger.clearBit:(I)Ljava/math/BigInteger;
  #439 = Utf8               flipBit
  #440 = NameAndType        #439:#276     // flipBit:(I)Ljava/math/BigInteger;
  #441 = Methodref          #190.#440     // java/math/BigInteger.flipBit:(I)Ljava/math/BigInteger;
  #442 = Utf8               numberOfTrailingZeros
  #443 = NameAndType        #442:#419     // numberOfTrailingZeros:(J)I
  #444 = Methodref          #291.#443     // java/lang/Long.numberOfTrailingZeros:(J)I
  #445 = Utf8               getLowestSetBit
  #446 = NameAndType        #445:#140     // getLowestSetBit:()I
  #447 = Methodref          #190.#446     // java/math/BigInteger.getLowestSetBit:()I
  #448 = Utf8               numberOfLeadingZeros
  #449 = NameAndType        #448:#419     // numberOfLeadingZeros:(J)I
  #450 = Methodref          #291.#449     // java/lang/Long.numberOfLeadingZeros:(J)I
  #451 = Methodref          #190.#264     // java/math/BigInteger.bitLength:()I
  #452 = Utf8               bitCount
  #453 = NameAndType        #452:#419     // bitCount:(J)I
  #454 = Methodref          #291.#453     // java/lang/Long.bitCount:(J)I
  #455 = NameAndType        #452:#140     // bitCount:()I
  #456 = Methodref          #190.#455     // java/math/BigInteger.bitCount:()I
  #457 = Utf8               isProbablePrime
  #458 = NameAndType        #457:#430     // isProbablePrime:(I)Z
  #459 = Methodref          #190.#458     // java/math/BigInteger.isProbablePrime:(I)Z
  #460 = Utf8               byteValue
  #461 = Utf8               intValue
  #462 = NameAndType        #461:#140     // intValue:()I
  #463 = Methodref          #2.#462       // scala/math/BigInt.intValue:()I
  #464 = Utf8               shortValue
  #465 = Utf8               charValue
  #466 = Methodref          #190.#462     // java/math/BigInteger.intValue:()I
  #467 = Methodref          #190.#242     // java/math/BigInteger.floatValue:()F
  #468 = Long               9007199254740992l
  #470 = Methodref          #190.#230     // java/math/BigInteger.doubleValue:()D
  #471 = Utf8               until
  #472 = Utf8               (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Exclusive;
  #473 = Utf8               (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Exclusive<Lscala/math/BigInt;>;
  #474 = Utf8               end
  #475 = Utf8               step
  #476 = Utf8               Lscala/collection/immutable/Range$BigInt$;
  #477 = NameAndType        #41:#476      // MODULE$:Lscala/collection/immutable/Range$BigInt$;
  #478 = Fieldref           #23.#477      // scala/collection/immutable/Range$BigInt$.MODULE$:Lscala/collection/immutable/Range$BigInt$;
  #479 = Utf8               scala/collection/immutable/NumericRange$
  #480 = Class              #479          // scala/collection/immutable/NumericRange$
  #481 = Utf8               Lscala/collection/immutable/NumericRange$;
  #482 = NameAndType        #41:#481      // MODULE$:Lscala/collection/immutable/NumericRange$;
  #483 = Fieldref           #480.#482     // scala/collection/immutable/NumericRange$.MODULE$:Lscala/collection/immutable/NumericRange$;
  #484 = Utf8               Lscala/math/Numeric$BigIntIsIntegral$;
  #485 = NameAndType        #41:#484      // MODULE$:Lscala/math/Numeric$BigIntIsIntegral$;
  #486 = Fieldref           #28.#485      // scala/math/Numeric$BigIntIsIntegral$.MODULE$:Lscala/math/Numeric$BigIntIsIntegral$;
  #487 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)V
  #488 = NameAndType        #329:#487     // "<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)V
  #489 = Methodref          #15.#488      // scala/collection/immutable/NumericRange$Exclusive."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)V
  #490 = Utf8               apply_apply_num
  #491 = Utf8               Lscala/math/Integral;
  #492 = Utf8               until$default$2
  #493 = Utf8               to
  #494 = Utf8               (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Inclusive;
  #495 = Utf8               (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Inclusive<Lscala/math/BigInt;>;
  #496 = Methodref          #20.#488      // scala/collection/immutable/NumericRange$Inclusive."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)V
  #497 = Utf8               inclusive_inclusive_num
  #498 = Utf8               to$default$2
  #499 = Utf8               toString
  #500 = Utf8               ()Ljava/lang/String;
  #501 = Utf8               (J)Ljava/lang/String;
  #502 = NameAndType        #499:#501     // toString:(J)Ljava/lang/String;
  #503 = Methodref          #291.#502     // java/lang/Long.toString:(J)Ljava/lang/String;
  #504 = NameAndType        #499:#500     // toString:()Ljava/lang/String;
  #505 = Methodref          #190.#504     // java/math/BigInteger.toString:()Ljava/lang/String;
  #506 = Utf8               (I)Ljava/lang/String;
  #507 = NameAndType        #499:#506     // toString:(I)Ljava/lang/String;
  #508 = Methodref          #190.#507     // java/math/BigInteger.toString:(I)Ljava/lang/String;
  #509 = Utf8               toByteArray
  #510 = Utf8               ()[B
  #511 = NameAndType        #509:#510     // toByteArray:()[B
  #512 = Methodref          #190.#511     // java/math/BigInteger.toByteArray:()[B
  #513 = NameAndType        #288:#289     // compare:(Lscala/math/BigInt;)I
  #514 = Methodref          #2.#513       // scala/math/BigInt.compare:(Lscala/math/BigInt;)I
  #515 = Utf8               ()Ljava/lang/Object;
  #516 = NameAndType        #287:#172     // underlying:()Ljava/math/BigInteger;
  #517 = Methodref          #2.#516       // scala/math/BigInt.underlying:()Ljava/math/BigInteger;
  #518 = Utf8               (Ljava/math/BigInteger;J)V
  #519 = Utf8               ()V
  #520 = NameAndType        #329:#519     // "<init>":()V
  #521 = Methodref          #5.#520       // scala/math/ScalaNumber."<init>":()V
  #522 = NameAndType        #329:#518     // "<init>":(Ljava/math/BigInteger;J)V
  #523 = Methodref          #2.#522       // scala/math/BigInt."<init>":(Ljava/math/BigInteger;J)V
  #524 = Utf8               Code
  #525 = Utf8               LineNumberTable
  #526 = Utf8               LocalVariableTable
  #527 = Utf8               MethodParameters
  #528 = Utf8               StackMapTable
  #529 = Utf8               Signature
  #530 = Utf8               InnerClasses
  #531 = Utf8               SourceFile
  #532 = Utf8               RuntimeVisibleAnnotations
  #533 = Utf8               ScalaInlineInfo
  #534 = Utf8               ScalaSig
{
  private java.math.BigInteger _bigInteger;
    descriptor: Ljava/math/BigInteger;
    flags: (0x0002) ACC_PRIVATE

  private final long _long;
    descriptor: J
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public static scala.math.BigInt javaBigInteger2bigInt(java.math.BigInteger);
    descriptor: (Ljava/math/BigInteger;)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
         7: areturn
      LineNumberTable:
        line 126: 3
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     x   Ljava/math/BigInteger;
    MethodParameters:
      Name                           Flags
      x                              final

  public static scala.math.BigInt long2bigInt(long);
    descriptor: (J)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: lload_0
         4: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
         7: areturn
      LineNumberTable:
        line 122: 3
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     l   J
    MethodParameters:
      Name                           Flags
      l                              final

  public static scala.math.BigInt int2bigInt(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iload_0
         4: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
         7: areturn
      LineNumberTable:
        line 118: 3
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     i   I
    MethodParameters:
      Name                           Flags
      i                              final

  public static scala.math.BigInt probablePrime(int, scala.util.Random);
    descriptor: (ILscala/util/Random;)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iload_0
         4: aload_1
         5: invokevirtual #64                 // Method scala/math/BigInt$.probablePrime:(ILscala/util/Random;)Lscala/math/BigInt;
         8: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 bitLength   I
            0       9     1   rnd   Lscala/util/Random;
    MethodParameters:
      Name                           Flags
      bitLength                      final
      rnd                            final

  public static scala.math.BigInt apply(java.math.BigInteger);
    descriptor: (Ljava/math/BigInteger;)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
         7: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     x   Ljava/math/BigInteger;
    MethodParameters:
      Name                           Flags
      x                              final

  public static scala.math.BigInt apply(java.lang.String, int);
    descriptor: (Ljava/lang/String;I)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: iload_1
         5: invokevirtual #69                 // Method scala/math/BigInt$.apply:(Ljava/lang/String;I)Lscala/math/BigInt;
         8: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0     x   Ljava/lang/String;
            0       9     1 radix   I
    MethodParameters:
      Name                           Flags
      x                              final
      radix                          final

  public static scala.math.BigInt apply(java.lang.String);
    descriptor: (Ljava/lang/String;)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #73                 // Method scala/math/BigInt$.apply:(Ljava/lang/String;)Lscala/math/BigInt;
         7: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     x   Ljava/lang/String;
    MethodParameters:
      Name                           Flags
      x                              final

  public static scala.math.BigInt apply(int, scala.util.Random);
    descriptor: (ILscala/util/Random;)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iload_0
         4: aload_1
         5: invokevirtual #76                 // Method scala/math/BigInt$.apply:(ILscala/util/Random;)Lscala/math/BigInt;
         8: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 numbits   I
            0       9     1   rnd   Lscala/util/Random;
    MethodParameters:
      Name                           Flags
      numbits                        final
      rnd                            final

  public static scala.math.BigInt apply(int, int, scala.util.Random);
    descriptor: (IILscala/util/Random;)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=3, args_size=3
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iload_0
         4: iload_1
         5: aload_2
         6: invokevirtual #81                 // Method scala/math/BigInt$.apply:(IILscala/util/Random;)Lscala/math/BigInt;
         9: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0 bitlength   I
            0      10     1 certainty   I
            0      10     2   rnd   Lscala/util/Random;
    MethodParameters:
      Name                           Flags
      bitlength                      final
      certainty                      final
      rnd                            final

  public static scala.math.BigInt apply(int, byte[]);
    descriptor: (I[B)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iload_0
         4: aload_1
         5: invokevirtual #86                 // Method scala/math/BigInt$.apply:(I[B)Lscala/math/BigInt;
         8: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 signum   I
            0       9     1 magnitude   [B
    MethodParameters:
      Name                           Flags
      signum                         final
      magnitude                      final

  public static scala.math.BigInt apply(byte[]);
    descriptor: ([B)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #90                 // Method scala/math/BigInt$.apply:([B)Lscala/math/BigInt;
         7: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     x   [B
    MethodParameters:
      Name                           Flags
      x                              final

  public static scala.math.BigInt apply(long);
    descriptor: (J)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=3, locals=2, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: lload_0
         4: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
         7: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     l   J
    MethodParameters:
      Name                           Flags
      l                              final

  public static scala.math.BigInt apply(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iload_0
         4: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
         7: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0     i   I
    MethodParameters:
      Name                           Flags
      i                              final

  public boolean $less(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #97                 // InterfaceMethod scala/math/Ordered.$less$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
         5: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public boolean $greater(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #104                // InterfaceMethod scala/math/Ordered.$greater$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
         5: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public boolean $less$eq(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #108                // InterfaceMethod scala/math/Ordered.$less$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
         5: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public boolean $greater$eq(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #112                // InterfaceMethod scala/math/Ordered.$greater$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
         5: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public int compareTo(java.lang.Object);
    descriptor: (Ljava/lang/Object;)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #118                // InterfaceMethod scala/math/Ordered.compareTo$:(Lscala/math/Ordered;Ljava/lang/Object;)I
         5: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public char toChar();
    descriptor: ()C
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #126                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toChar$:(Lscala/math/ScalaNumericAnyConversions;)C
         4: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public byte toByte();
    descriptor: ()B
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #132                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toByte$:(Lscala/math/ScalaNumericAnyConversions;)B
         4: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public short toShort();
    descriptor: ()S
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #138                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toShort$:(Lscala/math/ScalaNumericAnyConversions;)S
         4: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public int toInt();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #144                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toInt$:(Lscala/math/ScalaNumericAnyConversions;)I
         4: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public long toLong();
    descriptor: ()J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #150                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toLong$:(Lscala/math/ScalaNumericAnyConversions;)J
         4: lreturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public float toFloat();
    descriptor: ()F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #156                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toFloat$:(Lscala/math/ScalaNumericAnyConversions;)F
         4: freturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public double toDouble();
    descriptor: ()D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #162                // InterfaceMethod scala/math/ScalaNumericAnyConversions.toDouble$:(Lscala/math/ScalaNumericAnyConversions;)D
         4: dreturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public int unifiedPrimitiveHashcode();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #166                // InterfaceMethod scala/math/ScalaNumericAnyConversions.unifiedPrimitiveHashcode$:(Lscala/math/ScalaNumericAnyConversions;)I
         4: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public boolean unifiedPrimitiveEquals(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #171                // InterfaceMethod scala/math/ScalaNumericAnyConversions.unifiedPrimitiveEquals$:(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)Z
         5: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1     x   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      x                              final

  private java.math.BigInteger _bigInteger();
    descriptor: ()Ljava/math/BigInteger;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #174                // Field _bigInteger:Ljava/math/BigInteger;
         4: areturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  private void _bigInteger_$eq(java.math.BigInteger);
    descriptor: (Ljava/math/BigInteger;)V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #174                // Field _bigInteger:Ljava/math/BigInteger;
         5: return
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;
            0       6     1   x$1   Ljava/math/BigInteger;
    MethodParameters:
      Name                           Flags
      x$1                            final

  private long _long();
    descriptor: ()J
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #179                // Field _long:J
         4: lreturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  private boolean longEncoding();
    descriptor: ()Z
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #183                // Method _long:()J
         4: ldc2_w        #184                // long -9223372036854775808l
         7: lcmp
         8: ifeq          13
        11: iconst_1
        12: ireturn
        13: iconst_0
        14: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 13 /* same */
      LineNumberTable:
        line 213: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/math/BigInt;

  public java.math.BigInteger bigInteger();
    descriptor: ()Ljava/math/BigInteger;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: aload_0
         1: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
         4: astore_1
         5: aload_1
         6: ifnull        11
         9: aload_1
        10: areturn
        11: aload_0
        12: invokespecial #183                // Method _long:()J
        15: invokestatic  #194                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
        18: astore_2
        19: aload_0
        20: aload_2
        21: invokespecial #196                // Method _bigInteger_$eq:(Ljava/math/BigInteger;)V
        24: aload_2
        25: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 11
          locals = [ class java/math/BigInteger ]
      LineNumberTable:
        line 216: 0
        line 217: 5
        line 218: 11
        line 219: 19
        line 220: 24
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           19       6     2 write   Ljava/math/BigInteger;
            5      20     1  read   Ljava/math/BigInteger;
            0      26     0  this   Lscala/math/BigInt;

  public int hashCode();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #202                // Method isValidLong:()Z
         4: ifeq          12
         7: aload_0
         8: invokestatic  #166                // InterfaceMethod scala/math/ScalaNumericAnyConversions.unifiedPrimitiveHashcode$:(Lscala/math/ScalaNumericAnyConversions;)I
        11: ireturn
        12: aload_0
        13: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        16: invokestatic  #209                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
        19: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 12 /* same */
      LineNumberTable:
        line 226: 0
        line 179: 7
        line 226: 11
        line 227: 12
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      20     0  this   Lscala/math/BigInt;

  public boolean equals(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=7, args_size=2
         0: aload_1
         1: instanceof    #2                  // class scala/math/BigInt
         4: ifeq          21
         7: aload_1
         8: checkcast     #2                  // class scala/math/BigInt
        11: astore_3
        12: aload_0
        13: aload_3
        14: invokevirtual #213                // Method equals:(Lscala/math/BigInt;)Z
        17: istore_2
        18: goto          143
        21: aload_1
        22: instanceof    #215                // class scala/math/BigDecimal
        25: ifeq          40
        28: aload_1
        29: checkcast     #215                // class scala/math/BigDecimal
        32: aload_0
        33: invokevirtual #217                // Method scala/math/BigDecimal.equals:(Ljava/lang/Object;)Z
        36: istore_2
        37: goto          143
        40: aload_1
        41: instanceof    #219                // class java/lang/Double
        44: ifeq          81
        47: aload_1
        48: invokestatic  #225                // Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
        51: dstore        4
        53: aload_0
        54: invokevirtual #228                // Method isValidDouble:()Z
        57: ifeq          76
        60: aload_0
        61: invokeinterface #231,  1          // InterfaceMethod scala/math/ScalaNumericAnyConversions.doubleValue:()D
        66: dload         4
        68: dcmpl
        69: ifne          76
        72: iconst_1
        73: goto          77
        76: iconst_0
        77: istore_2
        78: goto          143
        81: aload_1
        82: instanceof    #233                // class java/lang/Float
        85: ifeq          122
        88: aload_1
        89: invokestatic  #237                // Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
        92: fstore        6
        94: aload_0
        95: invokevirtual #240                // Method isValidFloat:()Z
        98: ifeq          117
       101: aload_0
       102: invokeinterface #243,  1          // InterfaceMethod scala/math/ScalaNumericAnyConversions.floatValue:()F
       107: fload         6
       109: fcmpl
       110: ifne          117
       113: iconst_1
       114: goto          118
       117: iconst_0
       118: istore_2
       119: goto          143
       122: aload_0
       123: invokevirtual #202                // Method isValidLong:()Z
       126: ifeq          141
       129: aload_0
       130: aload_1
       131: invokestatic  #171                // InterfaceMethod scala/math/ScalaNumericAnyConversions.unifiedPrimitiveEquals$:(Lscala/math/ScalaNumericAnyConversions;Ljava/lang/Object;)Z
       134: ifeq          141
       137: iconst_1
       138: goto          142
       141: iconst_0
       142: istore_2
       143: iload_2
       144: ireturn
      StackMapTable: number_of_entries = 11
        frame_type = 21 /* same */
        frame_type = 18 /* same */
        frame_type = 254 /* append */
          offset_delta = 35
          locals = [ top, top, double ]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 248 /* chop */
          offset_delta = 3
        frame_type = 255 /* full_frame */
          offset_delta = 35
          locals = [ class scala/math/BigInt, class java/lang/Object, top, top, top, top, float ]
          stack = []
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 255 /* full_frame */
          offset_delta = 3
          locals = [ class scala/math/BigInt, class java/lang/Object ]
          stack = []
        frame_type = 18 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 252 /* append */
          offset_delta = 0
          locals = [ int ]
      LineNumberTable:
        line 232: 0
        line 233: 21
        line 234: 40
        line 179: 60
        line 234: 66
        line 235: 81
        line 179: 101
        line 235: 107
        line 236: 122
        line 179: 129
        line 236: 134
        line 231: 143
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     145     0  this   Lscala/math/BigInt;
            0     145     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public boolean isValidByte();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #183                // Method _long:()J
         4: bipush        -128
         6: i2l
         7: lcmp
         8: iflt          24
        11: aload_0
        12: invokespecial #183                // Method _long:()J
        15: bipush        127
        17: i2l
        18: lcmp
        19: ifgt          24
        22: iconst_1
        23: ireturn
        24: iconst_0
        25: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 24 /* same */
      LineNumberTable:
        line 239: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      26     0  this   Lscala/math/BigInt;

  public boolean isValidShort();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #183                // Method _long:()J
         4: sipush        -32768
         7: i2l
         8: lcmp
         9: iflt          26
        12: aload_0
        13: invokespecial #183                // Method _long:()J
        16: sipush        32767
        19: i2l
        20: lcmp
        21: ifgt          26
        24: iconst_1
        25: ireturn
        26: iconst_0
        27: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 26 /* same */
      LineNumberTable:
        line 240: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      28     0  this   Lscala/math/BigInt;

  public boolean isValidChar();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #183                // Method _long:()J
         4: iconst_0
         5: i2l
         6: lcmp
         7: iflt          23
        10: aload_0
        11: invokespecial #183                // Method _long:()J
        14: ldc           #249                // int 65535
        16: i2l
        17: lcmp
        18: ifgt          23
        21: iconst_1
        22: ireturn
        23: iconst_0
        24: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 23 /* same */
      LineNumberTable:
        line 241: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      25     0  this   Lscala/math/BigInt;

  public boolean isValidInt();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #183                // Method _long:()J
         4: ldc2_w        #251                // long -2147483648l
         7: lcmp
         8: iflt          24
        11: aload_0
        12: invokespecial #183                // Method _long:()J
        15: ldc2_w        #253                // long 2147483647l
        18: lcmp
        19: ifgt          24
        22: iconst_1
        23: ireturn
        24: iconst_0
        25: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 24 /* same */
      LineNumberTable:
        line 242: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      26     0  this   Lscala/math/BigInt;

  public boolean isValidLong();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifne          23
         7: aload_0
         8: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        11: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        14: invokevirtual #259                // Method scala/math/BigInt$.scala$math$BigInt$$longMinValueBigInteger:()Ljava/math/BigInteger;
        17: invokestatic  #263                // Method scala/runtime/BoxesRunTime.equalsNumNum:(Ljava/lang/Number;Ljava/lang/Number;)Z
        20: ifeq          25
        23: iconst_1
        24: ireturn
        25: iconst_0
        26: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 23 /* same */
        frame_type = 1 /* same */
      LineNumberTable:
        line 243: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      27     0  this   Lscala/math/BigInt;

  public boolean isValidFloat();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=1
         0: aload_0
         1: invokevirtual #265                // Method bitLength:()I
         4: istore_1
         5: iload_1
         6: bipush        24
         8: if_icmple     46
        11: aload_0
        12: invokevirtual #268                // Method lowestSetBit:()I
        15: istore_2
        16: iload_1
        17: sipush        128
        20: if_icmpgt     42
        23: iload_2
        24: iload_1
        25: bipush        24
        27: isub
        28: if_icmplt     42
        31: iload_2
        32: sipush        128
        35: if_icmpge     42
        38: iconst_1
        39: goto          43
        42: iconst_0
        43: ifeq          55
        46: aload_0
        47: invokespecial #271                // Method bitLengthOverflow:()Z
        50: ifne          55
        53: iconst_1
        54: ireturn
        55: iconst_0
        56: ireturn
      StackMapTable: number_of_entries = 4
        frame_type = 253 /* append */
          offset_delta = 42
          locals = [ int, int ]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 8 /* same */
      LineNumberTable:
        line 248: 0
        line 249: 5
        line 251: 11
        line 252: 16
        line 253: 23
        line 254: 31
        line 256: 46
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           16      27     2 lowest   I
            5      51     1 bitLen   I
            0      57     0  this   Lscala/math/BigInt;

  public boolean isValidDouble();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=1
         0: aload_0
         1: invokevirtual #265                // Method bitLength:()I
         4: istore_1
         5: iload_1
         6: bipush        53
         8: if_icmple     46
        11: aload_0
        12: invokevirtual #268                // Method lowestSetBit:()I
        15: istore_2
        16: iload_1
        17: sipush        1024
        20: if_icmpgt     42
        23: iload_2
        24: iload_1
        25: bipush        53
        27: isub
        28: if_icmplt     42
        31: iload_2
        32: sipush        1024
        35: if_icmpge     42
        38: iconst_1
        39: goto          43
        42: iconst_0
        43: ifeq          55
        46: aload_0
        47: invokespecial #271                // Method bitLengthOverflow:()Z
        50: ifne          55
        53: iconst_1
        54: ireturn
        55: iconst_0
        56: ireturn
      StackMapTable: number_of_entries = 4
        frame_type = 253 /* append */
          offset_delta = 42
          locals = [ int, int ]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 8 /* same */
      LineNumberTable:
        line 261: 0
        line 262: 5
        line 264: 11
        line 265: 16
        line 266: 23
        line 267: 31
        line 269: 46
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           16      27     2 lowest   I
            5      51     1 bitLen   I
            0      57     0  this   Lscala/math/BigInt;

  private boolean bitLengthOverflow();
    descriptor: ()Z
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=2, args_size=1
         0: aload_0
         1: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         4: ldc_w         #274                // int 2147483647
         7: invokevirtual #278                // Method java/math/BigInteger.shiftRight:(I)Ljava/math/BigInteger;
        10: astore_1
        11: aload_1
        12: invokevirtual #280                // Method java/math/BigInteger.signum:()I
        15: iconst_0
        16: if_icmpeq     34
        19: aload_1
        20: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        23: invokevirtual #283                // Method scala/math/BigInt$.scala$math$BigInt$$minusOne:()Ljava/math/BigInteger;
        26: invokevirtual #284                // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z
        29: ifne          34
        32: iconst_1
        33: ireturn
        34: iconst_0
        35: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 34
          locals = [ class java/math/BigInteger ]
      LineNumberTable:
        line 277: 0
        line 278: 11
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           11      24     1 shifted   Ljava/math/BigInteger;
            0      36     0  this   Lscala/math/BigInt;

  public boolean isWhole();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_1
         1: ireturn
      LineNumberTable:
        line 281: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Lscala/math/BigInt;

  public java.math.BigInteger underlying();
    descriptor: ()Ljava/math/BigInteger;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         4: areturn
      LineNumberTable:
        line 282: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public boolean equals(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          30
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          28
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: aload_1
        19: invokespecial #183                // Method _long:()J
        22: lcmp
        23: ifne          28
        26: iconst_1
        27: ireturn
        28: iconst_0
        29: ireturn
        30: aload_1
        31: invokespecial #256                // Method longEncoding:()Z
        34: ifne          53
        37: aload_0
        38: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        41: aload_1
        42: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        45: invokestatic  #263                // Method scala/runtime/BoxesRunTime.equalsNumNum:(Ljava/lang/Number;Ljava/lang/Number;)Z
        48: ifeq          53
        51: iconst_1
        52: ireturn
        53: iconst_0
        54: ireturn
      StackMapTable: number_of_entries = 3
        frame_type = 28 /* same */
        frame_type = 1 /* same */
        frame_type = 22 /* same */
      LineNumberTable:
        line 287: 0
        line 288: 7
        line 290: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      55     0  this   Lscala/math/BigInt;
            0      55     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public int compare(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          35
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          26
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: aload_1
        19: invokespecial #183                // Method _long:()J
        22: invokestatic  #294                // Method java/lang/Long.compare:(JJ)I
        25: ireturn
        26: aload_1
        27: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        30: invokevirtual #280                // Method java/math/BigInteger.signum:()I
        33: ineg
        34: ireturn
        35: aload_1
        36: invokespecial #256                // Method longEncoding:()Z
        39: ifeq          50
        42: aload_0
        43: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        46: invokevirtual #280                // Method java/math/BigInteger.signum:()I
        49: ireturn
        50: aload_0
        51: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        54: aload_1
        55: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        58: invokevirtual #297                // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
        61: ireturn
      StackMapTable: number_of_entries = 3
        frame_type = 26 /* same */
        frame_type = 8 /* same */
        frame_type = 14 /* same */
      LineNumberTable:
        line 295: 0
        line 296: 7
        line 298: 35
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      62     0  this   Lscala/math/BigInt;
            0      62     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $plus(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=8, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          58
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          58
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: lstore_2
        19: aload_1
        20: invokespecial #183                // Method _long:()J
        23: lstore        4
        25: lload_2
        26: lload         4
        28: ladd
        29: lstore        6
        31: lload_2
        32: lload         4
        34: lxor
        35: ldc2_w        #300                // long -1l
        38: lxor
        39: lload_2
        40: lload         6
        42: lxor
        43: land
        44: lconst_0
        45: lcmp
        46: iflt          58
        49: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        52: lload         6
        54: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        57: areturn
        58: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        61: aload_0
        62: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        65: aload_1
        66: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        69: invokevirtual #305                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        72: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        75: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 58 /* same */
      LineNumberTable:
        line 304: 0
        line 305: 14
        line 306: 19
        line 307: 25
        line 308: 31
        line 310: 58
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           19      39     2     x   J
           25      33     4     y   J
           31      27     6     z   J
            0      76     0  this   Lscala/math/BigInt;
            0      76     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $minus(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=8, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          54
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          54
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: lstore_2
        19: aload_1
        20: invokespecial #183                // Method _long:()J
        23: lstore        4
        25: lload_2
        26: lload         4
        28: lsub
        29: lstore        6
        31: lload_2
        32: lload         4
        34: lxor
        35: lload_2
        36: lload         6
        38: lxor
        39: land
        40: lconst_0
        41: lcmp
        42: iflt          54
        45: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        48: lload         6
        50: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        53: areturn
        54: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        57: aload_0
        58: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        61: aload_1
        62: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        65: invokevirtual #311                // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        68: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        71: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 54 /* same */
      LineNumberTable:
        line 316: 0
        line 317: 14
        line 318: 19
        line 319: 25
        line 320: 31
        line 322: 54
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           19      35     2     x   J
           25      29     4     y   J
           31      23     6     z   J
            0      72     0  this   Lscala/math/BigInt;
            0      72     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $times(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=8, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          56
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          56
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: lstore_2
        19: aload_1
        20: invokespecial #183                // Method _long:()J
        23: lstore        4
        25: lload_2
        26: lload         4
        28: lmul
        29: lstore        6
        31: lload_2
        32: lconst_0
        33: lcmp
        34: ifeq          47
        37: lload         4
        39: lload         6
        41: lload_2
        42: ldiv
        43: lcmp
        44: ifne          56
        47: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        50: lload         6
        52: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        55: areturn
        56: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        59: aload_0
        60: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        63: aload_1
        64: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        67: invokevirtual #315                // Method java/math/BigInteger.multiply:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        70: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        73: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 254 /* append */
          offset_delta = 47
          locals = [ long, long, long ]
        frame_type = 248 /* chop */
          offset_delta = 8
      LineNumberTable:
        line 328: 0
        line 329: 14
        line 330: 19
        line 331: 25
        line 334: 31
        line 336: 56
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           19      37     2     x   J
           25      31     4     y   J
           31      25     6     z   J
            0      74     0  this   Lscala/math/BigInt;
            0      74     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $div(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          30
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          30
        14: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        17: aload_0
        18: invokespecial #183                // Method _long:()J
        21: aload_1
        22: invokespecial #183                // Method _long:()J
        25: ldiv
        26: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        29: areturn
        30: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        33: aload_0
        34: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        37: aload_1
        38: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        41: invokevirtual #319                // Method java/math/BigInteger.divide:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        44: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 30 /* same */
      LineNumberTable:
        line 345: 0
        line 346: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lscala/math/BigInt;
            0      48     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $percent(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          30
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          30
        14: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        17: aload_0
        18: invokespecial #183                // Method _long:()J
        21: aload_1
        22: invokespecial #183                // Method _long:()J
        25: lrem
        26: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        29: areturn
        30: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        33: aload_0
        34: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        37: aload_1
        38: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        41: invokevirtual #323                // Method java/math/BigInteger.remainder:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        44: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 30 /* same */
      LineNumberTable:
        line 352: 0
        line 353: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lscala/math/BigInt;
            0      48     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.Tuple2<scala.math.BigInt, scala.math.BigInt> $div$percent(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/Tuple2;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=8, locals=7, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          53
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          53
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: lstore_2
        19: aload_1
        20: invokespecial #183                // Method _long:()J
        23: lstore        4
        25: new           #328                // class scala/Tuple2
        28: dup
        29: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        32: lload_2
        33: lload         4
        35: ldiv
        36: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        39: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        42: lload_2
        43: lload         4
        45: lrem
        46: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        49: invokespecial #332                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
        52: areturn
        53: aload_0
        54: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        57: aload_1
        58: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        61: invokevirtual #336                // Method java/math/BigInteger.divideAndRemainder:(Ljava/math/BigInteger;)[Ljava/math/BigInteger;
        64: astore        6
        66: new           #328                // class scala/Tuple2
        69: dup
        70: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        73: aload         6
        75: iconst_0
        76: aaload
        77: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        80: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        83: aload         6
        85: iconst_1
        86: aaload
        87: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        90: invokespecial #332                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
        93: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 53 /* same */
      LineNumberTable:
        line 358: 0
        line 359: 14
        line 360: 19
        line 362: 25
        line 364: 53
        line 365: 66
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           19      33     2     x   J
           25      27     4     y   J
           66      27     6    dr   [Ljava/math/BigInteger;
            0      94     0  this   Lscala/math/BigInt;
            0      94     1  that   Lscala/math/BigInt;
    Signature: #326                         // (Lscala/math/BigInt;)Lscala/Tuple2<Lscala/math/BigInt;Lscala/math/BigInt;>;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $less$less(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          19
         7: iload_1
         8: iconst_0
         9: if_icmpgt     19
        12: aload_0
        13: iload_1
        14: ineg
        15: invokevirtual #343                // Method $greater$greater:(I)Lscala/math/BigInt;
        18: areturn
        19: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        22: aload_0
        23: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        26: iload_1
        27: invokevirtual #346                // Method java/math/BigInteger.shiftLeft:(I)Ljava/math/BigInteger;
        30: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        33: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 19 /* same */
      LineNumberTable:
        line 371: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      34     0  this   Lscala/math/BigInt;
            0      34     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.math.BigInt $greater$greater(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          56
         7: iload_1
         8: iconst_0
         9: if_icmplt     56
        12: iload_1
        13: bipush        64
        15: if_icmpge     31
        18: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        21: aload_0
        22: invokespecial #183                // Method _long:()J
        25: iload_1
        26: lshr
        27: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        30: areturn
        31: aload_0
        32: invokespecial #183                // Method _long:()J
        35: lconst_0
        36: lcmp
        37: ifge          48
        40: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        43: iconst_m1
        44: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
        47: areturn
        48: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        51: iconst_0
        52: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
        55: areturn
        56: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        59: aload_0
        60: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        63: iload_1
        64: invokevirtual #278                // Method java/math/BigInteger.shiftRight:(I)Ljava/math/BigInteger;
        67: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        70: areturn
      StackMapTable: number_of_entries = 3
        frame_type = 31 /* same */
        frame_type = 16 /* same */
        frame_type = 7 /* same */
      LineNumberTable:
        line 376: 0
        line 377: 12
        line 378: 31
        line 379: 48
        line 380: 56
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      71     0  this   Lscala/math/BigInt;
            0      71     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.math.BigInt $amp(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          30
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          30
        14: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        17: aload_0
        18: invokespecial #183                // Method _long:()J
        21: aload_1
        22: invokespecial #183                // Method _long:()J
        25: land
        26: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        29: areturn
        30: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        33: aload_0
        34: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        37: aload_1
        38: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        41: invokevirtual #350                // Method java/math/BigInteger.and:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        44: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 30 /* same */
      LineNumberTable:
        line 385: 0
        line 386: 14
        line 387: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lscala/math/BigInt;
            0      48     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $bar(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          30
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          30
        14: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        17: aload_0
        18: invokespecial #183                // Method _long:()J
        21: aload_1
        22: invokespecial #183                // Method _long:()J
        25: lor
        26: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        29: areturn
        30: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        33: aload_0
        34: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        37: aload_1
        38: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        41: invokevirtual #354                // Method java/math/BigInteger.or:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        44: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 30 /* same */
      LineNumberTable:
        line 392: 0
        line 393: 14
        line 394: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lscala/math/BigInt;
            0      48     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $up(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          30
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          30
        14: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        17: aload_0
        18: invokespecial #183                // Method _long:()J
        21: aload_1
        22: invokespecial #183                // Method _long:()J
        25: lxor
        26: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        29: areturn
        30: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        33: aload_0
        34: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        37: aload_1
        38: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        41: invokevirtual #358                // Method java/math/BigInteger.xor:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        44: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 30 /* same */
      LineNumberTable:
        line 399: 0
        line 400: 14
        line 401: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lscala/math/BigInt;
            0      48     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt $amp$tilde(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          34
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          34
        14: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        17: aload_0
        18: invokespecial #183                // Method _long:()J
        21: aload_1
        22: invokespecial #183                // Method _long:()J
        25: ldc2_w        #300                // long -1l
        28: lxor
        29: land
        30: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        33: areturn
        34: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        37: aload_0
        38: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        41: aload_1
        42: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        45: invokevirtual #362                // Method java/math/BigInteger.andNot:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        48: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        51: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 34 /* same */
      LineNumberTable:
        line 406: 0
        line 407: 14
        line 408: 34
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      52     0  this   Lscala/math/BigInt;
            0      52     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt gcd(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=12, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          100
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: lconst_0
        12: lcmp
        13: ifne          21
        16: aload_1
        17: invokevirtual #367                // Method abs:()Lscala/math/BigInt;
        20: areturn
        21: aload_1
        22: invokespecial #256                // Method longEncoding:()Z
        25: ifeq          93
        28: aload_1
        29: invokespecial #183                // Method _long:()J
        32: lconst_0
        33: lcmp
        34: ifne          42
        37: aload_0
        38: invokevirtual #367                // Method abs:()Lscala/math/BigInt;
        41: areturn
        42: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        45: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        48: getstatic     #372                // Field scala/runtime/RichLong$.MODULE$:Lscala/runtime/RichLong$;
        51: pop
        52: aload_0
        53: invokespecial #183                // Method _long:()J
        56: lstore        4
        58: getstatic     #377                // Field scala/math/package$.MODULE$:Lscala/math/package$;
        61: pop
        62: lload         4
        64: invokestatic  #382                // Method java/lang/Math.abs:(J)J
        67: getstatic     #372                // Field scala/runtime/RichLong$.MODULE$:Lscala/runtime/RichLong$;
        70: pop
        71: aload_1
        72: invokespecial #183                // Method _long:()J
        75: lstore        6
        77: getstatic     #377                // Field scala/math/package$.MODULE$:Lscala/math/package$;
        80: pop
        81: lload         6
        83: invokestatic  #382                // Method java/lang/Math.abs:(J)J
        86: invokevirtual #386                // Method scala/math/BigInt$.scala$math$BigInt$$longGcd:(JJ)J
        89: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        92: areturn
        93: aload_1
        94: aload_0
        95: astore_1
        96: astore_0
        97: goto          0
       100: aload_1
       101: invokespecial #256                // Method longEncoding:()Z
       104: ifeq          198
       107: aload_1
       108: invokespecial #183                // Method _long:()J
       111: lconst_0
       112: lcmp
       113: ifne          121
       116: aload_0
       117: invokevirtual #367                // Method abs:()Lscala/math/BigInt;
       120: areturn
       121: aload_0
       122: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
       125: getstatic     #372                // Field scala/runtime/RichLong$.MODULE$:Lscala/runtime/RichLong$;
       128: pop
       129: aload_1
       130: invokespecial #183                // Method _long:()J
       133: lstore        8
       135: getstatic     #377                // Field scala/math/package$.MODULE$:Lscala/math/package$;
       138: pop
       139: lload         8
       141: invokestatic  #382                // Method java/lang/Math.abs:(J)J
       144: invokestatic  #194                // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
       147: invokevirtual #389                // Method java/math/BigInteger.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       150: invokevirtual #392                // Method java/math/BigInteger.longValue:()J
       153: lstore_2
       154: lload_2
       155: lconst_0
       156: lcmp
       157: ifne          165
       160: aload_1
       161: invokevirtual #367                // Method abs:()Lscala/math/BigInt;
       164: areturn
       165: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
       168: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
       171: getstatic     #372                // Field scala/runtime/RichLong$.MODULE$:Lscala/runtime/RichLong$;
       174: pop
       175: aload_1
       176: invokespecial #183                // Method _long:()J
       179: lstore        10
       181: getstatic     #377                // Field scala/math/package$.MODULE$:Lscala/math/package$;
       184: pop
       185: lload         10
       187: invokestatic  #382                // Method java/lang/Math.abs:(J)J
       190: lload_2
       191: invokevirtual #386                // Method scala/math/BigInt$.scala$math$BigInt$$longGcd:(JJ)J
       194: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
       197: areturn
       198: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
       201: aload_0
       202: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
       205: aload_1
       206: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
       209: invokevirtual #394                // Method java/math/BigInteger.gcd:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       212: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
       215: areturn
      StackMapTable: number_of_entries = 8
        frame_type = 0 /* same */
        frame_type = 20 /* same */
        frame_type = 20 /* same */
        frame_type = 50 /* same */
        frame_type = 6 /* same */
        frame_type = 20 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 43
          locals = [ class scala/math/BigInt, class scala/math/BigInt, long, top, top, top, top, long ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 32
          locals = [ class scala/math/BigInt, class scala/math/BigInt ]
          stack = []
      LineNumberTable:
        line 413: 0
        line 414: 7
        line 417: 21
        line 418: 28
        line 420: 42
        line 421: 93
        line 424: 100
        line 425: 107
        line 427: 121
        line 428: 154
        line 429: 165
        line 430: 198
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
          154      43     2   red   J
            0     216     0  this   Lscala/math/BigInt;
            0     216     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt mod(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=4, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          51
         7: aload_1
         8: invokespecial #256                // Method longEncoding:()Z
        11: ifeq          51
        14: aload_0
        15: invokespecial #183                // Method _long:()J
        18: aload_1
        19: invokespecial #183                // Method _long:()J
        22: lrem
        23: lstore_2
        24: lload_2
        25: lconst_0
        26: lcmp
        27: iflt          38
        30: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        33: lload_2
        34: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        37: areturn
        38: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        41: lload_2
        42: aload_1
        43: invokespecial #183                // Method _long:()J
        46: ladd
        47: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        50: areturn
        51: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        54: aload_0
        55: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        58: aload_1
        59: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        62: invokevirtual #389                // Method java/math/BigInteger.mod:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        65: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        68: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 38
          locals = [ long ]
        frame_type = 250 /* chop */
          offset_delta = 12
      LineNumberTable:
        line 439: 0
        line 440: 14
        line 441: 24
        line 442: 51
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           24      26     2   res   J
            0      69     0  this   Lscala/math/BigInt;
            0      69     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt min(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #108                // InterfaceMethod scala/math/Ordered.$less$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
         5: ifeq          10
         8: aload_0
         9: areturn
        10: aload_1
        11: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 10 /* same */
      LineNumberTable:
        line 179: 0
        line 447: 5
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      12     0  this   Lscala/math/BigInt;
            0      12     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt max(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #112                // InterfaceMethod scala/math/Ordered.$greater$eq$:(Lscala/math/Ordered;Ljava/lang/Object;)Z
         5: ifeq          10
         8: aload_0
         9: areturn
        10: aload_1
        11: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 10 /* same */
      LineNumberTable:
        line 179: 0
        line 452: 5
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      12     0  this   Lscala/math/BigInt;
            0      12     1  that   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      that                           final

  public scala.math.BigInt pow(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         7: iload_1
         8: invokevirtual #402                // Method java/math/BigInteger.pow:(I)Ljava/math/BigInteger;
        11: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        14: areturn
      LineNumberTable:
        line 456: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/math/BigInt;
            0      15     1   exp   I
    MethodParameters:
      Name                           Flags
      exp                            final

  public scala.math.BigInt modPow(scala.math.BigInt, scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=3
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         7: aload_1
         8: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        11: aload_2
        12: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        15: invokevirtual #408                // Method java/math/BigInteger.modPow:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;
        18: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        21: areturn
      LineNumberTable:
        line 461: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      22     0  this   Lscala/math/BigInt;
            0      22     1   exp   Lscala/math/BigInt;
            0      22     2     m   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      exp                            final
      m                              final

  public scala.math.BigInt modInverse(scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         7: aload_1
         8: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        11: invokevirtual #411                // Method java/math/BigInteger.modInverse:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
        14: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        17: areturn
      LineNumberTable:
        line 465: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      18     0  this   Lscala/math/BigInt;
            0      18     1     m   Lscala/math/BigInt;
    MethodParameters:
      Name                           Flags
      m                              final

  public scala.math.BigInt unary_$minus();
    descriptor: ()Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          19
         7: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        10: aload_0
        11: invokespecial #183                // Method _long:()J
        14: lneg
        15: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        18: areturn
        19: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        22: aload_0
        23: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        26: invokevirtual #415                // Method java/math/BigInteger.negate:()Ljava/math/BigInteger;
        29: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        32: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 19 /* same */
      LineNumberTable:
        line 469: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lscala/math/BigInt;

  public scala.math.BigInt abs();
    descriptor: ()Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #416                // Method signum:()I
         4: iconst_0
         5: if_icmpge     13
         8: aload_0
         9: invokevirtual #418                // Method unary_$minus:()Lscala/math/BigInt;
        12: areturn
        13: aload_0
        14: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 13 /* same */
      LineNumberTable:
        line 473: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/math/BigInt;

  public int signum();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          15
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: invokestatic  #421                // Method java/lang/Long.signum:(J)I
        14: ireturn
        15: aload_0
        16: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        19: invokevirtual #280                // Method java/math/BigInteger.signum:()I
        22: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 15 /* same */
      LineNumberTable:
        line 480: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lscala/math/BigInt;

  public scala.math.BigInt sign();
    descriptor: ()Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: aload_0
         4: invokevirtual #416                // Method signum:()I
         7: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
        10: areturn
      LineNumberTable:
        line 487: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      11     0  this   Lscala/math/BigInt;

  public scala.math.BigInt unary_$tilde();
    descriptor: ()Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          32
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: ldc2_w        #424                // long 9223372036854775807l
        14: lcmp
        15: ifeq          32
        18: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        21: aload_0
        22: invokespecial #183                // Method _long:()J
        25: lconst_1
        26: ladd
        27: lneg
        28: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        31: areturn
        32: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        35: aload_0
        36: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        39: invokevirtual #428                // Method java/math/BigInteger.not:()Ljava/math/BigInteger;
        42: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        45: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 32 /* same */
      LineNumberTable:
        line 493: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      46     0  this   Lscala/math/BigInt;

  public boolean testBit(int);
    descriptor: (I)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          43
         7: iload_1
         8: bipush        63
        10: if_icmpgt     30
        13: aload_0
        14: invokespecial #183                // Method _long:()J
        17: lconst_1
        18: iload_1
        19: lshl
        20: land
        21: lconst_0
        22: lcmp
        23: ifeq          28
        26: iconst_1
        27: ireturn
        28: iconst_0
        29: ireturn
        30: aload_0
        31: invokespecial #183                // Method _long:()J
        34: lconst_0
        35: lcmp
        36: ifge          41
        39: iconst_1
        40: ireturn
        41: iconst_0
        42: ireturn
        43: aload_0
        44: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        47: iload_1
        48: invokevirtual #432                // Method java/math/BigInteger.testBit:(I)Z
        51: ireturn
      StackMapTable: number_of_entries = 4
        frame_type = 28 /* same */
        frame_type = 1 /* same */
        frame_type = 10 /* same */
        frame_type = 1 /* same */
      LineNumberTable:
        line 498: 0
        line 499: 7
        line 500: 13
        line 502: 30
        line 503: 43
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      52     0  this   Lscala/math/BigInt;
            0      52     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.math.BigInt setBit(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          28
         7: iload_1
         8: bipush        62
        10: if_icmpgt     28
        13: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        16: aload_0
        17: invokespecial #183                // Method _long:()J
        20: lconst_1
        21: iload_1
        22: lshl
        23: lor
        24: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        27: areturn
        28: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        31: aload_0
        32: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        35: iload_1
        36: invokevirtual #435                // Method java/math/BigInteger.setBit:(I)Ljava/math/BigInteger;
        39: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        42: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 28 /* same */
      LineNumberTable:
        line 508: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      43     0  this   Lscala/math/BigInt;
            0      43     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.math.BigInt clearBit(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          32
         7: iload_1
         8: bipush        62
        10: if_icmpgt     32
        13: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        16: aload_0
        17: invokespecial #183                // Method _long:()J
        20: lconst_1
        21: iload_1
        22: lshl
        23: ldc2_w        #300                // long -1l
        26: lxor
        27: land
        28: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        31: areturn
        32: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        35: aload_0
        36: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        39: iload_1
        40: invokevirtual #438                // Method java/math/BigInteger.clearBit:(I)Ljava/math/BigInteger;
        43: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        46: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 32 /* same */
      LineNumberTable:
        line 513: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lscala/math/BigInt;
            0      47     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.math.BigInt flipBit(int);
    descriptor: (I)Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=2, args_size=2
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          28
         7: iload_1
         8: bipush        62
        10: if_icmpgt     28
        13: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        16: aload_0
        17: invokespecial #183                // Method _long:()J
        20: lconst_1
        21: iload_1
        22: lshl
        23: lxor
        24: invokevirtual #52                 // Method scala/math/BigInt$.apply:(J)Lscala/math/BigInt;
        27: areturn
        28: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
        31: aload_0
        32: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        35: iload_1
        36: invokevirtual #441                // Method java/math/BigInteger.flipBit:(I)Ljava/math/BigInteger;
        39: invokevirtual #47                 // Method scala/math/BigInt$.apply:(Ljava/math/BigInteger;)Lscala/math/BigInt;
        42: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 28 /* same */
      LineNumberTable:
        line 518: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      43     0  this   Lscala/math/BigInt;
            0      43     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public int lowestSetBit();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          26
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: lconst_0
        12: lcmp
        13: ifne          18
        16: iconst_m1
        17: ireturn
        18: aload_0
        19: invokespecial #183                // Method _long:()J
        22: invokestatic  #444                // Method java/lang/Long.numberOfTrailingZeros:(J)I
        25: ireturn
        26: aload_0
        27: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        30: invokevirtual #447                // Method java/math/BigInteger.getLowestSetBit:()I
        33: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 18 /* same */
        frame_type = 7 /* same */
      LineNumberTable:
        line 524: 0
        line 525: 7
        line 526: 26
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      34     0  this   Lscala/math/BigInt;

  public int bitLength();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          41
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: lconst_0
        12: lcmp
        13: ifge          30
        16: bipush        64
        18: aload_0
        19: invokespecial #183                // Method _long:()J
        22: lconst_1
        23: ladd
        24: lneg
        25: invokestatic  #450                // Method java/lang/Long.numberOfLeadingZeros:(J)I
        28: isub
        29: ireturn
        30: bipush        64
        32: aload_0
        33: invokespecial #183                // Method _long:()J
        36: invokestatic  #450                // Method java/lang/Long.numberOfLeadingZeros:(J)I
        39: isub
        40: ireturn
        41: aload_0
        42: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        45: invokevirtual #451                // Method java/math/BigInteger.bitLength:()I
        48: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 30 /* same */
        frame_type = 10 /* same */
      LineNumberTable:
        line 534: 0
        line 535: 7
        line 536: 30
        line 537: 41
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      49     0  this   Lscala/math/BigInt;

  public int bitCount();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          35
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: lconst_0
        12: lcmp
        13: ifge          27
        16: aload_0
        17: invokespecial #183                // Method _long:()J
        20: lconst_1
        21: ladd
        22: lneg
        23: invokestatic  #454                // Method java/lang/Long.bitCount:(J)I
        26: ireturn
        27: aload_0
        28: invokespecial #183                // Method _long:()J
        31: invokestatic  #454                // Method java/lang/Long.bitCount:(J)I
        34: ireturn
        35: aload_0
        36: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        39: invokevirtual #456                // Method java/math/BigInteger.bitCount:()I
        42: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 27 /* same */
        frame_type = 7 /* same */
      LineNumberTable:
        line 543: 0
        line 544: 7
        line 545: 35
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      43     0  this   Lscala/math/BigInt;

  public boolean isProbablePrime(int);
    descriptor: (I)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         4: iload_1
         5: invokevirtual #459                // Method java/math/BigInteger.isProbablePrime:(I)Z
         8: ireturn
      LineNumberTable:
        line 554: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/math/BigInt;
            0       9     1 certainty   I
    MethodParameters:
      Name                           Flags
      certainty                      final

  public byte byteValue();
    descriptor: ()B
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #463                // Method intValue:()I
         4: i2b
         5: ireturn
      LineNumberTable:
        line 561: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;

  public short shortValue();
    descriptor: ()S
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #463                // Method intValue:()I
         4: i2s
         5: ireturn
      LineNumberTable:
        line 568: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;

  public char charValue();
    descriptor: ()C
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #463                // Method intValue:()I
         4: i2c
         5: ireturn
      LineNumberTable:
        line 575: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/math/BigInt;

  public int intValue();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          13
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: l2i
        12: ireturn
        13: aload_0
        14: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        17: invokevirtual #466                // Method java/math/BigInteger.intValue:()I
        20: ireturn
      StackMapTable: number_of_entries = 1
        frame_type = 13 /* same */
      LineNumberTable:
        line 583: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      21     0  this   Lscala/math/BigInt;

  public long longValue();
    descriptor: ()J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          12
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: lreturn
        12: aload_0
        13: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        16: invokevirtual #392                // Method java/math/BigInteger.longValue:()J
        19: lreturn
      StackMapTable: number_of_entries = 1
        frame_type = 12 /* same */
      LineNumberTable:
        line 591: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      20     0  this   Lscala/math/BigInt;

  public float floatValue();
    descriptor: ()F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         4: invokevirtual #467                // Method java/math/BigInteger.floatValue:()F
         7: freturn
      LineNumberTable:
        line 598: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lscala/math/BigInt;

  public double doubleValue();
    descriptor: ()D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #202                // Method isValidLong:()Z
         4: ifeq          36
         7: ldc2_w        #468                // long 9007199254740992l
        10: lneg
        11: aload_0
        12: invokespecial #183                // Method _long:()J
        15: lcmp
        16: ifgt          36
        19: aload_0
        20: invokespecial #183                // Method _long:()J
        23: ldc2_w        #468                // long 9007199254740992l
        26: lcmp
        27: ifgt          36
        30: aload_0
        31: invokespecial #183                // Method _long:()J
        34: l2d
        35: dreturn
        36: aload_0
        37: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
        40: invokevirtual #470                // Method java/math/BigInteger.doubleValue:()D
        43: dreturn
      StackMapTable: number_of_entries = 1
        frame_type = 36 /* same */
      LineNumberTable:
        line 606: 0
        line 607: 36
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      44     0  this   Lscala/math/BigInt;

  public scala.collection.immutable.NumericRange$Exclusive<scala.math.BigInt> until(scala.math.BigInt, scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Exclusive;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=4, args_size=3
         0: getstatic     #478                // Field scala/collection/immutable/Range$BigInt$.MODULE$:Lscala/collection/immutable/Range$BigInt$;
         3: pop
         4: getstatic     #483                // Field scala/collection/immutable/NumericRange$.MODULE$:Lscala/collection/immutable/NumericRange$;
         7: pop
         8: getstatic     #486                // Field scala/math/Numeric$BigIntIsIntegral$.MODULE$:Lscala/math/Numeric$BigIntIsIntegral$;
        11: astore_3
        12: new           #15                 // class scala/collection/immutable/NumericRange$Exclusive
        15: dup
        16: aload_0
        17: aload_1
        18: aload_2
        19: aload_3
        20: invokespecial #489                // Method scala/collection/immutable/NumericRange$Exclusive."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)V
        23: areturn
      LineNumberTable:
        line 616: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      24     0  this   Lscala/math/BigInt;
            0      24     1   end   Lscala/math/BigInt;
            0      24     2  step   Lscala/math/BigInt;
           12      11     3 apply_apply_num   Lscala/math/Integral;
    Signature: #473                         // (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Exclusive<Lscala/math/BigInt;>;
    MethodParameters:
      Name                           Flags
      end                            final
      step                           final

  public scala.math.BigInt until$default$2();
    descriptor: ()Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iconst_1
         4: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
         7: areturn
      LineNumberTable:
        line 616: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lscala/math/BigInt;

  public scala.collection.immutable.NumericRange$Inclusive<scala.math.BigInt> to(scala.math.BigInt, scala.math.BigInt);
    descriptor: (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Inclusive;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=4, args_size=3
         0: getstatic     #478                // Field scala/collection/immutable/Range$BigInt$.MODULE$:Lscala/collection/immutable/Range$BigInt$;
         3: pop
         4: getstatic     #483                // Field scala/collection/immutable/NumericRange$.MODULE$:Lscala/collection/immutable/NumericRange$;
         7: pop
         8: getstatic     #486                // Field scala/math/Numeric$BigIntIsIntegral$.MODULE$:Lscala/math/Numeric$BigIntIsIntegral$;
        11: astore_3
        12: new           #20                 // class scala/collection/immutable/NumericRange$Inclusive
        15: dup
        16: aload_0
        17: aload_1
        18: aload_2
        19: aload_3
        20: invokespecial #496                // Method scala/collection/immutable/NumericRange$Inclusive."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Integral;)V
        23: areturn
      LineNumberTable:
        line 620: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      24     0  this   Lscala/math/BigInt;
            0      24     1   end   Lscala/math/BigInt;
            0      24     2  step   Lscala/math/BigInt;
           12      11     3 inclusive_inclusive_num   Lscala/math/Integral;
    Signature: #495                         // (Lscala/math/BigInt;Lscala/math/BigInt;)Lscala/collection/immutable/NumericRange$Inclusive<Lscala/math/BigInt;>;
    MethodParameters:
      Name                           Flags
      end                            final
      step                           final

  public scala.math.BigInt to$default$2();
    descriptor: ()Lscala/math/BigInt;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #44                 // Field scala/math/BigInt$.MODULE$:Lscala/math/BigInt$;
         3: iconst_1
         4: invokevirtual #57                 // Method scala/math/BigInt$.apply:(I)Lscala/math/BigInt;
         7: areturn
      LineNumberTable:
        line 620: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lscala/math/BigInt;

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokespecial #256                // Method longEncoding:()Z
         4: ifeq          15
         7: aload_0
         8: invokespecial #183                // Method _long:()J
        11: invokestatic  #503                // Method java/lang/Long.toString:(J)Ljava/lang/String;
        14: areturn
        15: aload_0
        16: invokespecial #188                // Method _bigInteger:()Ljava/math/BigInteger;
        19: invokevirtual #505                // Method java/math/BigInteger.toString:()Ljava/lang/String;
        22: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 15 /* same */
      LineNumberTable:
        line 624: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lscala/math/BigInt;

  public java.lang.String toString(int);
    descriptor: (I)Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         4: iload_1
         5: invokevirtual #508                // Method java/math/BigInteger.toString:(I)Ljava/lang/String;
         8: areturn
      LineNumberTable:
        line 628: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/math/BigInt;
            0       9     1 radix   I
    MethodParameters:
      Name                           Flags
      radix                          final

  public byte[] toByteArray();
    descriptor: ()[B
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #204                // Method bigInteger:()Ljava/math/BigInteger;
         4: invokevirtual #512                // Method java/math/BigInteger.toByteArray:()[B
         7: areturn
      LineNumberTable:
        line 636: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lscala/math/BigInt;

  public int compare(java.lang.Object);
    descriptor: (Ljava/lang/Object;)I
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: checkcast     #2                  // class scala/math/BigInt
         5: invokevirtual #514                // Method compare:(Lscala/math/BigInt;)I
         8: ireturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/math/BigInt;
            0       9     1  that   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      that                           final

  public java.lang.Object underlying();
    descriptor: ()Ljava/lang/Object;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #517                // Method underlying:()Ljava/math/BigInteger;
         4: areturn
      LineNumberTable:
        line 179: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/math/BigInt;

  public scala.math.BigInt(java.math.BigInteger, long);
    descriptor: (Ljava/math/BigInteger;J)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=4, args_size=3
         0: aload_0
         1: aload_1
         2: putfield      #174                // Field _bigInteger:Ljava/math/BigInteger;
         5: aload_0
         6: lload_2
         7: putfield      #179                // Field _long:J
        10: aload_0
        11: invokespecial #521                // Method scala/math/ScalaNumber."<init>":()V
        14: return
      LineNumberTable:
        line 179: 0
        line 180: 10
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/math/BigInt;
            0      15     1 _bigInteger   Ljava/math/BigInteger;
            0      15     2 _long   J
    MethodParameters:
      Name                           Flags
      _bigInteger                    final
      _long                          final

  public scala.math.BigInt(java.math.BigInteger);
    descriptor: (Ljava/math/BigInteger;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: aload_1
         3: invokevirtual #451                // Method java/math/BigInteger.bitLength:()I
         6: bipush        63
         8: if_icmpgt     18
        11: aload_1
        12: invokevirtual #392                // Method java/math/BigInteger.longValue:()J
        15: goto          21
        18: ldc2_w        #184                // long -9223372036854775808l
        21: invokespecial #523                // Method "<init>":(Ljava/math/BigInteger;J)V
        24: return
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 18
          locals = [ this, class java/math/BigInteger ]
          stack = [ this, class java/math/BigInteger ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ this, class java/math/BigInteger ]
          stack = [ this, class java/math/BigInteger, long ]
      LineNumberTable:
        line 204: 0
        line 205: 1
        line 206: 2
        line 207: 11
        line 208: 18
        line 204: 24
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      25     0  this   Lscala/math/BigInt;
            0      25     1 bigInteger   Ljava/math/BigInteger;
    MethodParameters:
      Name                           Flags
      bigInteger                     final
}
InnerClasses:
  public static #18= #15 of #17;          // Exclusive=class scala/collection/immutable/NumericRange$Exclusive of class scala/collection/immutable/NumericRange
  public static #21= #20 of #17;          // Inclusive=class scala/collection/immutable/NumericRange$Inclusive of class scala/collection/immutable/NumericRange
  public static #26= #23 of #25;          // BigInt$=class scala/collection/immutable/Range$BigInt$ of class scala/collection/immutable/Range
  public static #31= #28 of #30;          // BigIntIsIntegral$=class scala/math/Numeric$BigIntIsIntegral$ of class scala/math/Numeric
Signature: #3                           // Lscala/math/ScalaNumber;Lscala/math/ScalaNumericConversions;Lscala/math/Ordered<Lscala/math/BigInt;>;
SourceFile: "BigInt.scala"
RuntimeVisibleAnnotations:
  0: #11(#12=s#13)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\r%u!\u00022d\u0011\u0003Ag!\u00026d\u0011\u0003Y\u0007\"\u0002=\u0002\t\u0003I\bb\u0002>\u0002\u0005\u0004%Ia\u001f\u0005\b\u0003\u0007\t\u0001\u0015!\u0003}\u0011%\t)!\u0001b\u0001\n\u0013\t9\u0001\u0003\u0005\u0003v\u0006\u0001\u000b\u0011BA\u0005\u0011!\u001190\u0001Q\u0001\n\u0005\r\u0004\u0002\u0003B}\u0003\u0001\u0006I!a\u0019\t\u0011\tm\u0018\u0001)A\u0005\u0005{D\u0001Ba@\u0002A\u0013%1\u0011\u0001\u0005\t\u0007\u000f\t!\u0019!C\u0005w\"91\u0011B\u0001!\u0002\u0013a\bbBB\u0006\u0003\u0011\u00051Q\u0002\u0005\b\u0007\u0017\tA\u0011AB\t\u0011\u001d\u0019Y!\u0001C\u0001\u0007/Aqaa\u0003\u0002\t\u0003\u0019i\u0002C\u0004\u0004\f\u0005!\ta!\n\t\u000f\r-\u0011\u0001\"\u0001\u0004>!911B\u0001\u0005\u0002\r\u0015\u0003bBB\u0006\u0003\u0011\u00051\u0011\n\u0005\b\u0007\u0017\tA\u0011AB(\u0011\u001d\u0019\u0019&\u0001C\u0001\u0007+Bqaa\u0017\u0002\t\u0007\u0019i\u0006C\u0004\u0004b\u0005!\u0019aa\u0019\t\u000f\r\u001d\u0014\u0001b\u0001\u0004j!91QN\u0001\u0005\n\r=\u0004\"CB=\u0003\u0005\u0005I\u0011BB>\r\u0015Q7MAA\u0006\u0011%\tY\u0003\bBA\u0002\u0013%1\u0010\u0003\u0006\u0002.q\u0011\t\u0019!C\u0005\u0003_A\u0011\"a\u000f\u001d\u0005\u0003\u0005\u000b\u0015\u0002?\t\u0015\u0005uBD!b\u0001\n\u0013\ty\u0004\u0003\u0006\u0002Hq\u0011\t\u0011)A\u0005\u0003\u0003Ba\u0001\u001f\u000f\u0005\n\u0005%\u0003B\u0002=\u001d\t\u0003\ty\u0005C\u0004\u0002Vq!I!a\u0016\t\r\u0005MC\u0004\"\u0001|\u0011\u001d\ty\u0006\bC!\u0003CBq!!\u001b\u001d\t\u0003\nY\u0007C\u0004\u0002xq!\t%a\u0016\t\u000f\u0005eD\u0004\"\u0011\u0002X!9\u00111\u0010\u000f\u0005B\u0005]\u0003bBA?9\u0011\u0005\u0013q\u000b\u0005\b\u0003\u007fbB\u0011AA,\u0011\u001d\t\t\t\bC\u0001\u0003/Bq!a!\u001d\t\u0003\t9\u0006C\u0004\u0002\u0006r!I!a\u0016\t\u000f\u0005\u001dE\u0004\"\u0001\u0002X!9\u0011\u0011\u0012\u000f\u0005\u0002\u0005-\u0005bBA59\u0011\u0005\u0011Q\u0012\u0005\b\u0003#cB\u0011AAJ\u0011\u001d\t9\n\bC\u0001\u00033Cq!!(\u001d\t\u0003\ty\nC\u0004\u0002$r!\t!!*\t\u000f\u0005%F\u0004\"\u0001\u0002,\"9\u0011q\u0016\u000f\u0005\u0002\u0005E\u0006bBA[9\u0011\u0005\u0011q\u0017\u0005\b\u0003\u0003dB\u0011AAb\u0011\u001d\tI\r\bC\u0001\u0003\u0017Dq!a4\u001d\t\u0003\t\t\u000eC\u0004\u0002Vr!\t!a6\t\u000f\u0005mG\u0004\"\u0001\u0002^\"9\u0011\u0011\u001d\u000f\u0005\u0002\u0005\r\bbBAt9\u0011\u0005\u0011\u0011\u001e\u0005\b\u0003[dB\u0011AAx\u0011\u001d\t\u0019\u0010\bC\u0001\u0003kDq!!?\u001d\t\u0003\tY\u0010C\u0004\u0002\u0000r!\tA!\u0001\t\u000f\t\u001dA\u0004\"\u0001\u0003\n!9!\u0011\u0003\u000f\u0005\u0002\tM\u0001b\u0002B\f9\u0011\u0005\u0011q\u0001\u0005\b\u00053aB\u0011AA\u0004\u0011\u001d\u0011Y\u0002\bC\u0001\u0005;AqAa\b\u001d\t\u0003\t9\u0001C\u0004\u0003\"q!\t!a\u0002\t\u000f\t\rB\u0004\"\u0001\u0003&!9!\u0011\u0006\u000f\u0005\u0002\t-\u0002b\u0002B\u00189\u0011\u0005!\u0011\u0007\u0005\b\u0005kaB\u0011\u0001B\u001c\u0011\u001d\u0011Y\u0004\bC\u0001\u0005;AqA!\u0010\u001d\t\u0003\u0011i\u0002C\u0004\u0003@q!\tA!\b\t\u000f\t\u0005C\u0004\"\u0001\u0003D!9!\u0011\n\u000f\u0005B\t-\u0003b\u0002B*9\u0011\u0005#Q\u000b\u0005\b\u0005;bB\u0011\u0001B0\u0011\u001d\u00119\u0007\bC\u0001\u0005;AqA!\u001b\u001d\t\u0003\ty\u0004C\u0004\u0003lq!\tA!\u001c\t\u000f\tUD\u0004\"\u0001\u0003x!9!q\u0010\u000f\u0005\u0002\t\u0005\u0005\"\u0003BR9E\u0005I\u0011\u0001BS\u0011\u001d\u0011Y\f\bC\u0001\u0005{C\u0011B!3\u001d#\u0003%\tA!*\t\u000f\t-G\u0004\"\u0011\u0003N\"9!1\u001a\u000f\u0005\u0002\t\u0015\bb\u0002Bv9\u0011\u0005!Q^\u0001\u0007\u0005&<\u0017J\u001c;\u000b\u0005\u0011,\u0017\u0001B7bi\"T\u0011AZ\u0001\u0006g\u000e\fG.Y\u0002\u0001!\tI\u0017!D\u0001d\u0005\u0019\u0011\u0015nZ%oiN\u0019\u0011\u0001\u001c9\u0011\u00055tW\"A3\n\u0005=,\'AB!osJ+g\r\u0005\u0002rm6\t!O\u0003\u0002ti\u0006\u0011\u0011n\u001c\u0006\u0002k\u0006!!.\u0019<b\u0013\t9(O\u0001\u0007TKJL\u0017\r\\5{C\ndW-\u0001\u0004=S:LGO\u0010\u000b\u0002Q\u00061Bn\u001c8h\u001b&tg+\u00197vK\nKw-\u00138uK\u001e,\'/F\u0001}!\tix0D\u0001\u007f\u0015\t!G/C\u0002\u0002\u0002y\u0014!BQ5h\u0013:$XmZ3s\u0003]awN\\4NS:4\u0016\r\\;f\u0005&<\u0017J\u001c;fO\u0016\u0014\b%\u0001\u0007m_:<W*\u001b8WC2,X-\u0006\u0002\u0002\nA\u0011\u0011\u000eH\n\n9\u00055\u00111CA\r\u0003K\u00012![A\b\u0013\r\t\tb\u0019\u0002\f\'\u000e\fG.\u0019(v[\n,\'\u000fE\u0002j\u0003+I1!a\u0006d\u0005]\u00196-\u00197b\u001dVlWM]5d\u0007>tg/\u001a:tS>t7\u000f\u0005\u0003\u0002\u001c\u0005\u0005bbA7\u0002\u001e%\u0019\u0011qD3\u0002\u000fA\f7m[1hK&\u0019q/a\t\u000b\u0007\u0005}Q\rE\u0003j\u0003O\tI!C\u0002\u0002*\r\u0014qa\u0014:eKJ,G-A\u0006`E&<\u0017J\u001c;fO\u0016\u0014\u0018aD0cS\u001eLe\u000e^3hKJ|F%Z9\u0015\t\u0005E\u0012q\u0007\t\u0004[\u0006M\u0012bAA\u001bK\n!QK\\5u\u0011!\tIDHA\u0001\u0002\u0004a\u0018a\u0001=%c\u0005aqLY5h\u0013:$XmZ3sA\u0005)q\f\\8oOV\u0011\u0011\u0011\t\t\u0004[\u0006\r\u0013bAA#K\n!Aj\u001c8h\u0003\u0019yFn\u001c8hAQ1\u0011\u0011BA&\u0003\u001bBa!a\u000b#\u0001\u0004a\bbBA\u001fE\u0001\u0007\u0011\u0011\t\u000b\u0005\u0003\u0013\t\t\u0006\u0003\u0004\u0002T\r\u0002\r\u0001`\u0001\u000bE&<\u0017J\u001c;fO\u0016\u0014\u0018\u0001\u00047p]\u001e,enY8eS:<WCAA-!\ri\u00171L\u0005\u0004\u0003;*\'a\u0002\"p_2,\u0017M\\\u0001\tQ\u0006\u001c\bnQ8eKR\u0011\u00111\r\t\u0004[\u0006\u0015\u0014bAA4K\n\u0019\u0011J\u001c;\u0002\r\u0015\fX/\u00197t)\u0011\tI&!\u001c\t\u000f\u0005=t\u00051\u0001\u0002r\u0005!A\u000f[1u!\ri\u00171O\u0005\u0004\u0003k*\'aA!os\u0006Y\u0011n\u001d,bY&$\')\u001f;f\u00031I7OV1mS\u0012\u001c\u0006n\u001c:u\u0003-I7OV1mS\u0012\u001c\u0005.\u0019:\u0002\u0015%\u001ch+\u00197jI&sG/A\u0006jgZ\u000bG.\u001b3M_:<\u0017\u0001D5t-\u0006d\u0017\u000e\u001a$m_\u0006$\u0018!D5t-\u0006d\u0017\u000e\u001a#pk\ndW-A\tcSRdUM\\4uQ>3XM\u001d4m_^\fq![:XQ>dW-\u0001\u0006v]\u0012,\'\u000f\\=j]\u001e$\u0012\u0001 \u000b\u0005\u00033\ny\tC\u0004\u0002pI\u0002\r!!\u0003\u0002\u000f\r|W\u000e]1sKR!\u00111MAK\u0011\u001d\tyg\ra\u0001\u0003\u0013\tQ\u0001\n9mkN$B!!\u0003\u0002\u001c\"9\u0011q\u000e\u001bA\u0002\u0005%\u0011A\u0002\u0013nS:,8\u000f\u0006\u0003\u0002\n\u0005\u0005\u0006bBA8k\u0001\u0007\u0011\u0011B\u0001\u0007IQLW.Z:\u0015\t\u0005%\u0011q\u0015\u0005\b\u0003_2\u0004\u0019AA\u0005\u0003\u0011!C-\u001b<\u0015\t\u0005%\u0011Q\u0016\u0005\b\u0003_:\u0004\u0019AA\u0005\u0003!!\u0003/\u001a:dK:$H\u0003BA\u0005\u0003gCq!a\u001c9\u0001\u0004\tI!\u0001\u0007%I&4H\u0005]3sG\u0016tG\u000f\u0006\u0003\u0002:\u0006}\u0006cB7\u0002<\u0006%\u0011\u0011B\u0005\u0004\u0003{+\'A\u0002+va2,\'\u0007C\u0004\u0002pe\u0002\r!!\u0003\u0002\u0015\u0011bWm]:%Y\u0016\u001c8\u000f\u0006\u0003\u0002\n\u0005\u0015\u0007bBAdu\u0001\u0007\u00111M\u0001\u0002]\u0006\u0001Be\u001a:fCR,\'\u000fJ4sK\u0006$XM\u001d\u000b\u0005\u0003\u0013\ti\rC\u0004\u0002Hn\u0002\r!a\u0019\u0002\t\u0011\nW\u000e\u001d\u000b\u0005\u0003\u0013\t\u0019\u000eC\u0004\u0002pq\u0002\r!!\u0003\u0002\t\u0011\u0012\u0017M\u001d\u000b\u0005\u0003\u0013\tI\u000eC\u0004\u0002pu\u0002\r!!\u0003\u0002\u0007\u0011*\b\u000f\u0006\u0003\u0002\n\u0005}\u0007bBA8}\u0001\u0007\u0011\u0011B\u0001\u000bI\u0005l\u0007\u000f\n;jY\u0012,G\u0003BA\u0005\u0003KDq!a\u001c@\u0001\u0004\tI!A\u0002hG\u0012$B!!\u0003\u0002l\"9\u0011q\u000e!A\u0002\u0005%\u0011aA7pIR!\u0011\u0011BAy\u0011\u001d\ty\'\u0011a\u0001\u0003\u0013\t1!\\5o)\u0011\tI!a>\t\u000f\u0005=$\t1\u0001\u0002\n\u0005\u0019Q.\u0019=\u0015\t\u0005%\u0011Q \u0005\b\u0003_\u001a\u0005\u0019AA\u0005\u0003\r\u0001xn\u001e\u000b\u0005\u0003\u0013\u0011\u0019\u0001C\u0004\u0003\u0006\u0011\u0003\r!a\u0019\u0002\u0007\u0015D\b/\u0001\u0004n_\u0012\u0004vn\u001e\u000b\u0007\u0003\u0013\u0011YA!\u0004\t\u000f\t\u0015Q\t1\u0001\u0002\n!9!qB#A\u0002\u0005%\u0011!A7\u0002\u00155|G-\u00138wKJ\u001cX\r\u0006\u0003\u0002\n\tU\u0001b\u0002B\b\r\u0002\u0007\u0011\u0011B\u0001\rk:\f\'/_0%[&tWo]\u0001\u0004C\n\u001c\u0018AB:jO:,X.\u0006\u0002\u0002d\u0005!1/[4o\u00031)h.\u0019:z?\u0012\"\u0018\u000e\u001c3f\u0003\u001d!Xm\u001d;CSR$B!!\u0017\u0003(!9\u0011q\u0019\'A\u0002\u0005\r\u0014AB:fi\nKG\u000f\u0006\u0003\u0002\n\t5\u0002bBAd\u001b\u0002\u0007\u00111M\u0001\tG2,\u0017M\u001d\"jiR!\u0011\u0011\u0002B\u001a\u0011\u001d\t9M\u0014a\u0001\u0003G\nqA\u001a7ja\nKG\u000f\u0006\u0003\u0002\n\te\u0002bBAd\u001f\u0002\u0007\u00111M\u0001\rY><Xm\u001d;TKR\u0014\u0015\u000e^\u0001\nE&$H*\u001a8hi\"\f\u0001BY5u\u0007>,h\u000e^\u0001\u0010SN\u0004&o\u001c2bE2,\u0007K]5nKR!\u0011\u0011\fB#\u0011\u001d\u00119e\u0015a\u0001\u0003G\n\u0011bY3si\u0006Lg\u000e^=\u0002\u0013\tLH/\u001a,bYV,WC\u0001B\'!\ri\'qJ\u0005\u0004\u0005#*\'\u0001\u0002\"zi\u0016\f!b\u001d5peR4\u0016\r\\;f+\t\u00119\u0006E\u0002n\u00053J1Aa\u0017f\u0005\u0015\u0019\u0006n\u001c:u\u0003%\u0019\u0007.\u0019:WC2,X-\u0006\u0002\u0003bA\u0019QNa\u0019\n\u0007\t\u0015TM\u0001\u0003DQ\u0006\u0014\u0018\u0001C5oiZ\u000bG.^3\u0002\u00131|gn\u001a,bYV,\u0017A\u00034m_\u0006$h+\u00197vKV\u0011!q\u000e\t\u0004[\nE\u0014b\u0001B:K\n)a\t\\8bi\u0006YAm\\;cY\u00164\u0016\r\\;f+\t\u0011I\bE\u0002n\u0005wJ1A! f\u0005\u0019!u.\u001e2mK\u0006)QO\u001c;jYR1!1\u0011BN\u0005?\u0003bA!\"\u0003\u0016\u0006%a\u0002\u0002BD\u0005#k!A!#\u000b\t\t-%QR\u0001\nS6lW\u000f^1cY\u0016T1Aa$f\u0003)\u0019w\u000e\u001c7fGRLwN\\\u0005\u0005\u0005\'\u0013I)\u0001\u0007Ok6,\'/[2SC:<W-\u0003\u0003\u0003\u0018\ne%!C#yG2,8/\u001b<f\u0015\u0011\u0011\u0019J!#\t\u000f\tu5\f1\u0001\u0002\n\u0005\u0019QM\u001c3\t\u0013\t\u00056\f%AA\u0002\u0005%\u0011\u0001B:uKB\fq\"\u001e8uS2$C-\u001a4bk2$HEM\u000b\u0003\u0005OSC!!\u0003\u0003*.\u0012!1\u0016\t\u0005\u0005[\u00139,\u0004\u0002\u00030*!!\u0011\u0017BZ\u0003%)hn\u00195fG.,GMC\u0002\u00036\u0016\f!\"\u00198o_R\fG/[8o\u0013\u0011\u0011ILa,\u0003#Ut7\r[3dW\u0016$g+\u0019:jC:\u001cW-\u0001\u0002u_R1!q\u0018Bc\u0005\u000f\u0004bA!\"\u0003B\u0006%\u0011\u0002\u0002Bb\u00053\u0013\u0011\"\u00138dYV\u001c\u0018N^3\t\u000f\tuU\f1\u0001\u0002\n!I!\u0011U/\u0011\u0002\u0003\u0007\u0011\u0011B\u0001\ri>$C-\u001a4bk2$HEM\u0001\ti>\u001cFO]5oOR\u0011!q\u001a\t\u0005\u0005#\u0014yN\u0004\u0003\u0003T\nm\u0007c\u0001BkK6\u0011!q\u001b\u0006\u0004\u00053<\u0017A\u0002\u001fs_>$h(C\u0002\u0003^\u0016\fa\u0001\u0015:fI\u00164\u0017\u0002\u0002Bq\u0005G\u0014aa\u0015;sS:<\'b\u0001BoKR!!q\u001aBt\u0011\u001d\u0011I\u000f\u0019a\u0001\u0003G\nQA]1eSb\f1\u0002^8CsR,\u0017I\u001d:bsV\u0011!q\u001e\t\u0006[\nE(QJ\u0005\u0004\u0005g,\'!B!se\u0006L\u0018!\u00047p]\u001el\u0015N\u001c,bYV,\u0007%A\u0005nS:\u001c\u0015m\u00195fI\u0006IQ.\u0019=DC\u000eDW\rZ\u0001\u0006G\u0006\u001c\u0007.\u001a\t\u0006[\nE\u0018\u0011B\u0001\nO\u0016$8)Y2iK\u0012$B!!\u0003\u0004\u0004!91Q\u0001\u0006A\u0002\u0005\r\u0014!A5\u0002\u00115Lg.^:P]\u0016\f\u0011\"\\5okN|e.\u001a\u0011\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\t\u0005%1q\u0002\u0005\b\u0007\u000bi\u0001\u0019AA2)\u0011\tIaa\u0005\t\u000f\rUa\u00021\u0001\u0002B\u0005\tA\u000e\u0006\u0003\u0002\n\re\u0001bBB\u000e\u001f\u0001\u0007!q^\u0001\u0002qR1\u0011\u0011BB\u0010\u0007CAqAa\u0007\u0011\u0001\u0004\t\u0019\u0007C\u0004\u0004$A\u0001\rAa<\u0002\u00135\fwM\\5uk\u0012,G\u0003CA\u0005\u0007O\u0019Yc!\f\t\u000f\r%\u0012\u00031\u0001\u0002d\u0005I!-\u001b;mK:<G\u000f\u001b\u0005\b\u0005\u000f\n\u0002\u0019AA2\u0011\u001d\u0019y#\u0005a\u0001\u0007c\t1A\u001d8e!\u0011\u0019\u0019d!\u000f\u000e\u0005\rU\"bAB\u001cK\u0006!Q\u000f^5m\u0013\u0011\u0019Yd!\u000e\u0003\rI\u000bg\u000eZ8n)\u0019\tIaa\u0010\u0004D!91\u0011\t\nA\u0002\u0005\r\u0014a\u00028v[\nLGo\u001d\u0005\b\u0007_\u0011\u0002\u0019AB\u0019)\u0011\tIaa\u0012\t\u000f\rm1\u00031\u0001\u0003PR1\u0011\u0011BB&\u0007\u001bBqaa\u0007\u0015\u0001\u0004\u0011y\rC\u0004\u0003jR\u0001\r!a\u0019\u0015\t\u0005%1\u0011\u000b\u0005\u0007\u00077)\u0002\u0019\u0001?\u0002\u001bA\u0014xNY1cY\u0016\u0004&/[7f)\u0019\tIaa\u0016\u0004Z!9!Q\b\fA\u0002\u0005\r\u0004bBB\u0018-\u0001\u00071\u0011G\u0001\u000bS:$(GY5h\u0013:$H\u0003BA\u0005\u0007?Bqa!\u0002\u0018\u0001\u0004\t\u0019\'A\u0006m_:<\'GY5h\u0013:$H\u0003BA\u0005\u0007KBqa!\u0006\u0019\u0001\u0004\t\t%A\u000bkCZ\f\')[4J]R,w-\u001a:3E&<\u0017J\u001c;\u0015\t\u0005%11\u000e\u0005\u0007\u00077I\u0002\u0019\u0001?\u0002\u000f1|gnZ$dIR1\u0011\u0011IB9\u0007kBqaa\u001d\u001b\u0001\u0004\t\t%A\u0001b\u0011\u001d\u00199H\u0007a\u0001\u0003\u0003\n\u0011AY\u0001\roJLG/\u001a*fa2\f7-\u001a\u000b\u0003\u0007{\u0002Baa \u0004\u00066\u00111\u0011\u0011\u0006\u0004\u0007\u0007#\u0018\u0001\u00027b]\u001eLAaa\"\u0004\u0002\n1qJ\u00196fGR\u0004"
    )
  ScalaInlineInfo: length = 0x1A3 (unknown attribute)
   01 01 00 53 01 5B 01 2B 01 01 67 01 2B 01 01 5F
   01 2B 01 01 3C 01 2B 01 01 44 01 45 01 00 65 00
   5C 01 00 6D 00 5C 01 01 55 00 36 01 00 5B 00 5C
   01 00 69 00 5C 01 01 53 00 36 01 01 34 01 2B 01
   01 40 01 2B 01 01 2A 01 2B 01 01 38 01 2B 01 01
   63 01 2B 01 01 49 00 B0 01 01 49 02 06 01 00 20
   00 AC 01 00 AF 00 B0 01 00 22 00 92 01 01 6C 01
   6D 01 00 BA 00 AC 01 01 C4 00 8C 01 00 3D 00 8C
   01 01 0D 00 B5 01 01 CC 00 80 01 01 D1 00 78 01
   01 B4 00 36 01 01 20 00 72 01 01 20 01 21 01 00
   71 00 72 01 00 E5 00 9E 01 00 D2 00 5C 01 00 D2
   00 D3 01 01 B7 00 36 01 00 F1 00 98 01 01 6B 01
   2B 01 00 C7 00 8C 01 01 CD 00 8C 01 01 C9 01 AE
   01 00 F6 00 B5 01 00 F8 00 B5 01 00 E2 00 B5 01
   00 EE 00 B5 01 00 FA 00 B5 01 00 C8 00 B5 01 00
   F7 00 B5 01 01 1E 00 B5 01 00 B4 00 B5 01 01 86
   00 92 01 01 0A 00 8C 01 01 8E 01 2B 01 01 8D 01
   2B 01 01 83 01 2B 01 01 99 01 2B 01 01 93 01 94
   01 01 8F 00 36 01 01 B1 00 36 01 01 D0 00 86 01
   01 A6 01 6D 01 00 53 00 8C 01 01 AD 01 AE 01 01
   ED 01 EE 01 01 F2 01 6D 01 00 7F 00 80 01 01 FD
   01 FE 01 00 77 00 78 01 00 9D 00 9E 01 00 97 00
   98 01 00 8B 00 8C 01 00 91 00 92 01 00 85 00 86
   01 01 F3 01 F4 01 01 F3 01 FA 01 01 9C 01 6D 01
   01 A7 01 6D 01 01 1F 02 03 01 01 1F 00 AC 01 00
   A7 00 5C 01 00 A3 00 8C 01 01 D7 01 D8 01 01 EC
   01 6D 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
