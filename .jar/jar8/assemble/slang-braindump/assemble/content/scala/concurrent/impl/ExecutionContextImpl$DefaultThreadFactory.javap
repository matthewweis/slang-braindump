Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.class
  Last modified May 29, 2022; size 3783 bytes
  SHA-256 checksum 3196eaa4423aff8e8ea83e8301e98580245ce163712127888f7badd7f706a549
  Compiled from "ExecutionContextImpl.scala"
public final class scala.concurrent.impl.ExecutionContextImpl$DefaultThreadFactory implements java.util.concurrent.ThreadFactory,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory
  super_class: #4                         // java/lang/Object
  interfaces: 2, fields: 5, methods: 11, attributes: 4
Constant pool:
    #1 = Utf8               scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory
    #2 = Class              #1            // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               java/util/concurrent/ThreadFactory
    #6 = Class              #5            // java/util/concurrent/ThreadFactory
    #7 = Utf8               java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory
    #8 = Class              #7            // java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory
    #9 = Utf8               ExecutionContextImpl.scala
   #10 = Utf8               java/lang/Thread$UncaughtExceptionHandler
   #11 = Class              #10           // java/lang/Thread$UncaughtExceptionHandler
   #12 = Utf8               java/lang/Thread
   #13 = Class              #12           // java/lang/Thread
   #14 = Utf8               UncaughtExceptionHandler
   #15 = Utf8               java/util/concurrent/ForkJoinPool
   #16 = Class              #15           // java/util/concurrent/ForkJoinPool
   #17 = Utf8               ForkJoinWorkerThreadFactory
   #18 = Utf8               scala/concurrent/impl/ExecutionContextImpl
   #19 = Class              #18           // scala/concurrent/impl/ExecutionContextImpl
   #20 = Utf8               DefaultThreadFactory
   #21 = Utf8               scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory$$anon$1
   #22 = Class              #21           // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory$$anon$1
   #23 = Utf8               daemonic
   #24 = Utf8               Z
   #25 = Utf8               maxBlockers
   #26 = Utf8               I
   #27 = Utf8               prefix
   #28 = Utf8               Ljava/lang/String;
   #29 = Utf8               uncaught
   #30 = Utf8               Ljava/lang/Thread$UncaughtExceptionHandler;
   #31 = Utf8               scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits
   #32 = Utf8               Ljava/util/concurrent/Semaphore;
   #33 = Utf8               ()Z
   #34 = NameAndType        #23:#24       // daemonic:Z
   #35 = Fieldref           #2.#34        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.daemonic:Z
   #36 = Utf8               this
   #37 = Utf8               Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;
   #38 = Utf8               ()I
   #39 = NameAndType        #25:#26       // maxBlockers:I
   #40 = Fieldref           #2.#39        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.maxBlockers:I
   #41 = Utf8               ()Ljava/lang/String;
   #42 = NameAndType        #27:#28       // prefix:Ljava/lang/String;
   #43 = Fieldref           #2.#42        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.prefix:Ljava/lang/String;
   #44 = Utf8               ()Ljava/lang/Thread$UncaughtExceptionHandler;
   #45 = NameAndType        #29:#30       // uncaught:Ljava/lang/Thread$UncaughtExceptionHandler;
   #46 = Fieldref           #2.#45        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.uncaught:Ljava/lang/Thread$UncaughtExceptionHandler;
   #47 = Utf8               ()Ljava/util/concurrent/Semaphore;
   #48 = NameAndType        #31:#32       // scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits:Ljava/util/concurrent/Semaphore;
   #49 = Fieldref           #2.#48        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits:Ljava/util/concurrent/Semaphore;
   #50 = Utf8               wire
   #51 = Utf8               (Ljava/lang/Thread;)Ljava/lang/Thread;
   #52 = Utf8               <T:Ljava/lang/Thread;>(TT;)TT;
   #53 = Utf8               thread
   #54 = NameAndType        #23:#33       // daemonic:()Z
   #55 = Methodref          #2.#54        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.daemonic:()Z
   #56 = Utf8               setDaemon
   #57 = Utf8               (Z)V
   #58 = NameAndType        #56:#57       // setDaemon:(Z)V
   #59 = Methodref          #13.#58       // java/lang/Thread.setDaemon:(Z)V
   #60 = NameAndType        #29:#44       // uncaught:()Ljava/lang/Thread$UncaughtExceptionHandler;
   #61 = Methodref          #2.#60        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.uncaught:()Ljava/lang/Thread$UncaughtExceptionHandler;
   #62 = Utf8               setUncaughtExceptionHandler
   #63 = Utf8               (Ljava/lang/Thread$UncaughtExceptionHandler;)V
   #64 = NameAndType        #62:#63       // setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
   #65 = Methodref          #13.#64       // java/lang/Thread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
   #66 = Utf8               java/lang/StringBuilder
   #67 = Class              #66           // java/lang/StringBuilder
   #68 = Integer            1
   #69 = Utf8               <init>
   #70 = Utf8               (I)V
   #71 = NameAndType        #69:#70       // "<init>":(I)V
   #72 = Methodref          #67.#71       // java/lang/StringBuilder."<init>":(I)V
   #73 = NameAndType        #27:#41       // prefix:()Ljava/lang/String;
   #74 = Methodref          #2.#73        // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.prefix:()Ljava/lang/String;
   #75 = Utf8               append
   #76 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
   #77 = NameAndType        #75:#76       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #78 = Methodref          #67.#77       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #79 = Utf8               -
   #80 = String             #79           // -
   #81 = Utf8               getId
   #82 = Utf8               ()J
   #83 = NameAndType        #81:#82       // getId:()J
   #84 = Methodref          #13.#83       // java/lang/Thread.getId:()J
   #85 = Utf8               (J)Ljava/lang/StringBuilder;
   #86 = NameAndType        #75:#85       // append:(J)Ljava/lang/StringBuilder;
   #87 = Methodref          #67.#86       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   #88 = Utf8               toString
   #89 = NameAndType        #88:#41       // toString:()Ljava/lang/String;
   #90 = Methodref          #67.#89       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #91 = Utf8               setName
   #92 = Utf8               (Ljava/lang/String;)V
   #93 = NameAndType        #91:#92       // setName:(Ljava/lang/String;)V
   #94 = Methodref          #13.#93       // java/lang/Thread.setName:(Ljava/lang/String;)V
   #95 = Utf8               Ljava/lang/Thread;
   #96 = Utf8               newThread
   #97 = Utf8               (Ljava/lang/Runnable;)Ljava/lang/Thread;
   #98 = Utf8               runnable
   #99 = Utf8               (Ljava/lang/Runnable;)V
  #100 = NameAndType        #69:#99       // "<init>":(Ljava/lang/Runnable;)V
  #101 = Methodref          #13.#100      // java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
  #102 = NameAndType        #50:#51       // wire:(Ljava/lang/Thread;)Ljava/lang/Thread;
  #103 = Methodref          #2.#102       // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory.wire:(Ljava/lang/Thread;)Ljava/lang/Thread;
  #104 = Utf8               Ljava/lang/Runnable;
  #105 = Utf8               (Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;
  #106 = Utf8               fjp
  #107 = Utf8               (Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;Ljava/util/concurrent/ForkJoinPool;)V
  #108 = NameAndType        #69:#107      // "<init>":(Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;Ljava/util/concurrent/ForkJoinPool;)V
  #109 = Methodref          #22.#108      // scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory$$anon$1."<init>":(Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;Ljava/util/concurrent/ForkJoinPool;)V
  #110 = Utf8               java/util/concurrent/ForkJoinWorkerThread
  #111 = Class              #110          // java/util/concurrent/ForkJoinWorkerThread
  #112 = Utf8               Ljava/util/concurrent/ForkJoinPool;
  #113 = Utf8               $anonfun$new$2
  #114 = Utf8               DefaultThreadFactory.prefix must be non null
  #115 = String             #114          // DefaultThreadFactory.prefix must be non null
  #116 = Utf8               $anonfun$new$3
  #117 = Utf8               DefaultThreadFactory.maxBlockers must be greater-or-equal-to 0
  #118 = String             #117          // DefaultThreadFactory.maxBlockers must be greater-or-equal-to 0
  #119 = Utf8               (ZILjava/lang/String;Ljava/lang/Thread$UncaughtExceptionHandler;)V
  #120 = Utf8               ()V
  #121 = NameAndType        #69:#120      // "<init>":()V
  #122 = Methodref          #4.#121       // java/lang/Object."<init>":()V
  #123 = Utf8               java/lang/IllegalArgumentException
  #124 = Class              #123          // java/lang/IllegalArgumentException
  #125 = Integer            20
  #126 = Utf8               requirement failed:
  #127 = String             #126          // requirement failed:
  #128 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #129 = NameAndType        #75:#128      // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #130 = Methodref          #67.#129      // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #131 = NameAndType        #69:#92       // "<init>":(Ljava/lang/String;)V
  #132 = Methodref          #124.#131     // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
  #133 = Utf8               java/util/concurrent/Semaphore
  #134 = Class              #133          // java/util/concurrent/Semaphore
  #135 = Methodref          #134.#71      // java/util/concurrent/Semaphore."<init>":(I)V
  #136 = Utf8               java/lang/String
  #137 = Class              #136          // java/lang/String
  #138 = Utf8               Code
  #139 = Utf8               LineNumberTable
  #140 = Utf8               LocalVariableTable
  #141 = Utf8               Signature
  #142 = Utf8               MethodParameters
  #143 = Utf8               StackMapTable
  #144 = Utf8               InnerClasses
  #145 = Utf8               SourceFile
  #146 = Utf8               ScalaInlineInfo
  #147 = Utf8               Scala
{
  private final boolean daemonic;
    descriptor: Z
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final int maxBlockers;
    descriptor: I
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.lang.String prefix;
    descriptor: Ljava/lang/String;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.lang.Thread$UncaughtExceptionHandler uncaught;
    descriptor: Ljava/lang/Thread$UncaughtExceptionHandler;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.util.concurrent.Semaphore scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits;
    descriptor: Ljava/util/concurrent/Semaphore;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public final boolean daemonic();
    descriptor: ()Z
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #35                 // Field daemonic:Z
         4: ireturn
      LineNumberTable:
        line 28: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;

  public final int maxBlockers();
    descriptor: ()I
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #40                 // Field maxBlockers:I
         4: ireturn
      LineNumberTable:
        line 29: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;

  public final java.lang.String prefix();
    descriptor: ()Ljava/lang/String;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #43                 // Field prefix:Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 30: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;

  public final java.lang.Thread$UncaughtExceptionHandler uncaught();
    descriptor: ()Ljava/lang/Thread$UncaughtExceptionHandler;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #46                 // Field uncaught:Ljava/lang/Thread$UncaughtExceptionHandler;
         4: areturn
      LineNumberTable:
        line 31: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;

  public final java.util.concurrent.Semaphore scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits();
    descriptor: ()Ljava/util/concurrent/Semaphore;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #49                 // Field scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits:Ljava/util/concurrent/Semaphore;
         4: areturn
      LineNumberTable:
        line 36: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;

  public <T extends java.lang.Thread> T wire(T);
    descriptor: (Ljava/lang/Thread;)Ljava/lang/Thread;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_1
         1: aload_0
         2: invokevirtual #55                 // Method daemonic:()Z
         5: invokevirtual #59                 // Method java/lang/Thread.setDaemon:(Z)V
         8: aload_1
         9: aload_0
        10: invokevirtual #61                 // Method uncaught:()Ljava/lang/Thread$UncaughtExceptionHandler;
        13: invokevirtual #65                 // Method java/lang/Thread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
        16: aload_1
        17: new           #67                 // class java/lang/StringBuilder
        20: dup
        21: ldc           #68                 // int 1
        23: invokespecial #72                 // Method java/lang/StringBuilder."<init>":(I)V
        26: aload_0
        27: invokevirtual #74                 // Method prefix:()Ljava/lang/String;
        30: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        33: ldc           #80                 // String -
        35: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        38: aload_1
        39: invokevirtual #84                 // Method java/lang/Thread.getId:()J
        42: invokevirtual #87                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
        45: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        48: invokevirtual #94                 // Method java/lang/Thread.setName:(Ljava/lang/String;)V
        51: aload_1
        52: areturn
      LineNumberTable:
        line 39: 0
        line 40: 8
        line 41: 16
        line 42: 51
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      53     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;
            0      53     1 thread   Ljava/lang/Thread;
    Signature: #52                          // <T:Ljava/lang/Thread;>(TT;)TT;
    MethodParameters:
      Name                           Flags
      thread                         final

  public java.lang.Thread newThread(java.lang.Runnable);
    descriptor: (Ljava/lang/Runnable;)Ljava/lang/Thread;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: new           #13                 // class java/lang/Thread
         4: dup
         5: aload_1
         6: invokespecial #101                // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
         9: invokevirtual #103                // Method wire:(Ljava/lang/Thread;)Ljava/lang/Thread;
        12: areturn
      LineNumberTable:
        line 45: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;
            0      13     1 runnable   Ljava/lang/Runnable;
    MethodParameters:
      Name                           Flags
      runnable                       final

  public java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool);
    descriptor: (Ljava/util/concurrent/ForkJoinPool;)Ljava/util/concurrent/ForkJoinWorkerThread;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: new           #22                 // class scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory$$anon$1
         4: dup
         5: aload_0
         6: aload_1
         7: invokespecial #109                // Method scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory$$anon$1."<init>":(Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;Ljava/util/concurrent/ForkJoinPool;)V
        10: invokevirtual #103                // Method wire:(Ljava/lang/Thread;)Ljava/lang/Thread;
        13: checkcast     #111                // class java/util/concurrent/ForkJoinWorkerThread
        16: areturn
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;
            0      17     1   fjp   Ljava/util/concurrent/ForkJoinPool;
    MethodParameters:
      Name                           Flags
      fjp                            final

  public static final java.lang.String $anonfun$new$2();
    descriptor: ()Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=0, args_size=0
         0: ldc           #115                // String DefaultThreadFactory.prefix must be non null
         2: areturn
      LineNumberTable:
        line 33: 0

  public static final java.lang.String $anonfun$new$3();
    descriptor: ()Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=0, args_size=0
         0: ldc           #118                // String DefaultThreadFactory.maxBlockers must be greater-or-equal-to 0
         2: areturn
      LineNumberTable:
        line 34: 0

  public scala.concurrent.impl.ExecutionContextImpl$DefaultThreadFactory(boolean, int, java.lang.String, java.lang.Thread$UncaughtExceptionHandler);
    descriptor: (ZILjava/lang/String;Ljava/lang/Thread$UncaughtExceptionHandler;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=5, args_size=5
         0: aload_0
         1: iload_1
         2: putfield      #35                 // Field daemonic:Z
         5: aload_0
         6: iload_2
         7: putfield      #40                 // Field maxBlockers:I
        10: aload_0
        11: aload_3
        12: putfield      #43                 // Field prefix:Ljava/lang/String;
        15: aload_0
        16: aload         4
        18: putfield      #46                 // Field uncaught:Ljava/lang/Thread$UncaughtExceptionHandler;
        21: aload_0
        22: invokespecial #122                // Method java/lang/Object."<init>":()V
        25: aload_3
        26: ifnull        33
        29: iconst_1
        30: goto          34
        33: iconst_0
        34: ifne          67
        37: new           #124                // class java/lang/IllegalArgumentException
        40: dup
        41: new           #67                 // class java/lang/StringBuilder
        44: dup
        45: ldc           #125                // int 20
        47: invokespecial #72                 // Method java/lang/StringBuilder."<init>":(I)V
        50: ldc           #127                // String requirement failed:
        52: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        55: ldc           #115                // String DefaultThreadFactory.prefix must be non null
        57: invokevirtual #130                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        60: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        63: invokespecial #132                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        66: athrow
        67: iload_2
        68: iconst_0
        69: if_icmplt     76
        72: iconst_1
        73: goto          77
        76: iconst_0
        77: ifne          110
        80: new           #124                // class java/lang/IllegalArgumentException
        83: dup
        84: new           #67                 // class java/lang/StringBuilder
        87: dup
        88: ldc           #125                // int 20
        90: invokespecial #72                 // Method java/lang/StringBuilder."<init>":(I)V
        93: ldc           #127                // String requirement failed:
        95: invokevirtual #78                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        98: ldc           #118                // String DefaultThreadFactory.maxBlockers must be greater-or-equal-to 0
       100: invokevirtual #130                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
       103: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       106: invokespecial #132                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
       109: athrow
       110: aload_0
       111: new           #134                // class java/util/concurrent/Semaphore
       114: dup
       115: iload_2
       116: invokespecial #135                // Method java/util/concurrent/Semaphore."<init>":(I)V
       119: putfield      #49                 // Field scala$concurrent$impl$ExecutionContextImpl$DefaultThreadFactory$$blockerPermits:Ljava/util/concurrent/Semaphore;
       122: return
      StackMapTable: number_of_entries = 6
        frame_type = 255 /* full_frame */
          offset_delta = 33
          locals = [ class scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory, int, int, class java/lang/String, class java/lang/Thread$UncaughtExceptionHandler ]
          stack = []
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 32 /* same */
        frame_type = 8 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 32 /* same */
      LineNumberTable:
        line 28: 0
        line 29: 5
        line 30: 10
        line 31: 15
        line 33: 25
        line 33: 55
        line 33: 57
        line 34: 67
        line 34: 98
        line 34: 100
        line 36: 110
        line 27: 122
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     123     0  this   Lscala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory;
            0     123     1 daemonic   Z
            0     123     2 maxBlockers   I
            0     123     3 prefix   Ljava/lang/String;
            0     123     4 uncaught   Ljava/lang/Thread$UncaughtExceptionHandler;
    MethodParameters:
      Name                           Flags
      daemonic                       final
      maxBlockers                    final
      prefix                         final
      uncaught                       final
}
InnerClasses:
  public static #14= #11 of #13;          // UncaughtExceptionHandler=class java/lang/Thread$UncaughtExceptionHandler of class java/lang/Thread
  public static #17= #8 of #16;           // ForkJoinWorkerThreadFactory=class java/util/concurrent/ForkJoinPool$ForkJoinWorkerThreadFactory of class java/util/concurrent/ForkJoinPool
  public static final #20= #2 of #19;     // DefaultThreadFactory=class scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory of class scala/concurrent/impl/ExecutionContextImpl
  public final #22;                       // class scala/concurrent/impl/ExecutionContextImpl$DefaultThreadFactory$$anon$1
SourceFile: "ExecutionContextImpl.scala"
  ScalaInlineInfo: length = 0x3B (unknown attribute)
   01 01 00 0B 00 71 00 29 01 00 74 00 29 01 00 45
   00 77 01 00 17 00 21 01 00 19 00 26 01 00 60 00
   61 01 00 60 00 69 01 00 1B 00 29 01 00 1F 00 2F
   01 00 1D 00 2C 01 00 32 00 33 01
  Scala: length = 0x0 (unknown attribute)

