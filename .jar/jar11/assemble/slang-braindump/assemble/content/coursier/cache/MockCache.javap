Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/coursier/cache/MockCache.class
  Last modified May 29, 2022; size 28338 bytes
  SHA-256 checksum 693da59497f044d91e3639e428543ba7680a5a70be3c0aa8d1b2563869cc4a2e
  Compiled from "MockCache.scala"
public final class coursier.cache.MockCache<F extends java.lang.Object> extends coursier.cache.Cache<F> implements scala.Product, java.io.Serializable
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // coursier/cache/MockCache
  super_class: #5                         // coursier/cache/Cache
  interfaces: 2, fields: 9, methods: 58, attributes: 7
Constant pool:
    #1 = Utf8               coursier/cache/MockCache
    #2 = Class              #1            // coursier/cache/MockCache
    #3 = Utf8               <F:Ljava/lang/Object;>Lcoursier/cache/Cache<TF;>;Lscala/Product;Ljava/io/Serializable;
    #4 = Utf8               coursier/cache/Cache
    #5 = Class              #4            // coursier/cache/Cache
    #6 = Utf8               scala/Product
    #7 = Class              #6            // scala/Product
    #8 = Utf8               java/io/Serializable
    #9 = Class              #8            // java/io/Serializable
   #10 = Utf8               MockCache.scala
   #11 = Utf8               Lscala/reflect/ScalaSignature;
   #12 = Utf8               bytes
   #13 = Utf8               \u0006\u0005\rMb\u0001\u0002\u001a4\u0005aB\u0001B\u0018\u0001\u0003\u0006\u0004%\ta\u0018\u0005\tU\u0002\u0011\t\u0011)A\u0005A\"A1\u000e\u0001BC\u0002\u0013\u0005A\u000e\u0003\u0005q\u0001\t\u0005\t\u0015!\u0003n\u0011!\t\bA!b\u0001\n\u0003\u0011\b\u0002\u0003<\u0001\u0005\u0003\u0005\u000b\u0011B:\t\u0011]\u0004!Q1A\u0005\u0002aD\u0011\"a\u0001\u0001\u0005\u0003\u0005\u000b\u0011B=\t\u0015\u0005\u0015\u0001A!b\u0001\n\u0003\t9\u0001\u0003\u0006\u0002\u0014\u0001\u0011\t\u0011)A\u0005\u0003\u0013A!\"!\u0006\u0001\u0005\u000b\u0007I\u0011AA\f\u0011)\t)\u0003\u0001B\u0001B\u0003%\u0011\u0011\u0004\u0005\u000b\u0003O\u0001!Q1A\u0005\u0002\u0005%\u0002BCA\u001f\u0001\t\u0005\t\u0015!\u0003\u0002,!9\u0011q\b\u0001\u0005\u0002\u0005\u0005\u0003bBA \u0001\u0011\u0005\u00111\u000b\u0005\b\u0003\u007f\u0001A\u0011AA1\u0011\u001d\ti\u0007\u0001C\u0006\u0003\u000fAq!a\u001c\u0001\t\u0003\t\t\b\u0003\u0004d\u0001\u0011\u0005\u0011\u0011\u0011\u0005\u000b\u0003?\u0003\u0001R1A\u0005\u0002\u0005\u0005\u0006bBAW\u0001\u0011\u0005\u0011q\u0016\u0005\b\u0003g\u0003A\u0011AA[\u0011\u001d\tI\f\u0001C\u0001\u0003wCq!a0\u0001\t\u0003\t\t\rC\u0004\u0002F\u0002!\t!a2\t\u000f\u0005-\u0007\u0001\"\u0001\u0002N\"9\u0011\u0011\u001b\u0001\u0005\u0002\u0005M\u0007bBAl\u0001\u0011\u0005\u0013\u0011\u001c\u0005\b\u0003O\u0004A\u0011IAu\u0011\u001d\ty\u000f\u0001C!\u0003cDq!!>\u0001\t\u0003\n9\u0010C\u0004\u0002\u0000\u0002!IA!\u0001\t\u000f\t%\u0001\u0001\"\u0011\u0003\f!9!Q\u0002\u0001\u0005B\t=\u0001b\u0002B\t\u0001\u0011\u0005#1\u0003\u0005\b\u00053\u0001A\u0011\tB\u000e\u000f\u001d\u0011yb\rE\u0001\u0005C1aAM\u001a\t\u0002\t\r\u0002bBA O\u0011\u0005!q\u0006\u0005\b\u0005c9C\u0011\u0001B\u001a\u0011%\u0011\tfJI\u0001\n\u0003\u0011\u0019\u0006C\u0005\u0003r\u001d\n\n\u0011\"\u0001\u0003t!9!qP\u0014\u0005\n\t\u0005\u0005b\u0002BMO\u0011%!1\u0014\u0005\b\u0005\'<C\u0011\u0001Bk\u0011\u001d\u0011\u0019n\nC\u0001\u0005_DqAa5(\t\u0003\u0019Y\u0001C\u0005\u0004*\u001d\n\t\u0011\"\u0003\u0004,\tIQj\\2l\u0007\u0006\u001c\u0007.\u001a\u0006\u0003iU\nQaY1dQ\u0016T\u0011AN\u0001\tG>,(o]5fe\u000e\u0001QCA\u001dA\'\u0011\u0001!h\u0014*\u0011\u0007mbd(D\u00014\u0013\ti4GA\u0003DC\u000eDW\r\u0005\u0002@\u00012\u0001A!B!\u0001\u0005\u0004\u0011%!\u0001$\u0016\u0005\rk\u0015C\u0001#K!\t)\u0005*D\u0001G\u0015\u00059\u0015!B:dC2\f\u0017BA%G\u0005\u001dqu\u000e\u001e5j]\u001e\u0004\"!R&\n\u000513%aA!os\u0012)a\n\u0011b\u0001\u0007\n\tq\f\u0005\u0002F!&\u0011\u0011K\u0012\u0002\b!J|G-^2u!\t\u00196L\u0004\u0002U3:\u0011Q\u000bW\u0007\u0002-*\u0011qkN\u0001\u0007yI|w\u000e\u001e \n\u0003\u001dK!A\u0017$\u0002\u000fA\f7m[1hK&\u0011A,\u0018\u0002\r\'\u0016\u0014\u0018.\u00197ju\u0006\u0014G.\u001a\u0006\u00035\u001a\u000bAAY1tKV\t\u0001\r\u0005\u0002bQ6\t!M\u0003\u0002dI\u0006!a-\u001b7f\u0015\t)g-A\u0002oS>T\u0011aZ\u0001\u0005U\u00064\u0018-\u0003\u0002jE\n!\u0001+\u0019;i\u0003\u0015\u0011\u0017m]3!\u0003%)\u0007\u0010\u001e:b\t\u0006$\u0018-F\u0001n!\r\u0019f\u000eY\u0005\u0003_v\u00131aU3r\u0003))\u0007\u0010\u001e:b\t\u0006$\u0018\rI\u0001\roJLG/Z\'jgNLgnZ\u000b\u0002gB\u0011Q\t^\u0005\u0003k\u001a\u0013qAQ8pY\u0016\fg.A\u0007xe&$X-T5tg&tw\rI\u0001\u0005a>|G.F\u0001z!\tQx0D\u0001|\u0015\taX0\u0001\u0006d_:\u001cWO\u001d:f]RT!A 4\u0002\tU$\u0018\u000e\\\u0005\u0004\u0003\u0003Y(aD#yK\u000e,Ho\u001c:TKJ4\u0018nY3\u0002\u000bA|w\u000e\u001c\u0011\u0002\u0003M+\"!!\u0003\u0011\u000b\u0005-\u0011q\u0002 \u000e\u0005\u00055!B\u0001@6\u0013\u0011\t\t\"!\u0004\u0003\tMKhnY\u0001\u0003\'\u0002\nQ\u0002Z;n[f\f%\u000f^5gC\u000e$XCAA\r!\u0019)\u00151DA\u0010g&\u0019\u0011Q\u0004$\u0003\u0013\u0019+hn\u0019;j_:\f\u0004\u0003BA\u0006\u0003CIA!a\t\u0002\u000e\tA\u0011I\u001d;jM\u0006\u001cG/\u0001\bek6l\u00170\u0011:uS\u001a\f7\r\u001e\u0011\u0002\u000bA\u0014x\u000e_=\u0016\u0005\u0005-\u0002#B#\u0002.\u0005E\u0012bAA\u0018\r\n1q\n\u001d;j_:\u0004B!a\r\u0002:5\u0011\u0011Q\u0007\u0006\u0004\u0003o1\u0017a\u00018fi&!\u00111HA\u001b\u0005\u0015\u0001&o\u001c=z\u0003\u0019\u0001(o\u001c=zA\u00051A(\u001b8jiz\"\u0002#a\u0011\u0002F\u0005\u001d\u0013\u0011JA&\u0003\u001b\ny%!\u0015\u0011\u0007m\u0002a\bC\u0003_\u001f\u0001\u0007\u0001\rC\u0003l\u001f\u0001\u0007Q\u000eC\u0003r\u001f\u0001\u00071\u000fC\u0003x\u001f\u0001\u0007\u0011\u0010C\u0004\u0002\u0006=\u0001\r!!\u0003\t\u000f\u0005Uq\u00021\u0001\u0002\u001a!9\u0011qE\bA\u0002\u0005-BCDA\"\u0003+\n9&!\u0017\u0002\\\u0005u\u0013q\f\u0005\u0006=B\u0001\r\u0001\u0019\u0005\u0006WB\u0001\r!\u001c\u0005\u0006cB\u0001\ra\u001d\u0005\u0006oB\u0001\r!\u001f\u0005\b\u0003\u000b\u0001\u0002\u0019AA\u0005\u0011\u001d\t)\u0002\u0005a\u0001\u00033!B\"a\u0011\u0002d\u0005\u0015\u0014qMA5\u0003WBQAX\tA\u0002\u0001DQa[\tA\u00025DQ!]\tA\u0002MDQa^\tA\u0002eDq!!\u0002\u0012\u0001\u0004\tI!\u0001\u0002Ta\u0005)a-\u001a;dQV\u0011\u00111\u000f\t\u0006\u0003k\nYH\u0010\b\u0004w\u0005]\u0014bAA=g\u0005)1)Y2iK&!\u0011QPA@\u0005\u00151U\r^2i\u0015\r\tIh\r\u000b\u0005\u0003\u0007\u000bY\nE\u0005\u0002\f\u0005\u0015e(!#\u0002\u0010&!\u0011qQA\u0007\u0005\u001d)\u0015\u000e\u001e5feR\u00032aOAF\u0013\r\tii\r\u0002\u000e\u0003J$\u0018NZ1di\u0016\u0013(o\u001c:\u0011\t\u0005E\u0015qS\u0007\u0003\u0003\'S1!!&g\u0003\tIw.\u0003\u0003\u0002\u001a\u0006M%\u0001\u0002$jY\u0016Dq!!(\u0015\u0001\u0004\ty\"\u0001\u0005beRLg-Y2u\u0003\t)7-\u0006\u0002\u0002$B!\u0011QUAU\u001b\t\t9K\u0003\u0002}\r&!\u00111VAT\u0005})\u00050Z2vi&|gnQ8oi\u0016DH/\u0012=fGV$xN]*feZL7-Z\u0001\to&$\bNQ1tKR!\u00111IAY\u0011\u0015qf\u00031\u0001a\u000359\u0018\u000e\u001e5FqR\u0014\u0018\rR1uCR!\u00111IA\\\u0011\u0015Yw\u00031\u0001n\u0003A9\u0018\u000e\u001e5Xe&$X-T5tg&tw\r\u0006\u0003\u0002D\u0005u\u0006\"B9\u0019\u0001\u0004\u0019\u0018\u0001C<ji\"\u0004vn\u001c7\u0015\t\u0005\r\u00131\u0019\u0005\u0006of\u0001\r!_\u0001\u0006o&$\bn\u0015\u000b\u0005\u0003\u0007\nI\rC\u0004\u0002\u0006i\u0001\r!!\u0003\u0002#]LG\u000f\u001b#v[6L\u0018I\u001d;jM\u0006\u001cG\u000f\u0006\u0003\u0002D\u0005=\u0007bBA\u000b7\u0001\u0007\u0011\u0011D\u0001\no&$\b\u000e\u0015:pqf$B!a\u0011\u0002V\"9\u0011q\u0005\u000fA\u0002\u0005-\u0012\u0001\u0003;p\'R\u0014\u0018N\\4\u0015\u0005\u0005m\u0007\u0003BAo\u0003Gl!!a8\u000b\u0007\u0005\u0005h-\u0001\u0003mC:<\u0017\u0002BAs\u0003?\u0014aa\u0015;sS:<\u0017\u0001C2b]\u0016\u000bX/\u00197\u0015\u0007M\fY\u000f\u0003\u0004\u0002nz\u0001\rAS\u0001\u0004_\nT\u0017AB3rk\u0006d7\u000fF\u0002t\u0003gDa!!< \u0001\u0004Q\u0015\u0001\u00035bg\"\u001cu\u000eZ3\u0015\u0005\u0005e\bcA#\u0002|&\u0019\u0011Q $\u0003\u0007%sG/A\u0003ukBdW-\u0006\u0002\u0003\u0004AiQI!\u0002a[NL\u0018\u0011BA\r\u0003WI1Aa\u0002G\u0005\u0019!V\u000f\u001d7fo\u0005i\u0001O]8ek\u000e$\bK]3gSb,\"!a7\u0002\u0019A\u0014x\u000eZ;di\u0006\u0013\u0018\u000e^=\u0016\u0005\u0005e\u0018A\u00049s_\u0012,8\r^#mK6,g\u000e\u001e\u000b\u0004\u0015\nU\u0001b\u0002B\fI\u0001\u0007\u0011\u0011`\u0001\u0002]\u0006\u0011\u0002O]8ek\u000e$X\t\\3nK:$h*Y7f)\u0011\tYN!\b\t\u000f\t]Q\u00051\u0001\u0002z\u0006IQj\\2l\u0007\u0006\u001c\u0007.\u001a\t\u0003w\u001d\u001aRa\nB\u0013\u0005W\u00012!\u0012B\u0014\u0013\r\u0011IC\u0012\u0002\u0007\u0003:L(+\u001a4\u0011\t\u0005E%QF\u0005\u00049\u0006MEC\u0001B\u0011\u0003\u0019\u0019\'/Z1uKV!!Q\u0007B\u001f))\u00119D!\u0013\u0003L\t5#q\n\u000b\u0005\u0005s\u0011\u0019\u0005\u0005\u0003<\u0001\tm\u0002cA \u0003>\u00111\u0011)\u000bb\u0001\u0005\u007f)2a\u0011B!\t\u0019q%Q\bb\u0001\u0007\"I!QI\u0015\u0002\u0002\u0003\u000f!qI\u0001\u000bKZLG-\u001a8dK\u0012\n\u0004CBA\u0006\u0003\u001f\u0011Y\u0004C\u0003_S\u0001\u0007\u0001\rC\u0003xS\u0001\u0007\u0011\u0010C\u0004lSA\u0005\t\u0019A7\t\u000fEL\u0003\u0013!a\u0001g\u0006\u00012M]3bi\u0016$C-\u001a4bk2$HeM\u000b\u0005\u0005+\u0012Y\'\u0006\u0002\u0003X)\u001aQN!\u0017,\u0005\tm\u0003\u0003\u0002B/\u0005Oj!Aa\u0018\u000b\t\t\u0005$1M\u0001\nk:\u001c\u0007.Z2lK\u0012T1A!\u001aG\u0003)\tgN\\8uCRLwN\\\u0005\u0005\u0005S\u0012yFA\tv]\u000eDWmY6fIZ\u000b\'/[1oG\u0016$a!\u0011\u0016C\u0002\t5TcA\"\u0003p\u00111aJa\u001bC\u0002\r\u000b\u0001c\u0019:fCR,G\u0005Z3gCVdG\u000f\n\u001b\u0016\t\tU$\u0011P\u000b\u0003\u0005oR3a\u001dB-\t\u0019\t5F1\u0001\u0003|U\u00191I! \u0005\r9\u0013IH1\u0001D\u00035\u0011X-\u00193Gk2d\u0017pU=oGR!!1\u0011BH!\u0015)%Q\u0011BE\u0013\r\u00119I\u0012\u0002\u0006\u0003J\u0014\u0018-\u001f\t\u0004\u000b\n-\u0015b\u0001BG\r\n!!)\u001f;f\u0011\u001d\u0011\t\n\fa\u0001\u0005\'\u000b!![:\u0011\t\u0005E%QS\u0005\u0005\u0005/\u000b\u0019JA\u0006J]B,Ho\u0015;sK\u0006l\u0017!\u0003:fC\u00124U\u000f\u001c7z+\u0011\u0011iJa)\u0015\r\t}%Q\u0019Bg)\u0011\u0011\tK!0\u0011\u000b}\u0012\u0019K!+\u0005\r\u0005k#\u0019\u0001BS+\r\u0019%q\u0015\u0003\u0007\u001d\n\r&\u0019A\"\u0011\u000fM\u0013YKa,\u00030&\u0019!QV/\u0003\r\u0015KG\u000f[3s!\u0011\u0011\tL!/\u000f\t\tM&Q\u0017\t\u0003+\u001aK1Aa.G\u0003\u0019\u0001&/\u001a3fM&!\u0011Q\u001dB^\u0015\r\u00119L\u0012\u0005\n\u0005\u007fk\u0013\u0011!a\u0002\u0005\u0003\f!\"\u001a<jI\u0016t7-\u001a\u00133!\u0019\tY!a\u0004\u0003DB\u0019qHa)\t\u0011\tEU\u0006\"a\u0001\u0005\u000f\u0004R!\u0012Be\u0005\'K1Aa3G\u0005!a$-\u001f8b[\u0016t\u0004b\u0002Bh[\u0001\u0007!\u0011[\u0001\u000ea\u0006\u00148/\u001a\'j].\u001cXK\u001d7\u0011\u000b\u0015\u000biCa,\u0002\u000b\u0005\u0004\b\u000f\\=\u0016\t\t]\'Q\u001c\u000b\r\u00053\u0014\u0019O!:\u0003h\n%(1\u001e\t\u0005w\u0001\u0011Y\u000eE\u0002@\u0005;$a!\u0011\u0018C\u0002\t}WcA\"\u0003b\u00121aJ!8C\u0002\rCQA\u0018\u0018A\u0002\u0001DQa\u001b\u0018A\u00025DQ!\u001d\u0018A\u0002MDQa\u001e\u0018A\u0002eDq!!\u0002/\u0001\u0004\u0011i\u000f\u0005\u0004\u0002\f\u0005=!1\\\u000b\u0005\u0005c\u00149\u0010\u0006\b\u0003t\nu(q`B\u0001\u0007\u0007\u0019)a!\u0003\u0011\tm\u0002!Q\u001f\t\u0004\u007f\t]HAB!0\u0005\u0004\u0011I0F\u0002D\u0005w$aA\u0014B|\u0005\u0004\u0019\u0005\"\u000200\u0001\u0004\u0001\u0007\"B60\u0001\u0004i\u0007\"B90\u0001\u0004\u0019\b\"B<0\u0001\u0004I\bbBA\u0003_\u0001\u00071q\u0001\t\u0007\u0003\u0017\tyA!>\t\u000f\u0005Uq\u00061\u0001\u0002\u001aU!1QBB\n)A\u0019ya!\u0007\u0004\u001c\ru1qDB\u0011\u0007K\u00199\u0003\u0005\u0003<\u0001\rE\u0001cA \u0004\u0014\u00111\u0011\t\rb\u0001\u0007+)2aQB\f\t\u0019q51\u0003b\u0001\u0007\")a\f\ra\u0001A\")1\u000e\ra\u0001[\")\u0011\u000f\ra\u0001g\")q\u000f\ra\u0001s\"9\u0011Q\u0001\u0019A\u0002\r\r\u0002CBA\u0006\u0003\u001f\u0019\t\u0002C\u0004\u0002\u0016A\u0002\r!!\u0007\t\u000f\u0005\u001d\u0002\u00071\u0001\u0002,\u0005aqO]5uKJ+\u0007\u000f\\1dKR\u00111Q\u0006\t\u0005\u0003;\u001cy#\u0003\u0003\u00042\u0005}\'AB(cU\u0016\u001cG\u000f
   #14 = Utf8               coursier/cache/ArtifactError$NotFound
   #15 = Class              #14           // coursier/cache/ArtifactError$NotFound
   #16 = Utf8               coursier/cache/ArtifactError
   #17 = Class              #16           // coursier/cache/ArtifactError
   #18 = Utf8               NotFound
   #19 = Utf8               coursier/cache/ArtifactError$NotFound$
   #20 = Class              #19           // coursier/cache/ArtifactError$NotFound$
   #21 = Utf8
   #22 = Utf8               coursier/cache/MockCache$$anonfun$$lessinit$greater$1
   #23 = Class              #22           // coursier/cache/MockCache$$anonfun$$lessinit$greater$1
   #24 = Utf8               coursier/cache/MockCache$$anonfun$1
   #25 = Class              #24           // coursier/cache/MockCache$$anonfun$1
   #26 = Utf8               coursier/util/Monad$AllOps
   #27 = Class              #26           // coursier/util/Monad$AllOps
   #28 = Utf8               coursier/util/Monad
   #29 = Class              #28           // coursier/util/Monad
   #30 = Utf8               AllOps
   #31 = Utf8               coursier/util/Monad$ops$
   #32 = Class              #31           // coursier/util/Monad$ops$
   #33 = Utf8               java/lang/invoke/MethodHandles$Lookup
   #34 = Class              #33           // java/lang/invoke/MethodHandles$Lookup
   #35 = Utf8               java/lang/invoke/MethodHandles
   #36 = Class              #35           // java/lang/invoke/MethodHandles
   #37 = Utf8               Lookup
   #38 = Utf8               ec
   #39 = Utf8               Lscala/concurrent/ExecutionContextExecutorService;
   #40 = Utf8               base
   #41 = Utf8               Ljava/nio/file/Path;
   #42 = Utf8               extraData
   #43 = Utf8               Lscala/collection/immutable/Seq;
   #44 = Utf8               Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;
   #45 = Utf8               writeMissing
   #46 = Utf8               Z
   #47 = Utf8               pool
   #48 = Utf8               Ljava/util/concurrent/ExecutorService;
   #49 = Utf8               S
   #50 = Utf8               Lcoursier/util/Sync;
   #51 = Utf8               Lcoursier/util/Sync<TF;>;
   #52 = Utf8               dummyArtifact
   #53 = Utf8               Lscala/Function1;
   #54 = Utf8               Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;
   #55 = Utf8               proxy
   #56 = Utf8               Lscala/Option;
   #57 = Utf8               Lscala/Option<Ljava/net/Proxy;>;
   #58 = Utf8               bitmap$0
   #59 = Utf8               apply
   #60 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
   #61 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;)Lcoursier/cache/MockCache<TF;>;
   #62 = Utf8               coursier/cache/MockCache$
   #63 = Class              #62           // coursier/cache/MockCache$
   #64 = Utf8               MODULE$
   #65 = Utf8               Lcoursier/cache/MockCache$;
   #66 = NameAndType        #64:#65       // MODULE$:Lcoursier/cache/MockCache$;
   #67 = Fieldref           #63.#66       // coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
   #68 = NameAndType        #59:#60       // apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
   #69 = Methodref          #63.#68       // coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
   #70 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
   #71 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)Lcoursier/cache/MockCache<TF;>;
   #72 = NameAndType        #59:#70       // apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
   #73 = Methodref          #63.#72       // coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
   #74 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #75 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
   #76 = NameAndType        #59:#74       // apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #77 = Methodref          #63.#76       // coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #78 = Utf8               create$default$4
   #79 = Utf8               ()Z
   #80 = Utf8               <F:Ljava/lang/Object;>()Z
   #81 = NameAndType        #78:#79       // create$default$4:()Z
   #82 = Methodref          #63.#81       // coursier/cache/MockCache$.create$default$4:()Z
   #83 = Utf8               create$default$3
   #84 = Utf8               ()Lscala/collection/immutable/Seq;
   #85 = Utf8               <F:Ljava/lang/Object;>()Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;
   #86 = NameAndType        #83:#84       // create$default$3:()Lscala/collection/immutable/Seq;
   #87 = Methodref          #63.#86       // coursier/cache/MockCache$.create$default$3:()Lscala/collection/immutable/Seq;
   #88 = Utf8               create
   #89 = Utf8               (Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #90 = Utf8               <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
   #91 = Utf8               evidence$1
   #92 = NameAndType        #88:#89       // create:(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #93 = Methodref          #63.#92       // coursier/cache/MockCache$.create:(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
   #94 = Utf8               productIterator
   #95 = Utf8               ()Lscala/collection/Iterator;
   #96 = Utf8               ()Lscala/collection/Iterator<Ljava/lang/Object;>;
   #97 = Utf8               productIterator$
   #98 = Utf8               (Lscala/Product;)Lscala/collection/Iterator;
   #99 = NameAndType        #97:#98       // productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
  #100 = InterfaceMethodref #7.#99        // scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
  #101 = Utf8               this
  #102 = Utf8               Lcoursier/cache/MockCache;
  #103 = Utf8               productElementNames
  #104 = Utf8               ()Lscala/collection/Iterator<Ljava/lang/String;>;
  #105 = Utf8               productElementNames$
  #106 = NameAndType        #105:#98      // productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
  #107 = InterfaceMethodref #7.#106       // scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
  #108 = Utf8               ()Ljava/nio/file/Path;
  #109 = NameAndType        #40:#41       // base:Ljava/nio/file/Path;
  #110 = Fieldref           #2.#109       // coursier/cache/MockCache.base:Ljava/nio/file/Path;
  #111 = Utf8               ()Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;
  #112 = NameAndType        #42:#43       // extraData:Lscala/collection/immutable/Seq;
  #113 = Fieldref           #2.#112       // coursier/cache/MockCache.extraData:Lscala/collection/immutable/Seq;
  #114 = NameAndType        #45:#46       // writeMissing:Z
  #115 = Fieldref           #2.#114       // coursier/cache/MockCache.writeMissing:Z
  #116 = Utf8               ()Ljava/util/concurrent/ExecutorService;
  #117 = NameAndType        #47:#48       // pool:Ljava/util/concurrent/ExecutorService;
  #118 = Fieldref           #2.#117       // coursier/cache/MockCache.pool:Ljava/util/concurrent/ExecutorService;
  #119 = Utf8               ()Lcoursier/util/Sync;
  #120 = Utf8               ()Lcoursier/util/Sync<TF;>;
  #121 = NameAndType        #49:#50       // S:Lcoursier/util/Sync;
  #122 = Fieldref           #2.#121       // coursier/cache/MockCache.S:Lcoursier/util/Sync;
  #123 = Utf8               ()Lscala/Function1;
  #124 = Utf8               ()Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;
  #125 = NameAndType        #52:#53       // dummyArtifact:Lscala/Function1;
  #126 = Fieldref           #2.#125       // coursier/cache/MockCache.dummyArtifact:Lscala/Function1;
  #127 = Utf8               ()Lscala/Option;
  #128 = Utf8               ()Lscala/Option<Ljava/net/Proxy;>;
  #129 = NameAndType        #55:#56       // proxy:Lscala/Option;
  #130 = Fieldref           #2.#129       // coursier/cache/MockCache.proxy:Lscala/Option;
  #131 = Utf8               S0
  #132 = NameAndType        #49:#119      // S:()Lcoursier/util/Sync;
  #133 = Methodref          #2.#132       // coursier/cache/MockCache.S:()Lcoursier/util/Sync;
  #134 = Utf8               fetch
  #135 = Utf8               ()Lscala/Function1<Lcoursier/util/Artifact;Lcoursier/util/EitherT<TF;Ljava/lang/String;Ljava/lang/String;>;>;
  #136 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #137 = MethodType         #136          //  (Ljava/lang/Object;)Ljava/lang/Object;
  #138 = Utf8               $anonfun$fetch$1
  #139 = Utf8               (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #140 = NameAndType        #138:#139     // $anonfun$fetch$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #141 = Methodref          #2.#140       // coursier/cache/MockCache.$anonfun$fetch$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #142 = MethodHandle       6:#141        // REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #143 = Utf8               (Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #144 = MethodType         #143          //  (Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #145 = Integer            5
  #146 = Integer            1
  #147 = Utf8               java/lang/invoke/LambdaMetafactory
  #148 = Class              #147          // java/lang/invoke/LambdaMetafactory
  #149 = Utf8               altMetafactory
  #150 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #151 = NameAndType        #149:#150     // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #152 = Methodref          #148.#151     // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #153 = MethodHandle       6:#152        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #154 = Utf8               (Lcoursier/cache/MockCache;)Lscala/Function1;
  #155 = NameAndType        #59:#154      // apply:(Lcoursier/cache/MockCache;)Lscala/Function1;
  #156 = InvokeDynamic      #0:#155       // #0:apply:(Lcoursier/cache/MockCache;)Lscala/Function1;
  #157 = Utf8               file
  #158 = Utf8               (Lcoursier/util/Artifact;)Lcoursier/util/EitherT<TF;Lcoursier/cache/ArtifactError;Ljava/io/File;>;
  #159 = Utf8               artifact
  #160 = Utf8               coursier/util/Artifact
  #161 = Class              #160          // coursier/util/Artifact
  #162 = Utf8               url
  #163 = Utf8               ()Ljava/lang/String;
  #164 = NameAndType        #162:#163     // url:()Ljava/lang/String;
  #165 = Methodref          #161.#164     // coursier/util/Artifact.url:()Ljava/lang/String;
  #166 = Utf8               file:
  #167 = String             #166          // file:
  #168 = Utf8               java/lang/String
  #169 = Class              #168          // java/lang/String
  #170 = Utf8               startsWith
  #171 = Utf8               (Ljava/lang/String;)Z
  #172 = NameAndType        #170:#171     // startsWith:(Ljava/lang/String;)Z
  #173 = Methodref          #169.#172     // java/lang/String.startsWith:(Ljava/lang/String;)Z
  #174 = Utf8               /
  #175 = String             #174          // /
  #176 = Utf8               endsWith
  #177 = NameAndType        #176:#171     // endsWith:(Ljava/lang/String;)Z
  #178 = Methodref          #169.#177     // java/lang/String.endsWith:(Ljava/lang/String;)Z
  #179 = Utf8               java/lang/StringBuilder
  #180 = Class              #179          // java/lang/StringBuilder
  #181 = Integer            10
  #182 = Utf8               <init>
  #183 = Utf8               (I)V
  #184 = NameAndType        #182:#183     // "<init>":(I)V
  #185 = Methodref          #180.#184     // java/lang/StringBuilder."<init>":(I)V
  #186 = Utf8               append
  #187 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #188 = NameAndType        #186:#187     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #189 = Methodref          #180.#188     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #190 = Utf8               .directory
  #191 = String             #190          // .directory
  #192 = Utf8               toString
  #193 = NameAndType        #192:#163     // toString:()Ljava/lang/String;
  #194 = Methodref          #180.#193     // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #195 = Utf8               java/io/File
  #196 = Class              #195          // java/io/File
  #197 = Utf8               java/net/URI
  #198 = Class              #197          // java/net/URI
  #199 = Utf8               (Ljava/lang/String;)V
  #200 = NameAndType        #182:#199     // "<init>":(Ljava/lang/String;)V
  #201 = Methodref          #198.#200     // java/net/URI."<init>":(Ljava/lang/String;)V
  #202 = Utf8               (Ljava/net/URI;)V
  #203 = NameAndType        #182:#202     // "<init>":(Ljava/net/URI;)V
  #204 = Methodref          #196.#203     // java/io/File."<init>":(Ljava/net/URI;)V
  #205 = Utf8               coursier/util/EitherT$
  #206 = Class              #205          // coursier/util/EitherT$
  #207 = Utf8               Lcoursier/util/EitherT$;
  #208 = NameAndType        #64:#207      // MODULE$:Lcoursier/util/EitherT$;
  #209 = Fieldref           #206.#208     // coursier/util/EitherT$.MODULE$:Lcoursier/util/EitherT$;
  #210 = NameAndType        #131:#119     // S0:()Lcoursier/util/Sync;
  #211 = Methodref          #2.#210       // coursier/cache/MockCache.S0:()Lcoursier/util/Sync;
  #212 = Utf8               point
  #213 = Utf8               (Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #214 = NameAndType        #212:#213     // point:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #215 = Methodref          #206.#214     // coursier/util/EitherT$.point:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #216 = Utf8               scala/Predef$
  #217 = Class              #216          // scala/Predef$
  #218 = Utf8               Lscala/Predef$;
  #219 = NameAndType        #64:#218      // MODULE$:Lscala/Predef$;
  #220 = Fieldref           #217.#219     // scala/Predef$.MODULE$:Lscala/Predef$;
  #221 = Utf8               authentication
  #222 = NameAndType        #221:#127     // authentication:()Lscala/Option;
  #223 = Methodref          #161.#222     // coursier/util/Artifact.authentication:()Lscala/Option;
  #224 = Utf8               scala/Option
  #225 = Class              #224          // scala/Option
  #226 = Utf8               isEmpty
  #227 = NameAndType        #226:#79      // isEmpty:()Z
  #228 = Methodref          #225.#227     // scala/Option.isEmpty:()Z
  #229 = Utf8               assert
  #230 = Utf8               (Z)V
  #231 = NameAndType        #229:#230     // assert:(Z)V
  #232 = Methodref          #217.#231     // scala/Predef$.assert:(Z)V
  #233 = NameAndType        #40:#108      // base:()Ljava/nio/file/Path;
  #234 = Methodref          #2.#233       // coursier/cache/MockCache.base:()Ljava/nio/file/Path;
  #235 = Utf8               coursier/cache/internal/MockCacheEscape$
  #236 = Class              #235          // coursier/cache/internal/MockCacheEscape$
  #237 = Utf8               Lcoursier/cache/internal/MockCacheEscape$;
  #238 = NameAndType        #64:#237      // MODULE$:Lcoursier/cache/internal/MockCacheEscape$;
  #239 = Fieldref           #236.#238     // coursier/cache/internal/MockCacheEscape$.MODULE$:Lcoursier/cache/internal/MockCacheEscape$;
  #240 = Utf8               urlAsPath
  #241 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
  #242 = NameAndType        #240:#241     // urlAsPath:(Ljava/lang/String;)Ljava/lang/String;
  #243 = Methodref          #236.#242     // coursier/cache/internal/MockCacheEscape$.urlAsPath:(Ljava/lang/String;)Ljava/lang/String;
  #244 = Utf8               java/nio/file/Path
  #245 = Class              #244          // java/nio/file/Path
  #246 = Utf8               resolve
  #247 = Utf8               (Ljava/lang/String;)Ljava/nio/file/Path;
  #248 = NameAndType        #246:#247     // resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
  #249 = InterfaceMethodref #245.#248     // java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
  #250 = NameAndType        #42:#84       // extraData:()Lscala/collection/immutable/Seq;
  #251 = Methodref          #2.#250       // coursier/cache/MockCache.extraData:()Lscala/collection/immutable/Seq;
  #252 = Utf8               scala/Option$
  #253 = Class              #252          // scala/Option$
  #254 = Utf8               Lscala/Option$;
  #255 = NameAndType        #64:#254      // MODULE$:Lscala/Option$;
  #256 = Fieldref           #253.#255     // scala/Option$.MODULE$:Lscala/Option$;
  #257 = Utf8               empty
  #258 = NameAndType        #257:#127     // empty:()Lscala/Option;
  #259 = Methodref          #253.#258     // scala/Option$.empty:()Lscala/Option;
  #260 = Utf8               coursier/util/Sync
  #261 = Class              #260          // coursier/util/Sync
  #262 = NameAndType        #212:#136     // point:(Ljava/lang/Object;)Ljava/lang/Object;
  #263 = InterfaceMethodref #261.#262     // coursier/util/Sync.point:(Ljava/lang/Object;)Ljava/lang/Object;
  #264 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #265 = MethodType         #264          //  (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #266 = Utf8               $anonfun$file$1
  #267 = Utf8               (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  #268 = NameAndType        #266:#267     // $anonfun$file$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  #269 = Methodref          #2.#268       // coursier/cache/MockCache.$anonfun$file$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  #270 = MethodHandle       6:#269        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  #271 = Utf8               (Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  #272 = MethodType         #271          //  (Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  #273 = Utf8               (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function2;
  #274 = NameAndType        #59:#273      // apply:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function2;
  #275 = InvokeDynamic      #1:#274       // #1:apply:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function2;
  #276 = Utf8               scala/collection/immutable/Seq
  #277 = Class              #276          // scala/collection/immutable/Seq
  #278 = Utf8               foldLeft
  #279 = Utf8               (Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
  #280 = NameAndType        #278:#279     // foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
  #281 = InterfaceMethodref #277.#280     // scala/collection/immutable/Seq.foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
  #282 = Utf8               Lcoursier/util/Monad$ops$;
  #283 = NameAndType        #64:#282      // MODULE$:Lcoursier/util/Monad$ops$;
  #284 = Fieldref           #32.#283      // coursier/util/Monad$ops$.MODULE$:Lcoursier/util/Monad$ops$;
  #285 = NameAndType        #47:#116      // pool:()Ljava/util/concurrent/ExecutorService;
  #286 = Methodref          #2.#285       // coursier/cache/MockCache.pool:()Ljava/util/concurrent/ExecutorService;
  #287 = MethodType         #79           //  ()Z
  #288 = Utf8               $anonfun$file$5
  #289 = Utf8               (Ljava/nio/file/Path;)Z
  #290 = NameAndType        #288:#289     // $anonfun$file$5:(Ljava/nio/file/Path;)Z
  #291 = Methodref          #2.#290       // coursier/cache/MockCache.$anonfun$file$5:(Ljava/nio/file/Path;)Z
  #292 = MethodHandle       6:#291        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$5:(Ljava/nio/file/Path;)Z
  #293 = Utf8               apply$mcZ$sp
  #294 = Utf8               (Ljava/nio/file/Path;)Lscala/runtime/java8/JFunction0$mcZ$sp;
  #295 = NameAndType        #293:#294     // apply$mcZ$sp:(Ljava/nio/file/Path;)Lscala/runtime/java8/JFunction0$mcZ$sp;
  #296 = InvokeDynamic      #2:#295       // #2:apply$mcZ$sp:(Ljava/nio/file/Path;)Lscala/runtime/java8/JFunction0$mcZ$sp;
  #297 = Utf8               schedule
  #298 = Utf8               (Ljava/util/concurrent/ExecutorService;Lscala/Function0;)Ljava/lang/Object;
  #299 = NameAndType        #297:#298     // schedule:(Ljava/util/concurrent/ExecutorService;Lscala/Function0;)Ljava/lang/Object;
  #300 = InterfaceMethodref #261.#299     // coursier/util/Sync.schedule:(Ljava/util/concurrent/ExecutorService;Lscala/Function0;)Ljava/lang/Object;
  #301 = Utf8               toAllMonadOps
  #302 = Utf8               (Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
  #303 = NameAndType        #301:#302     // toAllMonadOps:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
  #304 = Methodref          #32.#303      // coursier/util/Monad$ops$.toAllMonadOps:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
  #305 = Utf8               $anonfun$file$6$adapted
  #306 = Utf8               (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
  #307 = NameAndType        #305:#306     // $anonfun$file$6$adapted:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
  #308 = Methodref          #2.#307       // coursier/cache/MockCache.$anonfun$file$6$adapted:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
  #309 = MethodHandle       6:#308        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$6$adapted:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
  #310 = Utf8               (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
  #311 = NameAndType        #59:#310      // apply:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
  #312 = InvokeDynamic      #3:#311       // #3:apply:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
  #313 = Utf8               flatMap
  #314 = Utf8               (Lscala/Function1;)Ljava/lang/Object;
  #315 = NameAndType        #313:#314     // flatMap:(Lscala/Function1;)Ljava/lang/Object;
  #316 = InterfaceMethodref #27.#315      // coursier/util/Monad$AllOps.flatMap:(Lscala/Function1;)Ljava/lang/Object;
  #317 = Utf8               $anonfun$file$8
  #318 = Utf8               (Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
  #319 = NameAndType        #317:#318     // $anonfun$file$8:(Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
  #320 = Methodref          #2.#319       // coursier/cache/MockCache.$anonfun$file$8:(Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
  #321 = MethodHandle       6:#320        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$8:(Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
  #322 = Utf8               (Lscala/Option;)Ljava/lang/Object;
  #323 = MethodType         #322          //  (Lscala/Option;)Ljava/lang/Object;
  #324 = Utf8               (Lcoursier/cache/MockCache;Ljava/lang/Object;)Lscala/Function1;
  #325 = NameAndType        #59:#324      // apply:(Lcoursier/cache/MockCache;Ljava/lang/Object;)Lscala/Function1;
  #326 = InvokeDynamic      #4:#325       // #4:apply:(Lcoursier/cache/MockCache;Ljava/lang/Object;)Lscala/Function1;
  #327 = Utf8               coursier/util/EitherT
  #328 = Class              #327          // coursier/util/EitherT
  #329 = Utf8               (Ljava/lang/Object;)V
  #330 = NameAndType        #182:#329     // "<init>":(Ljava/lang/Object;)V
  #331 = Methodref          #328.#330     // coursier/util/EitherT."<init>":(Ljava/lang/Object;)V
  #332 = Utf8               $anonfun$file$9
  #333 = Utf8               (Ljava/nio/file/Path;)Ljava/io/File;
  #334 = NameAndType        #332:#333     // $anonfun$file$9:(Ljava/nio/file/Path;)Ljava/io/File;
  #335 = Methodref          #2.#334       // coursier/cache/MockCache.$anonfun$file$9:(Ljava/nio/file/Path;)Ljava/io/File;
  #336 = MethodHandle       6:#335        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$9:(Ljava/nio/file/Path;)Ljava/io/File;
  #337 = MethodType         #333          //  (Ljava/nio/file/Path;)Ljava/io/File;
  #338 = NameAndType        #59:#123      // apply:()Lscala/Function1;
  #339 = InvokeDynamic      #5:#338       // #5:apply:()Lscala/Function1;
  #340 = Utf8               map
  #341 = Utf8               (Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #342 = NameAndType        #340:#341     // map:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #343 = Methodref          #328.#342     // coursier/util/EitherT.map:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #344 = Utf8               Ljava/lang/String;
  #345 = Utf8               f
  #346 = Utf8               Ljava/io/File;
  #347 = Utf8               path
  #348 = Utf8               fromExtraData
  #349 = Utf8               Ljava/lang/Object;
  #350 = Utf8               init0
  #351 = Utf8               e
  #352 = Utf8               Lcoursier/util/Artifact;
  #353 = Utf8               ec$lzycompute
  #354 = Utf8               ()Lscala/concurrent/ExecutionContextExecutorService;
  #355 = NameAndType        #58:#46       // bitmap$0:Z
  #356 = Fieldref           #2.#355       // coursier/cache/MockCache.bitmap$0:Z
  #357 = Utf8               scala/concurrent/ExecutionContext$
  #358 = Class              #357          // scala/concurrent/ExecutionContext$
  #359 = Utf8               Lscala/concurrent/ExecutionContext$;
  #360 = NameAndType        #64:#359      // MODULE$:Lscala/concurrent/ExecutionContext$;
  #361 = Fieldref           #358.#360     // scala/concurrent/ExecutionContext$.MODULE$:Lscala/concurrent/ExecutionContext$;
  #362 = Utf8               fromExecutorService
  #363 = Utf8               (Ljava/util/concurrent/ExecutorService;)Lscala/concurrent/ExecutionContextExecutorService;
  #364 = NameAndType        #362:#363     // fromExecutorService:(Ljava/util/concurrent/ExecutorService;)Lscala/concurrent/ExecutionContextExecutorService;
  #365 = Methodref          #358.#364     // scala/concurrent/ExecutionContext$.fromExecutorService:(Ljava/util/concurrent/ExecutorService;)Lscala/concurrent/ExecutionContextExecutorService;
  #366 = NameAndType        #38:#39       // ec:Lscala/concurrent/ExecutionContextExecutorService;
  #367 = Fieldref           #2.#366       // coursier/cache/MockCache.ec:Lscala/concurrent/ExecutionContextExecutorService;
  #368 = Utf8               java/lang/Throwable
  #369 = Class              #368          // java/lang/Throwable
  #370 = NameAndType        #353:#354     // ec$lzycompute:()Lscala/concurrent/ExecutionContextExecutorService;
  #371 = Methodref          #2.#370       // coursier/cache/MockCache.ec$lzycompute:()Lscala/concurrent/ExecutionContextExecutorService;
  #372 = Utf8               scala/concurrent/ExecutionContextExecutorService
  #373 = Class              #372          // scala/concurrent/ExecutionContextExecutorService
  #374 = Utf8               withBase
  #375 = Utf8               (Ljava/nio/file/Path;)Lcoursier/cache/MockCache;
  #376 = Utf8               (Ljava/nio/file/Path;)Lcoursier/cache/MockCache<TF;>;
  #377 = NameAndType        #45:#79       // writeMissing:()Z
  #378 = Methodref          #2.#377       // coursier/cache/MockCache.writeMissing:()Z
  #379 = NameAndType        #52:#123      // dummyArtifact:()Lscala/Function1;
  #380 = Methodref          #2.#379       // coursier/cache/MockCache.dummyArtifact:()Lscala/Function1;
  #381 = NameAndType        #55:#127      // proxy:()Lscala/Option;
  #382 = Methodref          #2.#381       // coursier/cache/MockCache.proxy:()Lscala/Option;
  #383 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
  #384 = NameAndType        #182:#383     // "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
  #385 = Methodref          #2.#384       // coursier/cache/MockCache."<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
  #386 = Utf8               withExtraData
  #387 = Utf8               (Lscala/collection/immutable/Seq;)Lcoursier/cache/MockCache;
  #388 = Utf8               (Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;)Lcoursier/cache/MockCache<TF;>;
  #389 = Utf8               withWriteMissing
  #390 = Utf8               (Z)Lcoursier/cache/MockCache;
  #391 = Utf8               (Z)Lcoursier/cache/MockCache<TF;>;
  #392 = Utf8               withPool
  #393 = Utf8               (Ljava/util/concurrent/ExecutorService;)Lcoursier/cache/MockCache;
  #394 = Utf8               (Ljava/util/concurrent/ExecutorService;)Lcoursier/cache/MockCache<TF;>;
  #395 = Utf8               withS
  #396 = Utf8               (Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
  #397 = Utf8               (Lcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
  #398 = Utf8               withDummyArtifact
  #399 = Utf8               (Lscala/Function1;)Lcoursier/cache/MockCache;
  #400 = Utf8               (Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)Lcoursier/cache/MockCache<TF;>;
  #401 = Utf8               withProxy
  #402 = Utf8               (Lscala/Option;)Lcoursier/cache/MockCache;
  #403 = Utf8               (Lscala/Option<Ljava/net/Proxy;>;)Lcoursier/cache/MockCache<TF;>;
  #404 = Utf8               MockCache(
  #405 = String             #404          // MockCache(
  #406 = Methodref          #180.#200     // java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
  #407 = Utf8               valueOf
  #408 = Utf8               (Ljava/lang/Object;)Ljava/lang/String;
  #409 = NameAndType        #407:#408     // valueOf:(Ljava/lang/Object;)Ljava/lang/String;
  #410 = Methodref          #169.#409     // java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
  #411 = Utf8               ,
  #412 = String             #411          // ,
  #413 = Utf8               (Z)Ljava/lang/String;
  #414 = NameAndType        #407:#413     // valueOf:(Z)Ljava/lang/String;
  #415 = Methodref          #169.#414     // java/lang/String.valueOf:(Z)Ljava/lang/String;
  #416 = Utf8               )
  #417 = String             #416          // )
  #418 = Utf8               b
  #419 = Utf8               Ljava/lang/StringBuilder;
  #420 = Utf8               canEqual
  #421 = Utf8               (Ljava/lang/Object;)Z
  #422 = Utf8               obj
  #423 = Utf8               equals
  #424 = NameAndType        #420:#421     // canEqual:(Ljava/lang/Object;)Z
  #425 = Methodref          #2.#424       // coursier/cache/MockCache.canEqual:(Ljava/lang/Object;)Z
  #426 = Utf8               java/lang/Object
  #427 = Class              #426          // java/lang/Object
  #428 = NameAndType        #423:#421     // equals:(Ljava/lang/Object;)Z
  #429 = Methodref          #427.#428     // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #430 = Utf8               java/util/concurrent/ExecutorService
  #431 = Class              #430          // java/util/concurrent/ExecutorService
  #432 = Utf8               scala/Function1
  #433 = Class              #432          // scala/Function1
  #434 = Utf8               other
  #435 = Utf8               hashCode
  #436 = Utf8               ()I
  #437 = Utf8               MockCache
  #438 = String             #437          // MockCache
  #439 = Utf8               scala/runtime/Statics
  #440 = Class              #439          // scala/runtime/Statics
  #441 = Utf8               anyHash
  #442 = Utf8               (Ljava/lang/Object;)I
  #443 = NameAndType        #441:#442     // anyHash:(Ljava/lang/Object;)I
  #444 = Methodref          #440.#443     // scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
  #445 = Utf8               code
  #446 = Utf8               I
  #447 = Utf8               tuple
  #448 = Utf8               ()Lscala/Tuple7;
  #449 = Utf8               ()Lscala/Tuple7<Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;Ljava/lang/Object;Ljava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;>;
  #450 = Utf8               scala/Tuple7
  #451 = Class              #450          // scala/Tuple7
  #452 = Utf8               scala/runtime/BoxesRunTime
  #453 = Class              #452          // scala/runtime/BoxesRunTime
  #454 = Utf8               boxToBoolean
  #455 = Utf8               (Z)Ljava/lang/Boolean;
  #456 = NameAndType        #454:#455     // boxToBoolean:(Z)Ljava/lang/Boolean;
  #457 = Methodref          #453.#456     // scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
  #458 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
  #459 = NameAndType        #182:#458     // "<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
  #460 = Methodref          #451.#459     // scala/Tuple7."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
  #461 = Utf8               productPrefix
  #462 = Utf8               productArity
  #463 = Utf8               productElement
  #464 = Utf8               (I)Ljava/lang/Object;
  #465 = Utf8               n
  #466 = Utf8               java/lang/IndexOutOfBoundsException
  #467 = Class              #466          // java/lang/IndexOutOfBoundsException
  #468 = Utf8               boxToInteger
  #469 = Utf8               (I)Ljava/lang/Integer;
  #470 = NameAndType        #468:#469     // boxToInteger:(I)Ljava/lang/Integer;
  #471 = Methodref          #453.#470     // scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
  #472 = Methodref          #427.#193     // java/lang/Object.toString:()Ljava/lang/String;
  #473 = Methodref          #467.#200     // java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
  #474 = Utf8               productElementName
  #475 = Utf8               (I)Ljava/lang/String;
  #476 = String             #40           // base
  #477 = String             #42           // extraData
  #478 = String             #45           // writeMissing
  #479 = String             #47           // pool
  #480 = String             #49           // S
  #481 = String             #52           // dummyArtifact
  #482 = String             #55           // proxy
  #483 = Utf8               ()Lscala/concurrent/ExecutionContext;
  #484 = NameAndType        #38:#354      // ec:()Lscala/concurrent/ExecutionContextExecutorService;
  #485 = Methodref          #2.#484       // coursier/cache/MockCache.ec:()Lscala/concurrent/ExecutionContextExecutorService;
  #486 = Utf8               $anonfun$fetch$2
  #487 = Utf8               (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #488 = Utf8               $this
  #489 = Utf8               artifact0$1
  #490 = Utf8               coursier/cache/ConnectionBuilder$
  #491 = Class              #490          // coursier/cache/ConnectionBuilder$
  #492 = Utf8               Lcoursier/cache/ConnectionBuilder$;
  #493 = NameAndType        #64:#492      // MODULE$:Lcoursier/cache/ConnectionBuilder$;
  #494 = Fieldref           #491.#493     // coursier/cache/ConnectionBuilder$.MODULE$:Lcoursier/cache/ConnectionBuilder$;
  #495 = Utf8               (Ljava/lang/String;)Lcoursier/cache/ConnectionBuilder;
  #496 = NameAndType        #59:#495      // apply:(Ljava/lang/String;)Lcoursier/cache/ConnectionBuilder;
  #497 = Methodref          #491.#496     // coursier/cache/ConnectionBuilder$.apply:(Ljava/lang/String;)Lcoursier/cache/ConnectionBuilder;
  #498 = Utf8               coursier/cache/ConnectionBuilder
  #499 = Class              #498          // coursier/cache/ConnectionBuilder
  #500 = Utf8               withAuthentication
  #501 = Utf8               (Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
  #502 = NameAndType        #500:#501     // withAuthentication:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
  #503 = Methodref          #499.#502     // coursier/cache/ConnectionBuilder.withAuthentication:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
  #504 = NameAndType        #401:#501     // withProxy:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
  #505 = Methodref          #499.#504     // coursier/cache/ConnectionBuilder.withProxy:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
  #506 = Utf8               connection
  #507 = Utf8               ()Ljava/net/URLConnection;
  #508 = NameAndType        #506:#507     // connection:()Ljava/net/URLConnection;
  #509 = Methodref          #499.#508     // coursier/cache/ConnectionBuilder.connection:()Ljava/net/URLConnection;
  #510 = Utf8               java/net/URLConnection
  #511 = Class              #510          // java/net/URLConnection
  #512 = Utf8               getInputStream
  #513 = Utf8               ()Ljava/io/InputStream;
  #514 = NameAndType        #512:#513     // getInputStream:()Ljava/io/InputStream;
  #515 = Methodref          #511.#514     // java/net/URLConnection.getInputStream:()Ljava/io/InputStream;
  #516 = Utf8               $anonfun$fetch$3
  #517 = Utf8               (Lcoursier/cache/ArtifactError;)Ljava/lang/String;
  #518 = Utf8               x$3
  #519 = Utf8               describe
  #520 = NameAndType        #519:#163     // describe:()Ljava/lang/String;
  #521 = Methodref          #17.#520      // coursier/cache/ArtifactError.describe:()Ljava/lang/String;
  #522 = Utf8               Lcoursier/cache/ArtifactError;
  #523 = Utf8               $anonfun$fetch$5
  #524 = Utf8               (Ljava/io/File;)Ljava/io/FileInputStream;
  #525 = Utf8               f$1
  #526 = Utf8               java/io/FileInputStream
  #527 = Class              #526          // java/io/FileInputStream
  #528 = Utf8               (Ljava/io/File;)V
  #529 = NameAndType        #182:#528     // "<init>":(Ljava/io/File;)V
  #530 = Methodref          #527.#529     // java/io/FileInputStream."<init>":(Ljava/io/File;)V
  #531 = Utf8               $anonfun$fetch$4
  #532 = Utf8               (Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
  #533 = Utf8               links$1
  #534 = Utf8               ()Ljava/lang/Object;
  #535 = MethodType         #534          //  ()Ljava/lang/Object;
  #536 = NameAndType        #523:#524     // $anonfun$fetch$5:(Ljava/io/File;)Ljava/io/FileInputStream;
  #537 = Methodref          #2.#536       // coursier/cache/MockCache.$anonfun$fetch$5:(Ljava/io/File;)Ljava/io/FileInputStream;
  #538 = MethodHandle       6:#537        // REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$5:(Ljava/io/File;)Ljava/io/FileInputStream;
  #539 = Utf8               ()Ljava/io/FileInputStream;
  #540 = MethodType         #539          //  ()Ljava/io/FileInputStream;
  #541 = Utf8               (Ljava/io/File;)Lscala/Function0;
  #542 = NameAndType        #59:#541      // apply:(Ljava/io/File;)Lscala/Function0;
  #543 = InvokeDynamic      #6:#542       // #6:apply:(Ljava/io/File;)Lscala/Function0;
  #544 = Utf8               scala/Some
  #545 = Class              #544          // scala/Some
  #546 = Methodref          #545.#330     // scala/Some."<init>":(Ljava/lang/Object;)V
  #547 = Utf8               scala/Function0
  #548 = Class              #547          // scala/Function0
  #549 = Utf8               scala/None$
  #550 = Class              #549          // scala/None$
  #551 = Utf8               Lscala/None$;
  #552 = NameAndType        #64:#551      // MODULE$:Lscala/None$;
  #553 = Fieldref           #550.#552     // scala/None$.MODULE$:Lscala/None$;
  #554 = Utf8               coursier$cache$MockCache$$readFully
  #555 = Utf8               (Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
  #556 = NameAndType        #554:#555     // coursier$cache$MockCache$$readFully:(Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
  #557 = Methodref          #63.#556      // coursier/cache/MockCache$.coursier$cache$MockCache$$readFully:(Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
  #558 = Utf8               /.links
  #559 = String             #558          // /.links
  #560 = Utf8               scala/Tuple2
  #561 = Class              #560          // scala/Tuple2
  #562 = Utf8               scala/collection/StringOps$
  #563 = Class              #562          // scala/collection/StringOps$
  #564 = Utf8               Lscala/collection/StringOps$;
  #565 = NameAndType        #64:#564      // MODULE$:Lscala/collection/StringOps$;
  #566 = Fieldref           #563.#565     // scala/collection/StringOps$.MODULE$:Lscala/collection/StringOps$;
  #567 = Utf8               augmentString
  #568 = NameAndType        #567:#241     // augmentString:(Ljava/lang/String;)Ljava/lang/String;
  #569 = Methodref          #217.#568     // scala/Predef$.augmentString:(Ljava/lang/String;)Ljava/lang/String;
  #570 = Utf8               .links
  #571 = String             #570          // .links
  #572 = Utf8               stripSuffix$extension
  #573 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  #574 = NameAndType        #572:#573     // stripSuffix$extension:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  #575 = Methodref          #563.#574     // scala/collection/StringOps$.stripSuffix$extension:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
  #576 = Utf8               withUrl
  #577 = Utf8               (Ljava/lang/String;)Lcoursier/util/Artifact;
  #578 = NameAndType        #576:#577     // withUrl:(Ljava/lang/String;)Lcoursier/util/Artifact;
  #579 = Methodref          #161.#578     // coursier/util/Artifact.withUrl:(Ljava/lang/String;)Lcoursier/util/Artifact;
  #580 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #581 = NameAndType        #182:#580     // "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
  #582 = Methodref          #561.#581     // scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
  #583 = Utf8               _1
  #584 = NameAndType        #583:#534     // _1:()Ljava/lang/Object;
  #585 = Methodref          #561.#584     // scala/Tuple2._1:()Ljava/lang/Object;
  #586 = Utf8               _2$mcZ$sp
  #587 = NameAndType        #586:#79      // _2$mcZ$sp:()Z
  #588 = Methodref          #561.#587     // scala/Tuple2._2$mcZ$sp:()Z
  #589 = Utf8               scala/MatchError
  #590 = Class              #589          // scala/MatchError
  #591 = Methodref          #590.#330     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #592 = Utf8               nonEmpty
  #593 = NameAndType        #592:#79      // nonEmpty:()Z
  #594 = Methodref          #225.#593     // scala/Option.nonEmpty:()Z
  #595 = Utf8               http://localhost:
  #596 = String             #595          // http://localhost:
  #597 = NameAndType        #486:#487     // $anonfun$fetch$2:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #598 = Methodref          #2.#597       // coursier/cache/MockCache.$anonfun$fetch$2:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #599 = MethodHandle       6:#598        // REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$2:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #600 = MethodType         #513          //  ()Ljava/io/InputStream;
  #601 = Utf8               (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function0;
  #602 = NameAndType        #59:#601      // apply:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function0;
  #603 = InvokeDynamic      #7:#602       // #7:apply:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function0;
  #604 = NameAndType        #157:#143     // file:(Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #605 = Methodref          #2.#604       // coursier/cache/MockCache.file:(Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  #606 = NameAndType        #516:#517     // $anonfun$fetch$3:(Lcoursier/cache/ArtifactError;)Ljava/lang/String;
  #607 = Methodref          #2.#606       // coursier/cache/MockCache.$anonfun$fetch$3:(Lcoursier/cache/ArtifactError;)Ljava/lang/String;
  #608 = MethodHandle       6:#607        // REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$3:(Lcoursier/cache/ArtifactError;)Ljava/lang/String;
  #609 = MethodType         #517          //  (Lcoursier/cache/ArtifactError;)Ljava/lang/String;
  #610 = InvokeDynamic      #8:#338       // #8:apply:()Lscala/Function1;
  #611 = Utf8               leftMap
  #612 = NameAndType        #611:#341     // leftMap:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #613 = Methodref          #328.#612     // coursier/util/EitherT.leftMap:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #614 = NameAndType        #531:#532     // $anonfun$fetch$4:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
  #615 = Methodref          #2.#614       // coursier/cache/MockCache.$anonfun$fetch$4:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
  #616 = MethodHandle       6:#615        // REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$4:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
  #617 = Utf8               (Ljava/io/File;)Lcoursier/util/EitherT;
  #618 = MethodType         #617          //  (Ljava/io/File;)Lcoursier/util/EitherT;
  #619 = Utf8               (Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;)Lscala/Function1;
  #620 = NameAndType        #59:#619      // apply:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;)Lscala/Function1;
  #621 = InvokeDynamic      #9:#620       // #9:apply:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;)Lscala/Function1;
  #622 = NameAndType        #313:#341     // flatMap:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #623 = Methodref          #328.#622     // coursier/util/EitherT.flatMap:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
  #624 = Utf8               artifact0
  #625 = Utf8               links
  #626 = Utf8               $anonfun$file$3
  #627 = Utf8               path$1
  #628 = Utf8               java/nio/file/LinkOption
  #629 = Class              #628          // java/nio/file/LinkOption
  #630 = Utf8               java/nio/file/Files
  #631 = Class              #630          // java/nio/file/Files
  #632 = Utf8               exists
  #633 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
  #634 = NameAndType        #632:#633     // exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
  #635 = Methodref          #631.#634     // java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
  #636 = Utf8               $anonfun$file$4
  #637 = Utf8               (Ljava/nio/file/Path;Z)Lscala/Option;
  #638 = Utf8               x0$2
  #639 = Utf8               $anonfun$file$2
  #640 = Utf8               (Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
  #641 = Utf8               acc$1
  #642 = Utf8               p$1
  #643 = Utf8               artifact$1
  #644 = Utf8               x0$1
  #645 = NameAndType        #626:#289     // $anonfun$file$3:(Ljava/nio/file/Path;)Z
  #646 = Methodref          #2.#645       // coursier/cache/MockCache.$anonfun$file$3:(Ljava/nio/file/Path;)Z
  #647 = MethodHandle       6:#646        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$3:(Ljava/nio/file/Path;)Z
  #648 = InvokeDynamic      #10:#295      // #10:apply$mcZ$sp:(Ljava/nio/file/Path;)Lscala/runtime/java8/JFunction0$mcZ$sp;
  #649 = Utf8               $anonfun$file$4$adapted
  #650 = Utf8               (Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
  #651 = NameAndType        #649:#650     // $anonfun$file$4$adapted:(Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
  #652 = Methodref          #2.#651       // coursier/cache/MockCache.$anonfun$file$4$adapted:(Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
  #653 = MethodHandle       6:#652        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$4$adapted:(Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
  #654 = Utf8               (Ljava/lang/Object;)Lscala/Option;
  #655 = MethodType         #654          //  (Ljava/lang/Object;)Lscala/Option;
  #656 = Utf8               (Ljava/nio/file/Path;)Lscala/Function1;
  #657 = NameAndType        #59:#656      // apply:(Ljava/nio/file/Path;)Lscala/Function1;
  #658 = InvokeDynamic      #11:#657      // #11:apply:(Ljava/nio/file/Path;)Lscala/Function1;
  #659 = NameAndType        #340:#314     // map:(Lscala/Function1;)Ljava/lang/Object;
  #660 = InterfaceMethodref #27.#659      // coursier/util/Monad$AllOps.map:(Lscala/Function1;)Ljava/lang/Object;
  #661 = Utf8               acc
  #662 = Utf8               p
  #663 = NameAndType        #639:#640     // $anonfun$file$2:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
  #664 = Methodref          #2.#663       // coursier/cache/MockCache.$anonfun$file$2:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
  #665 = MethodHandle       6:#664        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$2:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
  #666 = Utf8               (Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
  #667 = NameAndType        #59:#666      // apply:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
  #668 = InvokeDynamic      #12:#667      // #12:apply:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
  #669 = Utf8               path$2
  #670 = Utf8               is$1
  #671 = Utf8               (Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #672 = NameAndType        #59:#136      // apply:(Ljava/lang/Object;)Ljava/lang/Object;
  #673 = InterfaceMethodref #433.#672     // scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
  #674 = Utf8               unboxToBoolean
  #675 = NameAndType        #674:#421     // unboxToBoolean:(Ljava/lang/Object;)Z
  #676 = Methodref          #453.#675     // scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
  #677 = Utf8               java/io/ByteArrayInputStream
  #678 = Class              #677          // java/io/ByteArrayInputStream
  #679 = Utf8               scala/Array$
  #680 = Class              #679          // scala/Array$
  #681 = Utf8               Lscala/Array$;
  #682 = NameAndType        #64:#681      // MODULE$:Lscala/Array$;
  #683 = Fieldref           #680.#682     // scala/Array$.MODULE$:Lscala/Array$;
  #684 = Utf8               emptyByteArray
  #685 = Utf8               ()[B
  #686 = NameAndType        #684:#685     // emptyByteArray:()[B
  #687 = Methodref          #680.#686     // scala/Array$.emptyByteArray:()[B
  #688 = Utf8               ([B)V
  #689 = NameAndType        #182:#688     // "<init>":([B)V
  #690 = Methodref          #678.#689     // java/io/ByteArrayInputStream."<init>":([B)V
  #691 = Utf8               java/io/InputStream
  #692 = Class              #691          // java/io/InputStream
  #693 = Utf8               $anonfun$file$7
  #694 = Utf8               (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
  #695 = Utf8               getParent
  #696 = NameAndType        #695:#108     // getParent:()Ljava/nio/file/Path;
  #697 = InterfaceMethodref #245.#696     // java/nio/file/Path.getParent:()Ljava/nio/file/Path;
  #698 = Utf8               coursier/paths/Util
  #699 = Class              #698          // coursier/paths/Util
  #700 = Utf8               createDirectories
  #701 = Utf8               (Ljava/nio/file/Path;)V
  #702 = NameAndType        #700:#701     // createDirectories:(Ljava/nio/file/Path;)V
  #703 = Methodref          #699.#702     // coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
  #704 = NameAndType        #670:#671     // is$1:(Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #705 = Methodref          #2.#704       // coursier/cache/MockCache.is$1:(Lcoursier/util/Artifact;)Ljava/io/InputStream;
  #706 = Utf8               coursier$cache$MockCache$$readFullySync
  #707 = Utf8               (Ljava/io/InputStream;)[B
  #708 = NameAndType        #706:#707     // coursier$cache$MockCache$$readFullySync:(Ljava/io/InputStream;)[B
  #709 = Methodref          #63.#708      // coursier/cache/MockCache$.coursier$cache$MockCache$$readFullySync:(Ljava/io/InputStream;)[B
  #710 = Utf8               java/nio/file/OpenOption
  #711 = Class              #710          // java/nio/file/OpenOption
  #712 = Utf8               write
  #713 = Utf8               (Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;
  #714 = NameAndType        #712:#713     // write:(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;
  #715 = Methodref          #631.#714     // java/nio/file/Files.write:(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;
  #716 = Utf8               scala/package$
  #717 = Class              #716          // scala/package$
  #718 = Utf8               Lscala/package$;
  #719 = NameAndType        #64:#718      // MODULE$:Lscala/package$;
  #720 = Fieldref           #717.#719     // scala/package$.MODULE$:Lscala/package$;
  #721 = Utf8               Right
  #722 = Utf8               ()Lscala/util/Right$;
  #723 = NameAndType        #721:#722     // Right:()Lscala/util/Right$;
  #724 = Methodref          #717.#723     // scala/package$.Right:()Lscala/util/Right$;
  #725 = Utf8               scala/util/Right$
  #726 = Class              #725          // scala/util/Right$
  #727 = Utf8               (Ljava/lang/Object;)Lscala/util/Right;
  #728 = NameAndType        #59:#727      // apply:(Ljava/lang/Object;)Lscala/util/Right;
  #729 = Methodref          #726.#728     // scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
  #730 = Utf8               [B
  #731 = Utf8               $anonfun$file$6
  #732 = Utf8               (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Z)Ljava/lang/Object;
  #733 = Utf8               x0$3
  #734 = NameAndType        #693:#694     // $anonfun$file$7:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
  #735 = Methodref          #2.#734       // coursier/cache/MockCache.$anonfun$file$7:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
  #736 = MethodHandle       6:#735        // REF_invokeStatic coursier/cache/MockCache.$anonfun$file$7:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
  #737 = Utf8               ()Lscala/util/Right;
  #738 = MethodType         #737          //  ()Lscala/util/Right;
  #739 = Utf8               (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function0;
  #740 = NameAndType        #59:#739      // apply:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function0;
  #741 = InvokeDynamic      #13:#740      // #13:apply:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function0;
  #742 = Utf8               (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)V
  #743 = NameAndType        #182:#742     // "<init>":(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)V
  #744 = Methodref          #25.#743      // coursier/cache/MockCache$$anonfun$1."<init>":(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)V
  #745 = Utf8               handle
  #746 = Utf8               (Ljava/lang/Object;Lscala/PartialFunction;)Ljava/lang/Object;
  #747 = NameAndType        #745:#746     // handle:(Ljava/lang/Object;Lscala/PartialFunction;)Ljava/lang/Object;
  #748 = InterfaceMethodref #261.#747     // coursier/util/Sync.handle:(Ljava/lang/Object;Lscala/PartialFunction;)Ljava/lang/Object;
  #749 = Utf8               Left
  #750 = Utf8               ()Lscala/util/Left$;
  #751 = NameAndType        #749:#750     // Left:()Lscala/util/Left$;
  #752 = Methodref          #717.#751     // scala/package$.Left:()Lscala/util/Left$;
  #753 = Utf8               Lcoursier/cache/ArtifactError$NotFound$;
  #754 = NameAndType        #64:#753      // MODULE$:Lcoursier/cache/ArtifactError$NotFound$;
  #755 = Fieldref           #20.#754      // coursier/cache/ArtifactError$NotFound$.MODULE$:Lcoursier/cache/ArtifactError$NotFound$;
  #756 = Utf8               $lessinit$greater$default$2
  #757 = NameAndType        #756:#127     // $lessinit$greater$default$2:()Lscala/Option;
  #758 = Methodref          #20.#757      // coursier/cache/ArtifactError$NotFound$.$lessinit$greater$default$2:()Lscala/Option;
  #759 = Utf8               (Ljava/lang/String;Lscala/Option;)V
  #760 = NameAndType        #182:#759     // "<init>":(Ljava/lang/String;Lscala/Option;)V
  #761 = Methodref          #15.#760      // coursier/cache/ArtifactError$NotFound."<init>":(Ljava/lang/String;Lscala/Option;)V
  #762 = Utf8               scala/util/Left$
  #763 = Class              #762          // scala/util/Left$
  #764 = Utf8               (Ljava/lang/Object;)Lscala/util/Left;
  #765 = NameAndType        #59:#764      // apply:(Ljava/lang/Object;)Lscala/util/Left;
  #766 = Methodref          #763.#765     // scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
  #767 = Utf8               res
  #768 = Utf8               init0$1
  #769 = Utf8               x0$4
  #770 = Utf8               value
  #771 = NameAndType        #770:#534     // value:()Ljava/lang/Object;
  #772 = Methodref          #545.#771     // scala/Some.value:()Ljava/lang/Object;
  #773 = Utf8               x$4
  #774 = Utf8               toFile
  #775 = Utf8               ()Ljava/io/File;
  #776 = NameAndType        #774:#775     // toFile:()Ljava/io/File;
  #777 = InterfaceMethodref #245.#776     // java/nio/file/Path.toFile:()Ljava/io/File;
  #778 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;)V
  #779 = Utf8               ()V
  #780 = NameAndType        #182:#779     // "<init>":()V
  #781 = Methodref          #5.#780       // coursier/cache/Cache."<init>":()V
  #782 = Utf8               $init$
  #783 = Utf8               (Lscala/Product;)V
  #784 = NameAndType        #782:#783     // $init$:(Lscala/Product;)V
  #785 = InterfaceMethodref #7.#784       // scala/Product.$init$:(Lscala/Product;)V
  #786 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)V
  #787 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)V
  #788 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)V
  #789 = Utf8               (Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;)V
  #790 = Methodref          #23.#780      // coursier/cache/MockCache$$anonfun$$lessinit$greater$1."<init>":()V
  #791 = NameAndType        #731:#732     // $anonfun$file$6:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Z)Ljava/lang/Object;
  #792 = Methodref          #2.#791       // coursier/cache/MockCache.$anonfun$file$6:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Z)Ljava/lang/Object;
  #793 = NameAndType        #636:#637     // $anonfun$file$4:(Ljava/nio/file/Path;Z)Lscala/Option;
  #794 = Methodref          #2.#793       // coursier/cache/MockCache.$anonfun$file$4:(Ljava/nio/file/Path;Z)Lscala/Option;
  #795 = Utf8               $deserializeLambda$
  #796 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #797 = Utf8               scala/runtime/LambdaDeserialize
  #798 = Class              #797          // scala/runtime/LambdaDeserialize
  #799 = Utf8               bootstrap
  #800 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #801 = NameAndType        #799:#800     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #802 = Methodref          #798.#801     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #803 = MethodHandle       6:#802        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #804 = Utf8               lambdaDeserialize
  #805 = NameAndType        #804:#796     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #806 = InvokeDynamic      #14:#805      // #14:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #807 = Utf8               Signature
  #808 = Utf8               Code
  #809 = Utf8               MethodParameters
  #810 = Utf8               LineNumberTable
  #811 = Utf8               LocalVariableTable
  #812 = Utf8               StackMapTable
  #813 = Utf8               InnerClasses
  #814 = Utf8               SourceFile
  #815 = Utf8               RuntimeVisibleAnnotations
  #816 = Utf8               BootstrapMethods
  #817 = Utf8               ScalaInlineInfo
  #818 = Utf8               ScalaSig
{
  private scala.concurrent.ExecutionContextExecutorService ec;
    descriptor: Lscala/concurrent/ExecutionContextExecutorService;
    flags: (0x0002) ACC_PRIVATE

  private final java.nio.file.Path base;
    descriptor: Ljava/nio/file/Path;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final scala.collection.immutable.Seq<java.nio.file.Path> extraData;
    descriptor: Lscala/collection/immutable/Seq;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #44                          // Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;

  private final boolean writeMissing;
    descriptor: Z
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.util.concurrent.ExecutorService pool;
    descriptor: Ljava/util/concurrent/ExecutorService;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final coursier.util.Sync<F> S;
    descriptor: Lcoursier/util/Sync;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #51                          // Lcoursier/util/Sync<TF;>;

  private final scala.Function1<coursier.util.Artifact, java.lang.Object> dummyArtifact;
    descriptor: Lscala/Function1;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #54                          // Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;

  private final scala.Option<java.net.Proxy> proxy;
    descriptor: Lscala/Option;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #57                          // Lscala/Option<Ljava/net/Proxy;>;

  private volatile boolean bitmap$0;
    descriptor: Z
    flags: (0x0042) ACC_PRIVATE, ACC_VOLATILE

  public static <F extends java.lang.Object> coursier.cache.MockCache<F> apply(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>, scala.Option<java.net.Proxy>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=8, locals=7, args_size=7
         0: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         3: aload_0
         4: aload_1
         5: iload_2
         6: aload_3
         7: aload         4
         9: aload         5
        11: aload         6
        13: invokevirtual #69                 // Method coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)Lcoursier/cache/MockCache;
        16: areturn
    Signature: #61                          // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final
      dummyArtifact                  final
      proxy                          final

  public static <F extends java.lang.Object> coursier.cache.MockCache<F> apply(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=7, locals=6, args_size=6
         0: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         3: aload_0
         4: aload_1
         5: iload_2
         6: aload_3
         7: aload         4
         9: aload         5
        11: invokevirtual #73                 // Method coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)Lcoursier/cache/MockCache;
        14: areturn
    Signature: #71                          // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final
      dummyArtifact                  final

  public static <F extends java.lang.Object> coursier.cache.MockCache<F> apply(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=6, locals=5, args_size=5
         0: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         3: aload_0
         4: aload_1
         5: iload_2
         6: aload_3
         7: aload         4
         9: invokevirtual #77                 // Method coursier/cache/MockCache$.apply:(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
        12: areturn
    Signature: #75                          // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final

  public static <F extends java.lang.Object> boolean create$default$4();
    descriptor: ()Z
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         3: invokevirtual #82                 // Method coursier/cache/MockCache$.create$default$4:()Z
         6: ireturn
    Signature: #80                          // <F:Ljava/lang/Object;>()Z

  public static <F extends java.lang.Object> scala.collection.immutable.Seq<java.nio.file.Path> create$default$3();
    descriptor: ()Lscala/collection/immutable/Seq;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         3: invokevirtual #87                 // Method coursier/cache/MockCache$.create$default$3:()Lscala/collection/immutable/Seq;
         6: areturn
    Signature: #85                          // <F:Ljava/lang/Object;>()Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;

  public static <F extends java.lang.Object> coursier.cache.MockCache<F> create(java.nio.file.Path, java.util.concurrent.ExecutorService, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, coursier.util.Sync<F>);
    descriptor: (Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=6, locals=5, args_size=5
         0: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         3: aload_0
         4: aload_1
         5: aload_2
         6: iload_3
         7: aload         4
         9: invokevirtual #93                 // Method coursier/cache/MockCache$.create:(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq;ZLcoursier/util/Sync;)Lcoursier/cache/MockCache;
        12: areturn
    Signature: #90                          // <F:Ljava/lang/Object;>(Ljava/nio/file/Path;Ljava/util/concurrent/ExecutorService;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final
      pool                           final
      extraData                      final
      writeMissing                   final
      evidence$1                     final

  public scala.collection.Iterator<java.lang.Object> productIterator();
    descriptor: ()Lscala/collection/Iterator;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #100                // InterfaceMethod scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #96                          // ()Lscala/collection/Iterator<Ljava/lang/Object;>;

  public scala.collection.Iterator<java.lang.String> productElementNames();
    descriptor: ()Lscala/collection/Iterator;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #107                // InterfaceMethod scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #104                         // ()Lscala/collection/Iterator<Ljava/lang/String;>;

  public java.nio.file.Path base();
    descriptor: ()Ljava/nio/file/Path;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #110                // Field base:Ljava/nio/file/Path;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;

  public scala.collection.immutable.Seq<java.nio.file.Path> extraData();
    descriptor: ()Lscala/collection/immutable/Seq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #113                // Field extraData:Lscala/collection/immutable/Seq;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #111                         // ()Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;

  public boolean writeMissing();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #115                // Field writeMissing:Z
         4: ireturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;

  public java.util.concurrent.ExecutorService pool();
    descriptor: ()Ljava/util/concurrent/ExecutorService;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #118                // Field pool:Ljava/util/concurrent/ExecutorService;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;

  public coursier.util.Sync<F> S();
    descriptor: ()Lcoursier/util/Sync;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #122                // Field S:Lcoursier/util/Sync;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #120                         // ()Lcoursier/util/Sync<TF;>;

  public scala.Function1<coursier.util.Artifact, java.lang.Object> dummyArtifact();
    descriptor: ()Lscala/Function1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #126                // Field dummyArtifact:Lscala/Function1;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #124                         // ()Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;

  public scala.Option<java.net.Proxy> proxy();
    descriptor: ()Lscala/Option;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #130                // Field proxy:Lscala/Option;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #128                         // ()Lscala/Option<Ljava/net/Proxy;>;

  private coursier.util.Sync<F> S0();
    descriptor: ()Lcoursier/util/Sync;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
         4: areturn
      LineNumberTable:
        line 29: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;
    Signature: #120                         // ()Lcoursier/util/Sync<TF;>;

  public scala.Function1<coursier.util.Artifact, coursier.util.EitherT<F, java.lang.String, java.lang.String>> fetch();
    descriptor: ()Lscala/Function1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #156,  0            // InvokeDynamic #0:apply:(Lcoursier/cache/MockCache;)Lscala/Function1;
         6: areturn
      LineNumberTable:
        line 31: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lcoursier/cache/MockCache;
    Signature: #135                         // ()Lscala/Function1<Lcoursier/util/Artifact;Lcoursier/util/EitherT<TF;Ljava/lang/String;Ljava/lang/String;>;>;

  public coursier.util.EitherT<F, coursier.cache.ArtifactError, java.io.File> file(coursier.util.Artifact);
    descriptor: (Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=8, args_size=2
         0: aload_1
         1: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
         4: ldc           #167                // String file:
         6: invokevirtual #173                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
         9: ifeq          86
        12: aload_1
        13: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        16: ldc           #175                // String /
        18: invokevirtual #178                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
        21: ifeq          51
        24: new           #180                // class java/lang/StringBuilder
        27: dup
        28: ldc           #181                // int 10
        30: invokespecial #185                // Method java/lang/StringBuilder."<init>":(I)V
        33: aload_1
        34: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        37: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        40: ldc           #191                // String .directory
        42: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        45: invokevirtual #194                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        48: goto          55
        51: aload_1
        52: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        55: astore_2
        56: new           #196                // class java/io/File
        59: dup
        60: new           #198                // class java/net/URI
        63: dup
        64: aload_2
        65: invokespecial #201                // Method java/net/URI."<init>":(Ljava/lang/String;)V
        68: invokespecial #204                // Method java/io/File."<init>":(Ljava/net/URI;)V
        71: astore_3
        72: getstatic     #209                // Field coursier/util/EitherT$.MODULE$:Lcoursier/util/EitherT$;
        75: aload_3
        76: aload_0
        77: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
        80: invokevirtual #215                // Method coursier/util/EitherT$.point:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
        83: goto          247
        86: getstatic     #220                // Field scala/Predef$.MODULE$:Lscala/Predef$;
        89: aload_1
        90: invokevirtual #223                // Method coursier/util/Artifact.authentication:()Lscala/Option;
        93: invokevirtual #228                // Method scala/Option.isEmpty:()Z
        96: invokevirtual #232                // Method scala/Predef$.assert:(Z)V
        99: aload_0
       100: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
       103: getstatic     #239                // Field coursier/cache/internal/MockCacheEscape$.MODULE$:Lcoursier/cache/internal/MockCacheEscape$;
       106: aload_1
       107: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
       110: invokevirtual #243                // Method coursier/cache/internal/MockCacheEscape$.urlAsPath:(Ljava/lang/String;)Ljava/lang/String;
       113: invokeinterface #249,  2          // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
       118: astore        4
       120: aload_0
       121: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
       124: aload_0
       125: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
       128: getstatic     #256                // Field scala/Option$.MODULE$:Lscala/Option$;
       131: invokevirtual #259                // Method scala/Option$.empty:()Lscala/Option;
       134: invokeinterface #263,  2          // InterfaceMethod coursier/util/Sync.point:(Ljava/lang/Object;)Ljava/lang/Object;
       139: aload_0
       140: aload_1
       141: invokedynamic #275,  0            // InvokeDynamic #1:apply:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function2;
       146: invokeinterface #281,  3          // InterfaceMethod scala/collection/immutable/Seq.foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
       151: astore        5
       153: getstatic     #284                // Field coursier/util/Monad$ops$.MODULE$:Lcoursier/util/Monad$ops$;
       156: aload_0
       157: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
       160: aload_0
       161: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
       164: aload         4
       166: invokedynamic #296,  0            // InvokeDynamic #2:apply$mcZ$sp:(Ljava/nio/file/Path;)Lscala/runtime/java8/JFunction0$mcZ$sp;
       171: invokeinterface #300,  3          // InterfaceMethod coursier/util/Sync.schedule:(Ljava/util/concurrent/ExecutorService;Lscala/Function0;)Ljava/lang/Object;
       176: aload_0
       177: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
       180: invokevirtual #304                // Method coursier/util/Monad$ops$.toAllMonadOps:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
       183: aload_0
       184: aload         4
       186: aload_1
       187: invokedynamic #312,  0            // InvokeDynamic #3:apply:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
       192: invokeinterface #316,  2          // InterfaceMethod coursier/util/Monad$AllOps.flatMap:(Lscala/Function1;)Ljava/lang/Object;
       197: astore        6
       199: getstatic     #284                // Field coursier/util/Monad$ops$.MODULE$:Lcoursier/util/Monad$ops$;
       202: aload         5
       204: aload_0
       205: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
       208: invokevirtual #304                // Method coursier/util/Monad$ops$.toAllMonadOps:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
       211: aload_0
       212: aload         6
       214: invokedynamic #326,  0            // InvokeDynamic #4:apply:(Lcoursier/cache/MockCache;Ljava/lang/Object;)Lscala/Function1;
       219: invokeinterface #316,  2          // InterfaceMethod coursier/util/Monad$AllOps.flatMap:(Lscala/Function1;)Ljava/lang/Object;
       224: astore        7
       226: new           #328                // class coursier/util/EitherT
       229: dup
       230: aload         7
       232: invokespecial #331                // Method coursier/util/EitherT."<init>":(Ljava/lang/Object;)V
       235: invokedynamic #339,  0            // InvokeDynamic #5:apply:()Lscala/Function1;
       240: aload_0
       241: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
       244: invokevirtual #343                // Method coursier/util/EitherT.map:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
       247: areturn
      StackMapTable: number_of_entries = 4
        frame_type = 51 /* same */
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ class java/lang/String ]
        frame_type = 30 /* same */
        frame_type = 247 /* same_locals_1_stack_item_frame_extended */
          offset_delta = 160
          stack = [ class coursier/util/EitherT ]
      LineNumberTable:
        line 56: 0
        line 58: 12
        line 59: 24
        line 61: 51
        line 62: 56
        line 63: 72
        line 66: 86
        line 68: 99
        line 70: 120
        line 71: 139
        line 83: 153
        line 113: 199
        line 117: 226
        line 118: 235
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           56      27     2   url   Ljava/lang/String;
           72      11     3     f   Ljava/io/File;
          120     127     4  path   Ljava/nio/file/Path;
          153      94     5 fromExtraData   Ljava/lang/Object;
          199      48     6 init0   Ljava/lang/Object;
          226      21     7     e   Ljava/lang/Object;
            0     248     0  this   Lcoursier/cache/MockCache;
            0     248     1 artifact   Lcoursier/util/Artifact;
    Signature: #158                         // (Lcoursier/util/Artifact;)Lcoursier/util/EitherT<TF;Lcoursier/cache/ArtifactError;Ljava/io/File;>;
    MethodParameters:
      Name                           Flags
      artifact                       final

  private scala.concurrent.ExecutionContextExecutorService ec$lzycompute();
    descriptor: ()Lscala/concurrent/ExecutionContextExecutorService;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=3, locals=2, args_size=1
         0: aload_0
         1: dup
         2: astore_1
         3: monitorenter
         4: aload_0
         5: getfield      #356                // Field bitmap$0:Z
         8: ifne          30
        11: aload_0
        12: getstatic     #361                // Field scala/concurrent/ExecutionContext$.MODULE$:Lscala/concurrent/ExecutionContext$;
        15: aload_0
        16: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        19: invokevirtual #365                // Method scala/concurrent/ExecutionContext$.fromExecutorService:(Ljava/util/concurrent/ExecutorService;)Lscala/concurrent/ExecutionContextExecutorService;
        22: putfield      #367                // Field ec:Lscala/concurrent/ExecutionContextExecutorService;
        25: aload_0
        26: iconst_1
        27: putfield      #356                // Field bitmap$0:Z
        30: aload_1
        31: monitorexit
        32: goto          38
        35: aload_1
        36: monitorexit
        37: athrow
        38: aload_0
        39: getfield      #367                // Field ec:Lscala/concurrent/ExecutionContextExecutorService;
        42: areturn
      Exception table:
         from    to  target type
             4    30    35   any
      StackMapTable: number_of_entries = 3
        frame_type = 252 /* append */
          offset_delta = 30
          locals = [ class coursier/cache/MockCache ]
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 2 /* same */
      LineNumberTable:
        line 122: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      43     0  this   Lcoursier/cache/MockCache;

  public scala.concurrent.ExecutionContextExecutorService ec();
    descriptor: ()Lscala/concurrent/ExecutionContextExecutorService;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #356                // Field bitmap$0:Z
         4: ifne          14
         7: aload_0
         8: invokespecial #371                // Method ec$lzycompute:()Lscala/concurrent/ExecutionContextExecutorService;
        11: goto          18
        14: aload_0
        15: getfield      #367                // Field ec:Lscala/concurrent/ExecutionContextExecutorService;
        18: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 14 /* same */
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ class scala/concurrent/ExecutionContextExecutorService ]
      LineNumberTable:
        line 122: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      19     0  this   Lcoursier/cache/MockCache;

  public coursier.cache.MockCache<F> withBase(java.nio.file.Path);
    descriptor: (Ljava/nio/file/Path;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_1
         5: aload_0
         6: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
         9: aload_0
        10: invokevirtual #378                // Method writeMissing:()Z
        13: aload_0
        14: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        17: aload_0
        18: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        21: aload_0
        22: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        25: aload_0
        26: invokevirtual #382                // Method proxy:()Lscala/Option;
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1  base   Ljava/nio/file/Path;
    Signature: #376                         // (Ljava/nio/file/Path;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      base                           final

  public coursier.cache.MockCache<F> withExtraData(scala.collection.immutable.Seq<java.nio.file.Path>);
    descriptor: (Lscala/collection/immutable/Seq;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_1
         9: aload_0
        10: invokevirtual #378                // Method writeMissing:()Z
        13: aload_0
        14: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        17: aload_0
        18: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        21: aload_0
        22: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        25: aload_0
        26: invokevirtual #382                // Method proxy:()Lscala/Option;
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1 extraData   Lscala/collection/immutable/Seq;
    Signature: #388                         // (Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      extraData                      final

  public coursier.cache.MockCache<F> withWriteMissing(boolean);
    descriptor: (Z)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_0
         9: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        12: iload_1
        13: aload_0
        14: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        17: aload_0
        18: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        21: aload_0
        22: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        25: aload_0
        26: invokevirtual #382                // Method proxy:()Lscala/Option;
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1 writeMissing   Z
    Signature: #391                         // (Z)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      writeMissing                   final

  public coursier.cache.MockCache<F> withPool(java.util.concurrent.ExecutorService);
    descriptor: (Ljava/util/concurrent/ExecutorService;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_0
         9: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        12: aload_0
        13: invokevirtual #378                // Method writeMissing:()Z
        16: aload_1
        17: aload_0
        18: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        21: aload_0
        22: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        25: aload_0
        26: invokevirtual #382                // Method proxy:()Lscala/Option;
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1  pool   Ljava/util/concurrent/ExecutorService;
    Signature: #394                         // (Ljava/util/concurrent/ExecutorService;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      pool                           final

  public coursier.cache.MockCache<F> withS(coursier.util.Sync<F>);
    descriptor: (Lcoursier/util/Sync;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_0
         9: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        12: aload_0
        13: invokevirtual #378                // Method writeMissing:()Z
        16: aload_0
        17: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        20: aload_1
        21: aload_0
        22: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        25: aload_0
        26: invokevirtual #382                // Method proxy:()Lscala/Option;
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1     S   Lcoursier/util/Sync;
    Signature: #397                         // (Lcoursier/util/Sync<TF;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      S                              final

  public coursier.cache.MockCache<F> withDummyArtifact(scala.Function1<coursier.util.Artifact, java.lang.Object>);
    descriptor: (Lscala/Function1;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_0
         9: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        12: aload_0
        13: invokevirtual #378                // Method writeMissing:()Z
        16: aload_0
        17: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        20: aload_0
        21: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        24: aload_1
        25: aload_0
        26: invokevirtual #382                // Method proxy:()Lscala/Option;
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1 dummyArtifact   Lscala/Function1;
    Signature: #400                         // (Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      dummyArtifact                  final

  public coursier.cache.MockCache<F> withProxy(scala.Option<java.net.Proxy>);
    descriptor: (Lscala/Option;)Lcoursier/cache/MockCache;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=9, locals=2, args_size=2
         0: new           #2                  // class coursier/cache/MockCache
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_0
         9: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        12: aload_0
        13: invokevirtual #378                // Method writeMissing:()Z
        16: aload_0
        17: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        20: aload_0
        21: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        24: aload_0
        25: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        28: aload_1
        29: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        32: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lcoursier/cache/MockCache;
            0      33     1 proxy   Lscala/Option;
    Signature: #403                         // (Lscala/Option<Ljava/net/Proxy;>;)Lcoursier/cache/MockCache<TF;>;
    MethodParameters:
      Name                           Flags
      proxy                          final

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: new           #180                // class java/lang/StringBuilder
         3: dup
         4: ldc_w         #405                // String MockCache(
         7: invokespecial #406                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
        10: astore_1
        11: aload_1
        12: aload_0
        13: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
        16: invokestatic  #410                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
        19: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        22: pop
        23: aload_1
        24: ldc_w         #412                // String ,
        27: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        30: pop
        31: aload_1
        32: aload_0
        33: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        36: invokestatic  #410                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
        39: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        42: pop
        43: aload_1
        44: ldc_w         #412                // String ,
        47: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        50: pop
        51: aload_1
        52: aload_0
        53: invokevirtual #378                // Method writeMissing:()Z
        56: invokestatic  #415                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
        59: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        62: pop
        63: aload_1
        64: ldc_w         #412                // String ,
        67: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        70: pop
        71: aload_1
        72: aload_0
        73: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        76: invokestatic  #410                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
        79: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        82: pop
        83: aload_1
        84: ldc_w         #412                // String ,
        87: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        90: pop
        91: aload_1
        92: aload_0
        93: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        96: invokestatic  #410                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
        99: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       102: pop
       103: aload_1
       104: ldc_w         #412                // String ,
       107: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       110: pop
       111: aload_1
       112: aload_0
       113: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
       116: invokestatic  #410                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
       119: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       122: pop
       123: aload_1
       124: ldc_w         #412                // String ,
       127: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       130: pop
       131: aload_1
       132: aload_0
       133: invokevirtual #382                // Method proxy:()Lscala/Option;
       136: invokestatic  #410                // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
       139: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       142: pop
       143: aload_1
       144: ldc_w         #417                // String )
       147: invokevirtual #189                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       150: pop
       151: aload_1
       152: invokevirtual #194                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       155: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           11     144     1     b   Ljava/lang/StringBuilder;
            0     156     0  this   Lcoursier/cache/MockCache;

  public boolean canEqual(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1
         1: ifnull        15
         4: aload_1
         5: instanceof    #2                  // class coursier/cache/MockCache
         8: ifeq          15
        11: iconst_1
        12: goto          16
        15: iconst_0
        16: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lcoursier/cache/MockCache;
            0      17     1   obj   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      obj                            final

  public boolean equals(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=9, args_size=2
         0: aload_0
         1: aload_1
         2: if_acmpeq     224
         5: aload_0
         6: aload_1
         7: invokevirtual #425                // Method canEqual:(Ljava/lang/Object;)Z
        10: ifeq          228
        13: aload_1
        14: checkcast     #2                  // class coursier/cache/MockCache
        17: astore_2
        18: iconst_1
        19: ifeq          220
        22: aload_0
        23: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
        26: aload_2
        27: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
        30: astore_3
        31: dup
        32: ifnonnull     43
        35: pop
        36: aload_3
        37: ifnull        50
        40: goto          220
        43: aload_3
        44: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        47: ifeq          220
        50: aload_0
        51: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        54: aload_2
        55: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        58: astore        4
        60: dup
        61: ifnonnull     73
        64: pop
        65: aload         4
        67: ifnull        81
        70: goto          220
        73: aload         4
        75: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        78: ifeq          220
        81: aload_0
        82: invokevirtual #378                // Method writeMissing:()Z
        85: aload_2
        86: invokevirtual #378                // Method writeMissing:()Z
        89: if_icmpne     220
        92: aload_0
        93: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        96: aload_2
        97: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
       100: astore        5
       102: dup
       103: ifnonnull     115
       106: pop
       107: aload         5
       109: ifnull        123
       112: goto          220
       115: aload         5
       117: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       120: ifeq          220
       123: aload_0
       124: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
       127: aload_2
       128: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
       131: astore        6
       133: dup
       134: ifnonnull     146
       137: pop
       138: aload         6
       140: ifnull        154
       143: goto          220
       146: aload         6
       148: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       151: ifeq          220
       154: aload_0
       155: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
       158: aload_2
       159: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
       162: astore        7
       164: dup
       165: ifnonnull     177
       168: pop
       169: aload         7
       171: ifnull        185
       174: goto          220
       177: aload         7
       179: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       182: ifeq          220
       185: aload_0
       186: invokevirtual #382                // Method proxy:()Lscala/Option;
       189: aload_2
       190: invokevirtual #382                // Method proxy:()Lscala/Option;
       193: astore        8
       195: dup
       196: ifnonnull     208
       199: pop
       200: aload         8
       202: ifnull        216
       205: goto          220
       208: aload         8
       210: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       213: ifeq          220
       216: iconst_1
       217: goto          221
       220: iconst_0
       221: ifeq          228
       224: iconst_1
       225: goto          229
       228: iconst_0
       229: ireturn
      StackMapTable: number_of_entries = 17
        frame_type = 255 /* full_frame */
          offset_delta = 43
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache, class java/nio/file/Path ]
          stack = [ class java/nio/file/Path ]
        frame_type = 6 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 22
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache, class java/nio/file/Path, class scala/collection/immutable/Seq ]
          stack = [ class scala/collection/immutable/Seq ]
        frame_type = 7 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 33
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache, class java/nio/file/Path, class scala/collection/immutable/Seq, class java/util/concurrent/ExecutorService ]
          stack = [ class java/util/concurrent/ExecutorService ]
        frame_type = 7 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 22
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache, class java/nio/file/Path, class scala/collection/immutable/Seq, class java/util/concurrent/ExecutorService, class coursier/util/Sync ]
          stack = [ class coursier/util/Sync ]
        frame_type = 7 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 22
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache, class java/nio/file/Path, class scala/collection/immutable/Seq, class java/util/concurrent/ExecutorService, class coursier/util/Sync, class scala/Function1 ]
          stack = [ class scala/Function1 ]
        frame_type = 7 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 22
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache, class java/nio/file/Path, class scala/collection/immutable/Seq, class java/util/concurrent/ExecutorService, class coursier/util/Sync, class scala/Function1, class scala/Option ]
          stack = [ class scala/Option ]
        frame_type = 7 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 3
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class coursier/cache/MockCache ]
          stack = []
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 3 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           18     203     2 other   Lcoursier/cache/MockCache;
            0     230     0  this   Lcoursier/cache/MockCache;
            0     230     1   obj   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      obj                            final

  public int hashCode();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=1
         0: bipush        17
         2: ldc_w         #438                // String MockCache
         5: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
         8: iadd
         9: istore_1
        10: bipush        37
        12: iload_1
        13: imul
        14: aload_0
        15: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
        18: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
        21: iadd
        22: istore_1
        23: bipush        37
        25: iload_1
        26: imul
        27: aload_0
        28: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        31: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
        34: iadd
        35: istore_1
        36: bipush        37
        38: iload_1
        39: imul
        40: aload_0
        41: invokevirtual #378                // Method writeMissing:()Z
        44: ifeq          53
        47: sipush        1231
        50: goto          56
        53: sipush        1237
        56: iadd
        57: istore_1
        58: bipush        37
        60: iload_1
        61: imul
        62: aload_0
        63: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        66: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
        69: iadd
        70: istore_1
        71: bipush        37
        73: iload_1
        74: imul
        75: aload_0
        76: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        79: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
        82: iadd
        83: istore_1
        84: bipush        37
        86: iload_1
        87: imul
        88: aload_0
        89: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        92: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
        95: iadd
        96: istore_1
        97: bipush        37
        99: iload_1
       100: imul
       101: aload_0
       102: invokevirtual #382                // Method proxy:()Lscala/Option;
       105: invokestatic  #444                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
       108: iadd
       109: istore_1
       110: bipush        37
       112: iload_1
       113: imul
       114: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 53
          locals = [ class coursier/cache/MockCache, int ]
          stack = [ int ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/cache/MockCache, int ]
          stack = [ int, int ]
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           10     104     1  code   I
            0     115     0  this   Lcoursier/cache/MockCache;

  private scala.Tuple7<java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, java.lang.Object, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>, scala.Option<java.net.Proxy>> tuple();
    descriptor: ()Lscala/Tuple7;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=9, locals=1, args_size=1
         0: new           #451                // class scala/Tuple7
         3: dup
         4: aload_0
         5: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
         8: aload_0
         9: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        12: aload_0
        13: invokevirtual #378                // Method writeMissing:()Z
        16: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        19: aload_0
        20: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        23: aload_0
        24: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        27: aload_0
        28: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        31: aload_0
        32: invokevirtual #382                // Method proxy:()Lscala/Option;
        35: invokespecial #460                // Method scala/Tuple7."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
        38: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      39     0  this   Lcoursier/cache/MockCache;
    Signature: #449                         // ()Lscala/Tuple7<Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;Ljava/lang/Object;Ljava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;>;

  public java.lang.String productPrefix();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: ldc_w         #438                // String MockCache
         3: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lcoursier/cache/MockCache;

  public int productArity();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: bipush        7
         2: ireturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lcoursier/cache/MockCache;

  public java.lang.Object productElement(int);
    descriptor: (I)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: iload_1
         1: istore_2
         2: iload_2
         3: tableswitch   { // 0 to 6
                       0: 44
                       1: 51
                       2: 58
                       3: 68
                       4: 75
                       5: 82
                       6: 89
                 default: 96
            }
        44: aload_0
        45: invokevirtual #234                // Method base:()Ljava/nio/file/Path;
        48: goto          111
        51: aload_0
        52: invokevirtual #251                // Method extraData:()Lscala/collection/immutable/Seq;
        55: goto          111
        58: aload_0
        59: invokevirtual #378                // Method writeMissing:()Z
        62: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        65: goto          111
        68: aload_0
        69: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        72: goto          111
        75: aload_0
        76: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        79: goto          111
        82: aload_0
        83: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
        86: goto          111
        89: aload_0
        90: invokevirtual #382                // Method proxy:()Lscala/Option;
        93: goto          111
        96: new           #467                // class java/lang/IndexOutOfBoundsException
        99: dup
       100: iload_2
       101: invokestatic  #471                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
       104: invokevirtual #472                // Method java/lang/Object.toString:()Ljava/lang/String;
       107: invokespecial #473                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
       110: athrow
       111: areturn
      StackMapTable: number_of_entries = 9
        frame_type = 252 /* append */
          offset_delta = 44
          locals = [ int ]
        frame_type = 6 /* same */
        frame_type = 6 /* same */
        frame_type = 9 /* same */
        frame_type = 6 /* same */
        frame_type = 6 /* same */
        frame_type = 6 /* same */
        frame_type = 6 /* same */
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class java/lang/Object ]
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     112     0  this   Lcoursier/cache/MockCache;
            0     112     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public java.lang.String productElementName(int);
    descriptor: (I)Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: iload_1
         1: istore_2
         2: iload_2
         3: tableswitch   { // 0 to 6
                       0: 44
                       1: 50
                       2: 56
                       3: 62
                       4: 68
                       5: 74
                       6: 80
                 default: 86
            }
        44: ldc_w         #476                // String base
        47: goto          101
        50: ldc_w         #477                // String extraData
        53: goto          101
        56: ldc_w         #478                // String writeMissing
        59: goto          101
        62: ldc_w         #479                // String pool
        65: goto          101
        68: ldc_w         #480                // String S
        71: goto          101
        74: ldc_w         #481                // String dummyArtifact
        77: goto          101
        80: ldc_w         #482                // String proxy
        83: goto          101
        86: new           #467                // class java/lang/IndexOutOfBoundsException
        89: dup
        90: iload_2
        91: invokestatic  #471                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
        94: invokevirtual #472                // Method java/lang/Object.toString:()Ljava/lang/String;
        97: invokespecial #473                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
       100: athrow
       101: areturn
      StackMapTable: number_of_entries = 9
        frame_type = 252 /* append */
          offset_delta = 44
          locals = [ int ]
        frame_type = 5 /* same */
        frame_type = 5 /* same */
        frame_type = 5 /* same */
        frame_type = 5 /* same */
        frame_type = 5 /* same */
        frame_type = 5 /* same */
        frame_type = 5 /* same */
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class java/lang/String ]
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     102     0  this   Lcoursier/cache/MockCache;
            0     102     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.concurrent.ExecutionContext ec();
    descriptor: ()Lscala/concurrent/ExecutionContext;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #485                // Method ec:()Lscala/concurrent/ExecutionContextExecutorService;
         4: areturn
      LineNumberTable:
        line 18: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/MockCache;

  public static final java.io.InputStream $anonfun$fetch$2(coursier.cache.MockCache, coursier.util.Artifact);
    descriptor: (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: getstatic     #494                // Field coursier/cache/ConnectionBuilder$.MODULE$:Lcoursier/cache/ConnectionBuilder$;
         3: aload_1
         4: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
         7: invokevirtual #497                // Method coursier/cache/ConnectionBuilder$.apply:(Ljava/lang/String;)Lcoursier/cache/ConnectionBuilder;
        10: aload_1
        11: invokevirtual #223                // Method coursier/util/Artifact.authentication:()Lscala/Option;
        14: invokevirtual #503                // Method coursier/cache/ConnectionBuilder.withAuthentication:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
        17: aload_0
        18: invokevirtual #382                // Method proxy:()Lscala/Option;
        21: invokevirtual #505                // Method coursier/cache/ConnectionBuilder.withProxy:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
        24: invokevirtual #509                // Method coursier/cache/ConnectionBuilder.connection:()Ljava/net/URLConnection;
        27: invokevirtual #515                // Method java/net/URLConnection.getInputStream:()Ljava/io/InputStream;
        30: areturn
      LineNumberTable:
        line 39: 0
        line 40: 10
        line 41: 17
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      31     0 $this   Lcoursier/cache/MockCache;
            0      31     1 artifact0$1   Lcoursier/util/Artifact;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      artifact0$1                    final

  public static final java.lang.String $anonfun$fetch$3(coursier.cache.ArtifactError);
    descriptor: (Lcoursier/cache/ArtifactError;)Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #521                // Method coursier/cache/ArtifactError.describe:()Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0   x$3   Lcoursier/cache/ArtifactError;
    MethodParameters:
      Name                           Flags
      x$3                            final

  public static final java.io.FileInputStream $anonfun$fetch$5(java.io.File);
    descriptor: (Ljava/io/File;)Ljava/io/FileInputStream;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=1, args_size=1
         0: new           #527                // class java/io/FileInputStream
         3: dup
         4: aload_0
         5: invokespecial #530                // Method java/io/FileInputStream."<init>":(Ljava/io/File;)V
         8: areturn
      LineNumberTable:
        line 50: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0   f$1   Ljava/io/File;
    MethodParameters:
      Name                           Flags
      f$1                            final

  public static final coursier.util.EitherT $anonfun$fetch$4(coursier.cache.MockCache, boolean, coursier.util.Artifact, java.io.File);
    descriptor: (Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=7, locals=4, args_size=4
         0: new           #328                // class coursier/util/EitherT
         3: dup
         4: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
         7: aload_3
         8: invokedynamic #543,  0            // InvokeDynamic #6:apply:(Ljava/io/File;)Lscala/Function0;
        13: iload_1
        14: ifeq          31
        17: new           #545                // class scala/Some
        20: dup
        21: aload_2
        22: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        25: invokespecial #546                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        28: goto          34
        31: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
        34: aload_0
        35: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
        38: invokevirtual #557                // Method coursier/cache/MockCache$.coursier$cache$MockCache$$readFully:(Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
        41: invokespecial #331                // Method coursier/util/EitherT."<init>":(Ljava/lang/Object;)V
        44: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 31
          locals = [ class coursier/cache/MockCache, int, class coursier/util/Artifact, class java/io/File ]
          stack = [ uninitialized 0, uninitialized 0, class coursier/cache/MockCache$, class scala/Function0 ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/cache/MockCache, int, class coursier/util/Artifact, class java/io/File ]
          stack = [ uninitialized 0, uninitialized 0, class coursier/cache/MockCache$, class scala/Function0, class scala/Option ]
      LineNumberTable:
        line 50: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      45     0 $this   Lcoursier/cache/MockCache;
            0      45     1 links$1   Z
            0      45     2 artifact0$1   Lcoursier/util/Artifact;
            0      45     3     f   Ljava/io/File;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      links$1                        final
      artifact0$1                    final
      f                              final

  public static final coursier.util.EitherT $anonfun$fetch$1(coursier.cache.MockCache, coursier.util.Artifact);
    descriptor: (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=7, locals=9, args_size=2
         0: aload_1
         1: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
         4: ldc_w         #559                // String /.links
         7: invokevirtual #178                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
        10: ifeq          50
        13: new           #561                // class scala/Tuple2
        16: dup
        17: aload_1
        18: getstatic     #566                // Field scala/collection/StringOps$.MODULE$:Lscala/collection/StringOps$;
        21: getstatic     #220                // Field scala/Predef$.MODULE$:Lscala/Predef$;
        24: aload_1
        25: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        28: invokevirtual #569                // Method scala/Predef$.augmentString:(Ljava/lang/String;)Ljava/lang/String;
        31: ldc_w         #571                // String .links
        34: invokevirtual #575                // Method scala/collection/StringOps$.stripSuffix$extension:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        37: invokevirtual #579                // Method coursier/util/Artifact.withUrl:(Ljava/lang/String;)Lcoursier/util/Artifact;
        40: iconst_1
        41: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        44: invokespecial #582                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
        47: goto          62
        50: new           #561                // class scala/Tuple2
        53: dup
        54: aload_1
        55: iconst_0
        56: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        59: invokespecial #582                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
        62: astore        4
        64: aload         4
        66: ifnull        104
        69: aload         4
        71: invokevirtual #585                // Method scala/Tuple2._1:()Ljava/lang/Object;
        74: checkcast     #161                // class coursier/util/Artifact
        77: astore        5
        79: aload         4
        81: invokevirtual #588                // Method scala/Tuple2._2$mcZ$sp:()Z
        84: istore        6
        86: new           #561                // class scala/Tuple2
        89: dup
        90: aload         5
        92: iload         6
        94: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        97: invokespecial #582                // Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
       100: astore_2
       101: goto          117
       104: goto          107
       107: new           #590                // class scala/MatchError
       110: dup
       111: aload         4
       113: invokespecial #591                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       116: athrow
       117: aload_2
       118: astore_3
       119: aload_3
       120: invokevirtual #585                // Method scala/Tuple2._1:()Ljava/lang/Object;
       123: checkcast     #161                // class coursier/util/Artifact
       126: astore        7
       128: aload_3
       129: invokevirtual #588                // Method scala/Tuple2._2$mcZ$sp:()Z
       132: istore        8
       134: aload_0
       135: invokevirtual #382                // Method proxy:()Lscala/Option;
       138: invokevirtual #594                // Method scala/Option.nonEmpty:()Z
       141: ifne          158
       144: aload         7
       146: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
       149: ldc_w         #596                // String http://localhost:
       152: invokevirtual #173                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       155: ifeq          209
       158: new           #328                // class coursier/util/EitherT
       161: dup
       162: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
       165: aload_0
       166: aload         7
       168: invokedynamic #603,  0            // InvokeDynamic #7:apply:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lscala/Function0;
       173: iload         8
       175: ifeq          193
       178: new           #545                // class scala/Some
       181: dup
       182: aload         7
       184: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
       187: invokespecial #546                // Method scala/Some."<init>":(Ljava/lang/Object;)V
       190: goto          196
       193: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
       196: aload_0
       197: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
       200: invokevirtual #557                // Method coursier/cache/MockCache$.coursier$cache$MockCache$$readFully:(Lscala/Function0;Lscala/Option;Lcoursier/util/Sync;)Ljava/lang/Object;
       203: invokespecial #331                // Method coursier/util/EitherT."<init>":(Ljava/lang/Object;)V
       206: goto          244
       209: aload_0
       210: aload         7
       212: invokevirtual #605                // Method file:(Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
       215: invokedynamic #610,  0            // InvokeDynamic #8:apply:()Lscala/Function1;
       220: aload_0
       221: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
       224: invokevirtual #613                // Method coursier/util/EitherT.leftMap:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
       227: aload_0
       228: iload         8
       230: aload         7
       232: invokedynamic #621,  0            // InvokeDynamic #9:apply:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;)Lscala/Function1;
       237: aload_0
       238: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
       241: invokevirtual #623                // Method coursier/util/EitherT.flatMap:(Lscala/Function1;Lcoursier/util/Monad;)Lcoursier/util/EitherT;
       244: areturn
      StackMapTable: number_of_entries = 10
        frame_type = 50 /* same */
        frame_type = 75 /* same_locals_1_stack_item */
          stack = [ class scala/Tuple2 ]
        frame_type = 254 /* append */
          offset_delta = 41
          locals = [ top, top, class scala/Tuple2 ]
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/cache/MockCache, class coursier/util/Artifact, class scala/Tuple2, top, class scala/Tuple2, class coursier/util/Artifact, int ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 40
          locals = [ class coursier/cache/MockCache, class coursier/util/Artifact, class scala/Tuple2, class scala/Tuple2, class scala/Tuple2, class coursier/util/Artifact, int, class coursier/util/Artifact, int ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 34
          locals = [ class coursier/cache/MockCache, class coursier/util/Artifact, class scala/Tuple2, class scala/Tuple2, class scala/Tuple2, class coursier/util/Artifact, int, class coursier/util/Artifact, int ]
          stack = [ uninitialized 158, uninitialized 158, class coursier/cache/MockCache$, class scala/Function0 ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/cache/MockCache, class coursier/util/Artifact, class scala/Tuple2, class scala/Tuple2, class scala/Tuple2, class coursier/util/Artifact, int, class coursier/util/Artifact, int ]
          stack = [ uninitialized 158, uninitialized 158, class coursier/cache/MockCache$, class scala/Function0, class scala/Option ]
        frame_type = 12 /* same */
        frame_type = 98 /* same_locals_1_stack_item */
          stack = [ class coursier/util/EitherT ]
      LineNumberTable:
        line 34: 0
        line 35: 50
        line 33: 64
        line 34: 107
        line 33: 119
        line 37: 134
        line 38: 158
        line 43: 165
        line 44: 173
        line 38: 196
        line 47: 209
        line 48: 215
        line 49: 227
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           79      25     5 artifact0   Lcoursier/util/Artifact;
           86      18     6 links   Z
          128     116     7 artifact0   Lcoursier/util/Artifact;
          134     110     8 links   Z
            0     245     0 $this   Lcoursier/cache/MockCache;
            0     245     1 artifact   Lcoursier/util/Artifact;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      artifact                       final

  public static final boolean $anonfun$file$3(java.nio.file.Path);
    descriptor: (Ljava/nio/file/Path;)Z
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: iconst_0
         2: anewarray     #629                // class java/nio/file/LinkOption
         5: invokestatic  #635                // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
         8: ireturn
      LineNumberTable:
        line 76: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 path$1   Ljava/nio/file/Path;
    MethodParameters:
      Name                           Flags
      path$1                         final

  public static final scala.Option $anonfun$file$4(java.nio.file.Path, boolean);
    descriptor: (Ljava/nio/file/Path;Z)Lscala/Option;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=4, args_size=2
         0: iload_1
         1: istore_3
         2: iconst_1
         3: iload_3
         4: if_icmpne     19
         7: new           #545                // class scala/Some
        10: dup
        11: aload_0
        12: invokespecial #546                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        15: astore_2
        16: goto          49
        19: goto          22
        22: iconst_0
        23: iload_3
        24: if_icmpne     34
        27: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
        30: astore_2
        31: goto          49
        34: goto          37
        37: new           #590                // class scala/MatchError
        40: dup
        41: iload_3
        42: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        45: invokespecial #591                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
        48: athrow
        49: aload_2
        50: areturn
      StackMapTable: number_of_entries = 5
        frame_type = 253 /* append */
          offset_delta = 19
          locals = [ top, int ]
        frame_type = 2 /* same */
        frame_type = 11 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 11
          locals = [ class java/nio/file/Path, int, class scala/Option, int ]
          stack = []
      LineNumberTable:
        line 76: 0
        line 77: 2
        line 78: 22
        line 76: 37
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      51     0 path$1   Ljava/nio/file/Path;
            0      51     1  x0$2   Z
    MethodParameters:
      Name                           Flags
      path$1                         final
      x0$2                           final

  public static final java.lang.Object $anonfun$file$2(coursier.cache.MockCache, java.lang.Object, java.nio.file.Path, coursier.util.Artifact, scala.Option);
    descriptor: (Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=8, args_size=5
         0: aload         4
         2: astore        6
         4: aload         6
         6: instanceof    #545                // class scala/Some
         9: ifeq          18
        12: aload_1
        13: astore        5
        15: goto          110
        18: goto          21
        21: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
        24: aload         6
        26: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        29: ifeq          97
        32: aload_2
        33: getstatic     #239                // Field coursier/cache/internal/MockCacheEscape$.MODULE$:Lcoursier/cache/internal/MockCacheEscape$;
        36: aload_3
        37: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        40: invokevirtual #243                // Method coursier/cache/internal/MockCacheEscape$.urlAsPath:(Ljava/lang/String;)Ljava/lang/String;
        43: invokeinterface #249,  2          // InterfaceMethod java/nio/file/Path.resolve:(Ljava/lang/String;)Ljava/nio/file/Path;
        48: astore        7
        50: getstatic     #284                // Field coursier/util/Monad$ops$.MODULE$:Lcoursier/util/Monad$ops$;
        53: aload_0
        54: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        57: aload_0
        58: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        61: aload         7
        63: invokedynamic #648,  0            // InvokeDynamic #10:apply$mcZ$sp:(Ljava/nio/file/Path;)Lscala/runtime/java8/JFunction0$mcZ$sp;
        68: invokeinterface #300,  3          // InterfaceMethod coursier/util/Sync.schedule:(Ljava/util/concurrent/ExecutorService;Lscala/Function0;)Ljava/lang/Object;
        73: aload_0
        74: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
        77: invokevirtual #304                // Method coursier/util/Monad$ops$.toAllMonadOps:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
        80: aload         7
        82: invokedynamic #658,  0            // InvokeDynamic #11:apply:(Ljava/nio/file/Path;)Lscala/Function1;
        87: invokeinterface #660,  2          // InterfaceMethod coursier/util/Monad$AllOps.map:(Lscala/Function1;)Ljava/lang/Object;
        92: astore        5
        94: goto          110
        97: goto          100
       100: new           #590                // class scala/MatchError
       103: dup
       104: aload         6
       106: invokespecial #591                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       109: athrow
       110: aload         5
       112: areturn
      StackMapTable: number_of_entries = 5
        frame_type = 253 /* append */
          offset_delta = 18
          locals = [ top, class scala/Option ]
        frame_type = 2 /* same */
        frame_type = 251 /* same_frame_extended */
          offset_delta = 75
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class java/nio/file/Path, class coursier/util/Artifact, class scala/Option, class java/lang/Object, class scala/Option ]
          stack = []
      LineNumberTable:
        line 72: 0
        line 73: 4
        line 74: 21
        line 75: 32
        line 76: 50
        line 74: 97
        line 72: 100
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           50      42     7  path   Ljava/nio/file/Path;
            0     113     0 $this   Lcoursier/cache/MockCache;
            0     113     1 acc$1   Ljava/lang/Object;
            0     113     2   p$1   Ljava/nio/file/Path;
            0     113     3 artifact$1   Lcoursier/util/Artifact;
            0     113     4  x0$1   Lscala/Option;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      acc$1                          final
      p$1                            final
      artifact$1                     final
      x0$1                           final

  public static final java.lang.Object $anonfun$file$1(coursier.cache.MockCache, coursier.util.Artifact, java.lang.Object, java.nio.file.Path);
    descriptor: (Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=5, locals=4, args_size=4
         0: getstatic     #284                // Field coursier/util/Monad$ops$.MODULE$:Lcoursier/util/Monad$ops$;
         3: aload_2
         4: aload_0
         5: invokespecial #211                // Method S0:()Lcoursier/util/Sync;
         8: invokevirtual #304                // Method coursier/util/Monad$ops$.toAllMonadOps:(Ljava/lang/Object;Lcoursier/util/Monad;)Lcoursier/util/Monad$AllOps;
        11: aload_0
        12: aload_2
        13: aload_3
        14: aload_1
        15: invokedynamic #668,  0            // InvokeDynamic #12:apply:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function1;
        20: invokeinterface #316,  2          // InterfaceMethod coursier/util/Monad$AllOps.flatMap:(Lscala/Function1;)Ljava/lang/Object;
        25: areturn
      LineNumberTable:
        line 72: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      26     0 $this   Lcoursier/cache/MockCache;
            0      26     1 artifact$1   Lcoursier/util/Artifact;
            0      26     2   acc   Ljava/lang/Object;
            0      26     3     p   Ljava/nio/file/Path;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      artifact$1                     final
      acc                            final
      p                              final

  public static final boolean $anonfun$file$5(java.nio.file.Path);
    descriptor: (Ljava/nio/file/Path;)Z
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: iconst_0
         2: anewarray     #629                // class java/nio/file/LinkOption
         5: invokestatic  #635                // Method java/nio/file/Files.exists:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
         8: ireturn
      LineNumberTable:
        line 83: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 path$2   Ljava/nio/file/Path;
    MethodParameters:
      Name                           Flags
      path$2                         final

  private final java.io.InputStream is$1(coursier.util.Artifact);
    descriptor: (Lcoursier/util/Artifact;)Ljava/io/InputStream;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=3, locals=2, args_size=2
         0: aload_0
         1: invokevirtual #380                // Method dummyArtifact:()Lscala/Function1;
         4: aload_1
         5: invokeinterface #673,  2          // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
        10: invokestatic  #676                // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
        13: ifeq          32
        16: new           #678                // class java/io/ByteArrayInputStream
        19: dup
        20: getstatic     #683                // Field scala/Array$.MODULE$:Lscala/Array$;
        23: invokevirtual #687                // Method scala/Array$.emptyByteArray:()[B
        26: invokespecial #690                // Method java/io/ByteArrayInputStream."<init>":([B)V
        29: goto          55
        32: getstatic     #494                // Field coursier/cache/ConnectionBuilder$.MODULE$:Lcoursier/cache/ConnectionBuilder$;
        35: aload_1
        36: invokevirtual #165                // Method coursier/util/Artifact.url:()Ljava/lang/String;
        39: invokevirtual #497                // Method coursier/cache/ConnectionBuilder$.apply:(Ljava/lang/String;)Lcoursier/cache/ConnectionBuilder;
        42: aload_1
        43: invokevirtual #223                // Method coursier/util/Artifact.authentication:()Lscala/Option;
        46: invokevirtual #503                // Method coursier/cache/ConnectionBuilder.withAuthentication:(Lscala/Option;)Lcoursier/cache/ConnectionBuilder;
        49: invokevirtual #509                // Method coursier/cache/ConnectionBuilder.connection:()Ljava/net/URLConnection;
        52: invokevirtual #515                // Method java/net/URLConnection.getInputStream:()Ljava/io/InputStream;
        55: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 32 /* same */
        frame_type = 86 /* same_locals_1_stack_item */
          stack = [ class java/io/InputStream ]
      LineNumberTable:
        line 90: 0
        line 91: 16
        line 93: 32
        line 94: 42
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      56     0  this   Lcoursier/cache/MockCache;
            0      56     1 artifact$1   Lcoursier/util/Artifact;
    MethodParameters:
      Name                           Flags
      artifact$1                     final

  public static final scala.util.Right $anonfun$file$7(coursier.cache.MockCache, java.nio.file.Path, coursier.util.Artifact);
    descriptor: (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=4, args_size=3
         0: aload_1
         1: invokeinterface #697,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
         6: invokestatic  #703                // Method coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
         9: getstatic     #67                 // Field coursier/cache/MockCache$.MODULE$:Lcoursier/cache/MockCache$;
        12: aload_0
        13: aload_2
        14: invokespecial #705                // Method is$1:(Lcoursier/util/Artifact;)Ljava/io/InputStream;
        17: invokevirtual #709                // Method coursier/cache/MockCache$.coursier$cache$MockCache$$readFullySync:(Ljava/io/InputStream;)[B
        20: astore_3
        21: aload_1
        22: aload_3
        23: iconst_0
        24: anewarray     #711                // class java/nio/file/OpenOption
        27: invokestatic  #715                // Method java/nio/file/Files.write:(Ljava/nio/file/Path;[B[Ljava/nio/file/OpenOption;)Ljava/nio/file/Path;
        30: pop
        31: getstatic     #720                // Field scala/package$.MODULE$:Lscala/package$;
        34: invokevirtual #724                // Method scala/package$.Right:()Lscala/util/Right$;
        37: aload_1
        38: invokevirtual #729                // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        41: areturn
      LineNumberTable:
        line 88: 0
        line 97: 9
        line 98: 21
        line 99: 31
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           21      20     3     b   [B
            0      42     0 $this   Lcoursier/cache/MockCache;
            0      42     1 path$2   Ljava/nio/file/Path;
            0      42     2 artifact$1   Lcoursier/util/Artifact;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      path$2                         final
      artifact$1                     final

  public static final java.lang.Object $anonfun$file$6(coursier.cache.MockCache, java.nio.file.Path, coursier.util.Artifact, boolean);
    descriptor: (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Z)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=6, locals=8, args_size=4
         0: iload_3
         1: istore        5
         3: iconst_1
         4: iload         5
         6: if_icmpne     33
         9: aload_0
        10: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        13: getstatic     #720                // Field scala/package$.MODULE$:Lscala/package$;
        16: invokevirtual #724                // Method scala/package$.Right:()Lscala/util/Right$;
        19: aload_1
        20: invokevirtual #729                // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        23: invokeinterface #263,  2          // InterfaceMethod coursier/util/Sync.point:(Ljava/lang/Object;)Ljava/lang/Object;
        28: astore        4
        30: goto          155
        33: goto          36
        36: iconst_0
        37: iload         5
        39: if_icmpne     139
        42: aload_0
        43: invokevirtual #378                // Method writeMissing:()Z
        46: ifeq          95
        49: aload_0
        50: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        53: aload_0
        54: invokevirtual #286                // Method pool:()Ljava/util/concurrent/ExecutorService;
        57: aload_0
        58: aload_1
        59: aload_2
        60: invokedynamic #741,  0            // InvokeDynamic #13:apply:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/Function0;
        65: invokeinterface #300,  3          // InterfaceMethod coursier/util/Sync.schedule:(Ljava/util/concurrent/ExecutorService;Lscala/Function0;)Ljava/lang/Object;
        70: astore        7
        72: aload_0
        73: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        76: aload         7
        78: new           #25                 // class coursier/cache/MockCache$$anonfun$1
        81: dup
        82: aconst_null
        83: aload_2
        84: invokespecial #744                // Method coursier/cache/MockCache$$anonfun$1."<init>":(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)V
        87: invokeinterface #748,  3          // InterfaceMethod coursier/util/Sync.handle:(Ljava/lang/Object;Lscala/PartialFunction;)Ljava/lang/Object;
        92: goto          130
        95: aload_0
        96: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        99: getstatic     #720                // Field scala/package$.MODULE$:Lscala/package$;
       102: invokevirtual #752                // Method scala/package$.Left:()Lscala/util/Left$;
       105: new           #15                 // class coursier/cache/ArtifactError$NotFound
       108: dup
       109: aload_1
       110: invokevirtual #472                // Method java/lang/Object.toString:()Ljava/lang/String;
       113: getstatic     #755                // Field coursier/cache/ArtifactError$NotFound$.MODULE$:Lcoursier/cache/ArtifactError$NotFound$;
       116: invokevirtual #758                // Method coursier/cache/ArtifactError$NotFound$.$lessinit$greater$default$2:()Lscala/Option;
       119: invokespecial #761                // Method coursier/cache/ArtifactError$NotFound."<init>":(Ljava/lang/String;Lscala/Option;)V
       122: invokevirtual #766                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
       125: invokeinterface #263,  2          // InterfaceMethod coursier/util/Sync.point:(Ljava/lang/Object;)Ljava/lang/Object;
       130: astore        6
       132: aload         6
       134: astore        4
       136: goto          155
       139: goto          142
       142: new           #590                // class scala/MatchError
       145: dup
       146: iload         5
       148: invokestatic  #457                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
       151: invokespecial #591                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       154: athrow
       155: aload         4
       157: areturn
      StackMapTable: number_of_entries = 7
        frame_type = 253 /* append */
          offset_delta = 33
          locals = [ top, int ]
        frame_type = 2 /* same */
        frame_type = 58 /* same */
        frame_type = 98 /* same_locals_1_stack_item */
          stack = [ class java/lang/Object ]
        frame_type = 8 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 12
          locals = [ class coursier/cache/MockCache, class java/nio/file/Path, class coursier/util/Artifact, int, class java/lang/Object, int ]
          stack = []
      LineNumberTable:
        line 83: 0
        line 84: 3
        line 85: 36
        line 86: 42
        line 87: 49
        line 102: 72
        line 109: 95
        line 110: 132
        line 85: 139
        line 83: 142
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           72      20     7     f   Ljava/lang/Object;
          132       2     6   res   Ljava/lang/Object;
            0     158     0 $this   Lcoursier/cache/MockCache;
            0     158     1 path$2   Ljava/nio/file/Path;
            0     158     2 artifact$1   Lcoursier/util/Artifact;
            0     158     3  x0$3   Z
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      path$2                         final
      artifact$1                     final
      x0$3                           final

  public static final java.lang.Object $anonfun$file$8(coursier.cache.MockCache, java.lang.Object, scala.Option);
    descriptor: (Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=7, args_size=3
         0: aload_2
         1: astore        4
         3: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
         6: aload         4
         8: invokevirtual #429                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        11: ifeq          19
        14: aload_1
        15: astore_3
        16: goto          84
        19: goto          22
        22: aload         4
        24: instanceof    #545                // class scala/Some
        27: ifeq          71
        30: aload         4
        32: checkcast     #545                // class scala/Some
        35: astore        5
        37: aload         5
        39: invokevirtual #772                // Method scala/Some.value:()Ljava/lang/Object;
        42: checkcast     #245                // class java/nio/file/Path
        45: astore        6
        47: aload_0
        48: invokevirtual #133                // Method S:()Lcoursier/util/Sync;
        51: getstatic     #720                // Field scala/package$.MODULE$:Lscala/package$;
        54: invokevirtual #724                // Method scala/package$.Right:()Lscala/util/Right$;
        57: aload         6
        59: invokevirtual #729                // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        62: invokeinterface #263,  2          // InterfaceMethod coursier/util/Sync.point:(Ljava/lang/Object;)Ljava/lang/Object;
        67: astore_3
        68: goto          84
        71: goto          74
        74: new           #590                // class scala/MatchError
        77: dup
        78: aload         4
        80: invokespecial #591                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
        83: athrow
        84: aload_3
        85: areturn
      StackMapTable: number_of_entries = 5
        frame_type = 253 /* append */
          offset_delta = 19
          locals = [ top, class scala/Option ]
        frame_type = 2 /* same */
        frame_type = 48 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/cache/MockCache, class java/lang/Object, class scala/Option, class java/lang/Object, class scala/Option ]
          stack = []
      LineNumberTable:
        line 113: 0
        line 114: 3
        line 115: 22
        line 113: 74
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           47      24     6     f   Ljava/nio/file/Path;
            0      86     0 $this   Lcoursier/cache/MockCache;
            0      86     1 init0$1   Ljava/lang/Object;
            0      86     2  x0$4   Lscala/Option;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      init0$1                        final
      x0$4                           final

  public static final java.io.File $anonfun$file$9(java.nio.file.Path);
    descriptor: (Ljava/nio/file/Path;)Ljava/io/File;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokeinterface #777,  1          // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
         6: areturn
      LineNumberTable:
        line 118: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0   x$4   Ljava/nio/file/Path;
    MethodParameters:
      Name                           Flags
      x$4                            final

  public coursier.cache.MockCache(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>, scala.Option<java.net.Proxy>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=8, args_size=8
         0: aload_0
         1: aload_1
         2: putfield      #110                // Field base:Ljava/nio/file/Path;
         5: aload_0
         6: aload_2
         7: putfield      #113                // Field extraData:Lscala/collection/immutable/Seq;
        10: aload_0
        11: iload_3
        12: putfield      #115                // Field writeMissing:Z
        15: aload_0
        16: aload         4
        18: putfield      #118                // Field pool:Ljava/util/concurrent/ExecutorService;
        21: aload_0
        22: aload         5
        24: putfield      #122                // Field S:Lcoursier/util/Sync;
        27: aload_0
        28: aload         6
        30: putfield      #126                // Field dummyArtifact:Lscala/Function1;
        33: aload_0
        34: aload         7
        36: putfield      #130                // Field proxy:Lscala/Option;
        39: aload_0
        40: invokespecial #781                // Method coursier/cache/Cache."<init>":()V
        43: aload_0
        44: invokestatic  #785                // InterfaceMethod scala/Product.$init$:(Lscala/Product;)V
        47: return
      LineNumberTable:
        line 18: 0
        line 27: 39
        line 18: 47
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lcoursier/cache/MockCache;
            0      48     1  base   Ljava/nio/file/Path;
            0      48     2 extraData   Lscala/collection/immutable/Seq;
            0      48     3 writeMissing   Z
            0      48     4  pool   Ljava/util/concurrent/ExecutorService;
            0      48     5     S   Lcoursier/util/Sync;
            0      48     6 dummyArtifact   Lscala/Function1;
            0      48     7 proxy   Lscala/Option;
    Signature: #778                         // (Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;Lscala/Option<Ljava/net/Proxy;>;)V
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final
      dummyArtifact                  final
      proxy                          final

  public coursier.cache.MockCache(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>, scala.Function1<coursier.util.Artifact, java.lang.Object>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=8, locals=7, args_size=7
         0: aload_0
         1: aload_1
         2: aload_2
         3: iload_3
         4: aload         4
         6: aload         5
         8: aload         6
        10: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
        13: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        16: return
      LineNumberTable:
        line 18: 0
        line 26: 10
        line 18: 16
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lcoursier/cache/MockCache;
            0      17     1  base   Ljava/nio/file/Path;
            0      17     2 extraData   Lscala/collection/immutable/Seq;
            0      17     3 writeMissing   Z
            0      17     4  pool   Ljava/util/concurrent/ExecutorService;
            0      17     5     S   Lcoursier/util/Sync;
            0      17     6 dummyArtifact   Lscala/Function1;
    Signature: #787                         // (Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;Lscala/Function1<Lcoursier/util/Artifact;Ljava/lang/Object;>;)V
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final
      dummyArtifact                  final

  public coursier.cache.MockCache(java.nio.file.Path, scala.collection.immutable.Seq<java.nio.file.Path>, boolean, java.util.concurrent.ExecutorService, coursier.util.Sync<F>);
    descriptor: (Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=8, locals=6, args_size=6
         0: aload_0
         1: aload_1
         2: aload_2
         3: iload_3
         4: aload         4
         6: aload         5
         8: new           #23                 // class coursier/cache/MockCache$$anonfun$$lessinit$greater$1
        11: dup
        12: invokespecial #790                // Method coursier/cache/MockCache$$anonfun$$lessinit$greater$1."<init>":()V
        15: getstatic     #553                // Field scala/None$.MODULE$:Lscala/None$;
        18: invokespecial #385                // Method "<init>":(Ljava/nio/file/Path;Lscala/collection/immutable/Seq;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync;Lscala/Function1;Lscala/Option;)V
        21: return
      LineNumberTable:
        line 18: 0
        line 24: 8
        line 26: 15
        line 18: 21
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      22     0  this   Lcoursier/cache/MockCache;
            0      22     1  base   Ljava/nio/file/Path;
            0      22     2 extraData   Lscala/collection/immutable/Seq;
            0      22     3 writeMissing   Z
            0      22     4  pool   Ljava/util/concurrent/ExecutorService;
            0      22     5     S   Lcoursier/util/Sync;
    Signature: #789                         // (Ljava/nio/file/Path;Lscala/collection/immutable/Seq<Ljava/nio/file/Path;>;ZLjava/util/concurrent/ExecutorService;Lcoursier/util/Sync<TF;>;)V
    MethodParameters:
      Name                           Flags
      base                           final
      extraData                      final
      writeMissing                   final
      pool                           final
      S                              final

  public static final java.lang.Object $anonfun$file$6$adapted(coursier.cache.MockCache, java.nio.file.Path, coursier.util.Artifact, java.lang.Object);
    descriptor: (Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: aload_1
         2: aload_2
         3: aload_3
         4: invokestatic  #676                // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
         7: invokestatic  #792                // Method $anonfun$file$6:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Z)Ljava/lang/Object;
        10: areturn
      LineNumberTable:
        line 83: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      11     0 $this   Lcoursier/cache/MockCache;
            0      11     1 path$2   Ljava/nio/file/Path;
            0      11     2 artifact$1   Lcoursier/util/Artifact;
            0      11     3  x0$3   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      $this                          final
      path$2                         final
      artifact$1                     final
      x0$3                           final

  public static final scala.Option $anonfun$file$4$adapted(java.nio.file.Path, java.lang.Object);
    descriptor: (Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #676                // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
         5: invokestatic  #794                // Method $anonfun$file$4:(Ljava/nio/file/Path;Z)Lscala/Option;
         8: areturn
      LineNumberTable:
        line 76: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0 path$1   Ljava/nio/file/Path;
            0       9     1  x0$2   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      path$1                         final
      x0$2                           final

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #806,  0            // InvokeDynamic #14:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #18= #15 of #17;    // NotFound=class coursier/cache/ArtifactError$NotFound of class coursier/cache/ArtifactError
  public static #21= #20 of #17;          // =class coursier/cache/ArtifactError$NotFound$ of class coursier/cache/ArtifactError
  public final #23;                       // class coursier/cache/MockCache$$anonfun$$lessinit$greater$1
  public final #25;                       // class coursier/cache/MockCache$$anonfun$1
  public static #30= #27 of #29;          // AllOps=class coursier/util/Monad$AllOps of class coursier/util/Monad
  public static #21= #32 of #29;          // =class coursier/util/Monad$ops$ of class coursier/util/Monad
  public static final #37= #34 of #36;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
Signature: #3                           // <F:Ljava/lang/Object;>Lcoursier/cache/Cache<TF;>;Lscala/Product;Ljava/io/Serializable;
SourceFile: "MockCache.scala"
RuntimeVisibleAnnotations:
  0: #11(#12=s#13)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\rMb\u0001\u0002\u001a4\u0005aB\u0001B\u0018\u0001\u0003\u0006\u0004%\ta\u0018\u0005\tU\u0002\u0011\t\u0011)A\u0005A\"A1\u000e\u0001BC\u0002\u0013\u0005A\u000e\u0003\u0005q\u0001\t\u0005\t\u0015!\u0003n\u0011!\t\bA!b\u0001\n\u0003\u0011\b\u0002\u0003<\u0001\u0005\u0003\u0005\u000b\u0011B:\t\u0011]\u0004!Q1A\u0005\u0002aD\u0011\"a\u0001\u0001\u0005\u0003\u0005\u000b\u0011B=\t\u0015\u0005\u0015\u0001A!b\u0001\n\u0003\t9\u0001\u0003\u0006\u0002\u0014\u0001\u0011\t\u0011)A\u0005\u0003\u0013A!\"!\u0006\u0001\u0005\u000b\u0007I\u0011AA\f\u0011)\t)\u0003\u0001B\u0001B\u0003%\u0011\u0011\u0004\u0005\u000b\u0003O\u0001!Q1A\u0005\u0002\u0005%\u0002BCA\u001f\u0001\t\u0005\t\u0015!\u0003\u0002,!9\u0011q\b\u0001\u0005\u0002\u0005\u0005\u0003bBA \u0001\u0011\u0005\u00111\u000b\u0005\b\u0003\u007f\u0001A\u0011AA1\u0011\u001d\ti\u0007\u0001C\u0006\u0003\u000fAq!a\u001c\u0001\t\u0003\t\t\b\u0003\u0004d\u0001\u0011\u0005\u0011\u0011\u0011\u0005\u000b\u0003?\u0003\u0001R1A\u0005\u0002\u0005\u0005\u0006bBAW\u0001\u0011\u0005\u0011q\u0016\u0005\b\u0003g\u0003A\u0011AA[\u0011\u001d\tI\f\u0001C\u0001\u0003wCq!a0\u0001\t\u0003\t\t\rC\u0004\u0002F\u0002!\t!a2\t\u000f\u0005-\u0007\u0001\"\u0001\u0002N\"9\u0011\u0011\u001b\u0001\u0005\u0002\u0005M\u0007bBAl\u0001\u0011\u0005\u0013\u0011\u001c\u0005\b\u0003O\u0004A\u0011IAu\u0011\u001d\ty\u000f\u0001C!\u0003cDq!!>\u0001\t\u0003\n9\u0010C\u0004\u0002\u0000\u0002!IA!\u0001\t\u000f\t%\u0001\u0001\"\u0011\u0003\f!9!Q\u0002\u0001\u0005B\t=\u0001b\u0002B\t\u0001\u0011\u0005#1\u0003\u0005\b\u00053\u0001A\u0011\tB\u000e\u000f\u001d\u0011yb\rE\u0001\u0005C1aAM\u001a\t\u0002\t\r\u0002bBA O\u0011\u0005!q\u0006\u0005\b\u0005c9C\u0011\u0001B\u001a\u0011%\u0011\tfJI\u0001\n\u0003\u0011\u0019\u0006C\u0005\u0003r\u001d\n\n\u0011\"\u0001\u0003t!9!qP\u0014\u0005\n\t\u0005\u0005b\u0002BMO\u0011%!1\u0014\u0005\b\u0005\'<C\u0011\u0001Bk\u0011\u001d\u0011\u0019n\nC\u0001\u0005_DqAa5(\t\u0003\u0019Y\u0001C\u0005\u0004*\u001d\n\t\u0011\"\u0003\u0004,\tIQj\\2l\u0007\u0006\u001c\u0007.\u001a\u0006\u0003iU\nQaY1dQ\u0016T\u0011AN\u0001\tG>,(o]5fe\u000e\u0001QCA\u001dA\'\u0011\u0001!h\u0014*\u0011\u0007mbd(D\u00014\u0013\ti4GA\u0003DC\u000eDW\r\u0005\u0002@\u00012\u0001A!B!\u0001\u0005\u0004\u0011%!\u0001$\u0016\u0005\rk\u0015C\u0001#K!\t)\u0005*D\u0001G\u0015\u00059\u0015!B:dC2\f\u0017BA%G\u0005\u001dqu\u000e\u001e5j]\u001e\u0004\"!R&\n\u000513%aA!os\u0012)a\n\u0011b\u0001\u0007\n\tq\f\u0005\u0002F!&\u0011\u0011K\u0012\u0002\b!J|G-^2u!\t\u00196L\u0004\u0002U3:\u0011Q\u000bW\u0007\u0002-*\u0011qkN\u0001\u0007yI|w\u000e\u001e \n\u0003\u001dK!A\u0017$\u0002\u000fA\f7m[1hK&\u0011A,\u0018\u0002\r\'\u0016\u0014\u0018.\u00197ju\u0006\u0014G.\u001a\u0006\u00035\u001a\u000bAAY1tKV\t\u0001\r\u0005\u0002bQ6\t!M\u0003\u0002dI\u0006!a-\u001b7f\u0015\t)g-A\u0002oS>T\u0011aZ\u0001\u0005U\u00064\u0018-\u0003\u0002jE\n!\u0001+\u0019;i\u0003\u0015\u0011\u0017m]3!\u0003%)\u0007\u0010\u001e:b\t\u0006$\u0018-F\u0001n!\r\u0019f\u000eY\u0005\u0003_v\u00131aU3r\u0003))\u0007\u0010\u001e:b\t\u0006$\u0018\rI\u0001\roJLG/Z\'jgNLgnZ\u000b\u0002gB\u0011Q\t^\u0005\u0003k\u001a\u0013qAQ8pY\u0016\fg.A\u0007xe&$X-T5tg&tw\rI\u0001\u0005a>|G.F\u0001z!\tQx0D\u0001|\u0015\taX0\u0001\u0006d_:\u001cWO\u001d:f]RT!A 4\u0002\tU$\u0018\u000e\\\u0005\u0004\u0003\u0003Y(aD#yK\u000e,Ho\u001c:TKJ4\u0018nY3\u0002\u000bA|w\u000e\u001c\u0011\u0002\u0003M+\"!!\u0003\u0011\u000b\u0005-\u0011q\u0002 \u000e\u0005\u00055!B\u0001@6\u0013\u0011\t\t\"!\u0004\u0003\tMKhnY\u0001\u0003\'\u0002\nQ\u0002Z;n[f\f%\u000f^5gC\u000e$XCAA\r!\u0019)\u00151DA\u0010g&\u0019\u0011Q\u0004$\u0003\u0013\u0019+hn\u0019;j_:\f\u0004\u0003BA\u0006\u0003CIA!a\t\u0002\u000e\tA\u0011I\u001d;jM\u0006\u001cG/\u0001\bek6l\u00170\u0011:uS\u001a\f7\r\u001e\u0011\u0002\u000bA\u0014x\u000e_=\u0016\u0005\u0005-\u0002#B#\u0002.\u0005E\u0012bAA\u0018\r\n1q\n\u001d;j_:\u0004B!a\r\u0002:5\u0011\u0011Q\u0007\u0006\u0004\u0003o1\u0017a\u00018fi&!\u00111HA\u001b\u0005\u0015\u0001&o\u001c=z\u0003\u0019\u0001(o\u001c=zA\u00051A(\u001b8jiz\"\u0002#a\u0011\u0002F\u0005\u001d\u0013\u0011JA&\u0003\u001b\ny%!\u0015\u0011\u0007m\u0002a\bC\u0003_\u001f\u0001\u0007\u0001\rC\u0003l\u001f\u0001\u0007Q\u000eC\u0003r\u001f\u0001\u00071\u000fC\u0003x\u001f\u0001\u0007\u0011\u0010C\u0004\u0002\u0006=\u0001\r!!\u0003\t\u000f\u0005Uq\u00021\u0001\u0002\u001a!9\u0011qE\bA\u0002\u0005-BCDA\"\u0003+\n9&!\u0017\u0002\\\u0005u\u0013q\f\u0005\u0006=B\u0001\r\u0001\u0019\u0005\u0006WB\u0001\r!\u001c\u0005\u0006cB\u0001\ra\u001d\u0005\u0006oB\u0001\r!\u001f\u0005\b\u0003\u000b\u0001\u0002\u0019AA\u0005\u0011\u001d\t)\u0002\u0005a\u0001\u00033!B\"a\u0011\u0002d\u0005\u0015\u0014qMA5\u0003WBQAX\tA\u0002\u0001DQa[\tA\u00025DQ!]\tA\u0002MDQa^\tA\u0002eDq!!\u0002\u0012\u0001\u0004\tI!\u0001\u0002Ta\u0005)a-\u001a;dQV\u0011\u00111\u000f\t\u0006\u0003k\nYH\u0010\b\u0004w\u0005]\u0014bAA=g\u0005)1)Y2iK&!\u0011QPA@\u0005\u00151U\r^2i\u0015\r\tIh\r\u000b\u0005\u0003\u0007\u000bY\nE\u0005\u0002\f\u0005\u0015e(!#\u0002\u0010&!\u0011qQA\u0007\u0005\u001d)\u0015\u000e\u001e5feR\u00032aOAF\u0013\r\tii\r\u0002\u000e\u0003J$\u0018NZ1di\u0016\u0013(o\u001c:\u0011\t\u0005E\u0015qS\u0007\u0003\u0003\'S1!!&g\u0003\tIw.\u0003\u0003\u0002\u001a\u0006M%\u0001\u0002$jY\u0016Dq!!(\u0015\u0001\u0004\ty\"\u0001\u0005beRLg-Y2u\u0003\t)7-\u0006\u0002\u0002$B!\u0011QUAU\u001b\t\t9K\u0003\u0002}\r&!\u00111VAT\u0005})\u00050Z2vi&|gnQ8oi\u0016DH/\u0012=fGV$xN]*feZL7-Z\u0001\to&$\bNQ1tKR!\u00111IAY\u0011\u0015qf\u00031\u0001a\u000359\u0018\u000e\u001e5FqR\u0014\u0018\rR1uCR!\u00111IA\\\u0011\u0015Yw\u00031\u0001n\u0003A9\u0018\u000e\u001e5Xe&$X-T5tg&tw\r\u0006\u0003\u0002D\u0005u\u0006\"B9\u0019\u0001\u0004\u0019\u0018\u0001C<ji\"\u0004vn\u001c7\u0015\t\u0005\r\u00131\u0019\u0005\u0006of\u0001\r!_\u0001\u0006o&$\bn\u0015\u000b\u0005\u0003\u0007\nI\rC\u0004\u0002\u0006i\u0001\r!!\u0003\u0002#]LG\u000f\u001b#v[6L\u0018I\u001d;jM\u0006\u001cG\u000f\u0006\u0003\u0002D\u0005=\u0007bBA\u000b7\u0001\u0007\u0011\u0011D\u0001\no&$\b\u000e\u0015:pqf$B!a\u0011\u0002V\"9\u0011q\u0005\u000fA\u0002\u0005-\u0012\u0001\u0003;p\'R\u0014\u0018N\\4\u0015\u0005\u0005m\u0007\u0003BAo\u0003Gl!!a8\u000b\u0007\u0005\u0005h-\u0001\u0003mC:<\u0017\u0002BAs\u0003?\u0014aa\u0015;sS:<\u0017\u0001C2b]\u0016\u000bX/\u00197\u0015\u0007M\fY\u000f\u0003\u0004\u0002nz\u0001\rAS\u0001\u0004_\nT\u0017AB3rk\u0006d7\u000fF\u0002t\u0003gDa!!< \u0001\u0004Q\u0015\u0001\u00035bg\"\u001cu\u000eZ3\u0015\u0005\u0005e\bcA#\u0002|&\u0019\u0011Q $\u0003\u0007%sG/A\u0003ukBdW-\u0006\u0002\u0003\u0004AiQI!\u0002a[NL\u0018\u0011BA\r\u0003WI1Aa\u0002G\u0005\u0019!V\u000f\u001d7fo\u0005i\u0001O]8ek\u000e$\bK]3gSb,\"!a7\u0002\u0019A\u0014x\u000eZ;di\u0006\u0013\u0018\u000e^=\u0016\u0005\u0005e\u0018A\u00049s_\u0012,8\r^#mK6,g\u000e\u001e\u000b\u0004\u0015\nU\u0001b\u0002B\fI\u0001\u0007\u0011\u0011`\u0001\u0002]\u0006\u0011\u0002O]8ek\u000e$X\t\\3nK:$h*Y7f)\u0011\tYN!\b\t\u000f\t]Q\u00051\u0001\u0002z\u0006IQj\\2l\u0007\u0006\u001c\u0007.\u001a\t\u0003w\u001d\u001aRa\nB\u0013\u0005W\u00012!\u0012B\u0014\u0013\r\u0011IC\u0012\u0002\u0007\u0003:L(+\u001a4\u0011\t\u0005E%QF\u0005\u00049\u0006MEC\u0001B\u0011\u0003\u0019\u0019\'/Z1uKV!!Q\u0007B\u001f))\u00119D!\u0013\u0003L\t5#q\n\u000b\u0005\u0005s\u0011\u0019\u0005\u0005\u0003<\u0001\tm\u0002cA \u0003>\u00111\u0011)\u000bb\u0001\u0005\u007f)2a\u0011B!\t\u0019q%Q\bb\u0001\u0007\"I!QI\u0015\u0002\u0002\u0003\u000f!qI\u0001\u000bKZLG-\u001a8dK\u0012\n\u0004CBA\u0006\u0003\u001f\u0011Y\u0004C\u0003_S\u0001\u0007\u0001\rC\u0003xS\u0001\u0007\u0011\u0010C\u0004lSA\u0005\t\u0019A7\t\u000fEL\u0003\u0013!a\u0001g\u0006\u00012M]3bi\u0016$C-\u001a4bk2$HeM\u000b\u0005\u0005+\u0012Y\'\u0006\u0002\u0003X)\u001aQN!\u0017,\u0005\tm\u0003\u0003\u0002B/\u0005Oj!Aa\u0018\u000b\t\t\u0005$1M\u0001\nk:\u001c\u0007.Z2lK\u0012T1A!\u001aG\u0003)\tgN\\8uCRLwN\\\u0005\u0005\u0005S\u0012yFA\tv]\u000eDWmY6fIZ\u000b\'/[1oG\u0016$a!\u0011\u0016C\u0002\t5TcA\"\u0003p\u00111aJa\u001bC\u0002\r\u000b\u0001c\u0019:fCR,G\u0005Z3gCVdG\u000f\n\u001b\u0016\t\tU$\u0011P\u000b\u0003\u0005oR3a\u001dB-\t\u0019\t5F1\u0001\u0003|U\u00191I! \u0005\r9\u0013IH1\u0001D\u00035\u0011X-\u00193Gk2d\u0017pU=oGR!!1\u0011BH!\u0015)%Q\u0011BE\u0013\r\u00119I\u0012\u0002\u0006\u0003J\u0014\u0018-\u001f\t\u0004\u000b\n-\u0015b\u0001BG\r\n!!)\u001f;f\u0011\u001d\u0011\t\n\fa\u0001\u0005\'\u000b!![:\u0011\t\u0005E%QS\u0005\u0005\u0005/\u000b\u0019JA\u0006J]B,Ho\u0015;sK\u0006l\u0017!\u0003:fC\u00124U\u000f\u001c7z+\u0011\u0011iJa)\u0015\r\t}%Q\u0019Bg)\u0011\u0011\tK!0\u0011\u000b}\u0012\u0019K!+\u0005\r\u0005k#\u0019\u0001BS+\r\u0019%q\u0015\u0003\u0007\u001d\n\r&\u0019A\"\u0011\u000fM\u0013YKa,\u00030&\u0019!QV/\u0003\r\u0015KG\u000f[3s!\u0011\u0011\tL!/\u000f\t\tM&Q\u0017\t\u0003+\u001aK1Aa.G\u0003\u0019\u0001&/\u001a3fM&!\u0011Q\u001dB^\u0015\r\u00119L\u0012\u0005\n\u0005\u007fk\u0013\u0011!a\u0002\u0005\u0003\f!\"\u001a<jI\u0016t7-\u001a\u00133!\u0019\tY!a\u0004\u0003DB\u0019qHa)\t\u0011\tEU\u0006\"a\u0001\u0005\u000f\u0004R!\u0012Be\u0005\'K1Aa3G\u0005!a$-\u001f8b[\u0016t\u0004b\u0002Bh[\u0001\u0007!\u0011[\u0001\u000ea\u0006\u00148/\u001a\'j].\u001cXK\u001d7\u0011\u000b\u0015\u000biCa,\u0002\u000b\u0005\u0004\b\u000f\\=\u0016\t\t]\'Q\u001c\u000b\r\u00053\u0014\u0019O!:\u0003h\n%(1\u001e\t\u0005w\u0001\u0011Y\u000eE\u0002@\u0005;$a!\u0011\u0018C\u0002\t}WcA\"\u0003b\u00121aJ!8C\u0002\rCQA\u0018\u0018A\u0002\u0001DQa\u001b\u0018A\u00025DQ!\u001d\u0018A\u0002MDQa\u001e\u0018A\u0002eDq!!\u0002/\u0001\u0004\u0011i\u000f\u0005\u0004\u0002\f\u0005=!1\\\u000b\u0005\u0005c\u00149\u0010\u0006\b\u0003t\nu(q`B\u0001\u0007\u0007\u0019)a!\u0003\u0011\tm\u0002!Q\u001f\t\u0004\u007f\t]HAB!0\u0005\u0004\u0011I0F\u0002D\u0005w$aA\u0014B|\u0005\u0004\u0019\u0005\"\u000200\u0001\u0004\u0001\u0007\"B60\u0001\u0004i\u0007\"B90\u0001\u0004\u0019\b\"B<0\u0001\u0004I\bbBA\u0003_\u0001\u00071q\u0001\t\u0007\u0003\u0017\tyA!>\t\u000f\u0005Uq\u00061\u0001\u0002\u001aU!1QBB\n)A\u0019ya!\u0007\u0004\u001c\ru1qDB\u0011\u0007K\u00199\u0003\u0005\u0003<\u0001\rE\u0001cA \u0004\u0014\u00111\u0011\t\rb\u0001\u0007+)2aQB\f\t\u0019q51\u0003b\u0001\u0007\")a\f\ra\u0001A\")1\u000e\ra\u0001[\")\u0011\u000f\ra\u0001g\")q\u000f\ra\u0001s\"9\u0011Q\u0001\u0019A\u0002\r\r\u0002CBA\u0006\u0003\u001f\u0019\t\u0002C\u0004\u0002\u0016A\u0002\r!!\u0007\t\u000f\u0005\u001d\u0002\u00071\u0001\u0002,\u0005aqO]5uKJ+\u0007\u000f\\1dKR\u00111Q\u0006\t\u0005\u0003;\u001cy#\u0003\u0003\u00042\u0005}\'AB(cU\u0016\u001cG\u000f"
    )
BootstrapMethods:
  0: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #142 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
      #144 (Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
      #145 5
      #146 1
      #144 (Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
  1: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #265 (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      #270 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
      #272 (Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
      #145 5
      #146 1
      #272 (Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
  2: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #287 ()Z
      #292 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$5:(Ljava/nio/file/Path;)Z
      #287 ()Z
      #146 1
  3: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #309 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$6$adapted:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #146 1
  4: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #321 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$8:(Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
      #323 (Lscala/Option;)Ljava/lang/Object;
      #145 5
      #146 1
      #323 (Lscala/Option;)Ljava/lang/Object;
  5: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #336 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$9:(Ljava/nio/file/Path;)Ljava/io/File;
      #337 (Ljava/nio/file/Path;)Ljava/io/File;
      #145 5
      #146 1
      #337 (Ljava/nio/file/Path;)Ljava/io/File;
  6: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #535 ()Ljava/lang/Object;
      #538 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$5:(Ljava/io/File;)Ljava/io/FileInputStream;
      #540 ()Ljava/io/FileInputStream;
      #145 5
      #146 1
      #540 ()Ljava/io/FileInputStream;
  7: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #535 ()Ljava/lang/Object;
      #599 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$2:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
      #600 ()Ljava/io/InputStream;
      #145 5
      #146 1
      #600 ()Ljava/io/InputStream;
  8: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #608 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$3:(Lcoursier/cache/ArtifactError;)Ljava/lang/String;
      #609 (Lcoursier/cache/ArtifactError;)Ljava/lang/String;
      #145 5
      #146 1
      #609 (Lcoursier/cache/ArtifactError;)Ljava/lang/String;
  9: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #616 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$4:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
      #618 (Ljava/io/File;)Lcoursier/util/EitherT;
      #145 5
      #146 1
      #618 (Ljava/io/File;)Lcoursier/util/EitherT;
  10: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #287 ()Z
      #647 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$3:(Ljava/nio/file/Path;)Z
      #287 ()Z
      #146 1
  11: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #653 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$4$adapted:(Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
      #655 (Ljava/lang/Object;)Lscala/Option;
      #145 5
      #146 1
      #655 (Ljava/lang/Object;)Lscala/Option;
  12: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #137 (Ljava/lang/Object;)Ljava/lang/Object;
      #665 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$2:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
      #323 (Lscala/Option;)Ljava/lang/Object;
      #145 5
      #146 1
      #323 (Lscala/Option;)Ljava/lang/Object;
  13: #153 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #535 ()Ljava/lang/Object;
      #736 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$7:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
      #738 ()Lscala/util/Right;
      #145 5
      #146 1
      #738 ()Lscala/util/Right;
  14: #803 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #142 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Lcoursier/util/EitherT;
      #599 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$2:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;)Ljava/io/InputStream;
      #608 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$3:(Lcoursier/cache/ArtifactError;)Ljava/lang/String;
      #616 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$4:(Lcoursier/cache/MockCache;ZLcoursier/util/Artifact;Ljava/io/File;)Lcoursier/util/EitherT;
      #538 REF_invokeStatic coursier/cache/MockCache.$anonfun$fetch$5:(Ljava/io/File;)Ljava/io/FileInputStream;
      #270 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$1:(Lcoursier/cache/MockCache;Lcoursier/util/Artifact;Ljava/lang/Object;Ljava/nio/file/Path;)Ljava/lang/Object;
      #665 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$2:(Lcoursier/cache/MockCache;Ljava/lang/Object;Ljava/nio/file/Path;Lcoursier/util/Artifact;Lscala/Option;)Ljava/lang/Object;
      #647 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$3:(Ljava/nio/file/Path;)Z
      #653 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$4$adapted:(Ljava/nio/file/Path;Ljava/lang/Object;)Lscala/Option;
      #292 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$5:(Ljava/nio/file/Path;)Z
      #309 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$6$adapted:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;Ljava/lang/Object;)Ljava/lang/Object;
      #736 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$7:(Lcoursier/cache/MockCache;Ljava/nio/file/Path;Lcoursier/util/Artifact;)Lscala/util/Right;
      #321 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$8:(Lcoursier/cache/MockCache;Ljava/lang/Object;Lscala/Option;)Ljava/lang/Object;
      #336 REF_invokeStatic coursier/cache/MockCache.$anonfun$file$9:(Ljava/nio/file/Path;)Ljava/io/File;
  ScalaInlineInfo: length = 0x103 (unknown attribute)
   01 01 00 33 00 8B 00 8C 01 01 E7 01 E8 01 02 05
   02 06 01 02 14 02 15 01 02 0C 02 0D 01 01 0B 01
   0C 01 02 80 02 81 01 02 73 01 22 01 02 7D 02 7E
   01 02 8A 02 8B 01 01 21 01 22 01 02 DC 02 DD 01
   01 32 01 33 01 02 B6 02 B7 01 01 3E 01 3F 01 01
   4D 01 4E 01 00 B7 03 15 01 00 B7 03 13 01 00 B7
   01 80 01 00 32 00 78 01 00 84 00 78 01 00 29 00
   6D 01 01 A5 01 A6 01 00 35 00 7C 01 00 27 01 E4
   01 00 27 01 63 01 01 62 01 63 01 01 A8 01 A6 01
   00 2B 00 55 01 00 87 00 7C 01 00 9E 00 90 01 01
   B4 01 B5 01 02 9F 02 A0 01 00 30 00 75 01 01 CF
   01 B5 01 01 D0 01 D1 01 01 DB 01 DC 01 00 68 00
   60 01 00 5F 00 60 01 01 CE 00 A4 01 00 38 00 80
   01 00 C1 00 A4 01 01 C0 01 C1 01 01 77 01 78 01
   01 8F 01 90 01 01 83 01 84 01 01 89 01 8A 01 01
   92 01 93 01 01 8C 01 8D 01 01 86 01 87 01 00 2E
   00 50 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
