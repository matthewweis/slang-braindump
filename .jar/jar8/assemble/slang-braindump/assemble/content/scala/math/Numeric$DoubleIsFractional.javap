Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/math/Numeric$DoubleIsFractional.class
  Last modified May 29, 2022; size 4464 bytes
  SHA-256 checksum 4fa36a8984588107a7673e0f63a80fee957b5a68f755cbed7442505792412b16
  Compiled from "Numeric.scala"
public interface scala.math.Numeric$DoubleIsFractional extends scala.math.Fractional<java.lang.Object>
  minor version: 0
  major version: 52
  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT
  this_class: #2                          // scala/math/Numeric$DoubleIsFractional
  super_class: #5                         // java/lang/Object
  interfaces: 1, fields: 0, methods: 27, attributes: 5
Constant pool:
    #1 = Utf8               scala/math/Numeric$DoubleIsFractional
    #2 = Class              #1            // scala/math/Numeric$DoubleIsFractional
    #3 = Utf8               Ljava/lang/Object;Lscala/math/Fractional<Ljava/lang/Object;>;
    #4 = Utf8               java/lang/Object
    #5 = Class              #4            // java/lang/Object
    #6 = Utf8               scala/math/Fractional
    #7 = Class              #6            // scala/math/Fractional
    #8 = Utf8               Numeric.scala
    #9 = Utf8               scala/math/Numeric
   #10 = Class              #9            // scala/math/Numeric
   #11 = Utf8               DoubleIsFractional
   #12 = Utf8               plus$
   #13 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;DD)D
   #14 = Utf8               $this
   #15 = Utf8               x
   #16 = Utf8               y
   #17 = Utf8               plus
   #18 = Utf8               (DD)D
   #19 = NameAndType        #17:#18       // plus:(DD)D
   #20 = InterfaceMethodref #2.#19        // scala/math/Numeric$DoubleIsFractional.plus:(DD)D
   #21 = Utf8               Lscala/math/Numeric$DoubleIsFractional;
   #22 = Utf8               D
   #23 = Utf8               this
   #24 = Utf8               minus$
   #25 = Utf8               minus
   #26 = NameAndType        #25:#18       // minus:(DD)D
   #27 = InterfaceMethodref #2.#26        // scala/math/Numeric$DoubleIsFractional.minus:(DD)D
   #28 = Utf8               times$
   #29 = Utf8               times
   #30 = NameAndType        #29:#18       // times:(DD)D
   #31 = InterfaceMethodref #2.#30        // scala/math/Numeric$DoubleIsFractional.times:(DD)D
   #32 = Utf8               negate$
   #33 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;D)D
   #34 = Utf8               negate
   #35 = Utf8               (D)D
   #36 = NameAndType        #34:#35       // negate:(D)D
   #37 = InterfaceMethodref #2.#36        // scala/math/Numeric$DoubleIsFractional.negate:(D)D
   #38 = Utf8               fromInt$
   #39 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;I)D
   #40 = Utf8               fromInt
   #41 = Utf8               (I)D
   #42 = NameAndType        #40:#41       // fromInt:(I)D
   #43 = InterfaceMethodref #2.#42        // scala/math/Numeric$DoubleIsFractional.fromInt:(I)D
   #44 = Utf8               I
   #45 = Utf8               parseString$
   #46 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;Ljava/lang/String;)Lscala/Option;
   #47 = Utf8               str
   #48 = Utf8               parseString
   #49 = Utf8               (Ljava/lang/String;)Lscala/Option;
   #50 = NameAndType        #48:#49       // parseString:(Ljava/lang/String;)Lscala/Option;
   #51 = InterfaceMethodref #2.#50        // scala/math/Numeric$DoubleIsFractional.parseString:(Ljava/lang/String;)Lscala/Option;
   #52 = Utf8               Ljava/lang/String;
   #53 = Utf8               (Ljava/lang/String;)Lscala/Option<Ljava/lang/Object;>;
   #54 = Utf8               scala/collection/StringParsers$
   #55 = Class              #54           // scala/collection/StringParsers$
   #56 = Utf8               MODULE$
   #57 = Utf8               Lscala/collection/StringParsers$;
   #58 = NameAndType        #56:#57       // MODULE$:Lscala/collection/StringParsers$;
   #59 = Fieldref           #55.#58       // scala/collection/StringParsers$.MODULE$:Lscala/collection/StringParsers$;
   #60 = Utf8               checkFloatFormat
   #61 = Utf8               (Ljava/lang/String;)Z
   #62 = NameAndType        #60:#61       // checkFloatFormat:(Ljava/lang/String;)Z
   #63 = Methodref          #55.#62       // scala/collection/StringParsers$.checkFloatFormat:(Ljava/lang/String;)Z
   #64 = Utf8               scala/Some
   #65 = Class              #64           // scala/Some
   #66 = Utf8               java/lang/Double
   #67 = Class              #66           // java/lang/Double
   #68 = Utf8               parseDouble
   #69 = Utf8               (Ljava/lang/String;)D
   #70 = NameAndType        #68:#69       // parseDouble:(Ljava/lang/String;)D
   #71 = Methodref          #67.#70       // java/lang/Double.parseDouble:(Ljava/lang/String;)D
   #72 = Utf8               valueOf
   #73 = Utf8               (D)Ljava/lang/Double;
   #74 = NameAndType        #72:#73       // valueOf:(D)Ljava/lang/Double;
   #75 = Methodref          #67.#74       // java/lang/Double.valueOf:(D)Ljava/lang/Double;
   #76 = Utf8               <init>
   #77 = Utf8               (Ljava/lang/Object;)V
   #78 = NameAndType        #76:#77       // "<init>":(Ljava/lang/Object;)V
   #79 = Methodref          #65.#78       // scala/Some."<init>":(Ljava/lang/Object;)V
   #80 = Utf8               scala/None$
   #81 = Class              #80           // scala/None$
   #82 = Utf8               Lscala/None$;
   #83 = NameAndType        #56:#82       // MODULE$:Lscala/None$;
   #84 = Fieldref           #81.#83       // scala/None$.MODULE$:Lscala/None$;
   #85 = Utf8               toInt$
   #86 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;D)I
   #87 = Utf8               toInt
   #88 = Utf8               (D)I
   #89 = NameAndType        #87:#88       // toInt:(D)I
   #90 = InterfaceMethodref #2.#89        // scala/math/Numeric$DoubleIsFractional.toInt:(D)I
   #91 = Utf8               toLong$
   #92 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;D)J
   #93 = Utf8               toLong
   #94 = Utf8               (D)J
   #95 = NameAndType        #93:#94       // toLong:(D)J
   #96 = InterfaceMethodref #2.#95        // scala/math/Numeric$DoubleIsFractional.toLong:(D)J
   #97 = Utf8               toFloat$
   #98 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;D)F
   #99 = Utf8               toFloat
  #100 = Utf8               (D)F
  #101 = NameAndType        #99:#100      // toFloat:(D)F
  #102 = InterfaceMethodref #2.#101       // scala/math/Numeric$DoubleIsFractional.toFloat:(D)F
  #103 = Utf8               toDouble$
  #104 = Utf8               toDouble
  #105 = NameAndType        #104:#35      // toDouble:(D)D
  #106 = InterfaceMethodref #2.#105       // scala/math/Numeric$DoubleIsFractional.toDouble:(D)D
  #107 = Utf8               div$
  #108 = Utf8               div
  #109 = NameAndType        #108:#18      // div:(DD)D
  #110 = InterfaceMethodref #2.#109       // scala/math/Numeric$DoubleIsFractional.div:(DD)D
  #111 = Utf8               abs$
  #112 = Utf8               abs
  #113 = NameAndType        #112:#35      // abs:(D)D
  #114 = InterfaceMethodref #2.#113       // scala/math/Numeric$DoubleIsFractional.abs:(D)D
  #115 = Utf8               scala/math/package$
  #116 = Class              #115          // scala/math/package$
  #117 = Utf8               Lscala/math/package$;
  #118 = NameAndType        #56:#117      // MODULE$:Lscala/math/package$;
  #119 = Fieldref           #116.#118     // scala/math/package$.MODULE$:Lscala/math/package$;
  #120 = Utf8               java/lang/Math
  #121 = Class              #120          // java/lang/Math
  #122 = Methodref          #121.#113     // java/lang/Math.abs:(D)D
  #123 = Utf8               sign$
  #124 = Utf8               sign
  #125 = NameAndType        #124:#35      // sign:(D)D
  #126 = InterfaceMethodref #2.#125       // scala/math/Numeric$DoubleIsFractional.sign:(D)D
  #127 = Utf8               signum
  #128 = NameAndType        #127:#35      // signum:(D)D
  #129 = Methodref          #121.#128     // java/lang/Math.signum:(D)D
  #130 = Utf8               $init$
  #131 = Utf8               (Lscala/math/Numeric$DoubleIsFractional;)V
  #132 = Utf8               Code
  #133 = Utf8               LineNumberTable
  #134 = Utf8               LocalVariableTable
  #135 = Utf8               MethodParameters
  #136 = Utf8               StackMapTable
  #137 = Utf8               Signature
  #138 = Utf8               InnerClasses
  #139 = Utf8               SourceFile
  #140 = Utf8               ScalaInlineInfo
  #141 = Utf8               Scala
{
  public static double plus$(scala.math.Numeric$DoubleIsFractional, double, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;DD)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=5, locals=5, args_size=3
         0: aload_0
         1: dload_1
         2: dload_3
         3: invokespecial #20                 // InterfaceMethod plus:(DD)D
         6: dreturn
      LineNumberTable:
        line 161: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       7     1     x   D
            0       7     3     y   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final
      y                              final

  public default double plus(double, double);
    descriptor: (DD)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=5, args_size=3
         0: dload_1
         1: dload_3
         2: dadd
         3: dreturn
      LineNumberTable:
        line 161: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       4     1     x   D
            0       4     3     y   D
    MethodParameters:
      Name                           Flags
      x                              final
      y                              final

  public static double minus$(scala.math.Numeric$DoubleIsFractional, double, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;DD)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=5, locals=5, args_size=3
         0: aload_0
         1: dload_1
         2: dload_3
         3: invokespecial #27                 // InterfaceMethod minus:(DD)D
         6: dreturn
      LineNumberTable:
        line 162: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       7     1     x   D
            0       7     3     y   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final
      y                              final

  public default double minus(double, double);
    descriptor: (DD)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=5, args_size=3
         0: dload_1
         1: dload_3
         2: dsub
         3: dreturn
      LineNumberTable:
        line 162: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       4     1     x   D
            0       4     3     y   D
    MethodParameters:
      Name                           Flags
      x                              final
      y                              final

  public static double times$(scala.math.Numeric$DoubleIsFractional, double, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;DD)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=5, locals=5, args_size=3
         0: aload_0
         1: dload_1
         2: dload_3
         3: invokespecial #31                 // InterfaceMethod times:(DD)D
         6: dreturn
      LineNumberTable:
        line 163: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       7     1     x   D
            0       7     3     y   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final
      y                              final

  public default double times(double, double);
    descriptor: (DD)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=5, args_size=3
         0: dload_1
         1: dload_3
         2: dmul
         3: dreturn
      LineNumberTable:
        line 163: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       4     1     x   D
            0       4     3     y   D
    MethodParameters:
      Name                           Flags
      x                              final
      y                              final

  public static double negate$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #37                 // InterfaceMethod negate:(D)D
         5: dreturn
      LineNumberTable:
        line 164: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default double negate(double);
    descriptor: (D)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: dload_1
         1: dneg
         2: dreturn
      LineNumberTable:
        line 164: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       3     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static double fromInt$(scala.math.Numeric$DoubleIsFractional, int);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;I)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokespecial #43                 // InterfaceMethod fromInt:(I)D
         5: dreturn
      LineNumberTable:
        line 165: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   I
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default double fromInt(int);
    descriptor: (I)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: iload_1
         1: i2d
         2: dreturn
      LineNumberTable:
        line 165: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       3     1     x   I
    MethodParameters:
      Name                           Flags
      x                              final

  public static scala.Option parseString$(scala.math.Numeric$DoubleIsFractional, java.lang.String);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;Ljava/lang/String;)Lscala/Option;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokespecial #51                 // InterfaceMethod parseString:(Ljava/lang/String;)Lscala/Option;
         5: areturn
      LineNumberTable:
        line 166: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1   str   Ljava/lang/String;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      str                            final

  public default scala.Option<java.lang.Object> parseString(java.lang.String);
    descriptor: (Ljava/lang/String;)Lscala/Option;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: getstatic     #59                 // Field scala/collection/StringParsers$.MODULE$:Lscala/collection/StringParsers$;
         3: aload_1
         4: invokevirtual #63                 // Method scala/collection/StringParsers$.checkFloatFormat:(Ljava/lang/String;)Z
         7: ifeq          25
        10: new           #65                 // class scala/Some
        13: dup
        14: aload_1
        15: invokestatic  #71                 // Method java/lang/Double.parseDouble:(Ljava/lang/String;)D
        18: invokestatic  #75                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
        21: invokespecial #79                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
        24: areturn
        25: getstatic     #84                 // Field scala/None$.MODULE$:Lscala/None$;
        28: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 25 /* same */
      LineNumberTable:
        line 166: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      29     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0      29     1   str   Ljava/lang/String;
    Signature: #53                          // (Ljava/lang/String;)Lscala/Option<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      str                            final

  public static int toInt$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)I
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #90                 // InterfaceMethod toInt:(D)I
         5: ireturn
      LineNumberTable:
        line 167: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default int toInt(double);
    descriptor: (D)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: dload_1
         1: d2i
         2: ireturn
      LineNumberTable:
        line 167: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       3     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static long toLong$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)J
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #96                 // InterfaceMethod toLong:(D)J
         5: lreturn
      LineNumberTable:
        line 168: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default long toLong(double);
    descriptor: (D)J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: dload_1
         1: d2l
         2: lreturn
      LineNumberTable:
        line 168: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       3     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static float toFloat$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)F
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #102                // InterfaceMethod toFloat:(D)F
         5: freturn
      LineNumberTable:
        line 169: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default float toFloat(double);
    descriptor: (D)F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: dload_1
         1: d2f
         2: freturn
      LineNumberTable:
        line 169: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       3     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static double toDouble$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #106                // InterfaceMethod toDouble:(D)D
         5: dreturn
      LineNumberTable:
        line 170: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default double toDouble(double);
    descriptor: (D)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: dload_1
         1: dreturn
      LineNumberTable:
        line 170: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       2     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static double div$(scala.math.Numeric$DoubleIsFractional, double, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;DD)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=5, locals=5, args_size=3
         0: aload_0
         1: dload_1
         2: dload_3
         3: invokespecial #110                // InterfaceMethod div:(DD)D
         6: dreturn
      LineNumberTable:
        line 171: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       7     1     x   D
            0       7     3     y   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final
      y                              final

  public default double div(double, double);
    descriptor: (DD)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=5, args_size=3
         0: dload_1
         1: dload_3
         2: ddiv
         3: dreturn
      LineNumberTable:
        line 171: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       4     1     x   D
            0       4     3     y   D
    MethodParameters:
      Name                           Flags
      x                              final
      y                              final

  public static double abs$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #114                // InterfaceMethod abs:(D)D
         5: dreturn
      LineNumberTable:
        line 173: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default double abs(double);
    descriptor: (D)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: getstatic     #119                // Field scala/math/package$.MODULE$:Lscala/math/package$;
         3: pop
         4: dload_1
         5: invokestatic  #122                // Method java/lang/Math.abs:(D)D
         8: dreturn
      LineNumberTable:
        line 173: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       9     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static double sign$(scala.math.Numeric$DoubleIsFractional, double);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;D)D
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #126                // InterfaceMethod sign:(D)D
         5: dreturn
      LineNumberTable:
        line 175: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lscala/math/Numeric$DoubleIsFractional;
            0       6     1     x   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      x                              final

  public default double sign(double);
    descriptor: (D)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: getstatic     #119                // Field scala/math/package$.MODULE$:Lscala/math/package$;
         3: pop
         4: dload_1
         5: invokestatic  #129                // Method java/lang/Math.signum:(D)D
         8: dreturn
      LineNumberTable:
        line 175: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/math/Numeric$DoubleIsFractional;
            0       9     1     x   D
    MethodParameters:
      Name                           Flags
      x                              final

  public static void $init$(scala.math.Numeric$DoubleIsFractional);
    descriptor: (Lscala/math/Numeric$DoubleIsFractional;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 160: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0 $this   Lscala/math/Numeric$DoubleIsFractional;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
}
InnerClasses:
  public static #11= #2 of #10;           // DoubleIsFractional=class scala/math/Numeric$DoubleIsFractional of class scala/math/Numeric
Signature: #3                           // Ljava/lang/Object;Lscala/math/Fractional<Ljava/lang/Object;>;
SourceFile: "Numeric.scala"
  ScalaInlineInfo: length = 0x8B (unknown attribute)
   01 00 00 1B 00 82 00 83 01 00 70 00 23 00 00 6F
   00 21 01 00 6C 00 12 00 00 6B 00 0D 01 00 28 00
   29 00 00 26 00 27 01 00 19 00 12 00 00 18 00 0D
   01 00 22 00 23 00 00 20 00 21 01 00 30 00 31 00
   00 2D 00 2E 01 00 11 00 12 00 00 0C 00 0D 01 00
   7C 00 23 00 00 7B 00 21 01 00 1D 00 12 00 00 1C
   00 0D 01 00 68 00 23 00 00 67 00 21 01 00 63 00
   64 00 00 61 00 62 01 00 57 00 58 00 00 55 00 56
   01 00 5D 00 5E 00 00 5B 00 5C 01
  Scala: length = 0x0 (unknown attribute)

