Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/scala/collection/convert/impl/BinaryTreeStepperBase.class
  Last modified May 29, 2022; size 6209 bytes
  SHA-256 checksum 5de8341cbc5dd6e034d5040d52f34dd5d6e6ea6375f9f8c412f83e1e90633c6e
  Compiled from "BinaryTreeStepper.scala"
public abstract class scala.collection.convert.impl.BinaryTreeStepperBase<A extends java.lang.Object, T extends java.lang.Object, Sub extends java.lang.Object, Semi extends Sub> extends java.lang.Object implements scala.collection.Stepper$EfficientSplit
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #2                          // scala/collection/convert/impl/BinaryTreeStepperBase
  super_class: #5                         // java/lang/Object
  interfaces: 1, fields: 6, methods: 19, attributes: 6
Constant pool:
    #1 = Utf8               scala/collection/convert/impl/BinaryTreeStepperBase
    #2 = Class              #1            // scala/collection/convert/impl/BinaryTreeStepperBase
    #3 = Utf8               <A:Ljava/lang/Object;T:Ljava/lang/Object;Sub:Ljava/lang/Object;Semi:TSub;>Ljava/lang/Object;Lscala/collection/Stepper$EfficientSplit;
    #4 = Utf8               java/lang/Object
    #5 = Class              #4            // java/lang/Object
    #6 = Utf8               scala/collection/Stepper$EfficientSplit
    #7 = Class              #6            // scala/collection/Stepper$EfficientSplit
    #8 = Utf8               BinaryTreeStepper.scala
    #9 = Utf8               Lscala/reflect/ScalaSignature;
   #10 = Utf8               bytes
   #11 = Utf8               \u0006\u0005\u0005mdA\u0002\u000e\u001c\u0003\u0003y2\u0005\u0003\u00059\u0001\t\u0005\r\u0011\"\u0005:\u0011!i\u0004A!a\u0001\n#q\u0004\u0002\u0003#\u0001\u0005\u0003\u0005\u000b\u0015\u0002\u001e\t\u0011\u0015\u0003!\u00111A\u0005\u0012\u0019C\u0001b\u0014\u0001\u0003\u0002\u0004%\t\u0002\u0015\u0005\t%\u0002\u0011\t\u0011)Q\u0005\u000f\"A1\u000b\u0001BA\u0002\u0013EA\u000b\u0003\u0005Y\u0001\t\u0005\r\u0011\"\u0005Z\u0011!Y\u0006A!A!B\u0013)\u0006\u0002\u0003/\u0001\u0005\u0003\u0007I\u0011C\u001d\t\u0011u\u0003!\u00111A\u0005\u0012yC\u0001\u0002\u0019\u0001\u0003\u0002\u0003\u0006KA\u000f\u0005\tC\u0002\u0011)\u0019!C\tE\"Aa\r\u0001B\u0001B\u0003%1\r\u0003\u0005h\u0001\t\u0015\r\u0011\"\u0005c\u0011!A\u0007A!A!\u0002\u0013\u0019\u0007\"B5\u0001\t\u0003Q\u0007bBA\u0011\u0001\u0011U\u00111\u0005\u0005\b\u0003o\u0001AQCA\u001d\u0011!\t\t\u0005\u0001C\u00037\u0005\r\u0003bBA\'\u0001\u0019E\u0011q\n\u0005\u0007\u0003C\u0002A\u0011A\u001d\t\u000f\u0005\r\u0004\u0001\"\u0001\u0002f!9\u0011Q\u000e\u0001\u0005\u0002\u0005=\u0004bBA<\u0001\u0011\u0005\u0011\u0011\u0010\u0002\u0016\u0005&t\u0017M]=Ue\u0016,7\u000b^3qa\u0016\u0014()Y:f\u0015\taR$\u0001\u0003j[Bd\'B\u0001\u0010 \u0003\u001d\u0019wN\u001c<feRT!\u0001I\u0011\u0002\u0015\r|G\u000e\\3di&|gNC\u0001#\u0003\u0015\u00198-\u00197b+\u0015!c.\u0013=}\'\r\u0001Q%\u000b\t\u0003M\u001dj\u0011!I\u0005\u0003Q\u0005\u0012a!\u00118z%\u00164\u0007C\u0001\u00166\u001d\tY3G\u0004\u0002-e9\u0011Q&M\u0007\u0002])\u0011q\u0006M\u0001\u0007yI|w\u000e\u001e \u0004\u0001%\t!%\u0003\u0002!C%\u0011AgH\u0001\b\'R,\u0007\u000f]3s\u0013\t1tG\u0001\bFM\u001aL7-[3oiN\u0003H.\u001b;\u000b\u0005Qz\u0012!C7bq2+gn\u001a;i+\u0005Q\u0004C\u0001\u0014<\u0013\ta\u0014EA\u0002J]R\fQ\"\\1y\u0019\u0016tw\r\u001e5`I\u0015\fHCA C!\t1\u0003)\u0003\u0002BC\t!QK\\5u\u0011\u001d\u0019%!!AA\u0002i\n1\u0001\u001f\u00132\u0003)i\u0017\r\u001f\'f]\u001e$\b\u000eI\u0001\n[f\u001cUO\u001d:f]R,\u0012a\u0012\t\u0003\u0011&c\u0001\u0001B\u0003K\u0001\t\u00071JA\u0001U#\taU\u0005\u0005\u0002\'\u001b&\u0011a*\t\u0002\u0005\u001dVdG.A\u0007ns\u000e+(O]3oi~#S-\u001d\u000b\u0003\u007fECqaQ\u0003\u0002\u0002\u0003\u0007q)\u0001\u0006ns\u000e+(O]3oi\u0002\nQa\u001d;bG.,\u0012!\u0016\t\u0004MY+\u0013BA,\"\u0005\u0015\t%O]1z\u0003%\u0019H/Y2l?\u0012*\u0017\u000f\u0006\u0002@5\"91\tCA\u0001\u0002\u0004)\u0016AB:uC\u000e\\\u0007%A\u0003j]\u0012,\u00070A\u0005j]\u0012,\u0007p\u0018\u0013fcR\u0011qh\u0018\u0005\b\u0007.\t\t\u00111\u0001;\u0003\u0019Ig\u000eZ3yA\u0005!A.\u001a4u+\u0005\u0019\u0007\u0003\u0002\u0014e\u000f\u001eK!!Z\u0011\u0003\u0013\u0019+hn\u0019;j_:\f\u0014!\u00027fMR\u0004\u0013!\u0002:jO\"$\u0018A\u0002:jO\"$\b%\u0001\u0004=S:LGO\u0010\u000b\u000eW\u0006U\u0011qCA\r\u00037\ti\"a\b\u0011\r1\u0004QnR<|\u001b\u0005Y\u0002C\u0001%o\t\u0015y\u0007A1\u0001q\u0005\u0005\t\u0015CA9u!\t1#/\u0003\u0002tC\t9aj\u001c;iS:<\u0007C\u0001\u0014v\u0013\t1\u0018EA\u0002B]f\u0004\"\u0001\u0013=\u0005\u000be\u0004!\u0019\u0001>\u0003\u0007M+(-\u0005\u0002MiB\u0011\u0001\n \u0003\u0006{\u0002\u0011\rA \u0002\u0005\'\u0016l\u0017.\u0005\u0002r\u007fJ)\u0011\u0011A<\u0002\u0006\u0019)\u00111\u0001\u0001\u0001\u007f\naAH]3gS:,W.\u001a8u}A2\u0011qAA\u0006\u0003#\u0001\u0002\u0002\u001c\u0001n\u000f\u0006%\u0011q\u0002\t\u0004\u0011\u0006-AACA\u0007y\u0006\u0005\t\u0011!B\u0001a\n\u0019q\fJ\u0019\u0011\u0007!\u000b\t\u0002\u0002\u0006\u0002\u0014q\f\t\u0011!A\u0003\u0002A\u00141a\u0018\u00133\u0011\u0015A\u0014\u00031\u0001;\u0011\u0015)\u0015\u00031\u0001H\u0011\u0015\u0019\u0016\u00031\u0001V\u0011\u0015a\u0016\u00031\u0001;\u0011\u0015\t\u0017\u00031\u0001d\u0011\u00159\u0017\u00031\u0001d\u0003\u0019)hN]8mYR\u0019q)!\n\t\r\u0005\u001d\"\u00031\u0001H\u0003\u00111\'o\\7)\u0007I\tY\u0003\u0005\u0003\u0002.\u0005MRBAA\u0018\u0015\r\t\t$I\u0001\u000bC:tw\u000e^1uS>t\u0017\u0002BA\u001b\u0003_\u0011q\u0001^1jYJ,7-\u0001\u0004eKR\f7\r\u001b\u000b\u0005\u0003w\tiDD\u0002I\u0003{Aa!a\u0010\u0014\u0001\u00049\u0015\u0001\u00028pI\u0016\f!\"\u001b8ji&\fG.\u001b>f)\u0015y\u0014QIA%\u0011\u0019\t9\u0005\u0006a\u0001\u000f\u0006!!o\\8u\u0011\u0019\tY\u0005\u0006a\u0001u\u0005!1/\u001b>f\u0003%\u0019X-\\5dY>tW\rF\u0005|\u0003#\n)&!\u0017\u0002^!1\u00111K\u000bA\u0002i\nA!\\1y\u0019\"1\u0011qK\u000bA\u0002\u001d\u000b1!\\=D\u0011\u0019\tY&\u0006a\u0001+\u0006\u00191\u000f^6\t\r\u0005}S\u00031\u0001;\u0003\tI\u00070A\bdQ\u0006\u0014\u0018m\u0019;fe&\u001cH/[2t\u00031)7\u000f^5nCR,7+\u001b>f+\t\t9\u0007E\u0002\'\u0003SJ1!a\u001b\"\u0005\u0011auN\\4\u0002\u000f!\f7o\u0015;faV\u0011\u0011\u0011\u000f\t\u0004M\u0005M\u0014bAA;C\t9!i\\8mK\u0006t\u0017\u0001\u0003;ssN\u0003H.\u001b;\u0015\u0003]\u0004
   #12 = Utf8               scala/collection/Stepper
   #13 = Class              #12           // scala/collection/Stepper
   #14 = Utf8               EfficientSplit
   #15 = Utf8               maxLength
   #16 = Utf8               I
   #17 = Utf8               myCurrent
   #18 = Utf8               Ljava/lang/Object;
   #19 = Utf8               TT;
   #20 = Utf8               stack
   #21 = Utf8               [Ljava/lang/Object;
   #22 = Utf8               index
   #23 = Utf8               left
   #24 = Utf8               Lscala/Function1;
   #25 = Utf8               Lscala/Function1<TT;TT;>;
   #26 = Utf8               right
   #27 = Utf8               ()I
   #28 = NameAndType        #15:#16       // maxLength:I
   #29 = Fieldref           #2.#28        // scala/collection/convert/impl/BinaryTreeStepperBase.maxLength:I
   #30 = Utf8               this
   #31 = Utf8               Lscala/collection/convert/impl/BinaryTreeStepperBase;
   #32 = Utf8               maxLength_$eq
   #33 = Utf8               (I)V
   #34 = Utf8               x$1
   #35 = Utf8               ()Ljava/lang/Object;
   #36 = Utf8               ()TT;
   #37 = NameAndType        #17:#18       // myCurrent:Ljava/lang/Object;
   #38 = Fieldref           #2.#37        // scala/collection/convert/impl/BinaryTreeStepperBase.myCurrent:Ljava/lang/Object;
   #39 = Utf8               myCurrent_$eq
   #40 = Utf8               (Ljava/lang/Object;)V
   #41 = Utf8               (TT;)V
   #42 = Utf8               ()[Ljava/lang/Object;
   #43 = NameAndType        #20:#21       // stack:[Ljava/lang/Object;
   #44 = Fieldref           #2.#43        // scala/collection/convert/impl/BinaryTreeStepperBase.stack:[Ljava/lang/Object;
   #45 = Utf8               stack_$eq
   #46 = Utf8               ([Ljava/lang/Object;)V
   #47 = NameAndType        #22:#16       // index:I
   #48 = Fieldref           #2.#47        // scala/collection/convert/impl/BinaryTreeStepperBase.index:I
   #49 = Utf8               index_$eq
   #50 = Utf8               ()Lscala/Function1;
   #51 = Utf8               ()Lscala/Function1<TT;TT;>;
   #52 = NameAndType        #23:#24       // left:Lscala/Function1;
   #53 = Fieldref           #2.#52        // scala/collection/convert/impl/BinaryTreeStepperBase.left:Lscala/Function1;
   #54 = NameAndType        #26:#24       // right:Lscala/Function1;
   #55 = Fieldref           #2.#54        // scala/collection/convert/impl/BinaryTreeStepperBase.right:Lscala/Function1;
   #56 = Utf8               unroll
   #57 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
   #58 = Utf8               (TT;)TT;
   #59 = Utf8               from
   #60 = NameAndType        #23:#50       // left:()Lscala/Function1;
   #61 = Methodref          #2.#60        // scala/collection/convert/impl/BinaryTreeStepperBase.left:()Lscala/Function1;
   #62 = Utf8               scala/Function1
   #63 = Class              #62           // scala/Function1
   #64 = Utf8               apply
   #65 = NameAndType        #64:#57       // apply:(Ljava/lang/Object;)Ljava/lang/Object;
   #66 = InterfaceMethodref #63.#65       // scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
   #67 = NameAndType        #22:#27       // index:()I
   #68 = Methodref          #2.#67        // scala/collection/convert/impl/BinaryTreeStepperBase.index:()I
   #69 = NameAndType        #20:#42       // stack:()[Ljava/lang/Object;
   #70 = Methodref          #2.#69        // scala/collection/convert/impl/BinaryTreeStepperBase.stack:()[Ljava/lang/Object;
   #71 = Utf8               java/util/Arrays
   #72 = Class              #71           // java/util/Arrays
   #73 = Utf8               copyOf
   #74 = Utf8               ([Ljava/lang/Object;I)[Ljava/lang/Object;
   #75 = NameAndType        #73:#74       // copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
   #76 = Methodref          #72.#75       // java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
   #77 = NameAndType        #45:#46       // stack_$eq:([Ljava/lang/Object;)V
   #78 = Methodref          #2.#77        // scala/collection/convert/impl/BinaryTreeStepperBase.stack_$eq:([Ljava/lang/Object;)V
   #79 = NameAndType        #49:#33       // index_$eq:(I)V
   #80 = Methodref          #2.#79        // scala/collection/convert/impl/BinaryTreeStepperBase.index_$eq:(I)V
   #81 = Utf8               l
   #82 = Utf8               detach
   #83 = Utf8               node
   #84 = NameAndType        #26:#50       // right:()Lscala/Function1;
   #85 = Methodref          #2.#84        // scala/collection/convert/impl/BinaryTreeStepperBase.right:()Lscala/Function1;
   #86 = NameAndType        #56:#57       // unroll:(Ljava/lang/Object;)Ljava/lang/Object;
   #87 = Methodref          #2.#86        // scala/collection/convert/impl/BinaryTreeStepperBase.unroll:(Ljava/lang/Object;)Ljava/lang/Object;
   #88 = Utf8               last
   #89 = Utf8               r
   #90 = Utf8               initialize
   #91 = Utf8               (Ljava/lang/Object;I)V
   #92 = Utf8               (TT;I)V
   #93 = Utf8               root
   #94 = Utf8               size
   #95 = NameAndType        #32:#33       // maxLength_$eq:(I)V
   #96 = Methodref          #2.#95        // scala/collection/convert/impl/BinaryTreeStepperBase.maxLength_$eq:(I)V
   #97 = NameAndType        #39:#40       // myCurrent_$eq:(Ljava/lang/Object;)V
   #98 = Methodref          #2.#97        // scala/collection/convert/impl/BinaryTreeStepperBase.myCurrent_$eq:(Ljava/lang/Object;)V
   #99 = Utf8               scala/collection/convert/impl/BinaryTreeStepper$
  #100 = Class              #99           // scala/collection/convert/impl/BinaryTreeStepper$
  #101 = Utf8               MODULE$
  #102 = Utf8               Lscala/collection/convert/impl/BinaryTreeStepper$;
  #103 = NameAndType        #101:#102     // MODULE$:Lscala/collection/convert/impl/BinaryTreeStepper$;
  #104 = Fieldref           #100.#103     // scala/collection/convert/impl/BinaryTreeStepper$.MODULE$:Lscala/collection/convert/impl/BinaryTreeStepper$;
  #105 = Utf8               emptyStack
  #106 = NameAndType        #105:#42      // emptyStack:()[Ljava/lang/Object;
  #107 = Methodref          #100.#106     // scala/collection/convert/impl/BinaryTreeStepper$.emptyStack:()[Ljava/lang/Object;
  #108 = NameAndType        #82:#57       // detach:(Ljava/lang/Object;)Ljava/lang/Object;
  #109 = Methodref          #2.#108       // scala/collection/convert/impl/BinaryTreeStepperBase.detach:(Ljava/lang/Object;)Ljava/lang/Object;
  #110 = Utf8               semiclone
  #111 = Utf8               (ILjava/lang/Object;[Ljava/lang/Object;I)Lscala/collection/convert/impl/BinaryTreeStepperBase;
  #112 = Utf8               (ITT;[Ljava/lang/Object;I)TSemi;
  #113 = Utf8               maxL
  #114 = Utf8               myC
  #115 = Utf8               stk
  #116 = Utf8               ix
  #117 = Utf8               characteristics
  #118 = Utf8               estimateSize
  #119 = Utf8               ()J
  #120 = Utf8               hasStep
  #121 = Utf8               ()Z
  #122 = NameAndType        #120:#121     // hasStep:()Z
  #123 = Methodref          #2.#122       // scala/collection/convert/impl/BinaryTreeStepperBase.hasStep:()Z
  #124 = NameAndType        #15:#27       // maxLength:()I
  #125 = Methodref          #2.#124       // scala/collection/convert/impl/BinaryTreeStepperBase.maxLength:()I
  #126 = NameAndType        #17:#35       // myCurrent:()Ljava/lang/Object;
  #127 = Methodref          #2.#126       // scala/collection/convert/impl/BinaryTreeStepperBase.myCurrent:()Ljava/lang/Object;
  #128 = Utf8               ans
  #129 = Utf8               trySplit
  #130 = Utf8               ()TSub;
  #131 = Utf8               copyOfRange
  #132 = Utf8               ([Ljava/lang/Object;II)[Ljava/lang/Object;
  #133 = NameAndType        #131:#132     // copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;
  #134 = Methodref          #72.#133      // java/util/Arrays.copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;
  #135 = NameAndType        #110:#111     // semiclone:(ILjava/lang/Object;[Ljava/lang/Object;I)Lscala/collection/convert/impl/BinaryTreeStepperBase;
  #136 = Methodref          #2.#135       // scala/collection/convert/impl/BinaryTreeStepperBase.semiclone:(ILjava/lang/Object;[Ljava/lang/Object;I)Lscala/collection/convert/impl/BinaryTreeStepperBase;
  #137 = Utf8               leftStack
  #138 = Utf8               leftIndex
  #139 = Utf8               leftCurrent
  #140 = Utf8               leftMax
  #141 = Class              #21           // "[Ljava/lang/Object;"
  #142 = Utf8               <init>
  #143 = Utf8               (ILjava/lang/Object;[Ljava/lang/Object;ILscala/Function1;Lscala/Function1;)V
  #144 = Utf8               (ITT;[Ljava/lang/Object;ILscala/Function1<TT;TT;>;Lscala/Function1<TT;TT;>;)V
  #145 = Utf8               ()V
  #146 = NameAndType        #142:#145     // "<init>":()V
  #147 = Methodref          #5.#146       // java/lang/Object."<init>":()V
  #148 = Utf8               Signature
  #149 = Utf8               Code
  #150 = Utf8               LineNumberTable
  #151 = Utf8               LocalVariableTable
  #152 = Utf8               MethodParameters
  #153 = Utf8               StackMapTable
  #154 = Utf8               InnerClasses
  #155 = Utf8               SourceFile
  #156 = Utf8               RuntimeVisibleAnnotations
  #157 = Utf8               ScalaInlineInfo
  #158 = Utf8               ScalaSig
{
  private int maxLength;
    descriptor: I
    flags: (0x0002) ACC_PRIVATE

  private T myCurrent;
    descriptor: Ljava/lang/Object;
    flags: (0x0002) ACC_PRIVATE
    Signature: #19                          // TT;

  private java.lang.Object[] stack;
    descriptor: [Ljava/lang/Object;
    flags: (0x0002) ACC_PRIVATE

  private int index;
    descriptor: I
    flags: (0x0002) ACC_PRIVATE

  private final scala.Function1<T, T> left;
    descriptor: Lscala/Function1;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #25                          // Lscala/Function1<TT;TT;>;

  private final scala.Function1<T, T> right;
    descriptor: Lscala/Function1;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #25                          // Lscala/Function1<TT;TT;>;

  public int maxLength();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #29                 // Field maxLength:I
         4: ireturn
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;

  public void maxLength_$eq(int);
    descriptor: (I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: putfield      #29                 // Field maxLength:I
         5: return
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0       6     1   x$1   I
    MethodParameters:
      Name                           Flags
      x$1                            final

  public T myCurrent();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #38                 // Field myCurrent:Ljava/lang/Object;
         4: areturn
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
    Signature: #36                          // ()TT;

  public void myCurrent_$eq(T);
    descriptor: (Ljava/lang/Object;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #38                 // Field myCurrent:Ljava/lang/Object;
         5: return
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0       6     1   x$1   Ljava/lang/Object;
    Signature: #41                          // (TT;)V
    MethodParameters:
      Name                           Flags
      x$1                            final

  public java.lang.Object[] stack();
    descriptor: ()[Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #44                 // Field stack:[Ljava/lang/Object;
         4: areturn
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;

  public void stack_$eq(java.lang.Object[]);
    descriptor: ([Ljava/lang/Object;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #44                 // Field stack:[Ljava/lang/Object;
         5: return
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0       6     1   x$1   [Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      x$1                            final

  public int index();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #48                 // Field index:I
         4: ireturn
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;

  public void index_$eq(int);
    descriptor: (I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: putfield      #48                 // Field index:I
         5: return
      LineNumberTable:
        line 48: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0       6     1   x$1   I
    MethodParameters:
      Name                           Flags
      x$1                            final

  public scala.Function1<T, T> left();
    descriptor: ()Lscala/Function1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #53                 // Field left:Lscala/Function1;
         4: areturn
      LineNumberTable:
        line 49: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
    Signature: #51                          // ()Lscala/Function1<TT;TT;>;

  public scala.Function1<T, T> right();
    descriptor: ()Lscala/Function1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #55                 // Field right:Lscala/Function1;
         4: areturn
      LineNumberTable:
        line 49: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
    Signature: #51                          // ()Lscala/Function1<TT;TT;>;

  public final T unroll(T);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=5, locals=3, args_size=2
         0: aload_0
         1: invokevirtual #61                 // Method left:()Lscala/Function1;
         4: aload_1
         5: invokeinterface #66,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
        10: astore_2
        11: aload_2
        12: ifnonnull     17
        15: aload_1
        16: areturn
        17: aload_0
        18: invokevirtual #68                 // Method index:()I
        21: iconst_1
        22: iadd
        23: aload_0
        24: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        27: arraylength
        28: if_icmplt     51
        31: aload_0
        32: aload_0
        33: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        36: iconst_4
        37: aload_0
        38: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        41: arraylength
        42: iconst_2
        43: imul
        44: iadd
        45: invokestatic  #76                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
        48: invokevirtual #78                 // Method stack_$eq:([Ljava/lang/Object;)V
        51: aload_0
        52: aload_0
        53: invokevirtual #68                 // Method index:()I
        56: iconst_1
        57: iadd
        58: invokevirtual #80                 // Method index_$eq:(I)V
        61: aload_0
        62: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        65: aload_0
        66: invokevirtual #68                 // Method index:()I
        69: aload_1
        70: aastore
        71: aload_2
        72: astore_1
        73: goto          0
      StackMapTable: number_of_entries = 3
        frame_type = 0 /* same */
        frame_type = 252 /* append */
          offset_delta = 16
          locals = [ class java/lang/Object ]
        frame_type = 33 /* same */
      LineNumberTable:
        line 57: 0
        line 58: 11
        line 60: 17
        line 61: 51
        line 62: 61
        line 63: 71
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           11      65     2     l   Ljava/lang/Object;
            0      76     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0      76     1  from   Ljava/lang/Object;
    Signature: #58                          // (TT;)TT;
    MethodParameters:
      Name                           Flags
      from                           final

  public final T detach(T);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=5, locals=4, args_size=2
         0: aload_0
         1: invokevirtual #85                 // Method right:()Lscala/Function1;
         4: aload_1
         5: invokeinterface #66,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
        10: astore_2
        11: aload_2
        12: ifnull        75
        15: aload_0
        16: aload_2
        17: invokevirtual #87                 // Method unroll:(Ljava/lang/Object;)Ljava/lang/Object;
        20: astore_3
        21: aload_0
        22: invokevirtual #68                 // Method index:()I
        25: iconst_1
        26: iadd
        27: aload_0
        28: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        31: arraylength
        32: if_icmplt     55
        35: aload_0
        36: aload_0
        37: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        40: iconst_4
        41: aload_0
        42: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        45: arraylength
        46: iconst_2
        47: imul
        48: iadd
        49: invokestatic  #76                 // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
        52: invokevirtual #78                 // Method stack_$eq:([Ljava/lang/Object;)V
        55: aload_0
        56: aload_0
        57: invokevirtual #68                 // Method index:()I
        60: iconst_1
        61: iadd
        62: invokevirtual #80                 // Method index_$eq:(I)V
        65: aload_0
        66: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        69: aload_0
        70: invokevirtual #68                 // Method index:()I
        73: aload_3
        74: aastore
        75: aload_1
        76: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 253 /* append */
          offset_delta = 55
          locals = [ class java/lang/Object, class java/lang/Object ]
        frame_type = 250 /* chop */
          offset_delta = 19
      LineNumberTable:
        line 74: 0
        line 75: 11
        line 76: 15
        line 77: 21
        line 78: 55
        line 79: 65
        line 81: 75
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           21      54     3  last   Ljava/lang/Object;
           11      65     2     r   Ljava/lang/Object;
            0      77     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0      77     1  node   Ljava/lang/Object;
    Signature: #58                          // (TT;)TT;
    MethodParameters:
      Name                           Flags
      node                           final

  public final void initialize(T, int);
    descriptor: (Ljava/lang/Object;I)V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=4, locals=3, args_size=3
         0: aload_1
         1: ifnonnull     30
         4: aload_0
         5: iconst_0
         6: invokevirtual #96                 // Method maxLength_$eq:(I)V
         9: aload_0
        10: aconst_null
        11: invokevirtual #98                 // Method myCurrent_$eq:(Ljava/lang/Object;)V
        14: aload_0
        15: getstatic     #104                // Field scala/collection/convert/impl/BinaryTreeStepper$.MODULE$:Lscala/collection/convert/impl/BinaryTreeStepper$;
        18: invokevirtual #107                // Method scala/collection/convert/impl/BinaryTreeStepper$.emptyStack:()[Ljava/lang/Object;
        21: invokevirtual #78                 // Method stack_$eq:([Ljava/lang/Object;)V
        24: aload_0
        25: iconst_m1
        26: invokevirtual #80                 // Method index_$eq:(I)V
        29: return
        30: aload_0
        31: iload_2
        32: invokevirtual #96                 // Method maxLength_$eq:(I)V
        35: aload_0
        36: iconst_m1
        37: invokevirtual #80                 // Method index_$eq:(I)V
        40: aload_0
        41: aload_0
        42: aload_0
        43: aload_1
        44: invokevirtual #87                 // Method unroll:(Ljava/lang/Object;)Ljava/lang/Object;
        47: invokevirtual #109                // Method detach:(Ljava/lang/Object;)Ljava/lang/Object;
        50: invokevirtual #98                 // Method myCurrent_$eq:(Ljava/lang/Object;)V
        53: return
      StackMapTable: number_of_entries = 1
        frame_type = 30 /* same */
      LineNumberTable:
        line 91: 0
        line 92: 4
        line 93: 9
        line 94: 14
        line 95: 24
        line 98: 30
        line 99: 35
        line 100: 40
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      54     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0      54     1  root   Ljava/lang/Object;
            0      54     2  size   I
    Signature: #92                          // (TT;I)V
    MethodParameters:
      Name                           Flags
      root                           final
      size                           final

  public abstract Semi semiclone(int, T, java.lang.Object[], int);
    descriptor: (ILjava/lang/Object;[Ljava/lang/Object;I)Lscala/collection/convert/impl/BinaryTreeStepperBase;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #112                         // (ITT;[Ljava/lang/Object;I)TSemi;
    MethodParameters:
      Name                           Flags
      maxL                           final
      myC                            final
      stk                            final
      ix                             final

  public int characteristics();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: bipush        16
         2: ireturn
      LineNumberTable:
        line 105: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;

  public long estimateSize();
    descriptor: ()J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #123                // Method hasStep:()Z
         4: ifeq          13
         7: aload_0
         8: invokevirtual #125                // Method maxLength:()I
        11: i2l
        12: lreturn
        13: lconst_0
        14: lreturn
      StackMapTable: number_of_entries = 1
        frame_type = 13 /* same */
      LineNumberTable:
        line 107: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;

  public boolean hasStep();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: aload_0
         1: invokevirtual #127                // Method myCurrent:()Ljava/lang/Object;
         4: ifnonnull     75
         7: aload_0
         8: invokevirtual #125                // Method maxLength:()I
        11: iconst_0
        12: if_icmple     77
        15: aload_0
        16: invokevirtual #68                 // Method index:()I
        19: iconst_0
        20: if_icmpge     42
        23: aload_0
        24: iconst_0
        25: invokevirtual #96                 // Method maxLength_$eq:(I)V
        28: aload_0
        29: getstatic     #104                // Field scala/collection/convert/impl/BinaryTreeStepper$.MODULE$:Lscala/collection/convert/impl/BinaryTreeStepper$;
        32: invokevirtual #107                // Method scala/collection/convert/impl/BinaryTreeStepper$.emptyStack:()[Ljava/lang/Object;
        35: invokevirtual #78                 // Method stack_$eq:([Ljava/lang/Object;)V
        38: iconst_0
        39: goto          72
        42: aload_0
        43: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        46: aload_0
        47: invokevirtual #68                 // Method index:()I
        50: aaload
        51: astore_1
        52: aload_0
        53: aload_0
        54: invokevirtual #68                 // Method index:()I
        57: iconst_1
        58: isub
        59: invokevirtual #80                 // Method index_$eq:(I)V
        62: aload_0
        63: aload_0
        64: aload_1
        65: invokevirtual #109                // Method detach:(Ljava/lang/Object;)Ljava/lang/Object;
        68: invokevirtual #98                 // Method myCurrent_$eq:(Ljava/lang/Object;)V
        71: iconst_1
        72: ifeq          77
        75: iconst_1
        76: ireturn
        77: iconst_0
        78: ireturn
      StackMapTable: number_of_entries = 4
        frame_type = 42 /* same */
        frame_type = 93 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 2 /* same */
        frame_type = 1 /* same */
      LineNumberTable:
        line 109: 0
        line 110: 15
        line 112: 42
        line 113: 52
        line 114: 62
        line 115: 71
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           52      20     1   ans   Ljava/lang/Object;
            0      79     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;

  public Sub trySplit();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=6, args_size=1
         0: aload_0
         1: invokevirtual #123                // Method hasStep:()Z
         4: ifeq          15
         7: aload_0
         8: invokevirtual #68                 // Method index:()I
        11: iconst_0
        12: if_icmpge     17
        15: aconst_null
        16: areturn
        17: aload_0
        18: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        21: iconst_0
        22: aaload
        23: astore_1
        24: aload_0
        25: invokevirtual #68                 // Method index:()I
        28: iconst_0
        29: if_icmple     49
        32: aload_0
        33: invokevirtual #70                 // Method stack:()[Ljava/lang/Object;
        36: iconst_1
        37: aload_0
        38: invokevirtual #68                 // Method index:()I
        41: iconst_1
        42: iadd
        43: invokestatic  #134                // Method java/util/Arrays.copyOfRange:([Ljava/lang/Object;II)[Ljava/lang/Object;
        46: goto          55
        49: getstatic     #104                // Field scala/collection/convert/impl/BinaryTreeStepper$.MODULE$:Lscala/collection/convert/impl/BinaryTreeStepper$;
        52: invokevirtual #107                // Method scala/collection/convert/impl/BinaryTreeStepper$.emptyStack:()[Ljava/lang/Object;
        55: astore_2
        56: aload_0
        57: invokevirtual #68                 // Method index:()I
        60: iconst_1
        61: isub
        62: istore_3
        63: aload_0
        64: invokevirtual #127                // Method myCurrent:()Ljava/lang/Object;
        67: astore        4
        69: aload_0
        70: invokevirtual #125                // Method maxLength:()I
        73: istore        5
        75: aload_0
        76: iconst_m1
        77: invokevirtual #80                 // Method index_$eq:(I)V
        80: aload_0
        81: aload_1
        82: invokevirtual #109                // Method detach:(Ljava/lang/Object;)Ljava/lang/Object;
        85: pop
        86: aload_0
        87: aload_1
        88: invokevirtual #98                 // Method myCurrent_$eq:(Ljava/lang/Object;)V
        91: iload         5
        93: iconst_2
        94: aload_0
        95: invokevirtual #68                 // Method index:()I
        98: iadd
        99: isub
       100: istore        5
       102: aload_0
       103: aload_0
       104: invokevirtual #125                // Method maxLength:()I
       107: iconst_2
       108: iload_3
       109: iadd
       110: isub
       111: invokevirtual #96                 // Method maxLength_$eq:(I)V
       114: aload_0
       115: iload         5
       117: aload         4
       119: aload_2
       120: iload_3
       121: invokevirtual #136                // Method semiclone:(ILjava/lang/Object;[Ljava/lang/Object;I)Lscala/collection/convert/impl/BinaryTreeStepperBase;
       124: areturn
      StackMapTable: number_of_entries = 4
        frame_type = 15 /* same */
        frame_type = 1 /* same */
        frame_type = 252 /* append */
          offset_delta = 31
          locals = [ class java/lang/Object ]
        frame_type = 69 /* same_locals_1_stack_item */
          stack = [ class "[Ljava/lang/Object;" ]
      LineNumberTable:
        line 125: 0
        line 127: 17
        line 129: 24
        line 130: 49
        line 131: 56
        line 132: 63
        line 133: 69
        line 134: 75
        line 135: 80
        line 136: 86
        line 137: 91
        line 138: 102
        line 139: 114
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           24     100     1  root   Ljava/lang/Object;
           56      68     2 leftStack   [Ljava/lang/Object;
           63      61     3 leftIndex   I
           69      55     4 leftCurrent   Ljava/lang/Object;
           75      49     5 leftMax   I
            0     125     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
    Signature: #130                         // ()TSub;

  public scala.collection.convert.impl.BinaryTreeStepperBase(int, T, java.lang.Object[], int, scala.Function1<T, T>, scala.Function1<T, T>);
    descriptor: (ILjava/lang/Object;[Ljava/lang/Object;ILscala/Function1;Lscala/Function1;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=7, args_size=7
         0: aload_0
         1: iload_1
         2: putfield      #29                 // Field maxLength:I
         5: aload_0
         6: aload_2
         7: putfield      #38                 // Field myCurrent:Ljava/lang/Object;
        10: aload_0
        11: aload_3
        12: putfield      #44                 // Field stack:[Ljava/lang/Object;
        15: aload_0
        16: iload         4
        18: putfield      #48                 // Field index:I
        21: aload_0
        22: aload         5
        24: putfield      #53                 // Field left:Lscala/Function1;
        27: aload_0
        28: aload         6
        30: putfield      #55                 // Field right:Lscala/Function1;
        33: aload_0
        34: invokespecial #147                // Method java/lang/Object."<init>":()V
        37: return
      LineNumberTable:
        line 48: 0
        line 49: 21
        line 51: 33
        line 47: 37
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      38     0  this   Lscala/collection/convert/impl/BinaryTreeStepperBase;
            0      38     1 maxLength   I
            0      38     2 myCurrent   Ljava/lang/Object;
            0      38     3 stack   [Ljava/lang/Object;
            0      38     4 index   I
            0      38     5  left   Lscala/Function1;
            0      38     6 right   Lscala/Function1;
    Signature: #144                         // (ITT;[Ljava/lang/Object;ILscala/Function1<TT;TT;>;Lscala/Function1<TT;TT;>;)V
    MethodParameters:
      Name                           Flags
      maxLength                      final
      myCurrent                      final
      stack                          final
      index                          final
      left                           final
      right                          final
}
InnerClasses:
  public static #14= #7 of #13;           // EfficientSplit=class scala/collection/Stepper$EfficientSplit of class scala/collection/Stepper
Signature: #3                           // <A:Ljava/lang/Object;T:Ljava/lang/Object;Sub:Ljava/lang/Object;Semi:TSub;>Ljava/lang/Object;Lscala/collection/Stepper$EfficientSplit;
SourceFile: "BinaryTreeStepper.scala"
RuntimeVisibleAnnotations:
  0: #9(#10=s#11)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\u0005mdA\u0002\u000e\u001c\u0003\u0003y2\u0005\u0003\u00059\u0001\t\u0005\r\u0011\"\u0005:\u0011!i\u0004A!a\u0001\n#q\u0004\u0002\u0003#\u0001\u0005\u0003\u0005\u000b\u0015\u0002\u001e\t\u0011\u0015\u0003!\u00111A\u0005\u0012\u0019C\u0001b\u0014\u0001\u0003\u0002\u0004%\t\u0002\u0015\u0005\t%\u0002\u0011\t\u0011)Q\u0005\u000f\"A1\u000b\u0001BA\u0002\u0013EA\u000b\u0003\u0005Y\u0001\t\u0005\r\u0011\"\u0005Z\u0011!Y\u0006A!A!B\u0013)\u0006\u0002\u0003/\u0001\u0005\u0003\u0007I\u0011C\u001d\t\u0011u\u0003!\u00111A\u0005\u0012yC\u0001\u0002\u0019\u0001\u0003\u0002\u0003\u0006KA\u000f\u0005\tC\u0002\u0011)\u0019!C\tE\"Aa\r\u0001B\u0001B\u0003%1\r\u0003\u0005h\u0001\t\u0015\r\u0011\"\u0005c\u0011!A\u0007A!A!\u0002\u0013\u0019\u0007\"B5\u0001\t\u0003Q\u0007bBA\u0011\u0001\u0011U\u00111\u0005\u0005\b\u0003o\u0001AQCA\u001d\u0011!\t\t\u0005\u0001C\u00037\u0005\r\u0003bBA\'\u0001\u0019E\u0011q\n\u0005\u0007\u0003C\u0002A\u0011A\u001d\t\u000f\u0005\r\u0004\u0001\"\u0001\u0002f!9\u0011Q\u000e\u0001\u0005\u0002\u0005=\u0004bBA<\u0001\u0011\u0005\u0011\u0011\u0010\u0002\u0016\u0005&t\u0017M]=Ue\u0016,7\u000b^3qa\u0016\u0014()Y:f\u0015\taR$\u0001\u0003j[Bd\'B\u0001\u0010 \u0003\u001d\u0019wN\u001c<feRT!\u0001I\u0011\u0002\u0015\r|G\u000e\\3di&|gNC\u0001#\u0003\u0015\u00198-\u00197b+\u0015!c.\u0013=}\'\r\u0001Q%\u000b\t\u0003M\u001dj\u0011!I\u0005\u0003Q\u0005\u0012a!\u00118z%\u00164\u0007C\u0001\u00166\u001d\tY3G\u0004\u0002-e9\u0011Q&M\u0007\u0002])\u0011q\u0006M\u0001\u0007yI|w\u000e\u001e \u0004\u0001%\t!%\u0003\u0002!C%\u0011AgH\u0001\b\'R,\u0007\u000f]3s\u0013\t1tG\u0001\bFM\u001aL7-[3oiN\u0003H.\u001b;\u000b\u0005Qz\u0012!C7bq2+gn\u001a;i+\u0005Q\u0004C\u0001\u0014<\u0013\ta\u0014EA\u0002J]R\fQ\"\\1y\u0019\u0016tw\r\u001e5`I\u0015\fHCA C!\t1\u0003)\u0003\u0002BC\t!QK\\5u\u0011\u001d\u0019%!!AA\u0002i\n1\u0001\u001f\u00132\u0003)i\u0017\r\u001f\'f]\u001e$\b\u000eI\u0001\n[f\u001cUO\u001d:f]R,\u0012a\u0012\t\u0003\u0011&c\u0001\u0001B\u0003K\u0001\t\u00071JA\u0001U#\taU\u0005\u0005\u0002\'\u001b&\u0011a*\t\u0002\u0005\u001dVdG.A\u0007ns\u000e+(O]3oi~#S-\u001d\u000b\u0003\u007fECqaQ\u0003\u0002\u0002\u0003\u0007q)\u0001\u0006ns\u000e+(O]3oi\u0002\nQa\u001d;bG.,\u0012!\u0016\t\u0004MY+\u0013BA,\"\u0005\u0015\t%O]1z\u0003%\u0019H/Y2l?\u0012*\u0017\u000f\u0006\u0002@5\"91\tCA\u0001\u0002\u0004)\u0016AB:uC\u000e\\\u0007%A\u0003j]\u0012,\u00070A\u0005j]\u0012,\u0007p\u0018\u0013fcR\u0011qh\u0018\u0005\b\u0007.\t\t\u00111\u0001;\u0003\u0019Ig\u000eZ3yA\u0005!A.\u001a4u+\u0005\u0019\u0007\u0003\u0002\u0014e\u000f\u001eK!!Z\u0011\u0003\u0013\u0019+hn\u0019;j_:\f\u0014!\u00027fMR\u0004\u0013!\u0002:jO\"$\u0018A\u0002:jO\"$\b%\u0001\u0004=S:LGO\u0010\u000b\u000eW\u0006U\u0011qCA\r\u00037\ti\"a\b\u0011\r1\u0004QnR<|\u001b\u0005Y\u0002C\u0001%o\t\u0015y\u0007A1\u0001q\u0005\u0005\t\u0015CA9u!\t1#/\u0003\u0002tC\t9aj\u001c;iS:<\u0007C\u0001\u0014v\u0013\t1\u0018EA\u0002B]f\u0004\"\u0001\u0013=\u0005\u000be\u0004!\u0019\u0001>\u0003\u0007M+(-\u0005\u0002MiB\u0011\u0001\n \u0003\u0006{\u0002\u0011\rA \u0002\u0005\'\u0016l\u0017.\u0005\u0002r\u007fJ)\u0011\u0011A<\u0002\u0006\u0019)\u00111\u0001\u0001\u0001\u007f\naAH]3gS:,W.\u001a8u}A2\u0011qAA\u0006\u0003#\u0001\u0002\u0002\u001c\u0001n\u000f\u0006%\u0011q\u0002\t\u0004\u0011\u0006-AACA\u0007y\u0006\u0005\t\u0011!B\u0001a\n\u0019q\fJ\u0019\u0011\u0007!\u000b\t\u0002\u0002\u0006\u0002\u0014q\f\t\u0011!A\u0003\u0002A\u00141a\u0018\u00133\u0011\u0015A\u0014\u00031\u0001;\u0011\u0015)\u0015\u00031\u0001H\u0011\u0015\u0019\u0016\u00031\u0001V\u0011\u0015a\u0016\u00031\u0001;\u0011\u0015\t\u0017\u00031\u0001d\u0011\u00159\u0017\u00031\u0001d\u0003\u0019)hN]8mYR\u0019q)!\n\t\r\u0005\u001d\"\u00031\u0001H\u0003\u00111\'o\\7)\u0007I\tY\u0003\u0005\u0003\u0002.\u0005MRBAA\u0018\u0015\r\t\t$I\u0001\u000bC:tw\u000e^1uS>t\u0017\u0002BA\u001b\u0003_\u0011q\u0001^1jYJ,7-\u0001\u0004eKR\f7\r\u001b\u000b\u0005\u0003w\tiDD\u0002I\u0003{Aa!a\u0010\u0014\u0001\u00049\u0015\u0001\u00028pI\u0016\f!\"\u001b8ji&\fG.\u001b>f)\u0015y\u0014QIA%\u0011\u0019\t9\u0005\u0006a\u0001\u000f\u0006!!o\\8u\u0011\u0019\tY\u0005\u0006a\u0001u\u0005!1/\u001b>f\u0003%\u0019X-\\5dY>tW\rF\u0005|\u0003#\n)&!\u0017\u0002^!1\u00111K\u000bA\u0002i\nA!\\1y\u0019\"1\u0011qK\u000bA\u0002\u001d\u000b1!\\=D\u0011\u0019\tY&\u0006a\u0001+\u0006\u00191\u000f^6\t\r\u0005}S\u00031\u0001;\u0003\tI\u00070A\bdQ\u0006\u0014\u0018m\u0019;fe&\u001cH/[2t\u00031)7\u000f^5nCR,7+\u001b>f+\t\t9\u0007E\u0002\'\u0003SJ1!a\u001b\"\u0005\u0011auN\\4\u0002\u000f!\f7o\u0015;faV\u0011\u0011\u0011\u000f\t\u0004M\u0005M\u0014bAA;C\t9!i\\8mK\u0006t\u0017\u0001\u0003;ssN\u0003H.\u001b;\u0015\u0003]\u0004"
    )
  ScalaInlineInfo: length = 0x63 (unknown attribute)
   01 00 00 13 00 8E 00 8F 00 00 75 00 1B 00 00 52
   00 39 01 00 76 00 77 00 00 78 00 79 00 00 16 00
   1B 00 00 31 00 21 00 00 5A 00 5B 01 00 17 00 32
   00 00 0F 00 1B 00 00 20 00 21 00 00 11 00 23 00
   00 27 00 28 00 00 1A 00 32 00 00 6E 00 6F 00 00
   14 00 2A 00 00 2D 00 2E 00 00 81 00 23 00 00 38
   00 39 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
