Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/apache/commons/io/input/CharSequenceReader.class
  Last modified May 29, 2022; size 3947 bytes
  SHA-256 checksum a794b05a3079ba1fa562acc35d98271483d90bb18ff06afc2b4dd1173ec438df
  Compiled from "CharSequenceReader.java"
public class org.apache.commons.io.input.CharSequenceReader extends java.io.Reader implements java.io.Serializable
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #48                         // org/apache/commons/io/input/CharSequenceReader
  super_class: #49                        // java/io/Reader
  interfaces: 1, fields: 6, methods: 14, attributes: 1
Constant pool:
    #1 = Class              #103          // org/apache/commons/io/IOUtils
    #2 = Methodref          #48.#104      // org/apache/commons/io/input/CharSequenceReader."<init>":(Ljava/lang/CharSequence;I)V
    #3 = Class              #105          // java/lang/Integer
    #4 = Integer            2147483647
    #5 = Methodref          #48.#106      // org/apache/commons/io/input/CharSequenceReader."<init>":(Ljava/lang/CharSequence;II)V
    #6 = Methodref          #49.#107      // java/io/Reader."<init>":()V
    #7 = Class              #108          // java/lang/IllegalArgumentException
    #8 = Class              #109          // java/lang/StringBuilder
    #9 = Methodref          #8.#107       // java/lang/StringBuilder."<init>":()V
   #10 = String             #110          // Start index is less than zero:
   #11 = Methodref          #8.#111       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #12 = Methodref          #8.#112       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   #13 = Methodref          #8.#113       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #14 = Methodref          #7.#114       // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
   #15 = String             #115          // End index is less than start
   #16 = String             #116          // :
   #17 = String             #117          //
   #18 = Fieldref           #48.#118      // org/apache/commons/io/input/CharSequenceReader.charSequence:Ljava/lang/CharSequence;
   #19 = Fieldref           #48.#119      // org/apache/commons/io/input/CharSequenceReader.start:I
   #20 = Methodref          #3.#120       // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
   #21 = Fieldref           #48.#121      // org/apache/commons/io/input/CharSequenceReader.end:Ljava/lang/Integer;
   #22 = Fieldref           #48.#122      // org/apache/commons/io/input/CharSequenceReader.idx:I
   #23 = Fieldref           #48.#123      // org/apache/commons/io/input/CharSequenceReader.mark:I
   #24 = InterfaceMethodref #124.#125     // java/lang/CharSequence.length:()I
   #25 = Methodref          #126.#127     // java/lang/Math.min:(II)I
   #26 = Methodref          #3.#128       // java/lang/Integer.intValue:()I
   #27 = Methodref          #48.#129      // org/apache/commons/io/input/CharSequenceReader.end:()I
   #28 = InterfaceMethodref #124.#130     // java/lang/CharSequence.charAt:(I)C
   #29 = String             #89           // array
   #30 = Methodref          #131.#132     // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
   #31 = Class              #133          // java/lang/IndexOutOfBoundsException
   #32 = String             #134          // Array Size=
   #33 = String             #135          // , offset=
   #34 = String             #136          // , length=
   #35 = Methodref          #31.#114      // java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
   #36 = Class              #137          // java/lang/String
   #37 = Methodref          #36.#138      // java/lang/String.getChars:(II[CI)V
   #38 = Methodref          #8.#138       // java/lang/StringBuilder.getChars:(II[CI)V
   #39 = Class              #139          // java/lang/StringBuffer
   #40 = Methodref          #39.#138      // java/lang/StringBuffer.getChars:(II[CI)V
   #41 = Methodref          #48.#140      // org/apache/commons/io/input/CharSequenceReader.read:()I
   #42 = String             #141          // Number of characters to skip is less than zero:
   #43 = Methodref          #8.#142       // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   #44 = Methodref          #126.#143     // java/lang/Math.min:(JJ)J
   #45 = Methodref          #48.#144      // org/apache/commons/io/input/CharSequenceReader.start:()I
   #46 = InterfaceMethodref #124.#145     // java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
   #47 = InterfaceMethodref #124.#113     // java/lang/CharSequence.toString:()Ljava/lang/String;
   #48 = Class              #146          // org/apache/commons/io/input/CharSequenceReader
   #49 = Class              #147          // java/io/Reader
   #50 = Class              #148          // java/io/Serializable
   #51 = Utf8               serialVersionUID
   #52 = Utf8               J
   #53 = Utf8               ConstantValue
   #54 = Long               3724187752191401220l
   #56 = Utf8               charSequence
   #57 = Utf8               Ljava/lang/CharSequence;
   #58 = Utf8               idx
   #59 = Utf8               I
   #60 = Utf8               mark
   #61 = Utf8               start
   #62 = Utf8               end
   #63 = Utf8               Ljava/lang/Integer;
   #64 = Utf8               <init>
   #65 = Utf8               (Ljava/lang/CharSequence;)V
   #66 = Utf8               Code
   #67 = Utf8               LineNumberTable
   #68 = Utf8               LocalVariableTable
   #69 = Utf8               this
   #70 = Utf8               Lorg/apache/commons/io/input/CharSequenceReader;
   #71 = Utf8               (Ljava/lang/CharSequence;I)V
   #72 = Utf8               (Ljava/lang/CharSequence;II)V
   #73 = Utf8               StackMapTable
   #74 = Class              #146          // org/apache/commons/io/input/CharSequenceReader
   #75 = Class              #149          // java/lang/CharSequence
   #76 = Utf8               ()I
   #77 = Utf8               close
   #78 = Utf8               ()V
   #79 = Utf8               ready
   #80 = Utf8               ()Z
   #81 = Utf8               (I)V
   #82 = Utf8               readAheadLimit
   #83 = Utf8               markSupported
   #84 = Utf8               read
   #85 = Utf8               ([CII)I
   #86 = Utf8               count
   #87 = Utf8               c
   #88 = Utf8               i
   #89 = Utf8               array
   #90 = Utf8               [C
   #91 = Utf8               offset
   #92 = Utf8               length
   #93 = Utf8               reset
   #94 = Utf8               skip
   #95 = Utf8               (J)J
   #96 = Utf8               n
   #97 = Utf8               dest
   #98 = Utf8               toString
   #99 = Utf8               ()Ljava/lang/String;
  #100 = Utf8               subSequence
  #101 = Utf8               SourceFile
  #102 = Utf8               CharSequenceReader.java
  #103 = Utf8               org/apache/commons/io/IOUtils
  #104 = NameAndType        #64:#71       // "<init>":(Ljava/lang/CharSequence;I)V
  #105 = Utf8               java/lang/Integer
  #106 = NameAndType        #64:#72       // "<init>":(Ljava/lang/CharSequence;II)V
  #107 = NameAndType        #64:#78       // "<init>":()V
  #108 = Utf8               java/lang/IllegalArgumentException
  #109 = Utf8               java/lang/StringBuilder
  #110 = Utf8               Start index is less than zero:
  #111 = NameAndType        #150:#151     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #112 = NameAndType        #150:#152     // append:(I)Ljava/lang/StringBuilder;
  #113 = NameAndType        #98:#99       // toString:()Ljava/lang/String;
  #114 = NameAndType        #64:#153      // "<init>":(Ljava/lang/String;)V
  #115 = Utf8               End index is less than start
  #116 = Utf8               :
  #117 = Utf8
  #118 = NameAndType        #56:#57       // charSequence:Ljava/lang/CharSequence;
  #119 = NameAndType        #61:#59       // start:I
  #120 = NameAndType        #154:#155     // valueOf:(I)Ljava/lang/Integer;
  #121 = NameAndType        #62:#63       // end:Ljava/lang/Integer;
  #122 = NameAndType        #58:#59       // idx:I
  #123 = NameAndType        #60:#59       // mark:I
  #124 = Class              #149          // java/lang/CharSequence
  #125 = NameAndType        #92:#76       // length:()I
  #126 = Class              #156          // java/lang/Math
  #127 = NameAndType        #157:#158     // min:(II)I
  #128 = NameAndType        #159:#76      // intValue:()I
  #129 = NameAndType        #62:#76       // end:()I
  #130 = NameAndType        #160:#161     // charAt:(I)C
  #131 = Class              #162          // java/util/Objects
  #132 = NameAndType        #163:#164     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
  #133 = Utf8               java/lang/IndexOutOfBoundsException
  #134 = Utf8               Array Size=
  #135 = Utf8               , offset=
  #136 = Utf8               , length=
  #137 = Utf8               java/lang/String
  #138 = NameAndType        #165:#166     // getChars:(II[CI)V
  #139 = Utf8               java/lang/StringBuffer
  #140 = NameAndType        #84:#76       // read:()I
  #141 = Utf8               Number of characters to skip is less than zero:
  #142 = NameAndType        #150:#167     // append:(J)Ljava/lang/StringBuilder;
  #143 = NameAndType        #157:#168     // min:(JJ)J
  #144 = NameAndType        #61:#76       // start:()I
  #145 = NameAndType        #100:#169     // subSequence:(II)Ljava/lang/CharSequence;
  #146 = Utf8               org/apache/commons/io/input/CharSequenceReader
  #147 = Utf8               java/io/Reader
  #148 = Utf8               java/io/Serializable
  #149 = Utf8               java/lang/CharSequence
  #150 = Utf8               append
  #151 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #152 = Utf8               (I)Ljava/lang/StringBuilder;
  #153 = Utf8               (Ljava/lang/String;)V
  #154 = Utf8               valueOf
  #155 = Utf8               (I)Ljava/lang/Integer;
  #156 = Utf8               java/lang/Math
  #157 = Utf8               min
  #158 = Utf8               (II)I
  #159 = Utf8               intValue
  #160 = Utf8               charAt
  #161 = Utf8               (I)C
  #162 = Utf8               java/util/Objects
  #163 = Utf8               requireNonNull
  #164 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
  #165 = Utf8               getChars
  #166 = Utf8               (II[CI)V
  #167 = Utf8               (J)Ljava/lang/StringBuilder;
  #168 = Utf8               (JJ)J
  #169 = Utf8               (II)Ljava/lang/CharSequence;
{
  private static final long serialVersionUID;
    descriptor: J
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    ConstantValue: long 3724187752191401220l

  private final java.lang.CharSequence charSequence;
    descriptor: Ljava/lang/CharSequence;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private int idx;
    descriptor: I
    flags: (0x0002) ACC_PRIVATE

  private int mark;
    descriptor: I
    flags: (0x0002) ACC_PRIVATE

  private final int start;
    descriptor: I
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.lang.Integer end;
    descriptor: Ljava/lang/Integer;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence);
    descriptor: (Ljava/lang/CharSequence;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: iconst_0
         3: invokespecial #2                  // Method "<init>":(Ljava/lang/CharSequence;I)V
         6: return
      LineNumberTable:
        line 77: 0
        line 78: 6
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
            0       7     1 charSequence   Ljava/lang/CharSequence;

  public org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence, int);
    descriptor: (Ljava/lang/CharSequence;I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: iload_2
         3: ldc           #4                  // int 2147483647
         5: invokespecial #5                  // Method "<init>":(Ljava/lang/CharSequence;II)V
         8: return
      LineNumberTable:
        line 96: 0
        line 97: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
            0       9     1 charSequence   Ljava/lang/CharSequence;
            0       9     2 start   I

  public org.apache.commons.io.input.CharSequenceReader(java.lang.CharSequence, int, int);
    descriptor: (Ljava/lang/CharSequence;II)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: invokespecial #6                  // Method java/io/Reader."<init>":()V
         4: iload_2
         5: ifge          35
         8: new           #7                  // class java/lang/IllegalArgumentException
        11: dup
        12: new           #8                  // class java/lang/StringBuilder
        15: dup
        16: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
        19: ldc           #10                 // String Start index is less than zero:
        21: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        24: iload_2
        25: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        28: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        31: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        34: athrow
        35: iload_3
        36: iload_2
        37: if_icmpge     76
        40: new           #7                  // class java/lang/IllegalArgumentException
        43: dup
        44: new           #8                  // class java/lang/StringBuilder
        47: dup
        48: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
        51: ldc           #15                 // String End index is less than start
        53: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        56: iload_2
        57: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        60: ldc           #16                 // String :
        62: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        65: iload_3
        66: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        69: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        72: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        75: athrow
        76: aload_0
        77: aload_1
        78: ifnull        85
        81: aload_1
        82: goto          87
        85: ldc           #17                 // String
        87: putfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
        90: aload_0
        91: iload_2
        92: putfield      #19                 // Field start:I
        95: aload_0
        96: iload_3
        97: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       100: putfield      #21                 // Field end:Ljava/lang/Integer;
       103: aload_0
       104: iload_2
       105: putfield      #22                 // Field idx:I
       108: aload_0
       109: iload_2
       110: putfield      #23                 // Field mark:I
       113: return
      LineNumberTable:
        line 117: 0
        line 118: 4
        line 119: 8
        line 122: 35
        line 123: 40
        line 129: 76
        line 130: 90
        line 131: 95
        line 133: 103
        line 134: 108
        line 135: 113
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     114     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
            0     114     1 charSequence   Ljava/lang/CharSequence;
            0     114     2 start   I
            0     114     3   end   I
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 35
          locals = [ class org/apache/commons/io/input/CharSequenceReader, class java/lang/CharSequence, int, int ]
          stack = []
        frame_type = 40 /* same */
        frame_type = 72 /* same_locals_1_stack_item */
          stack = [ class org/apache/commons/io/input/CharSequenceReader ]
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class org/apache/commons/io/input/CharSequenceReader, class java/lang/CharSequence, int, int ]
          stack = [ class org/apache/commons/io/input/CharSequenceReader, class java/lang/CharSequence ]

  private int start();
    descriptor: ()I
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
         4: invokeinterface #24,  1           // InterfaceMethod java/lang/CharSequence.length:()I
         9: aload_0
        10: getfield      #19                 // Field start:I
        13: invokestatic  #25                 // Method java/lang/Math.min:(II)I
        16: ireturn
      LineNumberTable:
        line 143: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lorg/apache/commons/io/input/CharSequenceReader;

  private int end();
    descriptor: ()I
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
         4: invokeinterface #24,  1           // InterfaceMethod java/lang/CharSequence.length:()I
         9: aload_0
        10: getfield      #21                 // Field end:Ljava/lang/Integer;
        13: ifnonnull     21
        16: ldc           #4                  // int 2147483647
        18: goto          28
        21: aload_0
        22: getfield      #21                 // Field end:Ljava/lang/Integer;
        25: invokevirtual #26                 // Method java/lang/Integer.intValue:()I
        28: invokestatic  #25                 // Method java/lang/Math.min:(II)I
        31: ireturn
      LineNumberTable:
        line 156: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      32     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
      StackMapTable: number_of_entries = 2
        frame_type = 85 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 255 /* full_frame */
          offset_delta = 6
          locals = [ class org/apache/commons/io/input/CharSequenceReader ]
          stack = [ int, int ]

  public void close();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: aload_0
         2: getfield      #19                 // Field start:I
         5: putfield      #22                 // Field idx:I
         8: aload_0
         9: aload_0
        10: getfield      #19                 // Field start:I
        13: putfield      #23                 // Field mark:I
        16: return
      LineNumberTable:
        line 164: 0
        line 165: 8
        line 166: 16
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lorg/apache/commons/io/input/CharSequenceReader;

  public boolean ready();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #22                 // Field idx:I
         4: aload_0
         5: invokespecial #27                 // Method end:()I
         8: if_icmpge     15
        11: iconst_1
        12: goto          16
        15: iconst_0
        16: ireturn
      LineNumberTable:
        line 175: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]

  public void mark(int);
    descriptor: (I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_0
         2: getfield      #22                 // Field idx:I
         5: putfield      #23                 // Field mark:I
         8: return
      LineNumberTable:
        line 185: 0
        line 186: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
            0       9     1 readAheadLimit   I

  public boolean markSupported();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_1
         1: ireturn
      LineNumberTable:
        line 195: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Lorg/apache/commons/io/input/CharSequenceReader;

  public int read();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=1, args_size=1
         0: aload_0
         1: getfield      #22                 // Field idx:I
         4: aload_0
         5: invokespecial #27                 // Method end:()I
         8: if_icmplt     13
        11: iconst_m1
        12: ireturn
        13: aload_0
        14: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
        17: aload_0
        18: dup
        19: getfield      #22                 // Field idx:I
        22: dup_x1
        23: iconst_1
        24: iadd
        25: putfield      #22                 // Field idx:I
        28: invokeinterface #28,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
        33: ireturn
      LineNumberTable:
        line 206: 0
        line 207: 11
        line 209: 13
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      34     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
      StackMapTable: number_of_entries = 1
        frame_type = 13 /* same */

  public int read(char[], int, int);
    descriptor: ([CII)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=7, args_size=4
         0: aload_0
         1: getfield      #22                 // Field idx:I
         4: aload_0
         5: invokespecial #27                 // Method end:()I
         8: if_icmplt     13
        11: iconst_m1
        12: ireturn
        13: aload_1
        14: ldc           #29                 // String array
        16: invokestatic  #30                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
        19: pop
        20: iload_3
        21: iflt          36
        24: iload_2
        25: iflt          36
        28: iload_2
        29: iload_3
        30: iadd
        31: aload_1
        32: arraylength
        33: if_icmple     82
        36: new           #31                 // class java/lang/IndexOutOfBoundsException
        39: dup
        40: new           #8                  // class java/lang/StringBuilder
        43: dup
        44: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
        47: ldc           #32                 // String Array Size=
        49: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        52: aload_1
        53: arraylength
        54: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        57: ldc           #33                 // String , offset=
        59: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        62: iload_2
        63: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        66: ldc           #34                 // String , length=
        68: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        71: iload_3
        72: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        75: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        78: invokespecial #35                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
        81: athrow
        82: aload_0
        83: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
        86: instanceof    #36                 // class java/lang/String
        89: ifeq          144
        92: iload_3
        93: aload_0
        94: invokespecial #27                 // Method end:()I
        97: aload_0
        98: getfield      #22                 // Field idx:I
       101: isub
       102: invokestatic  #25                 // Method java/lang/Math.min:(II)I
       105: istore        4
       107: aload_0
       108: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
       111: checkcast     #36                 // class java/lang/String
       114: aload_0
       115: getfield      #22                 // Field idx:I
       118: aload_0
       119: getfield      #22                 // Field idx:I
       122: iload         4
       124: iadd
       125: aload_1
       126: iload_2
       127: invokevirtual #37                 // Method java/lang/String.getChars:(II[CI)V
       130: aload_0
       131: dup
       132: getfield      #22                 // Field idx:I
       135: iload         4
       137: iadd
       138: putfield      #22                 // Field idx:I
       141: iload         4
       143: ireturn
       144: aload_0
       145: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
       148: instanceof    #8                  // class java/lang/StringBuilder
       151: ifeq          206
       154: iload_3
       155: aload_0
       156: invokespecial #27                 // Method end:()I
       159: aload_0
       160: getfield      #22                 // Field idx:I
       163: isub
       164: invokestatic  #25                 // Method java/lang/Math.min:(II)I
       167: istore        4
       169: aload_0
       170: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
       173: checkcast     #8                  // class java/lang/StringBuilder
       176: aload_0
       177: getfield      #22                 // Field idx:I
       180: aload_0
       181: getfield      #22                 // Field idx:I
       184: iload         4
       186: iadd
       187: aload_1
       188: iload_2
       189: invokevirtual #38                 // Method java/lang/StringBuilder.getChars:(II[CI)V
       192: aload_0
       193: dup
       194: getfield      #22                 // Field idx:I
       197: iload         4
       199: iadd
       200: putfield      #22                 // Field idx:I
       203: iload         4
       205: ireturn
       206: aload_0
       207: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
       210: instanceof    #39                 // class java/lang/StringBuffer
       213: ifeq          268
       216: iload_3
       217: aload_0
       218: invokespecial #27                 // Method end:()I
       221: aload_0
       222: getfield      #22                 // Field idx:I
       225: isub
       226: invokestatic  #25                 // Method java/lang/Math.min:(II)I
       229: istore        4
       231: aload_0
       232: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
       235: checkcast     #39                 // class java/lang/StringBuffer
       238: aload_0
       239: getfield      #22                 // Field idx:I
       242: aload_0
       243: getfield      #22                 // Field idx:I
       246: iload         4
       248: iadd
       249: aload_1
       250: iload_2
       251: invokevirtual #40                 // Method java/lang/StringBuffer.getChars:(II[CI)V
       254: aload_0
       255: dup
       256: getfield      #22                 // Field idx:I
       259: iload         4
       261: iadd
       262: putfield      #22                 // Field idx:I
       265: iload         4
       267: ireturn
       268: iconst_0
       269: istore        4
       271: iconst_0
       272: istore        5
       274: iload         5
       276: iload_3
       277: if_icmpge     313
       280: aload_0
       281: invokevirtual #41                 // Method read:()I
       284: istore        6
       286: iload         6
       288: iconst_m1
       289: if_icmpne     295
       292: iload         4
       294: ireturn
       295: aload_1
       296: iload_2
       297: iload         5
       299: iadd
       300: iload         6
       302: i2c
       303: castore
       304: iinc          4, 1
       307: iinc          5, 1
       310: goto          274
       313: iload         4
       315: ireturn
      LineNumberTable:
        line 223: 0
        line 224: 11
        line 226: 13
        line 227: 20
        line 228: 36
        line 232: 82
        line 233: 92
        line 234: 107
        line 235: 130
        line 236: 141
        line 238: 144
        line 239: 154
        line 240: 169
        line 241: 192
        line 242: 203
        line 244: 206
        line 245: 216
        line 246: 231
        line 247: 254
        line 248: 265
        line 251: 268
        line 252: 271
        line 253: 280
        line 254: 286
        line 255: 292
        line 257: 295
        line 258: 304
        line 252: 307
        line 260: 313
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
          107      37     4 count   I
          169      37     4 count   I
          231      37     4 count   I
          286      21     6     c   I
          274      39     5     i   I
            0     316     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
            0     316     1 array   [C
            0     316     2 offset   I
            0     316     3 length   I
          271      45     4 count   I
      StackMapTable: number_of_entries = 9
        frame_type = 13 /* same */
        frame_type = 22 /* same */
        frame_type = 45 /* same */
        frame_type = 61 /* same */
        frame_type = 61 /* same */
        frame_type = 61 /* same */
        frame_type = 253 /* append */
          offset_delta = 5
          locals = [ int, int ]
        frame_type = 252 /* append */
          offset_delta = 20
          locals = [ int ]
        frame_type = 249 /* chop */
          offset_delta = 17

  public void reset();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: aload_0
         2: getfield      #23                 // Field mark:I
         5: putfield      #22                 // Field idx:I
         8: return
      LineNumberTable:
        line 269: 0
        line 270: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lorg/apache/commons/io/input/CharSequenceReader;

  public long skip(long);
    descriptor: (J)J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=5, args_size=2
         0: lload_1
         1: lconst_0
         2: lcmp
         3: ifge          33
         6: new           #7                  // class java/lang/IllegalArgumentException
         9: dup
        10: new           #8                  // class java/lang/StringBuilder
        13: dup
        14: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
        17: ldc           #42                 // String Number of characters to skip is less than zero:
        19: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        22: lload_1
        23: invokevirtual #43                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
        26: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        29: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        32: athrow
        33: aload_0
        34: getfield      #22                 // Field idx:I
        37: aload_0
        38: invokespecial #27                 // Method end:()I
        41: if_icmplt     46
        44: lconst_0
        45: lreturn
        46: aload_0
        47: invokespecial #27                 // Method end:()I
        50: i2l
        51: aload_0
        52: getfield      #22                 // Field idx:I
        55: i2l
        56: lload_1
        57: ladd
        58: invokestatic  #44                 // Method java/lang/Math.min:(JJ)J
        61: l2i
        62: istore_3
        63: iload_3
        64: aload_0
        65: getfield      #22                 // Field idx:I
        68: isub
        69: istore        4
        71: aload_0
        72: iload_3
        73: putfield      #22                 // Field idx:I
        76: iload         4
        78: i2l
        79: lreturn
      LineNumberTable:
        line 280: 0
        line 281: 6
        line 284: 33
        line 285: 44
        line 287: 46
        line 288: 63
        line 289: 71
        line 290: 76
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      80     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
            0      80     1     n   J
           63      17     3  dest   I
           71       9     4 count   I
      StackMapTable: number_of_entries = 2
        frame_type = 33 /* same */
        frame_type = 12 /* same */

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: aload_0
         1: getfield      #18                 // Field charSequence:Ljava/lang/CharSequence;
         4: aload_0
         5: invokespecial #45                 // Method start:()I
         8: aload_0
         9: invokespecial #27                 // Method end:()I
        12: invokeinterface #46,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
        17: astore_1
        18: aload_1
        19: invokeinterface #47,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
        24: areturn
      LineNumberTable:
        line 301: 0
        line 302: 18
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      25     0  this   Lorg/apache/commons/io/input/CharSequenceReader;
           18       7     1 subSequence   Ljava/lang/CharSequence;
}
SourceFile: "CharSequenceReader.java"
