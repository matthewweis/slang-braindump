Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/scala/jdk/OptionConverters$RichOptionalDouble$.class
  Last modified May 29, 2022; size 2394 bytes
  SHA-256 checksum 0d47bd4e84362cba02a99ff7ce920d5a37b83abe79a2063b6050e89012bdfffd
  Compiled from "OptionConverters.scala"
public class scala.jdk.OptionConverters$RichOptionalDouble$
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // scala/jdk/OptionConverters$RichOptionalDouble$
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 7, attributes: 4
Constant pool:
   #1 = Utf8               scala/jdk/OptionConverters$RichOptionalDouble$
   #2 = Class              #1             // scala/jdk/OptionConverters$RichOptionalDouble$
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               OptionConverters.scala
   #6 = Utf8               scala/jdk/OptionConverters$RichOptionalDouble
   #7 = Class              #6             // scala/jdk/OptionConverters$RichOptionalDouble
   #8 = Utf8               scala/jdk/OptionConverters
   #9 = Class              #8             // scala/jdk/OptionConverters
  #10 = Utf8               RichOptionalDouble
  #11 = Utf8               RichOptionalDouble$
  #12 = Utf8               MODULE$
  #13 = Utf8               Lscala/jdk/OptionConverters$RichOptionalDouble$;
  #14 = Utf8               <clinit>
  #15 = Utf8               ()V
  #16 = Utf8               <init>
  #17 = NameAndType        #16:#15        // "<init>":()V
  #18 = Methodref          #2.#17         // scala/jdk/OptionConverters$RichOptionalDouble$."<init>":()V
  #19 = NameAndType        #12:#13        // MODULE$:Lscala/jdk/OptionConverters$RichOptionalDouble$;
  #20 = Fieldref           #2.#19         // scala/jdk/OptionConverters$RichOptionalDouble$.MODULE$:Lscala/jdk/OptionConverters$RichOptionalDouble$;
  #21 = Utf8               toScala$extension
  #22 = Utf8               (Ljava/util/OptionalDouble;)Lscala/Option;
  #23 = Utf8               (Ljava/util/OptionalDouble;)Lscala/Option<Ljava/lang/Object;>;
  #24 = Utf8               $this
  #25 = Utf8               java/util/OptionalDouble
  #26 = Class              #25            // java/util/OptionalDouble
  #27 = Utf8               isPresent
  #28 = Utf8               ()Z
  #29 = NameAndType        #27:#28        // isPresent:()Z
  #30 = Methodref          #26.#29        // java/util/OptionalDouble.isPresent:()Z
  #31 = Utf8               scala/Some
  #32 = Class              #31            // scala/Some
  #33 = Utf8               getAsDouble
  #34 = Utf8               ()D
  #35 = NameAndType        #33:#34        // getAsDouble:()D
  #36 = Methodref          #26.#35        // java/util/OptionalDouble.getAsDouble:()D
  #37 = Utf8               java/lang/Double
  #38 = Class              #37            // java/lang/Double
  #39 = Utf8               valueOf
  #40 = Utf8               (D)Ljava/lang/Double;
  #41 = NameAndType        #39:#40        // valueOf:(D)Ljava/lang/Double;
  #42 = Methodref          #38.#41        // java/lang/Double.valueOf:(D)Ljava/lang/Double;
  #43 = Utf8               (Ljava/lang/Object;)V
  #44 = NameAndType        #16:#43        // "<init>":(Ljava/lang/Object;)V
  #45 = Methodref          #32.#44        // scala/Some."<init>":(Ljava/lang/Object;)V
  #46 = Utf8               scala/None$
  #47 = Class              #46            // scala/None$
  #48 = Utf8               Lscala/None$;
  #49 = NameAndType        #12:#48        // MODULE$:Lscala/None$;
  #50 = Fieldref           #47.#49        // scala/None$.MODULE$:Lscala/None$;
  #51 = Utf8               this
  #52 = Utf8               Ljava/util/OptionalDouble;
  #53 = Utf8               asScala$extension
  #54 = Utf8               toJavaGeneric$extension
  #55 = Utf8               (Ljava/util/OptionalDouble;)Ljava/util/Optional;
  #56 = Utf8               (Ljava/util/OptionalDouble;)Ljava/util/Optional<Ljava/lang/Object;>;
  #57 = Utf8               java/util/Optional
  #58 = Class              #57            // java/util/Optional
  #59 = Utf8               of
  #60 = Utf8               (Ljava/lang/Object;)Ljava/util/Optional;
  #61 = NameAndType        #59:#60        // of:(Ljava/lang/Object;)Ljava/util/Optional;
  #62 = Methodref          #58.#61        // java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
  #63 = Utf8               empty
  #64 = Utf8               ()Ljava/util/Optional;
  #65 = NameAndType        #63:#64        // empty:()Ljava/util/Optional;
  #66 = Methodref          #58.#65        // java/util/Optional.empty:()Ljava/util/Optional;
  #67 = Utf8               hashCode$extension
  #68 = Utf8               (Ljava/util/OptionalDouble;)I
  #69 = Utf8               hashCode
  #70 = Utf8               ()I
  #71 = NameAndType        #69:#70        // hashCode:()I
  #72 = Methodref          #26.#71        // java/util/OptionalDouble.hashCode:()I
  #73 = Utf8               equals$extension
  #74 = Utf8               (Ljava/util/OptionalDouble;Ljava/lang/Object;)Z
  #75 = Utf8               x$1
  #76 = Utf8               scala$jdk$OptionConverters$RichOptionalDouble$$o
  #77 = Utf8               ()Ljava/util/OptionalDouble;
  #78 = NameAndType        #76:#77        // scala$jdk$OptionConverters$RichOptionalDouble$$o:()Ljava/util/OptionalDouble;
  #79 = Methodref          #7.#78         // scala/jdk/OptionConverters$RichOptionalDouble.scala$jdk$OptionConverters$RichOptionalDouble$$o:()Ljava/util/OptionalDouble;
  #80 = Utf8               equals
  #81 = Utf8               (Ljava/lang/Object;)Z
  #82 = NameAndType        #80:#81        // equals:(Ljava/lang/Object;)Z
  #83 = Methodref          #4.#82         // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #84 = Utf8               Ljava/lang/Object;
  #85 = Methodref          #4.#17         // java/lang/Object."<init>":()V
  #86 = Utf8               Code
  #87 = Utf8               LineNumberTable
  #88 = Utf8               StackMapTable
  #89 = Utf8               LocalVariableTable
  #90 = Utf8               Signature
  #91 = Utf8               MethodParameters
  #92 = Utf8               Deprecated
  #93 = Utf8               InnerClasses
  #94 = Utf8               SourceFile
  #95 = Utf8               ScalaInlineInfo
  #96 = Utf8               Scala
{
  public static final scala.jdk.OptionConverters$RichOptionalDouble$ MODULE$;
    descriptor: Lscala/jdk/OptionConverters$RichOptionalDouble$;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static {};
    descriptor: ()V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #2                  // class scala/jdk/OptionConverters$RichOptionalDouble$
         3: dup
         4: invokespecial #18                 // Method "<init>":()V
         7: putstatic     #20                 // Field MODULE$:Lscala/jdk/OptionConverters$RichOptionalDouble$;
        10: return
      LineNumberTable:
        line 74: 0

  public final scala.Option<java.lang.Object> toScala$extension(java.util.OptionalDouble);
    descriptor: (Ljava/util/OptionalDouble;)Lscala/Option;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=4, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #30                 // Method java/util/OptionalDouble.isPresent:()Z
         4: ifeq          22
         7: new           #32                 // class scala/Some
        10: dup
        11: aload_1
        12: invokevirtual #36                 // Method java/util/OptionalDouble.getAsDouble:()D
        15: invokestatic  #42                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
        18: invokespecial #45                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
        21: areturn
        22: getstatic     #50                 // Field scala/None$.MODULE$:Lscala/None$;
        25: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 22 /* same */
      LineNumberTable:
        line 76: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      26     0  this   Lscala/jdk/OptionConverters$RichOptionalDouble$;
            0      26     1 $this   Ljava/util/OptionalDouble;
    Signature: #23                          // (Ljava/util/OptionalDouble;)Lscala/Option<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      $this                          final

  public final scala.Option<java.lang.Object> asScala$extension(java.util.OptionalDouble);
    descriptor: (Ljava/util/OptionalDouble;)Lscala/Option;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=4, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #30                 // Method java/util/OptionalDouble.isPresent:()Z
         4: ifeq          22
         7: new           #32                 // class scala/Some
        10: dup
        11: aload_1
        12: invokevirtual #36                 // Method java/util/OptionalDouble.getAsDouble:()D
        15: invokestatic  #42                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
        18: invokespecial #45                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
        21: areturn
        22: getstatic     #50                 // Field scala/None$.MODULE$:Lscala/None$;
        25: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 22 /* same */
      LineNumberTable:
        line 80: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      26     0  this   Lscala/jdk/OptionConverters$RichOptionalDouble$;
            0      26     1 $this   Ljava/util/OptionalDouble;
    Signature: #23                          // (Ljava/util/OptionalDouble;)Lscala/Option<Ljava/lang/Object;>;
    Deprecated: true
    MethodParameters:
      Name                           Flags
      $this                          final

  public final java.util.Optional<java.lang.Object> toJavaGeneric$extension(java.util.OptionalDouble);
    descriptor: (Ljava/util/OptionalDouble;)Ljava/util/Optional;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #30                 // Method java/util/OptionalDouble.isPresent:()Z
         4: ifeq          18
         7: aload_1
         8: invokevirtual #36                 // Method java/util/OptionalDouble.getAsDouble:()D
        11: invokestatic  #42                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
        14: invokestatic  #62                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
        17: areturn
        18: invokestatic  #66                 // Method java/util/Optional.empty:()Ljava/util/Optional;
        21: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 18 /* same */
      LineNumberTable:
        line 83: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      22     0  this   Lscala/jdk/OptionConverters$RichOptionalDouble$;
            0      22     1 $this   Ljava/util/OptionalDouble;
    Signature: #56                          // (Ljava/util/OptionalDouble;)Ljava/util/Optional<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      $this                          final

  public final int hashCode$extension(java.util.OptionalDouble);
    descriptor: (Ljava/util/OptionalDouble;)I
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1
         1: invokevirtual #72                 // Method java/util/OptionalDouble.hashCode:()I
         4: ireturn
      LineNumberTable:
        line 74: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/jdk/OptionConverters$RichOptionalDouble$;
            0       5     1 $this   Ljava/util/OptionalDouble;
    MethodParameters:
      Name                           Flags
      $this                          final

  public final boolean equals$extension(java.util.OptionalDouble, java.lang.Object);
    descriptor: (Ljava/util/OptionalDouble;Ljava/lang/Object;)Z
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=2, locals=5, args_size=3
         0: aload_2
         1: instanceof    #7                  // class scala/jdk/OptionConverters$RichOptionalDouble
         4: ifeq          12
         7: iconst_1
         8: istore_3
         9: goto          14
        12: iconst_0
        13: istore_3
        14: iload_3
        15: ifeq          67
        18: aload_2
        19: ifnonnull     26
        22: aconst_null
        23: goto          33
        26: aload_2
        27: checkcast     #7                  // class scala/jdk/OptionConverters$RichOptionalDouble
        30: invokevirtual #79                 // Method scala/jdk/OptionConverters$RichOptionalDouble.scala$jdk$OptionConverters$RichOptionalDouble$$o:()Ljava/util/OptionalDouble;
        33: astore        4
        35: aload_1
        36: dup
        37: ifnonnull     49
        40: pop
        41: aload         4
        43: ifnull        57
        46: goto          61
        49: aload         4
        51: invokevirtual #83                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        54: ifeq          61
        57: iconst_1
        58: goto          62
        61: iconst_0
        62: ifeq          67
        65: iconst_1
        66: ireturn
        67: iconst_0
        68: ireturn
      StackMapTable: number_of_entries = 9
        frame_type = 12 /* same */
        frame_type = 252 /* append */
          offset_delta = 1
          locals = [ int ]
        frame_type = 11 /* same */
        frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class java/util/OptionalDouble ]
        frame_type = 255 /* full_frame */
          offset_delta = 15
          locals = [ class scala/jdk/OptionConverters$RichOptionalDouble$, class java/util/OptionalDouble, class java/lang/Object, int, class java/util/OptionalDouble ]
          stack = [ class java/util/OptionalDouble ]
        frame_type = 7 /* same */
        frame_type = 3 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 4
      LineNumberTable:
        line 74: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      69     0  this   Lscala/jdk/OptionConverters$RichOptionalDouble$;
            0      69     1 $this   Ljava/util/OptionalDouble;
            0      69     2   x$1   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      $this                          final
      x$1                            final

  public scala.jdk.OptionConverters$RichOptionalDouble$();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #85                 // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 74: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/jdk/OptionConverters$RichOptionalDouble$;
}
InnerClasses:
  public static final #10= #7 of #9;      // RichOptionalDouble=class scala/jdk/OptionConverters$RichOptionalDouble of class scala/jdk/OptionConverters
  public static #11= #2 of #9;            // RichOptionalDouble$=class scala/jdk/OptionConverters$RichOptionalDouble$ of class scala/jdk/OptionConverters
SourceFile: "OptionConverters.scala"
  ScalaInlineInfo: length = 0x22 (unknown attribute)
   01 01 00 06 00 10 00 0F 01 00 35 00 16 01 00 49
   00 4A 01 00 43 00 44 01 00 36 00 37 01 00 15 00
   16 01
  Scala: length = 0x0 (unknown attribute)

