Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/antlr/runtime/debug/DebugEventListener.class
  Last modified May 29, 2022; size 1280 bytes
  SHA-256 checksum b0ce30466b0c935073627c14842ec1a61f6b4760779311af14c2fe4b989357f1
  Compiled from "DebugEventListener.java"
public interface org.antlr.runtime.debug.DebugEventListener
  minor version: 0
  major version: 49
  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT
  this_class: #1                          // org/antlr/runtime/debug/DebugEventListener
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 3, methods: 31, attributes: 1
Constant pool:
   #1 = Class              #56            // org/antlr/runtime/debug/DebugEventListener
   #2 = Class              #57            // java/lang/Object
   #3 = Utf8               PROTOCOL_VERSION
   #4 = Utf8               Ljava/lang/String;
   #5 = Utf8               ConstantValue
   #6 = String             #58            // 2
   #7 = Utf8               TRUE
   #8 = Utf8               I
   #9 = Integer            1
  #10 = Utf8               FALSE
  #11 = Integer            0
  #12 = Utf8               enterRule
  #13 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V
  #14 = Utf8               enterAlt
  #15 = Utf8               (I)V
  #16 = Utf8               exitRule
  #17 = Utf8               enterSubRule
  #18 = Utf8               exitSubRule
  #19 = Utf8               enterDecision
  #20 = Utf8               (IZ)V
  #21 = Utf8               exitDecision
  #22 = Utf8               consumeToken
  #23 = Utf8               (Lorg/antlr/runtime/Token;)V
  #24 = Utf8               consumeHiddenToken
  #25 = Utf8               LT
  #26 = Utf8               (ILorg/antlr/runtime/Token;)V
  #27 = Utf8               mark
  #28 = Utf8               rewind
  #29 = Utf8               ()V
  #30 = Utf8               beginBacktrack
  #31 = Utf8               endBacktrack
  #32 = Utf8               location
  #33 = Utf8               (II)V
  #34 = Utf8               recognitionException
  #35 = Utf8               (Lorg/antlr/runtime/RecognitionException;)V
  #36 = Utf8               beginResync
  #37 = Utf8               endResync
  #38 = Utf8               semanticPredicate
  #39 = Utf8               (ZLjava/lang/String;)V
  #40 = Utf8               commence
  #41 = Utf8               terminate
  #42 = Utf8               consumeNode
  #43 = Utf8               (Ljava/lang/Object;)V
  #44 = Utf8               (ILjava/lang/Object;)V
  #45 = Utf8               nilNode
  #46 = Utf8               errorNode
  #47 = Utf8               createNode
  #48 = Utf8               (Ljava/lang/Object;Lorg/antlr/runtime/Token;)V
  #49 = Utf8               becomeRoot
  #50 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #51 = Utf8               addChild
  #52 = Utf8               setTokenBoundaries
  #53 = Utf8               (Ljava/lang/Object;II)V
  #54 = Utf8               SourceFile
  #55 = Utf8               DebugEventListener.java
  #56 = Utf8               org/antlr/runtime/debug/DebugEventListener
  #57 = Utf8               java/lang/Object
  #58 = Utf8               2
{
  public static final java.lang.String PROTOCOL_VERSION;
    descriptor: Ljava/lang/String;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: String 2

  public static final int TRUE;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 1

  public static final int FALSE;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 0

  public abstract void enterRule(java.lang.String, java.lang.String);
    descriptor: (Ljava/lang/String;Ljava/lang/String;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void enterAlt(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void exitRule(java.lang.String, java.lang.String);
    descriptor: (Ljava/lang/String;Ljava/lang/String;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void enterSubRule(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void exitSubRule(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void enterDecision(int, boolean);
    descriptor: (IZ)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void exitDecision(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void consumeToken(org.antlr.runtime.Token);
    descriptor: (Lorg/antlr/runtime/Token;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void consumeHiddenToken(org.antlr.runtime.Token);
    descriptor: (Lorg/antlr/runtime/Token;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void LT(int, org.antlr.runtime.Token);
    descriptor: (ILorg/antlr/runtime/Token;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void mark(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void rewind(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void rewind();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void beginBacktrack(int);
    descriptor: (I)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void endBacktrack(int, boolean);
    descriptor: (IZ)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void location(int, int);
    descriptor: (II)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void recognitionException(org.antlr.runtime.RecognitionException);
    descriptor: (Lorg/antlr/runtime/RecognitionException;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void beginResync();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void endResync();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void semanticPredicate(boolean, java.lang.String);
    descriptor: (ZLjava/lang/String;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void commence();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void terminate();
    descriptor: ()V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void consumeNode(java.lang.Object);
    descriptor: (Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void LT(int, java.lang.Object);
    descriptor: (ILjava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void nilNode(java.lang.Object);
    descriptor: (Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void errorNode(java.lang.Object);
    descriptor: (Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void createNode(java.lang.Object);
    descriptor: (Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void createNode(java.lang.Object, org.antlr.runtime.Token);
    descriptor: (Ljava/lang/Object;Lorg/antlr/runtime/Token;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void becomeRoot(java.lang.Object, java.lang.Object);
    descriptor: (Ljava/lang/Object;Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void addChild(java.lang.Object, java.lang.Object);
    descriptor: (Ljava/lang/Object;Ljava/lang/Object;)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract void setTokenBoundaries(java.lang.Object, int, int);
    descriptor: (Ljava/lang/Object;II)V
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
}
SourceFile: "DebugEventListener.java"
