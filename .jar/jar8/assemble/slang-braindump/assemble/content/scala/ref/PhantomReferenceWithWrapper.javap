Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/ref/PhantomReferenceWithWrapper.class
  Last modified May 29, 2022; size 1854 bytes
  SHA-256 checksum ee4786e0e7ebd92c2fe1a83a9c84c743bbc782f853c52e9775742d7cbf8c252b
  Compiled from "PhantomReference.scala"
public class scala.ref.PhantomReferenceWithWrapper<T extends java.lang.Object> extends java.lang.ref.PhantomReference<T> implements scala.ref.ReferenceWithWrapper<T>
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // scala/ref/PhantomReferenceWithWrapper
  super_class: #5                         // java/lang/ref/PhantomReference
  interfaces: 1, fields: 1, methods: 3, attributes: 5
Constant pool:
   #1 = Utf8               scala/ref/PhantomReferenceWithWrapper
   #2 = Class              #1             // scala/ref/PhantomReferenceWithWrapper
   #3 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/ref/PhantomReference<TT;>;Lscala/ref/ReferenceWithWrapper<TT;>;
   #4 = Utf8               java/lang/ref/PhantomReference
   #5 = Class              #4             // java/lang/ref/PhantomReference
   #6 = Utf8               scala/ref/ReferenceWithWrapper
   #7 = Class              #6             // scala/ref/ReferenceWithWrapper
   #8 = Utf8               PhantomReference.scala
   #9 = Utf8               Lscala/reflect/ScalaSignature;
  #10 = Utf8               bytes
  #11 = Utf8               \u0006\u0005]2AAB\u0004\u0005\u0019!Aq\u0005\u0001B\u0001B\u0003%q\u0003\u0003\u0005)\u0001\t\u0005\t\u0015!\u0003*\u0011!a\u0003A!b\u0001\n\u0003i\u0003\u0002\u0003\u0019\u0001\u0005\u0003\u0005\u000b\u0011\u0002\u0018\t\u000bE\u0002A\u0011\u0001\u001a\u00037AC\u0017M\u001c;p[J+g-\u001a:f]\u000e,w+\u001b;i/J\f\u0007\u000f]3s\u0015\tA\u0011\"A\u0002sK\u001aT\u0011AC\u0001\u0006g\u000e\fG.Y\u0002\u0001+\ti\u0011dE\u0002\u0001\u001d\r\u00022aD\u000b\u0018\u001b\u0005\u0001\"B\u0001\u0005\u0012\u0015\t\u00112#\u0001\u0003mC:<\'\"\u0001\u000b\u0002\t)\fg/Y\u0005\u0003-A\u0011\u0001\u0003\u00155b]R|WNU3gKJ,gnY3\u0011\u0005aIB\u0002\u0001\u0003\u00065\u0001\u0011\ra\u0007\u0002\u0002)F\u0011A\u0004\t\t\u0003;yi\u0011!C\u0005\u0003?%\u0011qAT8uQ&tw\r\u0005\u0002\u001eC%\u0011!%\u0003\u0002\u0007\u0003:L(+\u001a4\u0011\u0007\u0011*s#D\u0001\b\u0013\t1sA\u0001\u000bSK\u001a,\'/\u001a8dK^KG\u000f[,sCB\u0004XM]\u0001\u0006m\u0006dW/Z\u0001\u0006cV,W/\u001a\t\u0004I):\u0012BA\u0016\b\u00059\u0011VMZ3sK:\u001cW-U;fk\u0016\fqa\u001e:baB,\'/F\u0001/!\r!sfF\u0005\u0003-\u001d\t\u0001b\u001e:baB,\'\u000fI\u0001\u0007y%t\u0017\u000e\u001e \u0015\tM\"TG\u000e\t\u0004I\u00019\u0002\"B\u0014\u0006\u0001\u00049\u0002\"\u0002\u0015\u0006\u0001\u0004I\u0003\"\u0002\u0017\u0006\u0001\u0004q\u0003
  #12 = Utf8               wrapper
  #13 = Utf8               Lscala/ref/PhantomReference;
  #14 = Utf8               Lscala/ref/PhantomReference<TT;>;
  #15 = Utf8               ()Lscala/ref/PhantomReference;
  #16 = Utf8               ()Lscala/ref/PhantomReference<TT;>;
  #17 = NameAndType        #12:#13        // wrapper:Lscala/ref/PhantomReference;
  #18 = Fieldref           #2.#17         // scala/ref/PhantomReferenceWithWrapper.wrapper:Lscala/ref/PhantomReference;
  #19 = Utf8               this
  #20 = Utf8               Lscala/ref/PhantomReferenceWithWrapper;
  #21 = Utf8               ()Lscala/ref/ReferenceWrapper;
  #22 = NameAndType        #12:#15        // wrapper:()Lscala/ref/PhantomReference;
  #23 = Methodref          #2.#22         // scala/ref/PhantomReferenceWithWrapper.wrapper:()Lscala/ref/PhantomReference;
  #24 = Utf8               <init>
  #25 = Utf8               (Ljava/lang/Object;Lscala/ref/ReferenceQueue;Lscala/ref/PhantomReference;)V
  #26 = Utf8               (TT;Lscala/ref/ReferenceQueue<TT;>;Lscala/ref/PhantomReference<TT;>;)V
  #27 = Utf8               value
  #28 = Utf8               queue
  #29 = Utf8               scala/ref/ReferenceQueue
  #30 = Class              #29            // scala/ref/ReferenceQueue
  #31 = Utf8               underlying
  #32 = Utf8               ()Ljava/lang/ref/ReferenceQueue;
  #33 = NameAndType        #31:#32        // underlying:()Ljava/lang/ref/ReferenceQueue;
  #34 = Methodref          #30.#33        // scala/ref/ReferenceQueue.underlying:()Ljava/lang/ref/ReferenceQueue;
  #35 = Utf8               (Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
  #36 = NameAndType        #24:#35        // "<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
  #37 = Methodref          #5.#36         // java/lang/ref/PhantomReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
  #38 = Utf8               Ljava/lang/Object;
  #39 = Utf8               Lscala/ref/ReferenceQueue;
  #40 = Utf8               Signature
  #41 = Utf8               Code
  #42 = Utf8               LineNumberTable
  #43 = Utf8               LocalVariableTable
  #44 = Utf8               MethodParameters
  #45 = Utf8               SourceFile
  #46 = Utf8               RuntimeVisibleAnnotations
  #47 = Utf8               ScalaInlineInfo
  #48 = Utf8               ScalaSig
{
  private final scala.ref.PhantomReference<T> wrapper;
    descriptor: Lscala/ref/PhantomReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #14                          // Lscala/ref/PhantomReference<TT;>;

  public scala.ref.PhantomReference<T> wrapper();
    descriptor: ()Lscala/ref/PhantomReference;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #18                 // Field wrapper:Lscala/ref/PhantomReference;
         4: areturn
      LineNumberTable:
        line 20: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/ref/PhantomReferenceWithWrapper;
    Signature: #16                          // ()Lscala/ref/PhantomReference<TT;>;

  public scala.ref.ReferenceWrapper wrapper();
    descriptor: ()Lscala/ref/ReferenceWrapper;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #23                 // Method wrapper:()Lscala/ref/PhantomReference;
         4: areturn
      LineNumberTable:
        line 20: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/ref/PhantomReferenceWithWrapper;

  public scala.ref.PhantomReferenceWithWrapper(T, scala.ref.ReferenceQueue<T>, scala.ref.PhantomReference<T>);
    descriptor: (Ljava/lang/Object;Lscala/ref/ReferenceQueue;Lscala/ref/PhantomReference;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=4, args_size=4
         0: aload_0
         1: aload_3
         2: putfield      #18                 // Field wrapper:Lscala/ref/PhantomReference;
         5: aload_0
         6: aload_1
         7: aload_2
         8: invokevirtual #34                 // Method scala/ref/ReferenceQueue.underlying:()Ljava/lang/ref/ReferenceQueue;
        11: invokespecial #37                 // Method java/lang/ref/PhantomReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
        14: return
      LineNumberTable:
        line 20: 0
        line 21: 5
        line 20: 14
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/ref/PhantomReferenceWithWrapper;
            0      15     1 value   Ljava/lang/Object;
            0      15     2 queue   Lscala/ref/ReferenceQueue;
            0      15     3 wrapper   Lscala/ref/PhantomReference;
    Signature: #26                          // (TT;Lscala/ref/ReferenceQueue<TT;>;Lscala/ref/PhantomReference<TT;>;)V
    MethodParameters:
      Name                           Flags
      value                          final
      queue                          final
      wrapper                        final
}
Signature: #3                           // <T:Ljava/lang/Object;>Ljava/lang/ref/PhantomReference<TT;>;Lscala/ref/ReferenceWithWrapper<TT;>;
SourceFile: "PhantomReference.scala"
RuntimeVisibleAnnotations:
  0: #9(#10=s#11)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005]2AAB\u0004\u0005\u0019!Aq\u0005\u0001B\u0001B\u0003%q\u0003\u0003\u0005)\u0001\t\u0005\t\u0015!\u0003*\u0011!a\u0003A!b\u0001\n\u0003i\u0003\u0002\u0003\u0019\u0001\u0005\u0003\u0005\u000b\u0011\u0002\u0018\t\u000bE\u0002A\u0011\u0001\u001a\u00037AC\u0017M\u001c;p[J+g-\u001a:f]\u000e,w+\u001b;i/J\f\u0007\u000f]3s\u0015\tA\u0011\"A\u0002sK\u001aT\u0011AC\u0001\u0006g\u000e\fG.Y\u0002\u0001+\ti\u0011dE\u0002\u0001\u001d\r\u00022aD\u000b\u0018\u001b\u0005\u0001\"B\u0001\u0005\u0012\u0015\t\u00112#\u0001\u0003mC:<\'\"\u0001\u000b\u0002\t)\fg/Y\u0005\u0003-A\u0011\u0001\u0003\u00155b]R|WNU3gKJ,gnY3\u0011\u0005aIB\u0002\u0001\u0003\u00065\u0001\u0011\ra\u0007\u0002\u0002)F\u0011A\u0004\t\t\u0003;yi\u0011!C\u0005\u0003?%\u0011qAT8uQ&tw\r\u0005\u0002\u001eC%\u0011!%\u0003\u0002\u0007\u0003:L(+\u001a4\u0011\u0007\u0011*s#D\u0001\b\u0013\t1sA\u0001\u000bSK\u001a,\'/\u001a8dK^KG\u000f[,sCB\u0004XM]\u0001\u0006m\u0006dW/Z\u0001\u0006cV,W/\u001a\t\u0004I):\u0012BA\u0016\b\u00059\u0011VMZ3sK:\u001cW-U;fk\u0016\fqa\u001e:baB,\'/F\u0001/!\r!sfF\u0005\u0003-\u001d\t\u0001b\u001e:baB,\'\u000fI\u0001\u0007y%t\u0017\u000e\u001e \u0015\tM\"TG\u000e\t\u0004I\u00019\u0002\"B\u0014\u0006\u0001\u00049\u0002\"\u0002\u0015\u0006\u0001\u0004I\u0003\"\u0002\u0017\u0006\u0001\u0004q\u0003"
    )
  ScalaInlineInfo: length = 0x13 (unknown attribute)
   01 00 00 03 00 18 00 19 00 00 0C 00 0F 00 00 0C
   00 15 00
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
