Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/scalatest/SuiteMixin.class
  Last modified May 29, 2022; size 2681 bytes
  SHA-256 checksum 2b0873575948b0df6e5690dc4ec3977b8e8af07eb16c7427144162e5ae8a8627
  Compiled from "SuiteMixin.scala"
public interface org.scalatest.SuiteMixin
  minor version: 0
  major version: 52
  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT
  this_class: #2                          // org/scalatest/SuiteMixin
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 13, attributes: 4
Constant pool:
   #1 = Utf8               org/scalatest/SuiteMixin
   #2 = Class              #1             // org/scalatest/SuiteMixin
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               SuiteMixin.scala
   #6 = Utf8               Lscala/reflect/ScalaSignature;
   #7 = Utf8               bytes
   #8 = Utf8               \u0006\u0005\u0005\ra\u0001\u0003\b\u0010!\u0003\r\n\u0001F?\t\u000bm\u0001a\u0011\u0001\u000f\t\u000bY\u0002a\u0011C\u001c\t\u000be\u0002a\u0011\u0003\u001e\t\u000bu\u0002a\u0011\u0003 \t\u000b\u0005\u0003a\u0011\u0001\"\t\u000b\r\u0003a\u0011\u0001\"\t\u000b\u0011\u0003a\u0011A#\t\u000b=\u0003a\u0011\u0001)\t\u000bQ\u0003a\u0011A+\t\u000b\u0005\u0004a\u0011\u00012\t\u000b\u0019\u0004a\u0011A4\t\u000bA\u0004a\u0011A9\t\u000fI\u0004!\u0019!D\u0001\u0005\nQ1+^5uK6K\u00070\u001b8\u000b\u0005A\t\u0012!C:dC2\fG/Z:u\u0015\u0005\u0011\u0012aA8sO\u000e\u00011C\u0001\u0001\u0016!\t1\u0012$D\u0001\u0018\u0015\u0005A\u0012!B:dC2\f\u0017B\u0001\u000e\u0018\u0005\u0019\te.\u001f*fM\u0006\u0019!/\u001e8\u0015\u0007u\t\u0013\u0007\u0005\u0002\u001f?5\tq\"\u0003\u0002!\u001f\t11\u000b^1ukNDQAI\u0001A\u0002\r\n\u0001\u0002^3ti:\u000bW.\u001a\t\u0004-\u00112\u0013BA\u0013\u0018\u0005\u0019y\u0005\u000f^5p]B\u0011qE\f\b\u0003Q1\u0002\"!K\f\u000e\u0003)R!aK\n\u0002\rq\u0012xn\u001c;?\u0013\tis#\u0001\u0004Qe\u0016$WMZ\u0005\u0003_A\u0012aa\u0015;sS:<\'BA\u0017\u0018\u0011\u0015\u0011\u0014\u00011\u00014\u0003\u0011\t\'oZ:\u0011\u0005y!\u0014BA\u001b\u0010\u0005\u0011\t%oZ:\u0002\u001fI,hNT3ti\u0016$7+^5uKN$\"!\b\u001d\t\u000bI\u0012\u0001\u0019A\u001a\u0002\u0011I,h\u000eV3tiN$2!H\u001e=\u0011\u0015\u00113\u00011\u0001$\u0011\u0015\u00114\u00011\u00014\u0003\u001d\u0011XO\u001c+fgR$2!H A\u0011\u0015\u0011C\u00011\u0001\'\u0011\u0015\u0011D\u00011\u00014\u0003%\u0019X/\u001b;f\u001d\u0006lW-F\u0001\'\u0003\u001d\u0019X/\u001b;f\u0013\u0012\f1\u0002^3ti\u0012\u000bG/\u0019$peR\u0019a)\u0013&\u0011\u0005y9\u0015B\u0001%\u0010\u0005!!Vm\u001d;ECR\f\u0007\"\u0002\u0012\b\u0001\u00041\u0003\"B&\b\u0001\u0004a\u0015\u0001\u0004;iK\u000e{gNZ5h\u001b\u0006\u0004\bC\u0001\u0010N\u0013\tquBA\u0005D_:4\u0017nZ\'ba\u0006IA/Z:u\u001d\u0006lWm]\u000b\u0002#B\u0019qE\u0015\u0014\n\u0005M\u0003$aA*fi\u0006aa.Z:uK\u0012\u001cV/\u001b;fgV\ta\u000bE\u0002X9zk\u0011\u0001\u0017\u0006\u00033j\u000b\u0011\"[7nkR\f\'\r\\3\u000b\u0005m;\u0012AC2pY2,7\r^5p]&\u0011Q\f\u0017\u0002\u000b\u0013:$W\r_3e\'\u0016\f\bC\u0001\u0010`\u0013\t\u0001wBA\u0003Tk&$X-\u0001\u0003uC\u001e\u001cX#A2\u0011\t\u001d\"g%U\u0005\u0003KB\u00121!T1q\u0003E)\u0007\u0010]3di\u0016$G+Z:u\u0007>,h\u000e\u001e\u000b\u0003Q.\u0004\"AF5\n\u0005)<\"aA%oi\")An\u0003a\u0001[\u00061a-\u001b7uKJ\u0004\"A\b8\n\u0005=|!A\u0002$jYR,\'/\u0001\u0005sKJ,hN\\3s+\u0005\u0019\u0013!C:us2,g*Y7fQ\u0019iAo\u001e={wB\u0011a#^\u0005\u0003m^\u0011!\u0002Z3qe\u0016\u001c\u0017\r^3e\u0003\u001diWm]:bO\u0016\f\u0013!_\u0001})\",\u0007e\u001d;zY\u0016t\u0015-\\3!Y&4WmY=dY\u0016\u0004S.\u001a;i_\u0012\u0004\u0003.Y:!E\u0016,g\u000e\t3faJ,7-\u0019;fI\u0002\ng\u000e\u001a\u0011xS2d\u0007EY3!e\u0016lwN^3eA%t\u0007%\u0019\u0011gkR,(/\u001a\u0011wKJ\u001c\u0018n\u001c8!_\u001a\u00043kY1mCR+7\u000f\u001e\u0011xSRD\u0007E\\8!e\u0016\u0004H.Y2f[\u0016tGOL\u0001\u0006g&t7-Z\u0011\u0002y\u0006)1GL\u0019/aI!a0!\u0001_\r\u0011y\b\u0001A?\u0003\u0019q\u0012XMZ5oK6,g\u000e\u001e \u0011\u0005y\u0001\u0001
   #9 = Utf8               run
  #10 = Utf8               (Lscala/Option;Lorg/scalatest/Args;)Lorg/scalatest/Status;
  #11 = Utf8               (Lscala/Option<Ljava/lang/String;>;Lorg/scalatest/Args;)Lorg/scalatest/Status;
  #12 = Utf8               testName
  #13 = Utf8               args
  #14 = Utf8               runNestedSuites
  #15 = Utf8               (Lorg/scalatest/Args;)Lorg/scalatest/Status;
  #16 = Utf8               runTests
  #17 = Utf8               runTest
  #18 = Utf8               (Ljava/lang/String;Lorg/scalatest/Args;)Lorg/scalatest/Status;
  #19 = Utf8               suiteName
  #20 = Utf8               ()Ljava/lang/String;
  #21 = Utf8               suiteId
  #22 = Utf8               testDataFor
  #23 = Utf8               (Ljava/lang/String;Lorg/scalatest/ConfigMap;)Lorg/scalatest/TestData;
  #24 = Utf8               theConfigMap
  #25 = Utf8               testNames
  #26 = Utf8               ()Lscala/collection/immutable/Set;
  #27 = Utf8               ()Lscala/collection/immutable/Set<Ljava/lang/String;>;
  #28 = Utf8               nestedSuites
  #29 = Utf8               ()Lscala/collection/immutable/IndexedSeq;
  #30 = Utf8               ()Lscala/collection/immutable/IndexedSeq<Lorg/scalatest/Suite;>;
  #31 = Utf8               tags
  #32 = Utf8               ()Lscala/collection/immutable/Map;
  #33 = Utf8               ()Lscala/collection/immutable/Map<Ljava/lang/String;Lscala/collection/immutable/Set<Ljava/lang/String;>;>;
  #34 = Utf8               expectedTestCount
  #35 = Utf8               (Lorg/scalatest/Filter;)I
  #36 = Utf8               filter
  #37 = Utf8               rerunner
  #38 = Utf8               ()Lscala/Option;
  #39 = Utf8               ()Lscala/Option<Ljava/lang/String;>;
  #40 = Utf8               styleName
  #41 = Utf8               Signature
  #42 = Utf8               MethodParameters
  #43 = Utf8               Deprecated
  #44 = Utf8               SourceFile
  #45 = Utf8               RuntimeVisibleAnnotations
  #46 = Utf8               ScalaInlineInfo
  #47 = Utf8               ScalaSig
{
  public abstract org.scalatest.Status run(scala.Option<java.lang.String>, org.scalatest.Args);
    descriptor: (Lscala/Option;Lorg/scalatest/Args;)Lorg/scalatest/Status;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #11                          // (Lscala/Option<Ljava/lang/String;>;Lorg/scalatest/Args;)Lorg/scalatest/Status;
    MethodParameters:
      Name                           Flags
      testName                       final
      args                           final

  public abstract org.scalatest.Status runNestedSuites(org.scalatest.Args);
    descriptor: (Lorg/scalatest/Args;)Lorg/scalatest/Status;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    MethodParameters:
      Name                           Flags
      args                           final

  public abstract org.scalatest.Status runTests(scala.Option<java.lang.String>, org.scalatest.Args);
    descriptor: (Lscala/Option;Lorg/scalatest/Args;)Lorg/scalatest/Status;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #11                          // (Lscala/Option<Ljava/lang/String;>;Lorg/scalatest/Args;)Lorg/scalatest/Status;
    MethodParameters:
      Name                           Flags
      testName                       final
      args                           final

  public abstract org.scalatest.Status runTest(java.lang.String, org.scalatest.Args);
    descriptor: (Ljava/lang/String;Lorg/scalatest/Args;)Lorg/scalatest/Status;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    MethodParameters:
      Name                           Flags
      testName                       final
      args                           final

  public abstract java.lang.String suiteName();
    descriptor: ()Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract java.lang.String suiteId();
    descriptor: ()Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT

  public abstract org.scalatest.TestData testDataFor(java.lang.String, org.scalatest.ConfigMap);
    descriptor: (Ljava/lang/String;Lorg/scalatest/ConfigMap;)Lorg/scalatest/TestData;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    MethodParameters:
      Name                           Flags
      testName                       final
      theConfigMap                   final

  public abstract scala.collection.immutable.Set<java.lang.String> testNames();
    descriptor: ()Lscala/collection/immutable/Set;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #27                          // ()Lscala/collection/immutable/Set<Ljava/lang/String;>;

  public abstract scala.collection.immutable.IndexedSeq<org.scalatest.Suite> nestedSuites();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #30                          // ()Lscala/collection/immutable/IndexedSeq<Lorg/scalatest/Suite;>;

  public abstract scala.collection.immutable.Map<java.lang.String, scala.collection.immutable.Set<java.lang.String>> tags();
    descriptor: ()Lscala/collection/immutable/Map;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #33                          // ()Lscala/collection/immutable/Map<Ljava/lang/String;Lscala/collection/immutable/Set<Ljava/lang/String;>;>;

  public abstract int expectedTestCount(org.scalatest.Filter);
    descriptor: (Lorg/scalatest/Filter;)I
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    MethodParameters:
      Name                           Flags
      filter                         final

  public abstract scala.Option<java.lang.String> rerunner();
    descriptor: ()Lscala/Option;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #39                          // ()Lscala/Option<Ljava/lang/String;>;

  public abstract java.lang.String styleName();
    descriptor: ()Ljava/lang/String;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Deprecated: true
}
SourceFile: "SuiteMixin.scala"
RuntimeVisibleAnnotations:
  0: #6(#7=s#8)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\u0005\ra\u0001\u0003\b\u0010!\u0003\r\n\u0001F?\t\u000bm\u0001a\u0011\u0001\u000f\t\u000bY\u0002a\u0011C\u001c\t\u000be\u0002a\u0011\u0003\u001e\t\u000bu\u0002a\u0011\u0003 \t\u000b\u0005\u0003a\u0011\u0001\"\t\u000b\r\u0003a\u0011\u0001\"\t\u000b\u0011\u0003a\u0011A#\t\u000b=\u0003a\u0011\u0001)\t\u000bQ\u0003a\u0011A+\t\u000b\u0005\u0004a\u0011\u00012\t\u000b\u0019\u0004a\u0011A4\t\u000bA\u0004a\u0011A9\t\u000fI\u0004!\u0019!D\u0001\u0005\nQ1+^5uK6K\u00070\u001b8\u000b\u0005A\t\u0012!C:dC2\fG/Z:u\u0015\u0005\u0011\u0012aA8sO\u000e\u00011C\u0001\u0001\u0016!\t1\u0012$D\u0001\u0018\u0015\u0005A\u0012!B:dC2\f\u0017B\u0001\u000e\u0018\u0005\u0019\te.\u001f*fM\u0006\u0019!/\u001e8\u0015\u0007u\t\u0013\u0007\u0005\u0002\u001f?5\tq\"\u0003\u0002!\u001f\t11\u000b^1ukNDQAI\u0001A\u0002\r\n\u0001\u0002^3ti:\u000bW.\u001a\t\u0004-\u00112\u0013BA\u0013\u0018\u0005\u0019y\u0005\u000f^5p]B\u0011qE\f\b\u0003Q1\u0002\"!K\f\u000e\u0003)R!aK\n\u0002\rq\u0012xn\u001c;?\u0013\tis#\u0001\u0004Qe\u0016$WMZ\u0005\u0003_A\u0012aa\u0015;sS:<\'BA\u0017\u0018\u0011\u0015\u0011\u0014\u00011\u00014\u0003\u0011\t\'oZ:\u0011\u0005y!\u0014BA\u001b\u0010\u0005\u0011\t%oZ:\u0002\u001fI,hNT3ti\u0016$7+^5uKN$\"!\b\u001d\t\u000bI\u0012\u0001\u0019A\u001a\u0002\u0011I,h\u000eV3tiN$2!H\u001e=\u0011\u0015\u00113\u00011\u0001$\u0011\u0015\u00114\u00011\u00014\u0003\u001d\u0011XO\u001c+fgR$2!H A\u0011\u0015\u0011C\u00011\u0001\'\u0011\u0015\u0011D\u00011\u00014\u0003%\u0019X/\u001b;f\u001d\u0006lW-F\u0001\'\u0003\u001d\u0019X/\u001b;f\u0013\u0012\f1\u0002^3ti\u0012\u000bG/\u0019$peR\u0019a)\u0013&\u0011\u0005y9\u0015B\u0001%\u0010\u0005!!Vm\u001d;ECR\f\u0007\"\u0002\u0012\b\u0001\u00041\u0003\"B&\b\u0001\u0004a\u0015\u0001\u0004;iK\u000e{gNZ5h\u001b\u0006\u0004\bC\u0001\u0010N\u0013\tquBA\u0005D_:4\u0017nZ\'ba\u0006IA/Z:u\u001d\u0006lWm]\u000b\u0002#B\u0019qE\u0015\u0014\n\u0005M\u0003$aA*fi\u0006aa.Z:uK\u0012\u001cV/\u001b;fgV\ta\u000bE\u0002X9zk\u0011\u0001\u0017\u0006\u00033j\u000b\u0011\"[7nkR\f\'\r\\3\u000b\u0005m;\u0012AC2pY2,7\r^5p]&\u0011Q\f\u0017\u0002\u000b\u0013:$W\r_3e\'\u0016\f\bC\u0001\u0010`\u0013\t\u0001wBA\u0003Tk&$X-\u0001\u0003uC\u001e\u001cX#A2\u0011\t\u001d\"g%U\u0005\u0003KB\u00121!T1q\u0003E)\u0007\u0010]3di\u0016$G+Z:u\u0007>,h\u000e\u001e\u000b\u0003Q.\u0004\"AF5\n\u0005)<\"aA%oi\")An\u0003a\u0001[\u00061a-\u001b7uKJ\u0004\"A\b8\n\u0005=|!A\u0002$jYR,\'/\u0001\u0005sKJ,hN\\3s+\u0005\u0019\u0013!C:us2,g*Y7fQ\u0019iAo\u001e={wB\u0011a#^\u0005\u0003m^\u0011!\u0002Z3qe\u0016\u001c\u0017\r^3e\u0003\u001diWm]:bO\u0016\f\u0013!_\u0001})\",\u0007e\u001d;zY\u0016t\u0015-\\3!Y&4WmY=dY\u0016\u0004S.\u001a;i_\u0012\u0004\u0003.Y:!E\u0016,g\u000e\t3faJ,7-\u0019;fI\u0002\ng\u000e\u001a\u0011xS2d\u0007EY3!e\u0016lwN^3eA%t\u0007%\u0019\u0011gkR,(/\u001a\u0011wKJ\u001c\u0018n\u001c8!_\u001a\u00043kY1mCR+7\u000f\u001e\u0011xSRD\u0007E\\8!e\u0016\u0004H.Y2f[\u0016tGOL\u0001\u0006g&t7-Z\u0011\u0002y\u0006)1GL\u0019/aI!a0!\u0001_\r\u0011y\b\u0001A?\u0003\u0019q\u0012XMZ5oK6,g\u000e\u001e \u0011\u0005y\u0001\u0001"
    )
  ScalaInlineInfo: length = 0x45 (unknown attribute)
   01 00 00 0D 00 22 00 23 00 00 1C 00 1D 00 00 25
   00 26 00 00 09 00 0A 00 00 0E 00 0F 00 00 11 00
   12 00 00 10 00 0A 00 00 28 00 14 00 00 15 00 14
   00 00 13 00 14 00 00 1F 00 20 00 00 16 00 17 00
   00 19 00 1A 00
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
