Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/apache/commons/lang3/concurrent/AtomicInitializer.class
  Last modified May 29, 2022; size 1329 bytes
  SHA-256 checksum 045f130abfb7d5503ca3206fe2b1d21bd07e55274b32b3abc3e64785a53deb46
  Compiled from "AtomicInitializer.java"
public abstract class org.apache.commons.lang3.concurrent.AtomicInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #8                          // org/apache/commons/lang3/concurrent/AtomicInitializer
  super_class: #9                         // java/lang/Object
  interfaces: 1, fields: 1, methods: 3, attributes: 2
Constant pool:
   #1 = Methodref          #9.#37         // java/lang/Object."<init>":()V
   #2 = Class              #38            // java/util/concurrent/atomic/AtomicReference
   #3 = Methodref          #2.#37         // java/util/concurrent/atomic/AtomicReference."<init>":()V
   #4 = Fieldref           #8.#39         // org/apache/commons/lang3/concurrent/AtomicInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;
   #5 = Methodref          #2.#40         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
   #6 = Methodref          #8.#41         // org/apache/commons/lang3/concurrent/AtomicInitializer.initialize:()Ljava/lang/Object;
   #7 = Methodref          #2.#42         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
   #8 = Class              #43            // org/apache/commons/lang3/concurrent/AtomicInitializer
   #9 = Class              #44            // java/lang/Object
  #10 = Class              #45            // org/apache/commons/lang3/concurrent/ConcurrentInitializer
  #11 = Utf8               reference
  #12 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;
  #13 = Utf8               Signature
  #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;
  #15 = Utf8               <init>
  #16 = Utf8               ()V
  #17 = Utf8               Code
  #18 = Utf8               LineNumberTable
  #19 = Utf8               LocalVariableTable
  #20 = Utf8               this
  #21 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer;
  #22 = Utf8               LocalVariableTypeTable
  #23 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicInitializer<TT;>;
  #24 = Utf8               get
  #25 = Utf8               ()Ljava/lang/Object;
  #26 = Utf8               result
  #27 = Utf8               Ljava/lang/Object;
  #28 = Utf8               TT;
  #29 = Utf8               StackMapTable
  #30 = Utf8               Exceptions
  #31 = Class              #46            // org/apache/commons/lang3/concurrent/ConcurrentException
  #32 = Utf8               ()TT;
  #33 = Utf8               initialize
  #34 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;
  #35 = Utf8               SourceFile
  #36 = Utf8               AtomicInitializer.java
  #37 = NameAndType        #15:#16        // "<init>":()V
  #38 = Utf8               java/util/concurrent/atomic/AtomicReference
  #39 = NameAndType        #11:#12        // reference:Ljava/util/concurrent/atomic/AtomicReference;
  #40 = NameAndType        #24:#25        // get:()Ljava/lang/Object;
  #41 = NameAndType        #33:#25        // initialize:()Ljava/lang/Object;
  #42 = NameAndType        #47:#48        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #43 = Utf8               org/apache/commons/lang3/concurrent/AtomicInitializer
  #44 = Utf8               java/lang/Object
  #45 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer
  #46 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException
  #47 = Utf8               compareAndSet
  #48 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z
{
  private final java.util.concurrent.atomic.AtomicReference<T> reference;
    descriptor: Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #14                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;

  public org.apache.commons.lang3.concurrent.AtomicInitializer();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
         8: dup
         9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
        12: putfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
        15: return
      LineNumberTable:
        line 66: 0
        line 68: 4
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      16     0  this   Lorg/apache/commons/lang3/concurrent/AtomicInitializer;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      16     0  this   Lorg/apache/commons/lang3/concurrent/AtomicInitializer<TT;>;

  public T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;
    descriptor: ()Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: aload_0
         1: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
         4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
         7: astore_1
         8: aload_1
         9: ifnonnull     37
        12: aload_0
        13: invokevirtual #6                  // Method initialize:()Ljava/lang/Object;
        16: astore_1
        17: aload_0
        18: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
        21: aconst_null
        22: aload_1
        23: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
        26: ifne          37
        29: aload_0
        30: getfield      #4                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
        33: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        36: astore_1
        37: aload_1
        38: areturn
      LineNumberTable:
        line 81: 0
        line 83: 8
        line 84: 12
        line 85: 17
        line 87: 29
        line 91: 37
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      39     0  this   Lorg/apache/commons/lang3/concurrent/AtomicInitializer;
            8      31     1 result   Ljava/lang/Object;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      39     0  this   Lorg/apache/commons/lang3/concurrent/AtomicInitializer<TT;>;
            8      31     1 result   TT;
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 37
          locals = [ class java/lang/Object ]
    Exceptions:
      throws org.apache.commons.lang3.concurrent.ConcurrentException
    Signature: #32                          // ()TT;

  protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;
    descriptor: ()Ljava/lang/Object;
    flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT
    Exceptions:
      throws org.apache.commons.lang3.concurrent.ConcurrentException
    Signature: #32                          // ()TT;
}
Signature: #34                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;
SourceFile: "AtomicInitializer.java"
