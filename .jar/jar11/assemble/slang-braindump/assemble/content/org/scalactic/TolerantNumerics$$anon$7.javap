Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/scalactic/TolerantNumerics$$anon$7.class
  Last modified May 29, 2022; size 1817 bytes
  SHA-256 checksum b8bec0cbc6ea770637c164d48055a995f044a1f054bb10ba85a30097c7cff0d6
  Compiled from "TolerantNumerics.scala"
public final class org.scalactic.TolerantNumerics$$anon$7 extends java.lang.Object implements org.scalactic.Equivalence<N>
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // org/scalactic/TolerantNumerics$$anon$7
  super_class: #5                         // java/lang/Object
  interfaces: 1, fields: 2, methods: 3, attributes: 6
Constant pool:
   #1 = Utf8               org/scalactic/TolerantNumerics$$anon$7
   #2 = Class              #1             // org/scalactic/TolerantNumerics$$anon$7
   #3 = Utf8               Ljava/lang/Object;Lorg/scalactic/Equivalence<TN;>;
   #4 = Utf8               java/lang/Object
   #5 = Class              #4             // java/lang/Object
   #6 = Utf8               org/scalactic/Equivalence
   #7 = Class              #6             // org/scalactic/Equivalence
   #8 = Utf8               TolerantNumerics.scala
   #9 = Utf8               org/scalactic/TolerantNumerics
  #10 = Class              #9             // org/scalactic/TolerantNumerics
  #11 = Utf8               tolerantEquivalence
  #12 = Utf8               (Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
  #13 = NameAndType        #11:#12        // tolerantEquivalence:(Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
  #14 = Utf8               numeric$1
  #15 = Utf8               Lscala/math/Numeric;
  #16 = Utf8               tolerance$7
  #17 = Utf8               Ljava/lang/Object;
  #18 = Utf8               areEquivalent
  #19 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z
  #20 = Utf8               (TN;TN;)Z
  #21 = Utf8               a
  #22 = Utf8               b
  #23 = NameAndType        #14:#15        // numeric$1:Lscala/math/Numeric;
  #24 = Fieldref           #2.#23         // org/scalactic/TolerantNumerics$$anon$7.numeric$1:Lscala/math/Numeric;
  #25 = NameAndType        #16:#17        // tolerance$7:Ljava/lang/Object;
  #26 = Fieldref           #2.#25         // org/scalactic/TolerantNumerics$$anon$7.tolerance$7:Ljava/lang/Object;
  #27 = Utf8               scala/math/Numeric
  #28 = Class              #27            // scala/math/Numeric
  #29 = Utf8               plus
  #30 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #31 = NameAndType        #29:#30        // plus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #32 = InterfaceMethodref #28.#31        // scala/math/Numeric.plus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #33 = Utf8               minus
  #34 = NameAndType        #33:#30        // minus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #35 = InterfaceMethodref #28.#34        // scala/math/Numeric.minus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #36 = Utf8               lteq
  #37 = NameAndType        #36:#19        // lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #38 = InterfaceMethodref #28.#37        // scala/math/Numeric.lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #39 = Utf8               gteq
  #40 = NameAndType        #39:#19        // gteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #41 = InterfaceMethodref #28.#40        // scala/math/Numeric.gteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #42 = Utf8               bPlusTolerance
  #43 = Utf8               bMinusTolerance
  #44 = Utf8               this
  #45 = Utf8               Lorg/scalactic/TolerantNumerics$$anon$7;
  #46 = Utf8               toString
  #47 = Utf8               ()Ljava/lang/String;
  #48 = Utf8               java/lang/StringBuilder
  #49 = Class              #48            // java/lang/StringBuilder
  #50 = Integer            21
  #51 = Utf8               <init>
  #52 = Utf8               (I)V
  #53 = NameAndType        #51:#52        // "<init>":(I)V
  #54 = Methodref          #49.#53        // java/lang/StringBuilder."<init>":(I)V
  #55 = Utf8               TolerantEquivalence(
  #56 = String             #55            // TolerantEquivalence(
  #57 = Utf8               append
  #58 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #59 = NameAndType        #57:#58        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #60 = Methodref          #49.#59        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #61 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #62 = NameAndType        #57:#61        // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #63 = Methodref          #49.#62        // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #64 = Utf8               )
  #65 = String             #64            // )
  #66 = NameAndType        #46:#47        // toString:()Ljava/lang/String;
  #67 = Methodref          #49.#66        // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #68 = Utf8               (Lorg/scalactic/TolerantNumerics;Lscala/math/Numeric;Ljava/lang/Object;)V
  #69 = Utf8               $outer
  #70 = Utf8               ()V
  #71 = NameAndType        #51:#70        // "<init>":()V
  #72 = Methodref          #5.#71         // java/lang/Object."<init>":()V
  #73 = Utf8               Lorg/scalactic/TolerantNumerics;
  #74 = Utf8               Code
  #75 = Utf8               StackMapTable
  #76 = Utf8               LineNumberTable
  #77 = Utf8               LocalVariableTable
  #78 = Utf8               Signature
  #79 = Utf8               MethodParameters
  #80 = Utf8               InnerClasses
  #81 = Utf8               EnclosingMethod
  #82 = Utf8               SourceFile
  #83 = Utf8               ScalaInlineInfo
  #84 = Utf8               Scala
{
  private final scala.math.Numeric numeric$1;
    descriptor: Lscala/math/Numeric;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.lang.Object tolerance$7;
    descriptor: Ljava/lang/Object;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public boolean areEquivalent(N, N);
    descriptor: (Ljava/lang/Object;Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=5, args_size=3
         0: aload_0
         1: getfield      #24                 // Field numeric$1:Lscala/math/Numeric;
         4: aload_2
         5: aload_0
         6: getfield      #26                 // Field tolerance$7:Ljava/lang/Object;
         9: invokeinterface #32,  3           // InterfaceMethod scala/math/Numeric.plus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        14: astore_3
        15: aload_0
        16: getfield      #24                 // Field numeric$1:Lscala/math/Numeric;
        19: aload_2
        20: aload_0
        21: getfield      #26                 // Field tolerance$7:Ljava/lang/Object;
        24: invokeinterface #35,  3           // InterfaceMethod scala/math/Numeric.minus:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        29: astore        4
        31: aload_0
        32: getfield      #24                 // Field numeric$1:Lscala/math/Numeric;
        35: aload_1
        36: aload_3
        37: invokeinterface #38,  3           // InterfaceMethod scala/math/Numeric.lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
        42: ifeq          64
        45: aload_0
        46: getfield      #24                 // Field numeric$1:Lscala/math/Numeric;
        49: aload_1
        50: aload         4
        52: invokeinterface #41,  3           // InterfaceMethod scala/math/Numeric.gteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
        57: ifeq          64
        60: iconst_1
        61: goto          65
        64: iconst_0
        65: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 253 /* append */
          offset_delta = 64
          locals = [ class java/lang/Object, class java/lang/Object ]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 253: 0
        line 254: 15
        line 255: 31
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           15      50     3 bPlusTolerance   Ljava/lang/Object;
           31      34     4 bMinusTolerance   Ljava/lang/Object;
            0      66     0  this   Lorg/scalactic/TolerantNumerics$$anon$7;
            0      66     1     a   Ljava/lang/Object;
            0      66     2     b   Ljava/lang/Object;
    Signature: #20                          // (TN;TN;)Z
    MethodParameters:
      Name                           Flags
      a                              final
      b                              final

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: new           #49                 // class java/lang/StringBuilder
         3: dup
         4: ldc           #50                 // int 21
         6: invokespecial #54                 // Method java/lang/StringBuilder."<init>":(I)V
         9: ldc           #56                 // String TolerantEquivalence(
        11: invokevirtual #60                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        14: aload_0
        15: getfield      #26                 // Field tolerance$7:Ljava/lang/Object;
        18: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        21: ldc           #65                 // String )
        23: invokevirtual #60                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        26: invokevirtual #67                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        29: areturn
      LineNumberTable:
        line 257: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      30     0  this   Lorg/scalactic/TolerantNumerics$$anon$7;

  public org.scalactic.TolerantNumerics$$anon$7(org.scalactic.TolerantNumerics, scala.math.Numeric, java.lang.Object);
    descriptor: (Lorg/scalactic/TolerantNumerics;Lscala/math/Numeric;Ljava/lang/Object;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=4
         0: aload_0
         1: aload_2
         2: putfield      #24                 // Field numeric$1:Lscala/math/Numeric;
         5: aload_0
         6: aload_3
         7: putfield      #26                 // Field tolerance$7:Ljava/lang/Object;
        10: aload_0
        11: invokespecial #72                 // Method java/lang/Object."<init>":()V
        14: return
      LineNumberTable:
        line 248: 0
        line 247: 5
        line 251: 10
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lorg/scalactic/TolerantNumerics$$anon$7;
            0      15     1 $outer   Lorg/scalactic/TolerantNumerics;
            0      15     2 numeric$1   Lscala/math/Numeric;
            0      15     3 tolerance$7   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      numeric$1                      final
      tolerance$7                    final
}
InnerClasses:
  public final #2;                        // class org/scalactic/TolerantNumerics$$anon$7
EnclosingMethod: #10.#13                // org.scalactic.TolerantNumerics.tolerantEquivalence
Signature: #3                           // Ljava/lang/Object;Lorg/scalactic/Equivalence<TN;>;
SourceFile: "TolerantNumerics.scala"
  ScalaInlineInfo: length = 0x13 (unknown attribute)
   01 01 00 03 00 33 00 44 01 00 12 00 13 01 00 2E
   00 2F 01
  Scala: length = 0x0 (unknown attribute)

