Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/collection/View$Zip.class
  Last modified May 29, 2022; size 1943 bytes
  SHA-256 checksum b0703f7ec1f5f57181e836c9d45f528e3620d4d3374aa46143b19df56ac34c12
  Compiled from "View.scala"
public class scala.collection.View$Zip<A extends java.lang.Object, B extends java.lang.Object> extends scala.collection.AbstractView<scala.Tuple2<A, B>>
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // scala/collection/View$Zip
  super_class: #5                         // scala/collection/AbstractView
  interfaces: 0, fields: 3, methods: 4, attributes: 5
Constant pool:
   #1 = Utf8               scala/collection/View$Zip
   #2 = Class              #1             // scala/collection/View$Zip
   #3 = Utf8               <A:Ljava/lang/Object;B:Ljava/lang/Object;>Lscala/collection/AbstractView<Lscala/Tuple2<TA;TB;>;>;
   #4 = Utf8               scala/collection/AbstractView
   #5 = Class              #4             // scala/collection/AbstractView
   #6 = Utf8               View.scala
   #7 = Utf8               scala/collection/View
   #8 = Class              #7             // scala/collection/View
   #9 = Utf8               Zip
  #10 = Utf8               serialVersionUID
  #11 = Utf8               J
  #12 = Long               3l
  #14 = Utf8               underlying
  #15 = Utf8               Lscala/collection/IterableOps;
  #16 = Utf8               Lscala/collection/IterableOps<TA;*Ljava/lang/Object;>;
  #17 = Utf8               other
  #18 = Utf8               Lscala/collection/Iterable;
  #19 = Utf8               Lscala/collection/Iterable<TB;>;
  #20 = Utf8               iterator
  #21 = Utf8               ()Lscala/collection/Iterator;
  #22 = Utf8               ()Lscala/collection/Iterator<Lscala/Tuple2<TA;TB;>;>;
  #23 = NameAndType        #14:#15        // underlying:Lscala/collection/IterableOps;
  #24 = Fieldref           #2.#23         // scala/collection/View$Zip.underlying:Lscala/collection/IterableOps;
  #25 = Utf8               scala/collection/IterableOps
  #26 = Class              #25            // scala/collection/IterableOps
  #27 = NameAndType        #20:#21        // iterator:()Lscala/collection/Iterator;
  #28 = InterfaceMethodref #26.#27        // scala/collection/IterableOps.iterator:()Lscala/collection/Iterator;
  #29 = NameAndType        #17:#18        // other:Lscala/collection/Iterable;
  #30 = Fieldref           #2.#29         // scala/collection/View$Zip.other:Lscala/collection/Iterable;
  #31 = Utf8               scala/collection/Iterator
  #32 = Class              #31            // scala/collection/Iterator
  #33 = Utf8               zip
  #34 = Utf8               (Lscala/collection/IterableOnce;)Lscala/collection/Iterator;
  #35 = NameAndType        #33:#34        // zip:(Lscala/collection/IterableOnce;)Lscala/collection/Iterator;
  #36 = InterfaceMethodref #32.#35        // scala/collection/Iterator.zip:(Lscala/collection/IterableOnce;)Lscala/collection/Iterator;
  #37 = Utf8               this
  #38 = Utf8               Lscala/collection/View$Zip;
  #39 = Utf8               knownSize
  #40 = Utf8               ()I
  #41 = NameAndType        #39:#40        // knownSize:()I
  #42 = InterfaceMethodref #26.#41        // scala/collection/IterableOps.knownSize:()I
  #43 = Utf8               scala/collection/Iterable
  #44 = Class              #43            // scala/collection/Iterable
  #45 = InterfaceMethodref #44.#41        // scala/collection/Iterable.knownSize:()I
  #46 = Utf8               scala/runtime/RichInt$
  #47 = Class              #46            // scala/runtime/RichInt$
  #48 = Utf8               MODULE$
  #49 = Utf8               Lscala/runtime/RichInt$;
  #50 = NameAndType        #48:#49        // MODULE$:Lscala/runtime/RichInt$;
  #51 = Fieldref           #47.#50        // scala/runtime/RichInt$.MODULE$:Lscala/runtime/RichInt$;
  #52 = Utf8               scala/math/package$
  #53 = Class              #52            // scala/math/package$
  #54 = Utf8               Lscala/math/package$;
  #55 = NameAndType        #48:#54        // MODULE$:Lscala/math/package$;
  #56 = Fieldref           #53.#55        // scala/math/package$.MODULE$:Lscala/math/package$;
  #57 = Utf8               java/lang/Math
  #58 = Class              #57            // java/lang/Math
  #59 = Utf8               min
  #60 = Utf8               (II)I
  #61 = NameAndType        #59:#60        // min:(II)I
  #62 = Methodref          #58.#61        // java/lang/Math.min:(II)I
  #63 = Utf8               s2
  #64 = Utf8               I
  #65 = Utf8               s1
  #66 = Utf8               isEmpty
  #67 = Utf8               ()Z
  #68 = NameAndType        #66:#67        // isEmpty:()Z
  #69 = InterfaceMethodref #26.#68        // scala/collection/IterableOps.isEmpty:()Z
  #70 = InterfaceMethodref #44.#68        // scala/collection/Iterable.isEmpty:()Z
  #71 = Utf8               <init>
  #72 = Utf8               (Lscala/collection/IterableOps;Lscala/collection/Iterable;)V
  #73 = Utf8               (Lscala/collection/IterableOps<TA;*Ljava/lang/Object;>;Lscala/collection/Iterable<TB;>;)V
  #74 = Utf8               ()V
  #75 = NameAndType        #71:#74        // "<init>":()V
  #76 = Methodref          #5.#75         // scala/collection/AbstractView."<init>":()V
  #77 = Utf8               ConstantValue
  #78 = Utf8               Signature
  #79 = Utf8               Code
  #80 = Utf8               LineNumberTable
  #81 = Utf8               LocalVariableTable
  #82 = Utf8               StackMapTable
  #83 = Utf8               MethodParameters
  #84 = Utf8               InnerClasses
  #85 = Utf8               SourceFile
  #86 = Utf8               ScalaInlineInfo
  #87 = Utf8               Scala
{
  private static final long serialVersionUID;
    descriptor: J
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    ConstantValue: long 3l

  private final scala.collection.IterableOps<A, ?, java.lang.Object> underlying;
    descriptor: Lscala/collection/IterableOps;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #16                          // Lscala/collection/IterableOps<TA;*Ljava/lang/Object;>;

  private final scala.collection.Iterable<B> other;
    descriptor: Lscala/collection/Iterable;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #19                          // Lscala/collection/Iterable<TB;>;

  public scala.collection.Iterator<scala.Tuple2<A, B>> iterator();
    descriptor: ()Lscala/collection/Iterator;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #24                 // Field underlying:Lscala/collection/IterableOps;
         4: invokeinterface #28,  1           // InterfaceMethod scala/collection/IterableOps.iterator:()Lscala/collection/Iterator;
         9: aload_0
        10: getfield      #30                 // Field other:Lscala/collection/Iterable;
        13: invokeinterface #36,  2           // InterfaceMethod scala/collection/Iterator.zip:(Lscala/collection/IterableOnce;)Lscala/collection/Iterator;
        18: areturn
      LineNumberTable:
        line 336: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      19     0  this   Lscala/collection/View$Zip;
    Signature: #22                          // ()Lscala/collection/Iterator<Lscala/Tuple2<TA;TB;>;>;

  public int knownSize();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: aload_0
         1: getfield      #24                 // Field underlying:Lscala/collection/IterableOps;
         4: invokeinterface #42,  1           // InterfaceMethod scala/collection/IterableOps.knownSize:()I
         9: istore_1
        10: iload_1
        11: iconst_0
        12: if_icmpne     17
        15: iconst_0
        16: ireturn
        17: aload_0
        18: getfield      #30                 // Field other:Lscala/collection/Iterable;
        21: invokeinterface #45,  1           // InterfaceMethod scala/collection/Iterable.knownSize:()I
        26: istore_2
        27: iload_2
        28: iconst_0
        29: if_icmpne     34
        32: iconst_0
        33: ireturn
        34: getstatic     #51                 // Field scala/runtime/RichInt$.MODULE$:Lscala/runtime/RichInt$;
        37: pop
        38: getstatic     #56                 // Field scala/math/package$.MODULE$:Lscala/math/package$;
        41: pop
        42: iload_1
        43: iload_2
        44: invokestatic  #62                 // Method java/lang/Math.min:(II)I
        47: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 17
          locals = [ int ]
        frame_type = 252 /* append */
          offset_delta = 16
          locals = [ int ]
      LineNumberTable:
        line 338: 0
        line 339: 10
        line 340: 17
        line 341: 27
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           27      20     2    s2   I
           10      37     1    s1   I
            0      48     0  this   Lscala/collection/View$Zip;

  public boolean isEmpty();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #24                 // Field underlying:Lscala/collection/IterableOps;
         4: invokeinterface #69,  1           // InterfaceMethod scala/collection/IterableOps.isEmpty:()Z
         9: ifne          24
        12: aload_0
        13: getfield      #30                 // Field other:Lscala/collection/Iterable;
        16: invokeinterface #70,  1           // InterfaceMethod scala/collection/Iterable.isEmpty:()Z
        21: ifeq          26
        24: iconst_1
        25: ireturn
        26: iconst_0
        27: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 24 /* same */
        frame_type = 1 /* same */
      LineNumberTable:
        line 344: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      28     0  this   Lscala/collection/View$Zip;

  public scala.collection.View$Zip(scala.collection.IterableOps<A, ?, java.lang.Object>, scala.collection.Iterable<B>);
    descriptor: (Lscala/collection/IterableOps;Lscala/collection/Iterable;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: putfield      #24                 // Field underlying:Lscala/collection/IterableOps;
         5: aload_0
         6: aload_2
         7: putfield      #30                 // Field other:Lscala/collection/Iterable;
        10: aload_0
        11: invokespecial #76                 // Method scala/collection/AbstractView."<init>":()V
        14: return
      LineNumberTable:
        line 335: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/collection/View$Zip;
            0      15     1 underlying   Lscala/collection/IterableOps;
            0      15     2 other   Lscala/collection/Iterable;
    Signature: #73                          // (Lscala/collection/IterableOps<TA;*Ljava/lang/Object;>;Lscala/collection/Iterable<TB;>;)V
    MethodParameters:
      Name                           Flags
      underlying                     final
      other                          final
}
InnerClasses:
  public static #9= #2 of #8;             // Zip=class scala/collection/View$Zip of class scala/collection/View
Signature: #3                           // <A:Ljava/lang/Object;B:Ljava/lang/Object;>Lscala/collection/AbstractView<Lscala/Tuple2<TA;TB;>;>;
SourceFile: "View.scala"
  ScalaInlineInfo: length = 0x18 (unknown attribute)
   01 00 00 04 00 47 00 48 00 00 42 00 43 00 00 14
   00 15 00 00 27 00 28 00
  Scala: length = 0x0 (unknown attribute)

