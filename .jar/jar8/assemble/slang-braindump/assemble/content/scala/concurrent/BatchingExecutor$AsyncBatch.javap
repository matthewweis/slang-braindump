Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/scala/concurrent/BatchingExecutor$AsyncBatch.class
  Last modified May 29, 2022; size 9218 bytes
  SHA-256 checksum 2de7a8952fedecf5fe36ddd3e3c6aa24b3cb2dcc88e99f3b7ac491b84ce50a78
  Compiled from "BatchingExecutor.scala"
public final class scala.concurrent.BatchingExecutor$AsyncBatch extends scala.concurrent.BatchingExecutor$AbstractBatch implements java.lang.Runnable, scala.concurrent.BlockContext, scala.Function1<scala.concurrent.BlockContext, java.lang.Throwable>
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // scala/concurrent/BatchingExecutor$AsyncBatch
  super_class: #5                         // scala/concurrent/BatchingExecutor$AbstractBatch
  interfaces: 3, fields: 1, methods: 36, attributes: 5
Constant pool:
    #1 = Utf8               scala/concurrent/BatchingExecutor$AsyncBatch
    #2 = Class              #1            // scala/concurrent/BatchingExecutor$AsyncBatch
    #3 = Utf8               Lscala/concurrent/BatchingExecutor$AbstractBatch;Ljava/lang/Runnable;Lscala/concurrent/BlockContext;Lscala/Function1<Lscala/concurrent/BlockContext;Ljava/lang/Throwable;>;
    #4 = Utf8               scala/concurrent/BatchingExecutor$AbstractBatch
    #5 = Class              #4            // scala/concurrent/BatchingExecutor$AbstractBatch
    #6 = Utf8               java/lang/Runnable
    #7 = Class              #6            // java/lang/Runnable
    #8 = Utf8               scala/concurrent/BlockContext
    #9 = Class              #8            // scala/concurrent/BlockContext
   #10 = Utf8               scala/Function1
   #11 = Class              #10           // scala/Function1
   #12 = Utf8               BatchingExecutor.scala
   #13 = Utf8               scala/concurrent/BatchingExecutor
   #14 = Class              #13           // scala/concurrent/BatchingExecutor
   #15 = Utf8               AbstractBatch
   #16 = Utf8               AsyncBatch
   #17 = Utf8               scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$
   #18 = Class              #17           // scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$
   #19 = Utf8               scala/concurrent/BatchingExecutorStatics
   #20 = Class              #19           // scala/concurrent/BatchingExecutorStatics
   #21 = Utf8               MissingParentBlockContext$
   #22 = Utf8               parentBlockContext
   #23 = Utf8               Lscala/concurrent/BlockContext;
   #24 = Utf8               apply$mcZD$sp
   #25 = Utf8               (D)Z
   #26 = Utf8               v1
   #27 = Utf8               apply$mcZD$sp$
   #28 = Utf8               (Lscala/Function1;D)Z
   #29 = NameAndType        #27:#28       // apply$mcZD$sp$:(Lscala/Function1;D)Z
   #30 = InterfaceMethodref #11.#29       // scala/Function1.apply$mcZD$sp$:(Lscala/Function1;D)Z
   #31 = Utf8               this
   #32 = Utf8               Lscala/concurrent/BatchingExecutor$AsyncBatch;
   #33 = Utf8               D
   #34 = Utf8               apply$mcDD$sp
   #35 = Utf8               (D)D
   #36 = Utf8               apply$mcDD$sp$
   #37 = Utf8               (Lscala/Function1;D)D
   #38 = NameAndType        #36:#37       // apply$mcDD$sp$:(Lscala/Function1;D)D
   #39 = InterfaceMethodref #11.#38       // scala/Function1.apply$mcDD$sp$:(Lscala/Function1;D)D
   #40 = Utf8               apply$mcFD$sp
   #41 = Utf8               (D)F
   #42 = Utf8               apply$mcFD$sp$
   #43 = Utf8               (Lscala/Function1;D)F
   #44 = NameAndType        #42:#43       // apply$mcFD$sp$:(Lscala/Function1;D)F
   #45 = InterfaceMethodref #11.#44       // scala/Function1.apply$mcFD$sp$:(Lscala/Function1;D)F
   #46 = Utf8               apply$mcID$sp
   #47 = Utf8               (D)I
   #48 = Utf8               apply$mcID$sp$
   #49 = Utf8               (Lscala/Function1;D)I
   #50 = NameAndType        #48:#49       // apply$mcID$sp$:(Lscala/Function1;D)I
   #51 = InterfaceMethodref #11.#50       // scala/Function1.apply$mcID$sp$:(Lscala/Function1;D)I
   #52 = Utf8               apply$mcJD$sp
   #53 = Utf8               (D)J
   #54 = Utf8               apply$mcJD$sp$
   #55 = Utf8               (Lscala/Function1;D)J
   #56 = NameAndType        #54:#55       // apply$mcJD$sp$:(Lscala/Function1;D)J
   #57 = InterfaceMethodref #11.#56       // scala/Function1.apply$mcJD$sp$:(Lscala/Function1;D)J
   #58 = Utf8               apply$mcVD$sp
   #59 = Utf8               (D)V
   #60 = Utf8               apply$mcVD$sp$
   #61 = Utf8               (Lscala/Function1;D)V
   #62 = NameAndType        #60:#61       // apply$mcVD$sp$:(Lscala/Function1;D)V
   #63 = InterfaceMethodref #11.#62       // scala/Function1.apply$mcVD$sp$:(Lscala/Function1;D)V
   #64 = Utf8               apply$mcZF$sp
   #65 = Utf8               (F)Z
   #66 = Utf8               apply$mcZF$sp$
   #67 = Utf8               (Lscala/Function1;F)Z
   #68 = NameAndType        #66:#67       // apply$mcZF$sp$:(Lscala/Function1;F)Z
   #69 = InterfaceMethodref #11.#68       // scala/Function1.apply$mcZF$sp$:(Lscala/Function1;F)Z
   #70 = Utf8               F
   #71 = Utf8               apply$mcDF$sp
   #72 = Utf8               (F)D
   #73 = Utf8               apply$mcDF$sp$
   #74 = Utf8               (Lscala/Function1;F)D
   #75 = NameAndType        #73:#74       // apply$mcDF$sp$:(Lscala/Function1;F)D
   #76 = InterfaceMethodref #11.#75       // scala/Function1.apply$mcDF$sp$:(Lscala/Function1;F)D
   #77 = Utf8               apply$mcFF$sp
   #78 = Utf8               (F)F
   #79 = Utf8               apply$mcFF$sp$
   #80 = Utf8               (Lscala/Function1;F)F
   #81 = NameAndType        #79:#80       // apply$mcFF$sp$:(Lscala/Function1;F)F
   #82 = InterfaceMethodref #11.#81       // scala/Function1.apply$mcFF$sp$:(Lscala/Function1;F)F
   #83 = Utf8               apply$mcIF$sp
   #84 = Utf8               (F)I
   #85 = Utf8               apply$mcIF$sp$
   #86 = Utf8               (Lscala/Function1;F)I
   #87 = NameAndType        #85:#86       // apply$mcIF$sp$:(Lscala/Function1;F)I
   #88 = InterfaceMethodref #11.#87       // scala/Function1.apply$mcIF$sp$:(Lscala/Function1;F)I
   #89 = Utf8               apply$mcJF$sp
   #90 = Utf8               (F)J
   #91 = Utf8               apply$mcJF$sp$
   #92 = Utf8               (Lscala/Function1;F)J
   #93 = NameAndType        #91:#92       // apply$mcJF$sp$:(Lscala/Function1;F)J
   #94 = InterfaceMethodref #11.#93       // scala/Function1.apply$mcJF$sp$:(Lscala/Function1;F)J
   #95 = Utf8               apply$mcVF$sp
   #96 = Utf8               (F)V
   #97 = Utf8               apply$mcVF$sp$
   #98 = Utf8               (Lscala/Function1;F)V
   #99 = NameAndType        #97:#98       // apply$mcVF$sp$:(Lscala/Function1;F)V
  #100 = InterfaceMethodref #11.#99       // scala/Function1.apply$mcVF$sp$:(Lscala/Function1;F)V
  #101 = Utf8               apply$mcZI$sp
  #102 = Utf8               (I)Z
  #103 = Utf8               apply$mcZI$sp$
  #104 = Utf8               (Lscala/Function1;I)Z
  #105 = NameAndType        #103:#104     // apply$mcZI$sp$:(Lscala/Function1;I)Z
  #106 = InterfaceMethodref #11.#105      // scala/Function1.apply$mcZI$sp$:(Lscala/Function1;I)Z
  #107 = Utf8               I
  #108 = Utf8               apply$mcDI$sp
  #109 = Utf8               (I)D
  #110 = Utf8               apply$mcDI$sp$
  #111 = Utf8               (Lscala/Function1;I)D
  #112 = NameAndType        #110:#111     // apply$mcDI$sp$:(Lscala/Function1;I)D
  #113 = InterfaceMethodref #11.#112      // scala/Function1.apply$mcDI$sp$:(Lscala/Function1;I)D
  #114 = Utf8               apply$mcFI$sp
  #115 = Utf8               (I)F
  #116 = Utf8               apply$mcFI$sp$
  #117 = Utf8               (Lscala/Function1;I)F
  #118 = NameAndType        #116:#117     // apply$mcFI$sp$:(Lscala/Function1;I)F
  #119 = InterfaceMethodref #11.#118      // scala/Function1.apply$mcFI$sp$:(Lscala/Function1;I)F
  #120 = Utf8               apply$mcII$sp
  #121 = Utf8               (I)I
  #122 = Utf8               apply$mcII$sp$
  #123 = Utf8               (Lscala/Function1;I)I
  #124 = NameAndType        #122:#123     // apply$mcII$sp$:(Lscala/Function1;I)I
  #125 = InterfaceMethodref #11.#124      // scala/Function1.apply$mcII$sp$:(Lscala/Function1;I)I
  #126 = Utf8               apply$mcJI$sp
  #127 = Utf8               (I)J
  #128 = Utf8               apply$mcJI$sp$
  #129 = Utf8               (Lscala/Function1;I)J
  #130 = NameAndType        #128:#129     // apply$mcJI$sp$:(Lscala/Function1;I)J
  #131 = InterfaceMethodref #11.#130      // scala/Function1.apply$mcJI$sp$:(Lscala/Function1;I)J
  #132 = Utf8               apply$mcVI$sp
  #133 = Utf8               (I)V
  #134 = Utf8               apply$mcVI$sp$
  #135 = Utf8               (Lscala/Function1;I)V
  #136 = NameAndType        #134:#135     // apply$mcVI$sp$:(Lscala/Function1;I)V
  #137 = InterfaceMethodref #11.#136      // scala/Function1.apply$mcVI$sp$:(Lscala/Function1;I)V
  #138 = Utf8               apply$mcZJ$sp
  #139 = Utf8               (J)Z
  #140 = Utf8               apply$mcZJ$sp$
  #141 = Utf8               (Lscala/Function1;J)Z
  #142 = NameAndType        #140:#141     // apply$mcZJ$sp$:(Lscala/Function1;J)Z
  #143 = InterfaceMethodref #11.#142      // scala/Function1.apply$mcZJ$sp$:(Lscala/Function1;J)Z
  #144 = Utf8               J
  #145 = Utf8               apply$mcDJ$sp
  #146 = Utf8               (J)D
  #147 = Utf8               apply$mcDJ$sp$
  #148 = Utf8               (Lscala/Function1;J)D
  #149 = NameAndType        #147:#148     // apply$mcDJ$sp$:(Lscala/Function1;J)D
  #150 = InterfaceMethodref #11.#149      // scala/Function1.apply$mcDJ$sp$:(Lscala/Function1;J)D
  #151 = Utf8               apply$mcFJ$sp
  #152 = Utf8               (J)F
  #153 = Utf8               apply$mcFJ$sp$
  #154 = Utf8               (Lscala/Function1;J)F
  #155 = NameAndType        #153:#154     // apply$mcFJ$sp$:(Lscala/Function1;J)F
  #156 = InterfaceMethodref #11.#155      // scala/Function1.apply$mcFJ$sp$:(Lscala/Function1;J)F
  #157 = Utf8               apply$mcIJ$sp
  #158 = Utf8               (J)I
  #159 = Utf8               apply$mcIJ$sp$
  #160 = Utf8               (Lscala/Function1;J)I
  #161 = NameAndType        #159:#160     // apply$mcIJ$sp$:(Lscala/Function1;J)I
  #162 = InterfaceMethodref #11.#161      // scala/Function1.apply$mcIJ$sp$:(Lscala/Function1;J)I
  #163 = Utf8               apply$mcJJ$sp
  #164 = Utf8               (J)J
  #165 = Utf8               apply$mcJJ$sp$
  #166 = Utf8               (Lscala/Function1;J)J
  #167 = NameAndType        #165:#166     // apply$mcJJ$sp$:(Lscala/Function1;J)J
  #168 = InterfaceMethodref #11.#167      // scala/Function1.apply$mcJJ$sp$:(Lscala/Function1;J)J
  #169 = Utf8               apply$mcVJ$sp
  #170 = Utf8               (J)V
  #171 = Utf8               apply$mcVJ$sp$
  #172 = Utf8               (Lscala/Function1;J)V
  #173 = NameAndType        #171:#172     // apply$mcVJ$sp$:(Lscala/Function1;J)V
  #174 = InterfaceMethodref #11.#173      // scala/Function1.apply$mcVJ$sp$:(Lscala/Function1;J)V
  #175 = Utf8               compose
  #176 = Utf8               (Lscala/Function1;)Lscala/Function1;
  #177 = Utf8               <A$:Ljava/lang/Object;>(Lscala/Function1<TA$;Lscala/concurrent/BlockContext;>;)Lscala/Function1<TA$;Ljava/lang/Throwable;>;
  #178 = Utf8               g
  #179 = Utf8               compose$
  #180 = Utf8               (Lscala/Function1;Lscala/Function1;)Lscala/Function1;
  #181 = NameAndType        #179:#180     // compose$:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
  #182 = InterfaceMethodref #11.#181      // scala/Function1.compose$:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
  #183 = Utf8               Lscala/Function1;
  #184 = Utf8               andThen
  #185 = Utf8               <A$:Ljava/lang/Object;>(Lscala/Function1<Ljava/lang/Throwable;TA$;>;)Lscala/Function1<Lscala/concurrent/BlockContext;TA$;>;
  #186 = Utf8               andThen$
  #187 = NameAndType        #186:#180     // andThen$:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
  #188 = InterfaceMethodref #11.#187      // scala/Function1.andThen$:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
  #189 = Utf8               toString
  #190 = Utf8               ()Ljava/lang/String;
  #191 = Utf8               toString$
  #192 = Utf8               (Lscala/Function1;)Ljava/lang/String;
  #193 = NameAndType        #191:#192     // toString$:(Lscala/Function1;)Ljava/lang/String;
  #194 = InterfaceMethodref #11.#193      // scala/Function1.toString$:(Lscala/Function1;)Ljava/lang/String;
  #195 = Utf8               run
  #196 = Utf8               ()V
  #197 = Utf8               scala$concurrent$BatchingExecutor$AsyncBatch$$$outer
  #198 = Utf8               ()Lscala/concurrent/BatchingExecutor;
  #199 = NameAndType        #197:#198     // scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
  #200 = Methodref          #2.#199       // scala/concurrent/BatchingExecutor$AsyncBatch.scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
  #201 = Utf8               scala$concurrent$BatchingExecutor$$_tasksLocal
  #202 = Utf8               ()Ljava/lang/ThreadLocal;
  #203 = NameAndType        #201:#202     // scala$concurrent$BatchingExecutor$$_tasksLocal:()Ljava/lang/ThreadLocal;
  #204 = InterfaceMethodref #14.#203      // scala/concurrent/BatchingExecutor.scala$concurrent$BatchingExecutor$$_tasksLocal:()Ljava/lang/ThreadLocal;
  #205 = Utf8               java/lang/ThreadLocal
  #206 = Class              #205          // java/lang/ThreadLocal
  #207 = Utf8               set
  #208 = Utf8               (Ljava/lang/Object;)V
  #209 = NameAndType        #207:#208     // set:(Ljava/lang/Object;)V
  #210 = Methodref          #206.#209     // java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
  #211 = Utf8               scala/concurrent/BlockContext$
  #212 = Class              #211          // scala/concurrent/BlockContext$
  #213 = Utf8               MODULE$
  #214 = Utf8               Lscala/concurrent/BlockContext$;
  #215 = NameAndType        #213:#214     // MODULE$:Lscala/concurrent/BlockContext$;
  #216 = Fieldref           #212.#215     // scala/concurrent/BlockContext$.MODULE$:Lscala/concurrent/BlockContext$;
  #217 = Utf8               usingBlockContext
  #218 = Utf8               (Lscala/concurrent/BlockContext;Lscala/Function1;)Ljava/lang/Object;
  #219 = NameAndType        #217:#218     // usingBlockContext:(Lscala/concurrent/BlockContext;Lscala/Function1;)Ljava/lang/Object;
  #220 = Methodref          #212.#219     // scala/concurrent/BlockContext$.usingBlockContext:(Lscala/concurrent/BlockContext;Lscala/Function1;)Ljava/lang/Object;
  #221 = Utf8               java/lang/Throwable
  #222 = Class              #221          // java/lang/Throwable
  #223 = Utf8               resubmit
  #224 = Utf8               (Ljava/lang/Throwable;)Ljava/lang/Throwable;
  #225 = NameAndType        #223:#224     // resubmit:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
  #226 = Methodref          #2.#225       // scala/concurrent/BatchingExecutor$AsyncBatch.resubmit:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
  #227 = Utf8               f
  #228 = Utf8               Ljava/lang/Throwable;
  #229 = Utf8               apply
  #230 = Utf8               (Lscala/concurrent/BlockContext;)Ljava/lang/Throwable;
  #231 = Utf8               prevBlockContext
  #232 = NameAndType        #22:#23       // parentBlockContext:Lscala/concurrent/BlockContext;
  #233 = Fieldref           #2.#232       // scala/concurrent/BatchingExecutor$AsyncBatch.parentBlockContext:Lscala/concurrent/BlockContext;
  #234 = Utf8               runN
  #235 = NameAndType        #234:#133     // runN:(I)V
  #236 = Methodref          #2.#235       // scala/concurrent/BatchingExecutor$AsyncBatch.runN:(I)V
  #237 = Utf8               Lscala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$;
  #238 = NameAndType        #213:#237     // MODULE$:Lscala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$;
  #239 = Fieldref           #18.#238      // scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$;
  #240 = Utf8               remove
  #241 = NameAndType        #240:#196     // remove:()V
  #242 = Methodref          #206.#241     // java/lang/ThreadLocal.remove:()V
  #243 = Utf8               cause
  #244 = Utf8               size
  #245 = Utf8               ()I
  #246 = NameAndType        #244:#245     // size:()I
  #247 = Methodref          #2.#246       // scala/concurrent/BatchingExecutor$AsyncBatch.size:()I
  #248 = Utf8               submitForExecution
  #249 = Utf8               (Ljava/lang/Runnable;)V
  #250 = NameAndType        #248:#249     // submitForExecution:(Ljava/lang/Runnable;)V
  #251 = InterfaceMethodref #14.#250      // scala/concurrent/BatchingExecutor.submitForExecution:(Ljava/lang/Runnable;)V
  #252 = Utf8               scala/util/control/NonFatal$
  #253 = Class              #252          // scala/util/control/NonFatal$
  #254 = Utf8               Lscala/util/control/NonFatal$;
  #255 = NameAndType        #213:#254     // MODULE$:Lscala/util/control/NonFatal$;
  #256 = Fieldref           #253.#255     // scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
  #257 = Utf8               (Ljava/lang/Throwable;)Z
  #258 = NameAndType        #229:#257     // apply:(Ljava/lang/Throwable;)Z
  #259 = Methodref          #253.#258     // scala/util/control/NonFatal$.apply:(Ljava/lang/Throwable;)Z
  #260 = Utf8               java/util/concurrent/ExecutionException
  #261 = Class              #260          // java/util/concurrent/ExecutionException
  #262 = Utf8               Non-fatal error occurred and resubmission failed, see suppressed exception.
  #263 = String             #262          // Non-fatal error occurred and resubmission failed, see suppressed exception.
  #264 = Utf8               <init>
  #265 = Utf8               (Ljava/lang/String;Ljava/lang/Throwable;)V
  #266 = NameAndType        #264:#265     // "<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
  #267 = Methodref          #261.#266     // java/util/concurrent/ExecutionException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
  #268 = Utf8               addSuppressed
  #269 = Utf8               (Ljava/lang/Throwable;)V
  #270 = NameAndType        #268:#269     // addSuppressed:(Ljava/lang/Throwable;)V
  #271 = Methodref          #261.#270     // java/util/concurrent/ExecutionException.addSuppressed:(Ljava/lang/Throwable;)V
  #272 = Utf8               e
  #273 = Utf8               Ljava/util/concurrent/ExecutionException;
  #274 = Utf8               inner
  #275 = Utf8               cloneAndClear
  #276 = Utf8               ()Lscala/concurrent/BatchingExecutor$AsyncBatch;
  #277 = Utf8               first
  #278 = Utf8               ()Ljava/lang/Runnable;
  #279 = NameAndType        #277:#278     // first:()Ljava/lang/Runnable;
  #280 = Methodref          #2.#279       // scala/concurrent/BatchingExecutor$AsyncBatch.first:()Ljava/lang/Runnable;
  #281 = Utf8               other
  #282 = Utf8               ()[Ljava/lang/Runnable;
  #283 = NameAndType        #281:#282     // other:()[Ljava/lang/Runnable;
  #284 = Methodref          #2.#283       // scala/concurrent/BatchingExecutor$AsyncBatch.other:()[Ljava/lang/Runnable;
  #285 = Utf8               (Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
  #286 = NameAndType        #264:#285     // "<init>":(Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
  #287 = Methodref          #2.#286       // scala/concurrent/BatchingExecutor$AsyncBatch."<init>":(Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
  #288 = Utf8               first_$eq
  #289 = NameAndType        #288:#249     // first_$eq:(Ljava/lang/Runnable;)V
  #290 = Methodref          #2.#289       // scala/concurrent/BatchingExecutor$AsyncBatch.first_$eq:(Ljava/lang/Runnable;)V
  #291 = Utf8               scala/concurrent/BatchingExecutorStatics$
  #292 = Class              #291          // scala/concurrent/BatchingExecutorStatics$
  #293 = Utf8               Lscala/concurrent/BatchingExecutorStatics$;
  #294 = NameAndType        #213:#293     // MODULE$:Lscala/concurrent/BatchingExecutorStatics$;
  #295 = Fieldref           #292.#294     // scala/concurrent/BatchingExecutorStatics$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$;
  #296 = Utf8               emptyBatchArray
  #297 = NameAndType        #296:#282     // emptyBatchArray:()[Ljava/lang/Runnable;
  #298 = Methodref          #292.#297     // scala/concurrent/BatchingExecutorStatics$.emptyBatchArray:()[Ljava/lang/Runnable;
  #299 = Utf8               other_$eq
  #300 = Utf8               ([Ljava/lang/Runnable;)V
  #301 = NameAndType        #299:#300     // other_$eq:([Ljava/lang/Runnable;)V
  #302 = Methodref          #2.#301       // scala/concurrent/BatchingExecutor$AsyncBatch.other_$eq:([Ljava/lang/Runnable;)V
  #303 = Utf8               size_$eq
  #304 = NameAndType        #303:#133     // size_$eq:(I)V
  #305 = Methodref          #2.#304       // scala/concurrent/BatchingExecutor$AsyncBatch.size_$eq:(I)V
  #306 = Utf8               newBatch
  #307 = Utf8               blockOn
  #308 = Utf8               (Lscala/Function0;Lscala/concurrent/CanAwait;)Ljava/lang/Object;
  #309 = Utf8               <T:Ljava/lang/Object;>(Lscala/Function0<TT;>;Lscala/concurrent/CanAwait;)TT;
  #310 = Utf8               thunk
  #311 = Utf8               permission
  #312 = NameAndType        #275:#276     // cloneAndClear:()Lscala/concurrent/BatchingExecutor$AsyncBatch;
  #313 = Methodref          #2.#312       // scala/concurrent/BatchingExecutor$AsyncBatch.cloneAndClear:()Lscala/concurrent/BatchingExecutor$AsyncBatch;
  #314 = NameAndType        #307:#308     // blockOn:(Lscala/Function0;Lscala/concurrent/CanAwait;)Ljava/lang/Object;
  #315 = InterfaceMethodref #9.#314       // scala/concurrent/BlockContext.blockOn:(Lscala/Function0;Lscala/concurrent/CanAwait;)Ljava/lang/Object;
  #316 = Utf8               Lscala/Function0;
  #317 = Utf8               Lscala/concurrent/CanAwait;
  #318 = Utf8               $outer
  #319 = Utf8               Lscala/concurrent/BatchingExecutor;
  #320 = NameAndType        #318:#319     // $outer:Lscala/concurrent/BatchingExecutor;
  #321 = Fieldref           #2.#320       // scala/concurrent/BatchingExecutor$AsyncBatch.$outer:Lscala/concurrent/BatchingExecutor;
  #322 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #323 = NameAndType        #229:#230     // apply:(Lscala/concurrent/BlockContext;)Ljava/lang/Throwable;
  #324 = Methodref          #2.#323       // scala/concurrent/BatchingExecutor$AsyncBatch.apply:(Lscala/concurrent/BlockContext;)Ljava/lang/Throwable;
  #325 = Utf8               Ljava/lang/Object;
  #326 = Utf8               _first
  #327 = Utf8               _other
  #328 = Utf8               _size
  #329 = Methodref          #5.#286       // scala/concurrent/BatchingExecutor$AbstractBatch."<init>":(Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
  #330 = Utf8               Ljava/lang/Runnable;
  #331 = Utf8               [Ljava/lang/Runnable;
  #332 = Utf8               (Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;)V
  #333 = Utf8               runnable
  #334 = Utf8               Code
  #335 = Utf8               LineNumberTable
  #336 = Utf8               LocalVariableTable
  #337 = Utf8               MethodParameters
  #338 = Utf8               Signature
  #339 = Utf8               StackMapTable
  #340 = Utf8               InnerClasses
  #341 = Utf8               SourceFile
  #342 = Utf8               ScalaInlineInfo
  #343 = Utf8               Scala
{
  private scala.concurrent.BlockContext parentBlockContext;
    descriptor: Lscala/concurrent/BlockContext;
    flags: (0x0002) ACC_PRIVATE

  public boolean apply$mcZD$sp(double);
    descriptor: (D)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokestatic  #30                 // InterfaceMethod scala/Function1.apply$mcZD$sp$:(Lscala/Function1;D)Z
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   D
    MethodParameters:
      Name                           Flags
      v1                             final

  public double apply$mcDD$sp(double);
    descriptor: (D)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokestatic  #39                 // InterfaceMethod scala/Function1.apply$mcDD$sp$:(Lscala/Function1;D)D
         5: dreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   D
    MethodParameters:
      Name                           Flags
      v1                             final

  public float apply$mcFD$sp(double);
    descriptor: (D)F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokestatic  #45                 // InterfaceMethod scala/Function1.apply$mcFD$sp$:(Lscala/Function1;D)F
         5: freturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   D
    MethodParameters:
      Name                           Flags
      v1                             final

  public int apply$mcID$sp(double);
    descriptor: (D)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokestatic  #51                 // InterfaceMethod scala/Function1.apply$mcID$sp$:(Lscala/Function1;D)I
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   D
    MethodParameters:
      Name                           Flags
      v1                             final

  public long apply$mcJD$sp(double);
    descriptor: (D)J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokestatic  #57                 // InterfaceMethod scala/Function1.apply$mcJD$sp$:(Lscala/Function1;D)J
         5: lreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   D
    MethodParameters:
      Name                           Flags
      v1                             final

  public void apply$mcVD$sp(double);
    descriptor: (D)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokestatic  #63                 // InterfaceMethod scala/Function1.apply$mcVD$sp$:(Lscala/Function1;D)V
         5: return
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   D
    MethodParameters:
      Name                           Flags
      v1                             final

  public boolean apply$mcZF$sp(float);
    descriptor: (F)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokestatic  #69                 // InterfaceMethod scala/Function1.apply$mcZF$sp$:(Lscala/Function1;F)Z
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   F
    MethodParameters:
      Name                           Flags
      v1                             final

  public double apply$mcDF$sp(float);
    descriptor: (F)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokestatic  #76                 // InterfaceMethod scala/Function1.apply$mcDF$sp$:(Lscala/Function1;F)D
         5: dreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   F
    MethodParameters:
      Name                           Flags
      v1                             final

  public float apply$mcFF$sp(float);
    descriptor: (F)F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokestatic  #82                 // InterfaceMethod scala/Function1.apply$mcFF$sp$:(Lscala/Function1;F)F
         5: freturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   F
    MethodParameters:
      Name                           Flags
      v1                             final

  public int apply$mcIF$sp(float);
    descriptor: (F)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokestatic  #88                 // InterfaceMethod scala/Function1.apply$mcIF$sp$:(Lscala/Function1;F)I
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   F
    MethodParameters:
      Name                           Flags
      v1                             final

  public long apply$mcJF$sp(float);
    descriptor: (F)J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokestatic  #94                 // InterfaceMethod scala/Function1.apply$mcJF$sp$:(Lscala/Function1;F)J
         5: lreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   F
    MethodParameters:
      Name                           Flags
      v1                             final

  public void apply$mcVF$sp(float);
    descriptor: (F)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokestatic  #100                // InterfaceMethod scala/Function1.apply$mcVF$sp$:(Lscala/Function1;F)V
         5: return
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   F
    MethodParameters:
      Name                           Flags
      v1                             final

  public boolean apply$mcZI$sp(int);
    descriptor: (I)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #106                // InterfaceMethod scala/Function1.apply$mcZI$sp$:(Lscala/Function1;I)Z
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   I
    MethodParameters:
      Name                           Flags
      v1                             final

  public double apply$mcDI$sp(int);
    descriptor: (I)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #113                // InterfaceMethod scala/Function1.apply$mcDI$sp$:(Lscala/Function1;I)D
         5: dreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   I
    MethodParameters:
      Name                           Flags
      v1                             final

  public float apply$mcFI$sp(int);
    descriptor: (I)F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #119                // InterfaceMethod scala/Function1.apply$mcFI$sp$:(Lscala/Function1;I)F
         5: freturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   I
    MethodParameters:
      Name                           Flags
      v1                             final

  public int apply$mcII$sp(int);
    descriptor: (I)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #125                // InterfaceMethod scala/Function1.apply$mcII$sp$:(Lscala/Function1;I)I
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   I
    MethodParameters:
      Name                           Flags
      v1                             final

  public long apply$mcJI$sp(int);
    descriptor: (I)J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #131                // InterfaceMethod scala/Function1.apply$mcJI$sp$:(Lscala/Function1;I)J
         5: lreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   I
    MethodParameters:
      Name                           Flags
      v1                             final

  public void apply$mcVI$sp(int);
    descriptor: (I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #137                // InterfaceMethod scala/Function1.apply$mcVI$sp$:(Lscala/Function1;I)V
         5: return
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   I
    MethodParameters:
      Name                           Flags
      v1                             final

  public boolean apply$mcZJ$sp(long);
    descriptor: (J)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokestatic  #143                // InterfaceMethod scala/Function1.apply$mcZJ$sp$:(Lscala/Function1;J)Z
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   J
    MethodParameters:
      Name                           Flags
      v1                             final

  public double apply$mcDJ$sp(long);
    descriptor: (J)D
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokestatic  #150                // InterfaceMethod scala/Function1.apply$mcDJ$sp$:(Lscala/Function1;J)D
         5: dreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   J
    MethodParameters:
      Name                           Flags
      v1                             final

  public float apply$mcFJ$sp(long);
    descriptor: (J)F
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokestatic  #156                // InterfaceMethod scala/Function1.apply$mcFJ$sp$:(Lscala/Function1;J)F
         5: freturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   J
    MethodParameters:
      Name                           Flags
      v1                             final

  public int apply$mcIJ$sp(long);
    descriptor: (J)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokestatic  #162                // InterfaceMethod scala/Function1.apply$mcIJ$sp$:(Lscala/Function1;J)I
         5: ireturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   J
    MethodParameters:
      Name                           Flags
      v1                             final

  public long apply$mcJJ$sp(long);
    descriptor: (J)J
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokestatic  #168                // InterfaceMethod scala/Function1.apply$mcJJ$sp$:(Lscala/Function1;J)J
         5: lreturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   J
    MethodParameters:
      Name                           Flags
      v1                             final

  public void apply$mcVJ$sp(long);
    descriptor: (J)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokestatic  #174                // InterfaceMethod scala/Function1.apply$mcVJ$sp$:(Lscala/Function1;J)V
         5: return
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1    v1   J
    MethodParameters:
      Name                           Flags
      v1                             final

  public <A$ extends java.lang.Object> scala.Function1<A$, java.lang.Throwable> compose(scala.Function1<A$, scala.concurrent.BlockContext>);
    descriptor: (Lscala/Function1;)Lscala/Function1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #182                // InterfaceMethod scala/Function1.compose$:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
         5: areturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1     g   Lscala/Function1;
    Signature: #177                         // <A$:Ljava/lang/Object;>(Lscala/Function1<TA$;Lscala/concurrent/BlockContext;>;)Lscala/Function1<TA$;Ljava/lang/Throwable;>;
    MethodParameters:
      Name                           Flags
      g                              final

  public <A$ extends java.lang.Object> scala.Function1<scala.concurrent.BlockContext, A$> andThen(scala.Function1<java.lang.Throwable, A$>);
    descriptor: (Lscala/Function1;)Lscala/Function1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #188                // InterfaceMethod scala/Function1.andThen$:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
         5: areturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       6     1     g   Lscala/Function1;
    Signature: #185                         // <A$:Ljava/lang/Object;>(Lscala/Function1<Ljava/lang/Throwable;TA$;>;)Lscala/Function1<Lscala/concurrent/BlockContext;TA$;>;
    MethodParameters:
      Name                           Flags
      g                              final

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #194                // InterfaceMethod scala/Function1.toString$:(Lscala/Function1;)Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;

  public final void run();
    descriptor: ()V
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=4, locals=2, args_size=1
         0: aload_0
         1: invokevirtual #200                // Method scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
         4: invokeinterface #204,  1          // InterfaceMethod scala/concurrent/BatchingExecutor.scala$concurrent$BatchingExecutor$$_tasksLocal:()Ljava/lang/ThreadLocal;
         9: aload_0
        10: invokevirtual #210                // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
        13: aload_0
        14: getstatic     #216                // Field scala/concurrent/BlockContext$.MODULE$:Lscala/concurrent/BlockContext$;
        17: aload_0
        18: aload_0
        19: invokevirtual #220                // Method scala/concurrent/BlockContext$.usingBlockContext:(Lscala/concurrent/BlockContext;Lscala/Function1;)Ljava/lang/Object;
        22: checkcast     #222                // class java/lang/Throwable
        25: invokespecial #226                // Method resubmit:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
        28: astore_1
        29: aload_1
        30: ifnull        35
        33: aload_1
        34: athrow
        35: return
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 35
          locals = [ class java/lang/Throwable ]
      LineNumberTable:
        line 152: 0
        line 154: 13
        line 156: 29
        line 157: 33
        line 156: 35
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           29       6     1     f   Ljava/lang/Throwable;
            0      36     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;

  public final java.lang.Throwable apply(scala.concurrent.BlockContext);
    descriptor: (Lscala/concurrent/BlockContext;)Ljava/lang/Throwable;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #233                // Field parentBlockContext:Lscala/concurrent/BlockContext;
         5: aload_0
         6: sipush        1024
         9: invokevirtual #236                // Method runN:(I)V
        12: aconst_null
        13: goto          41
        16: goto          41
        19: astore_2
        20: aload_0
        21: getstatic     #239                // Field scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$;
        24: putfield      #233                // Field parentBlockContext:Lscala/concurrent/BlockContext;
        27: aload_0
        28: invokevirtual #200                // Method scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
        31: invokeinterface #204,  1          // InterfaceMethod scala/concurrent/BatchingExecutor.scala$concurrent$BatchingExecutor$$_tasksLocal:()Ljava/lang/ThreadLocal;
        36: invokevirtual #242                // Method java/lang/ThreadLocal.remove:()V
        39: aload_2
        40: athrow
        41: aload_0
        42: getstatic     #239                // Field scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$;
        45: putfield      #233                // Field parentBlockContext:Lscala/concurrent/BlockContext;
        48: aload_0
        49: invokevirtual #200                // Method scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
        52: invokeinterface #204,  1          // InterfaceMethod scala/concurrent/BatchingExecutor.scala$concurrent$BatchingExecutor$$_tasksLocal:()Ljava/lang/ThreadLocal;
        57: invokevirtual #242                // Method java/lang/ThreadLocal.remove:()V
        60: areturn
      Exception table:
         from    to  target type
             0    13    16   Class java/lang/Throwable
             0    19    19   any
      StackMapTable: number_of_entries = 3
        frame_type = 80 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 66 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 85 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
      LineNumberTable:
        line 162: 0
        line 163: 5
        line 164: 12
        line 166: 16
        line 168: 20
        line 169: 27
        line 168: 41
        line 169: 48
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      61     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0      61     1 prevBlockContext   Lscala/concurrent/BlockContext;
    MethodParameters:
      Name                           Flags
      prevBlockContext               final

  private final java.lang.Throwable resubmit(java.lang.Throwable);
    descriptor: (Ljava/lang/Throwable;)Ljava/lang/Throwable;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=4, locals=4, args_size=2
         0: aload_0
         1: invokevirtual #247                // Method size:()I
         4: iconst_0
         5: if_icmple     52
         8: aload_0
         9: invokevirtual #200                // Method scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
        12: aload_0
        13: invokeinterface #251,  2          // InterfaceMethod scala/concurrent/BatchingExecutor.submitForExecution:(Ljava/lang/Runnable;)V
        18: aload_1
        19: areturn
        20: astore_2
        21: getstatic     #256                // Field scala/util/control/NonFatal$.MODULE$:Lscala/util/control/NonFatal$;
        24: aload_2
        25: invokevirtual #259                // Method scala/util/control/NonFatal$.apply:(Ljava/lang/Throwable;)Z
        28: ifeq          50
        31: new           #261                // class java/util/concurrent/ExecutionException
        34: dup
        35: ldc_w         #263                // String Non-fatal error occurred and resubmission failed, see suppressed exception.
        38: aload_1
        39: invokespecial #267                // Method java/util/concurrent/ExecutionException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
        42: astore_3
        43: aload_3
        44: aload_2
        45: invokevirtual #271                // Method java/util/concurrent/ExecutionException.addSuppressed:(Ljava/lang/Throwable;)V
        48: aload_3
        49: areturn
        50: aload_2
        51: areturn
        52: aload_1
        53: areturn
      Exception table:
         from    to  target type
             8    19    20   Class java/lang/Throwable
      StackMapTable: number_of_entries = 3
        frame_type = 84 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 252 /* append */
          offset_delta = 29
          locals = [ class java/lang/Throwable ]
        frame_type = 250 /* chop */
          offset_delta = 1
      LineNumberTable:
        line 178: 0
        line 179: 8
        line 181: 21
        line 182: 31
        line 183: 43
        line 184: 48
        line 185: 50
        line 187: 52
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           43       6     3     e   Ljava/util/concurrent/ExecutionException;
           20      31     2 inner   Ljava/lang/Throwable;
            0      54     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0      54     1 cause   Ljava/lang/Throwable;
    MethodParameters:
      Name                           Flags
      cause                          final

  private final scala.concurrent.BatchingExecutor$AsyncBatch cloneAndClear();
    descriptor: ()Lscala/concurrent/BatchingExecutor$AsyncBatch;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=6, locals=2, args_size=1
         0: new           #2                  // class scala/concurrent/BatchingExecutor$AsyncBatch
         3: dup
         4: aload_0
         5: invokevirtual #200                // Method scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
         8: aload_0
         9: invokevirtual #280                // Method first:()Ljava/lang/Runnable;
        12: aload_0
        13: invokevirtual #284                // Method other:()[Ljava/lang/Runnable;
        16: aload_0
        17: invokevirtual #247                // Method size:()I
        20: invokespecial #287                // Method "<init>":(Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
        23: astore_1
        24: aload_0
        25: aconst_null
        26: invokevirtual #290                // Method first_$eq:(Ljava/lang/Runnable;)V
        29: aload_0
        30: getstatic     #295                // Field scala/concurrent/BatchingExecutorStatics$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$;
        33: invokevirtual #298                // Method scala/concurrent/BatchingExecutorStatics$.emptyBatchArray:()[Ljava/lang/Runnable;
        36: invokevirtual #302                // Method other_$eq:([Ljava/lang/Runnable;)V
        39: aload_0
        40: iconst_0
        41: invokevirtual #305                // Method size_$eq:(I)V
        44: aload_1
        45: areturn
      LineNumberTable:
        line 190: 0
        line 191: 24
        line 192: 29
        line 193: 39
        line 194: 44
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           24      21     1 newBatch   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0      46     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;

  public final <T extends java.lang.Object> T blockOn(scala.Function0<T>, scala.concurrent.CanAwait);
    descriptor: (Lscala/Function0;Lscala/concurrent/CanAwait;)Ljava/lang/Object;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=3, args_size=3
         0: aload_0
         1: invokevirtual #247                // Method size:()I
         4: iconst_0
         5: if_icmple     21
         8: aload_0
         9: invokevirtual #200                // Method scala$concurrent$BatchingExecutor$AsyncBatch$$$outer:()Lscala/concurrent/BatchingExecutor;
        12: aload_0
        13: invokespecial #313                // Method cloneAndClear:()Lscala/concurrent/BatchingExecutor$AsyncBatch;
        16: invokeinterface #251,  2          // InterfaceMethod scala/concurrent/BatchingExecutor.submitForExecution:(Ljava/lang/Runnable;)V
        21: aload_0
        22: getfield      #233                // Field parentBlockContext:Lscala/concurrent/BlockContext;
        25: aload_1
        26: aload_2
        27: invokeinterface #315,  3          // InterfaceMethod scala/concurrent/BlockContext.blockOn:(Lscala/Function0;Lscala/concurrent/CanAwait;)Ljava/lang/Object;
        32: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 21 /* same */
      LineNumberTable:
        line 199: 0
        line 200: 8
        line 202: 21
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      33     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0      33     1 thunk   Lscala/Function0;
            0      33     2 permission   Lscala/concurrent/CanAwait;
    Signature: #309                         // <T:Ljava/lang/Object;>(Lscala/Function0<TT;>;Lscala/concurrent/CanAwait;)TT;
    MethodParameters:
      Name                           Flags
      thunk                          final
      permission                     final

  public scala.concurrent.BatchingExecutor scala$concurrent$BatchingExecutor$AsyncBatch$$$outer();
    descriptor: ()Lscala/concurrent/BatchingExecutor;
    flags: (0x1001) ACC_PUBLIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #321                // Field $outer:Lscala/concurrent/BatchingExecutor;
         4: areturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;

  public final java.lang.Object apply(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: (0x1051) ACC_PUBLIC, ACC_FINAL, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: checkcast     #9                  // class scala/concurrent/BlockContext
         5: invokevirtual #324                // Method apply:(Lscala/concurrent/BlockContext;)Ljava/lang/Throwable;
         8: areturn
      LineNumberTable:
        line 146: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0       9     1    v1   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      v1                             final

  private scala.concurrent.BatchingExecutor$AsyncBatch(scala.concurrent.BatchingExecutor, java.lang.Runnable, java.lang.Runnable[], int);
    descriptor: (Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=5, locals=5, args_size=5
         0: aload_0
         1: aload_1
         2: aload_2
         3: aload_3
         4: iload         4
         6: invokespecial #329                // Method scala/concurrent/BatchingExecutor$AbstractBatch."<init>":(Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
         9: aload_0
        10: getstatic     #239                // Field scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$;
        13: putfield      #233                // Field parentBlockContext:Lscala/concurrent/BlockContext;
        16: return
      LineNumberTable:
        line 146: 0
        line 147: 9
        line 146: 16
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0      17     1 $outer   Lscala/concurrent/BatchingExecutor;
            0      17     2 _first   Ljava/lang/Runnable;
            0      17     3 _other   [Ljava/lang/Runnable;
            0      17     4 _size   I
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      _first                         final
      _other                         final
      _size                          final

  public scala.concurrent.BatchingExecutor$AsyncBatch(scala.concurrent.BatchingExecutor, java.lang.Runnable);
    descriptor: (Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: aload_2
         3: getstatic     #295                // Field scala/concurrent/BatchingExecutorStatics$.MODULE$:Lscala/concurrent/BatchingExecutorStatics$;
         6: invokevirtual #298                // Method scala/concurrent/BatchingExecutorStatics$.emptyBatchArray:()[Ljava/lang/Runnable;
         9: iconst_1
        10: invokespecial #287                // Method "<init>":(Lscala/concurrent/BatchingExecutor;Ljava/lang/Runnable;[Ljava/lang/Runnable;I)V
        13: return
      LineNumberTable:
        line 149: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      14     0  this   Lscala/concurrent/BatchingExecutor$AsyncBatch;
            0      14     1 $outer   Lscala/concurrent/BatchingExecutor;
            0      14     2 runnable   Ljava/lang/Runnable;
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      runnable                       final
}
InnerClasses:
  private abstract #15= #5 of #14;        // AbstractBatch=class scala/concurrent/BatchingExecutor$AbstractBatch of class scala/concurrent/BatchingExecutor
  private final #16= #2 of #14;           // AsyncBatch=class scala/concurrent/BatchingExecutor$AsyncBatch of class scala/concurrent/BatchingExecutor
  public static #21= #18 of #20;          // MissingParentBlockContext$=class scala/concurrent/BatchingExecutorStatics$MissingParentBlockContext$ of class scala/concurrent/BatchingExecutorStatics
Signature: #3                           // Lscala/concurrent/BatchingExecutor$AbstractBatch;Ljava/lang/Runnable;Lscala/concurrent/BlockContext;Lscala/Function1<Lscala/concurrent/BlockContext;Ljava/lang/Throwable;>;
SourceFile: "BatchingExecutor.scala"
  ScalaInlineInfo: length = 0xB8 (unknown attribute)
   01 01 00 24 01 08 01 4C 01 01 08 01 1D 01 00 B8
   00 B0 01 00 E5 01 42 01 00 E5 00 E6 01 00 22 00
   23 01 00 47 00 48 01 00 6C 00 6D 01 00 91 00 92
   01 00 28 00 29 01 00 4D 00 4E 01 00 72 00 73 01
   00 97 00 98 01 00 2E 00 2F 01 00 53 00 54 01 00
   78 00 79 01 00 9D 00 9E 01 00 34 00 35 01 00 59
   00 5A 01 00 7E 00 7F 01 00 A3 00 A4 01 00 3A 00
   3B 01 00 5F 00 60 01 00 84 00 85 01 00 A9 00 AA
   01 00 18 00 19 01 00 40 00 41 01 00 65 00 66 01
   00 8A 00 8B 01 01 33 01 34 01 01 13 01 14 01 00
   AF 00 B0 01 00 DF 00 E0 01 00 C3 00 C4 01 00 C5
   00 C6 01 00 BD 00 BE 01
  Scala: length = 0x0 (unknown attribute)

