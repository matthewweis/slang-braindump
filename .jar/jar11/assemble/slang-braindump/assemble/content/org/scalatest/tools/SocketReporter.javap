Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/scalatest/tools/SocketReporter.class
  Last modified May 29, 2022; size 3586 bytes
  SHA-256 checksum 34ca76bb3cf414f8bb22829d5fff3c59dc792aa4767c164762210010fcda9151
  Compiled from "SocketReporter.scala"
public class org.scalatest.tools.SocketReporter implements org.scalatest.ResourcefulReporter
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // org/scalatest/tools/SocketReporter
  super_class: #4                         // java/lang/Object
  interfaces: 1, fields: 4, methods: 6, attributes: 4
Constant pool:
    #1 = Utf8               org/scalatest/tools/SocketReporter
    #2 = Class              #1            // org/scalatest/tools/SocketReporter
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               org/scalatest/ResourcefulReporter
    #6 = Class              #5            // org/scalatest/ResourcefulReporter
    #7 = Utf8               SocketReporter.scala
    #8 = Utf8               Lscala/reflect/ScalaSignature;
    #9 = Utf8               bytes
   #10 = Utf8               \u0006\u0005\r4Qa\u0003\u0007\u0001\u001dIA\u0001\"\b\u0001\u0003\u0002\u0003\u0006Ia\b\u0005\tU\u0001\u0011\t\u0011)A\u0005W!)a\u0006\u0001C\u0001_!9A\u0007\u0001b\u0001\n\u0013)\u0004B\u0002%\u0001A\u0003%a\u0007C\u0004J\u0001\t\u0007I\u0011\u0002&\t\rI\u0003\u0001\u0015!\u0003L\u0011\u0015\u0019\u0006\u0001\"\u0001U\u0011\u0015A\u0006\u0001\"\u0001Z\u0011\u0015\u0011\u0007\u0001\"\u0001U\u00059\u0019vnY6fiJ+\u0007o\u001c:uKJT!!\u0004\b\u0002\u000bQ|w\u000e\\:\u000b\u0005=\u0001\u0012!C:dC2\fG/Z:u\u0015\u0005\t\u0012aA8sON\u0019\u0001aE\r\u0011\u0005Q9R\"A\u000b\u000b\u0003Y\tQa]2bY\u0006L!\u0001G\u000b\u0003\r\u0005s\u0017PU3g!\tQ2$D\u0001\u000f\u0013\tabBA\nSKN|WO]2fMVd\'+\u001a9peR,\'/\u0001\u0003i_N$8\u0001\u0001\t\u0003A\u001dr!!I\u0013\u0011\u0005\t*R\"A\u0012\u000b\u0005\u0011r\u0012A\u0002\u001fs_>$h(\u0003\u0002\'+\u00051\u0001K]3eK\u001aL!\u0001K\u0015\u0003\rM#(/\u001b8h\u0015\t1S#\u0001\u0003q_J$\bC\u0001\u000b-\u0013\tiSCA\u0002J]R\fa\u0001P5oSRtDc\u0001\u00193gA\u0011\u0011\u0007A\u0007\u0002\u0019!)Qd\u0001a\u0001?!)!f\u0001a\u0001W\u000511o\\2lKR,\u0012A\u000e\t\u0004o\u0001\u0013U\"\u0001\u001d\u000b\u0005eR\u0014AB1u_6L7M\u0003\u0002<y\u0005Q1m\u001c8dkJ\u0014XM\u001c;\u000b\u0005ur\u0014\u0001B;uS2T\u0011aP\u0001\u0005U\u00064\u0018-\u0003\u0002Bq\ty\u0011\t^8nS\u000e\u0014VMZ3sK:\u001cW\r\u0005\u0002D\r6\tAI\u0003\u0002F}\u0005\u0019a.\u001a;\n\u0005\u001d#%AB*pG.,G/A\u0004t_\u000e\\W\r\u001e\u0011\u0002\u0007=,H/F\u0001L!\r9\u0004\t\u0014\t\u0003\u001bBk\u0011A\u0014\u0006\u0003\u001fz\n!![8\n\u0005Es%AE(cU\u0016\u001cGoT;uaV$8\u000b\u001e:fC6\fAa\\;uA\u00059!/\u001a4sKNDG#A+\u0011\u0005Q1\u0016BA,\u0016\u0005\u0011)f.\u001b;\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\u0005US\u0006\"B.\n\u0001\u0004a\u0016!B3wK:$\bCA/a\u001b\u0005q&BA0\u000f\u0003\u0019)g/\u001a8ug&\u0011\u0011M\u0018\u0002\u0006\u000bZ,g\u000e^\u0001\bI&\u001c\bo\\:f\u0001
   #11 = Utf8               host
   #12 = Utf8               Ljava/lang/String;
   #13 = Utf8               port
   #14 = Utf8               I
   #15 = Utf8               socket
   #16 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;
   #17 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Ljava/net/Socket;>;
   #18 = Utf8               out
   #19 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Ljava/io/ObjectOutputStream;>;
   #20 = Utf8               ()Ljava/util/concurrent/atomic/AtomicReference;
   #21 = Utf8               ()Ljava/util/concurrent/atomic/AtomicReference<Ljava/net/Socket;>;
   #22 = NameAndType        #15:#16       // socket:Ljava/util/concurrent/atomic/AtomicReference;
   #23 = Fieldref           #2.#22        // org/scalatest/tools/SocketReporter.socket:Ljava/util/concurrent/atomic/AtomicReference;
   #24 = Utf8               this
   #25 = Utf8               Lorg/scalatest/tools/SocketReporter;
   #26 = Utf8               ()Ljava/util/concurrent/atomic/AtomicReference<Ljava/io/ObjectOutputStream;>;
   #27 = NameAndType        #18:#16       // out:Ljava/util/concurrent/atomic/AtomicReference;
   #28 = Fieldref           #2.#27        // org/scalatest/tools/SocketReporter.out:Ljava/util/concurrent/atomic/AtomicReference;
   #29 = Utf8               refresh
   #30 = Utf8               ()V
   #31 = Utf8               java/lang/Throwable
   #32 = Class              #31           // java/lang/Throwable
   #33 = NameAndType        #18:#20       // out:()Ljava/util/concurrent/atomic/AtomicReference;
   #34 = Methodref          #2.#33        // org/scalatest/tools/SocketReporter.out:()Ljava/util/concurrent/atomic/AtomicReference;
   #35 = Utf8               java/util/concurrent/atomic/AtomicReference
   #36 = Class              #35           // java/util/concurrent/atomic/AtomicReference
   #37 = Utf8               get
   #38 = Utf8               ()Ljava/lang/Object;
   #39 = NameAndType        #37:#38       // get:()Ljava/lang/Object;
   #40 = Methodref          #36.#39       // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
   #41 = Utf8               java/io/ObjectOutputStream
   #42 = Class              #41           // java/io/ObjectOutputStream
   #43 = Utf8               close
   #44 = NameAndType        #43:#30       // close:()V
   #45 = Methodref          #42.#44       // java/io/ObjectOutputStream.close:()V
   #46 = NameAndType        #15:#20       // socket:()Ljava/util/concurrent/atomic/AtomicReference;
   #47 = Methodref          #2.#46        // org/scalatest/tools/SocketReporter.socket:()Ljava/util/concurrent/atomic/AtomicReference;
   #48 = Utf8               java/net/Socket
   #49 = Class              #48           // java/net/Socket
   #50 = Methodref          #49.#44       // java/net/Socket.close:()V
   #51 = Utf8               org/scalatest/Suite$
   #52 = Class              #51           // org/scalatest/Suite$
   #53 = Utf8               MODULE$
   #54 = Utf8               Lorg/scalatest/Suite$;
   #55 = NameAndType        #53:#54       // MODULE$:Lorg/scalatest/Suite$;
   #56 = Fieldref           #52.#55       // org/scalatest/Suite$.MODULE$:Lorg/scalatest/Suite$;
   #57 = Utf8               anExceptionThatShouldCauseAnAbort
   #58 = Utf8               (Ljava/lang/Throwable;)Z
   #59 = NameAndType        #57:#58       // anExceptionThatShouldCauseAnAbort:(Ljava/lang/Throwable;)Z
   #60 = Methodref          #52.#59       // org/scalatest/Suite$.anExceptionThatShouldCauseAnAbort:(Ljava/lang/Throwable;)Z
   #61 = Utf8               scala/runtime/BoxedUnit
   #62 = Class              #61           // scala/runtime/BoxedUnit
   #63 = Utf8               UNIT
   #64 = Utf8               Lscala/runtime/BoxedUnit;
   #65 = NameAndType        #63:#64       // UNIT:Lscala/runtime/BoxedUnit;
   #66 = Fieldref           #62.#65       // scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   #67 = NameAndType        #11:#12       // host:Ljava/lang/String;
   #68 = Fieldref           #2.#67        // org/scalatest/tools/SocketReporter.host:Ljava/lang/String;
   #69 = NameAndType        #13:#14       // port:I
   #70 = Fieldref           #2.#69        // org/scalatest/tools/SocketReporter.port:I
   #71 = Utf8               <init>
   #72 = Utf8               (Ljava/lang/String;I)V
   #73 = NameAndType        #71:#72       // "<init>":(Ljava/lang/String;I)V
   #74 = Methodref          #49.#73       // java/net/Socket."<init>":(Ljava/lang/String;I)V
   #75 = Utf8               set
   #76 = Utf8               (Ljava/lang/Object;)V
   #77 = NameAndType        #75:#76       // set:(Ljava/lang/Object;)V
   #78 = Methodref          #36.#77       // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
   #79 = Utf8               getOutputStream
   #80 = Utf8               ()Ljava/io/OutputStream;
   #81 = NameAndType        #79:#80       // getOutputStream:()Ljava/io/OutputStream;
   #82 = Methodref          #49.#81       // java/net/Socket.getOutputStream:()Ljava/io/OutputStream;
   #83 = Utf8               (Ljava/io/OutputStream;)V
   #84 = NameAndType        #71:#83       // "<init>":(Ljava/io/OutputStream;)V
   #85 = Methodref          #42.#84       // java/io/ObjectOutputStream."<init>":(Ljava/io/OutputStream;)V
   #86 = Utf8               apply
   #87 = Utf8               (Lorg/scalatest/events/Event;)V
   #88 = Utf8               event
   #89 = Utf8               writeObject
   #90 = NameAndType        #89:#76       // writeObject:(Ljava/lang/Object;)V
   #91 = Methodref          #42.#90       // java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
   #92 = Utf8               flush
   #93 = NameAndType        #92:#30       // flush:()V
   #94 = Methodref          #42.#93       // java/io/ObjectOutputStream.flush:()V
   #95 = Utf8               java/io/NotSerializableException
   #96 = Class              #95           // java/io/NotSerializableException
   #97 = NameAndType        #29:#30       // refresh:()V
   #98 = Methodref          #2.#97        // org/scalatest/tools/SocketReporter.refresh:()V
   #99 = Utf8               org/scalatest/events/Event
  #100 = Class              #99           // org/scalatest/events/Event
  #101 = Utf8               ensureSerializable
  #102 = Utf8               ()Lorg/scalatest/events/Event;
  #103 = NameAndType        #101:#102     // ensureSerializable:()Lorg/scalatest/events/Event;
  #104 = Methodref          #100.#103     // org/scalatest/events/Event.ensureSerializable:()Lorg/scalatest/events/Event;
  #105 = Utf8               Lorg/scalatest/events/Event;
  #106 = Utf8               dispose
  #107 = NameAndType        #71:#30       // "<init>":()V
  #108 = Methodref          #4.#107       // java/lang/Object."<init>":()V
  #109 = NameAndType        #71:#76       // "<init>":(Ljava/lang/Object;)V
  #110 = Methodref          #36.#109      // java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
  #111 = Utf8               Signature
  #112 = Utf8               Code
  #113 = Utf8               LineNumberTable
  #114 = Utf8               LocalVariableTable
  #115 = Utf8               StackMapTable
  #116 = Utf8               MethodParameters
  #117 = Utf8               SourceFile
  #118 = Utf8               RuntimeVisibleAnnotations
  #119 = Utf8               ScalaInlineInfo
  #120 = Utf8               ScalaSig
{
  private final java.lang.String host;
    descriptor: Ljava/lang/String;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final int port;
    descriptor: I
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.util.concurrent.atomic.AtomicReference<java.net.Socket> socket;
    descriptor: Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #17                          // Ljava/util/concurrent/atomic/AtomicReference<Ljava/net/Socket;>;

  private final java.util.concurrent.atomic.AtomicReference<java.io.ObjectOutputStream> out;
    descriptor: Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #19                          // Ljava/util/concurrent/atomic/AtomicReference<Ljava/io/ObjectOutputStream;>;

  private java.util.concurrent.atomic.AtomicReference<java.net.Socket> socket();
    descriptor: ()Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #23                 // Field socket:Ljava/util/concurrent/atomic/AtomicReference;
         4: areturn
      LineNumberTable:
        line 28: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalatest/tools/SocketReporter;
    Signature: #21                          // ()Ljava/util/concurrent/atomic/AtomicReference<Ljava/net/Socket;>;

  private java.util.concurrent.atomic.AtomicReference<java.io.ObjectOutputStream> out();
    descriptor: ()Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #28                 // Field out:Ljava/util/concurrent/atomic/AtomicReference;
         4: areturn
      LineNumberTable:
        line 29: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalatest/tools/SocketReporter;
    Signature: #26                          // ()Ljava/util/concurrent/atomic/AtomicReference<Ljava/io/ObjectOutputStream;>;

  public void refresh();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=5, args_size=1
         0: aload_0
         1: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
         4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
         7: checkcast     #42                 // class java/io/ObjectOutputStream
        10: invokevirtual #45                 // Method java/io/ObjectOutputStream.close:()V
        13: aload_0
        14: invokespecial #47                 // Method socket:()Ljava/util/concurrent/atomic/AtomicReference;
        17: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        20: checkcast     #49                 // class java/net/Socket
        23: invokevirtual #50                 // Method java/net/Socket.close:()V
        26: goto          68
        29: astore_2
        30: aload_2
        31: astore_3
        32: aload_3
        33: ifnull        60
        36: aload_3
        37: astore        4
        39: getstatic     #56                 // Field org/scalatest/Suite$.MODULE$:Lorg/scalatest/Suite$;
        42: aload         4
        44: invokevirtual #60                 // Method org/scalatest/Suite$.anExceptionThatShouldCauseAnAbort:(Ljava/lang/Throwable;)Z
        47: ifeq          57
        50: getstatic     #66                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
        53: astore_1
        54: goto          65
        57: goto          63
        60: goto          63
        63: aload_2
        64: athrow
        65: goto          68
        68: aload_0
        69: invokespecial #47                 // Method socket:()Ljava/util/concurrent/atomic/AtomicReference;
        72: new           #49                 // class java/net/Socket
        75: dup
        76: aload_0
        77: getfield      #68                 // Field host:Ljava/lang/String;
        80: aload_0
        81: getfield      #70                 // Field port:I
        84: invokespecial #74                 // Method java/net/Socket."<init>":(Ljava/lang/String;I)V
        87: invokevirtual #78                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
        90: aload_0
        91: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
        94: new           #42                 // class java/io/ObjectOutputStream
        97: dup
        98: aload_0
        99: invokespecial #47                 // Method socket:()Ljava/util/concurrent/atomic/AtomicReference;
       102: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       105: checkcast     #49                 // class java/net/Socket
       108: invokevirtual #82                 // Method java/net/Socket.getOutputStream:()Ljava/io/OutputStream;
       111: invokespecial #85                 // Method java/io/ObjectOutputStream."<init>":(Ljava/io/OutputStream;)V
       114: invokevirtual #78                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
       117: return
      Exception table:
         from    to  target type
             0    26    29   Class java/lang/Throwable
      StackMapTable: number_of_entries = 6
        frame_type = 93 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 27
          locals = [ class org/scalatest/tools/SocketReporter, top, class java/lang/Throwable, class java/lang/Throwable, class java/lang/Throwable ]
          stack = []
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class org/scalatest/tools/SocketReporter, class scala/runtime/BoxedUnit, class java/lang/Throwable, class java/lang/Throwable, class java/lang/Throwable ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class org/scalatest/tools/SocketReporter ]
          stack = []
      LineNumberTable:
        line 33: 0
        line 34: 13
        line 37: 30
        line 37: 32
        line 32: 63
        line 39: 68
        line 40: 90
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     118     0  this   Lorg/scalatest/tools/SocketReporter;

  public synchronized void apply(org.scalatest.events.Event);
    descriptor: (Lorg/scalatest/events/Event;)V
    flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED
    Code:
      stack=2, locals=6, args_size=2
         0: aload_0
         1: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
         4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
         7: checkcast     #42                 // class java/io/ObjectOutputStream
        10: aload_1
        11: invokevirtual #91                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
        14: aload_0
        15: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
        18: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        21: checkcast     #42                 // class java/io/ObjectOutputStream
        24: invokevirtual #94                 // Method java/io/ObjectOutputStream.flush:()V
        27: goto          115
        30: astore_3
        31: aload_3
        32: astore        4
        34: aload         4
        36: instanceof    #96                 // class java/io/NotSerializableException
        39: ifeq          70
        42: aload_0
        43: invokevirtual #98                 // Method refresh:()V
        46: aload_0
        47: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
        50: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        53: checkcast     #42                 // class java/io/ObjectOutputStream
        56: aload_1
        57: invokevirtual #104                // Method org/scalatest/events/Event.ensureSerializable:()Lorg/scalatest/events/Event;
        60: invokevirtual #91                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
        63: getstatic     #66                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
        66: astore_2
        67: goto          112
        70: goto          73
        73: aload         4
        75: ifnull        107
        78: aload         4
        80: astore        5
        82: getstatic     #56                 // Field org/scalatest/Suite$.MODULE$:Lorg/scalatest/Suite$;
        85: aload         5
        87: invokevirtual #60                 // Method org/scalatest/Suite$.anExceptionThatShouldCauseAnAbort:(Ljava/lang/Throwable;)Z
        90: ifeq          104
        93: aload_0
        94: invokevirtual #98                 // Method refresh:()V
        97: getstatic     #66                 // Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
       100: astore_2
       101: goto          112
       104: goto          110
       107: goto          110
       110: aload_3
       111: athrow
       112: goto          115
       115: return
      Exception table:
         from    to  target type
             0    27    30   Class java/lang/Throwable
      StackMapTable: number_of_entries = 8
        frame_type = 94 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 254 /* append */
          offset_delta = 39
          locals = [ top, class java/lang/Throwable, class java/lang/Throwable ]
        frame_type = 2 /* same */
        frame_type = 252 /* append */
          offset_delta = 30
          locals = [ class java/lang/Throwable ]
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class org/scalatest/tools/SocketReporter, class org/scalatest/events/Event, class scala/runtime/BoxedUnit, class java/lang/Throwable, class java/lang/Throwable ]
          stack = []
        frame_type = 248 /* chop */
          offset_delta = 2
      LineNumberTable:
        line 46: 0
        line 47: 14
        line 50: 31
        line 50: 34
        line 51: 42
        line 52: 46
        line 50: 70
        line 54: 73
        line 45: 110
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     116     0  this   Lorg/scalatest/tools/SocketReporter;
            0     116     1 event   Lorg/scalatest/events/Event;
    MethodParameters:
      Name                           Flags
      event                          final

  public void dispose();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
         4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
         7: checkcast     #42                 // class java/io/ObjectOutputStream
        10: invokevirtual #94                 // Method java/io/ObjectOutputStream.flush:()V
        13: aload_0
        14: invokespecial #34                 // Method out:()Ljava/util/concurrent/atomic/AtomicReference;
        17: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        20: checkcast     #42                 // class java/io/ObjectOutputStream
        23: invokevirtual #45                 // Method java/io/ObjectOutputStream.close:()V
        26: aload_0
        27: invokespecial #47                 // Method socket:()Ljava/util/concurrent/atomic/AtomicReference;
        30: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        33: checkcast     #49                 // class java/net/Socket
        36: invokevirtual #50                 // Method java/net/Socket.close:()V
        39: return
      LineNumberTable:
        line 60: 0
        line 61: 13
        line 62: 26
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      40     0  this   Lorg/scalatest/tools/SocketReporter;

  public org.scalatest.tools.SocketReporter(java.lang.String, int);
    descriptor: (Ljava/lang/String;I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: putfield      #68                 // Field host:Ljava/lang/String;
         5: aload_0
         6: iload_2
         7: putfield      #70                 // Field port:I
        10: aload_0
        11: invokespecial #108                // Method java/lang/Object."<init>":()V
        14: aload_0
        15: new           #36                 // class java/util/concurrent/atomic/AtomicReference
        18: dup
        19: new           #49                 // class java/net/Socket
        22: dup
        23: aload_1
        24: iload_2
        25: invokespecial #74                 // Method java/net/Socket."<init>":(Ljava/lang/String;I)V
        28: invokespecial #110                // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
        31: putfield      #23                 // Field socket:Ljava/util/concurrent/atomic/AtomicReference;
        34: aload_0
        35: new           #36                 // class java/util/concurrent/atomic/AtomicReference
        38: dup
        39: new           #42                 // class java/io/ObjectOutputStream
        42: dup
        43: aload_0
        44: invokespecial #47                 // Method socket:()Ljava/util/concurrent/atomic/AtomicReference;
        47: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
        50: checkcast     #49                 // class java/net/Socket
        53: invokevirtual #82                 // Method java/net/Socket.getOutputStream:()Ljava/io/OutputStream;
        56: invokespecial #85                 // Method java/io/ObjectOutputStream."<init>":(Ljava/io/OutputStream;)V
        59: invokespecial #110                // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
        62: putfield      #28                 // Field out:Ljava/util/concurrent/atomic/AtomicReference;
        65: return
      LineNumberTable:
        line 26: 0
        line 28: 14
        line 29: 34
        line 26: 65
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      66     0  this   Lorg/scalatest/tools/SocketReporter;
            0      66     1  host   Ljava/lang/String;
            0      66     2  port   I
    MethodParameters:
      Name                           Flags
      host                           final
      port                           final
}
SourceFile: "SocketReporter.scala"
RuntimeVisibleAnnotations:
  0: #8(#9=s#10)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\r4Qa\u0003\u0007\u0001\u001dIA\u0001\"\b\u0001\u0003\u0002\u0003\u0006Ia\b\u0005\tU\u0001\u0011\t\u0011)A\u0005W!)a\u0006\u0001C\u0001_!9A\u0007\u0001b\u0001\n\u0013)\u0004B\u0002%\u0001A\u0003%a\u0007C\u0004J\u0001\t\u0007I\u0011\u0002&\t\rI\u0003\u0001\u0015!\u0003L\u0011\u0015\u0019\u0006\u0001\"\u0001U\u0011\u0015A\u0006\u0001\"\u0001Z\u0011\u0015\u0011\u0007\u0001\"\u0001U\u00059\u0019vnY6fiJ+\u0007o\u001c:uKJT!!\u0004\b\u0002\u000bQ|w\u000e\\:\u000b\u0005=\u0001\u0012!C:dC2\fG/Z:u\u0015\u0005\t\u0012aA8sON\u0019\u0001aE\r\u0011\u0005Q9R\"A\u000b\u000b\u0003Y\tQa]2bY\u0006L!\u0001G\u000b\u0003\r\u0005s\u0017PU3g!\tQ2$D\u0001\u000f\u0013\tabBA\nSKN|WO]2fMVd\'+\u001a9peR,\'/\u0001\u0003i_N$8\u0001\u0001\t\u0003A\u001dr!!I\u0013\u0011\u0005\t*R\"A\u0012\u000b\u0005\u0011r\u0012A\u0002\u001fs_>$h(\u0003\u0002\'+\u00051\u0001K]3eK\u001aL!\u0001K\u0015\u0003\rM#(/\u001b8h\u0015\t1S#\u0001\u0003q_J$\bC\u0001\u000b-\u0013\tiSCA\u0002J]R\fa\u0001P5oSRtDc\u0001\u00193gA\u0011\u0011\u0007A\u0007\u0002\u0019!)Qd\u0001a\u0001?!)!f\u0001a\u0001W\u000511o\\2lKR,\u0012A\u000e\t\u0004o\u0001\u0013U\"\u0001\u001d\u000b\u0005eR\u0014AB1u_6L7M\u0003\u0002<y\u0005Q1m\u001c8dkJ\u0014XM\u001c;\u000b\u0005ur\u0014\u0001B;uS2T\u0011aP\u0001\u0005U\u00064\u0018-\u0003\u0002Bq\ty\u0011\t^8nS\u000e\u0014VMZ3sK:\u001cW\r\u0005\u0002D\r6\tAI\u0003\u0002F}\u0005\u0019a.\u001a;\n\u0005\u001d#%AB*pG.,G/A\u0004t_\u000e\\W\r\u001e\u0011\u0002\u0007=,H/F\u0001L!\r9\u0004\t\u0014\t\u0003\u001bBk\u0011A\u0014\u0006\u0003\u001fz\n!![8\n\u0005Es%AE(cU\u0016\u001cGoT;uaV$8\u000b\u001e:fC6\fAa\\;uA\u00059!/\u001a4sKNDG#A+\u0011\u0005Q1\u0016BA,\u0016\u0005\u0011)f.\u001b;\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\u0005US\u0006\"B.\n\u0001\u0004a\u0016!B3wK:$\bCA/a\u001b\u0005q&BA0\u000f\u0003\u0019)g/\u001a8ug&\u0011\u0011M\u0018\u0002\u0006\u000bZ,g\u000e^\u0001\bI&\u001c\bo\\:f\u0001"
    )
  ScalaInlineInfo: length = 0x22 (unknown attribute)
   01 00 00 06 00 47 00 48 00 00 56 00 57 00 00 6A
   00 1E 00 00 12 00 14 01 00 1D 00 1E 00 00 0F 00
   14 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
