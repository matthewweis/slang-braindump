Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/apache/commons/io/output/AppendableWriter.class
  Last modified May 29, 2022; size 3133 bytes
  SHA-256 checksum ed585f8028438e3e0571c4ea7540cc8aa4637ae6c948b8221196d1d2ffaa999f
  Compiled from "AppendableWriter.java"
public class org.apache.commons.io.output.AppendableWriter<T extends java.lang.Appendable> extends java.io.Writer
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #22                         // org/apache/commons/io/output/AppendableWriter
  super_class: #23                        // java/io/Writer
  interfaces: 0, fields: 1, methods: 13, attributes: 2
Constant pool:
    #1 = Methodref          #23.#75       // java/io/Writer."<init>":()V
    #2 = Fieldref           #22.#76       // org/apache/commons/io/output/AppendableWriter.appendable:Ljava/lang/Appendable;
    #3 = InterfaceMethodref #77.#78       // java/lang/Appendable.append:(C)Ljava/lang/Appendable;
    #4 = InterfaceMethodref #77.#79       // java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    #5 = InterfaceMethodref #77.#80       // java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
    #6 = String             #81           // Character array is missing
    #7 = Methodref          #82.#83       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
    #8 = Class              #84           // java/lang/IndexOutOfBoundsException
    #9 = Class              #85           // java/lang/StringBuilder
   #10 = Methodref          #9.#75        // java/lang/StringBuilder."<init>":()V
   #11 = String             #86           // Array Size=
   #12 = Methodref          #9.#87        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #13 = Methodref          #9.#88        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   #14 = String             #89           // , offset=
   #15 = String             #90           // , length=
   #16 = Methodref          #9.#91        // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #17 = Methodref          #8.#92        // java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
   #18 = String             #93           // String is missing
   #19 = Methodref          #22.#94       // org/apache/commons/io/output/AppendableWriter.append:(C)Ljava/io/Writer;
   #20 = Methodref          #22.#95       // org/apache/commons/io/output/AppendableWriter.append:(Ljava/lang/CharSequence;II)Ljava/io/Writer;
   #21 = Methodref          #22.#96       // org/apache/commons/io/output/AppendableWriter.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
   #22 = Class              #97           // org/apache/commons/io/output/AppendableWriter
   #23 = Class              #98           // java/io/Writer
   #24 = Utf8               appendable
   #25 = Utf8               Ljava/lang/Appendable;
   #26 = Utf8               Signature
   #27 = Utf8               TT;
   #28 = Utf8               <init>
   #29 = Utf8               (Ljava/lang/Appendable;)V
   #30 = Utf8               Code
   #31 = Utf8               LineNumberTable
   #32 = Utf8               LocalVariableTable
   #33 = Utf8               this
   #34 = Utf8               Lorg/apache/commons/io/output/AppendableWriter;
   #35 = Utf8               LocalVariableTypeTable
   #36 = Utf8               Lorg/apache/commons/io/output/AppendableWriter<TT;>;
   #37 = Utf8               (TT;)V
   #38 = Utf8               append
   #39 = Utf8               (C)Ljava/io/Writer;
   #40 = Utf8               c
   #41 = Utf8               C
   #42 = Utf8               Exceptions
   #43 = Class              #99           // java/io/IOException
   #44 = Utf8               (Ljava/lang/CharSequence;)Ljava/io/Writer;
   #45 = Utf8               csq
   #46 = Utf8               Ljava/lang/CharSequence;
   #47 = Utf8               (Ljava/lang/CharSequence;II)Ljava/io/Writer;
   #48 = Utf8               start
   #49 = Utf8               I
   #50 = Utf8               end
   #51 = Utf8               close
   #52 = Utf8               ()V
   #53 = Utf8               flush
   #54 = Utf8               getAppendable
   #55 = Utf8               ()Ljava/lang/Appendable;
   #56 = Utf8               ()TT;
   #57 = Utf8               write
   #58 = Utf8               ([CII)V
   #59 = Utf8               i
   #60 = Utf8               cbuf
   #61 = Utf8               [C
   #62 = Utf8               off
   #63 = Utf8               len
   #64 = Utf8               StackMapTable
   #65 = Utf8               (I)V
   #66 = Utf8               (Ljava/lang/String;II)V
   #67 = Utf8               str
   #68 = Utf8               Ljava/lang/String;
   #69 = Utf8               (C)Ljava/lang/Appendable;
   #70 = Utf8               (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
   #71 = Utf8               (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
   #72 = Utf8               <T::Ljava/lang/Appendable;>Ljava/io/Writer;
   #73 = Utf8               SourceFile
   #74 = Utf8               AppendableWriter.java
   #75 = NameAndType        #28:#52       // "<init>":()V
   #76 = NameAndType        #24:#25       // appendable:Ljava/lang/Appendable;
   #77 = Class              #100          // java/lang/Appendable
   #78 = NameAndType        #38:#69       // append:(C)Ljava/lang/Appendable;
   #79 = NameAndType        #38:#71       // append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
   #80 = NameAndType        #38:#70       // append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
   #81 = Utf8               Character array is missing
   #82 = Class              #101          // java/util/Objects
   #83 = NameAndType        #102:#103     // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
   #84 = Utf8               java/lang/IndexOutOfBoundsException
   #85 = Utf8               java/lang/StringBuilder
   #86 = Utf8               Array Size=
   #87 = NameAndType        #38:#104      // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #88 = NameAndType        #38:#105      // append:(I)Ljava/lang/StringBuilder;
   #89 = Utf8               , offset=
   #90 = Utf8               , length=
   #91 = NameAndType        #106:#107     // toString:()Ljava/lang/String;
   #92 = NameAndType        #28:#108      // "<init>":(Ljava/lang/String;)V
   #93 = Utf8               String is missing
   #94 = NameAndType        #38:#39       // append:(C)Ljava/io/Writer;
   #95 = NameAndType        #38:#47       // append:(Ljava/lang/CharSequence;II)Ljava/io/Writer;
   #96 = NameAndType        #38:#44       // append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
   #97 = Utf8               org/apache/commons/io/output/AppendableWriter
   #98 = Utf8               java/io/Writer
   #99 = Utf8               java/io/IOException
  #100 = Utf8               java/lang/Appendable
  #101 = Utf8               java/util/Objects
  #102 = Utf8               requireNonNull
  #103 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
  #104 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #105 = Utf8               (I)Ljava/lang/StringBuilder;
  #106 = Utf8               toString
  #107 = Utf8               ()Ljava/lang/String;
  #108 = Utf8               (Ljava/lang/String;)V
{
  private final T appendable;
    descriptor: Ljava/lang/Appendable;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #27                          // TT;

  public org.apache.commons.io.output.AppendableWriter(T);
    descriptor: (Ljava/lang/Appendable;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: invokespecial #1                  // Method java/io/Writer."<init>":()V
         4: aload_0
         5: aload_1
         6: putfield      #2                  // Field appendable:Ljava/lang/Appendable;
         9: return
      LineNumberTable:
        line 45: 0
        line 46: 4
        line 47: 9
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      10     1 appendable   Ljava/lang/Appendable;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
            0      10     1 appendable   TT;
    Signature: #37                          // (TT;)V

  public java.io.Writer append(char) throws java.io.IOException;
    descriptor: (C)Ljava/io/Writer;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
         4: iload_1
         5: invokeinterface #3,  2            // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
        10: pop
        11: aload_0
        12: areturn
      LineNumberTable:
        line 58: 0
        line 59: 11
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      13     1     c   C
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException;
    descriptor: (Ljava/lang/CharSequence;)Ljava/io/Writer;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
         4: aload_1
         5: invokeinterface #4,  2            // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
        10: pop
        11: aload_0
        12: areturn
      LineNumberTable:
        line 71: 0
        line 72: 11
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      13     1   csq   Ljava/lang/CharSequence;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException;
    descriptor: (Ljava/lang/CharSequence;II)Ljava/io/Writer;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
         4: aload_1
         5: iload_2
         6: iload_3
         7: invokeinterface #5,  4            // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
        12: pop
        13: aload_0
        14: areturn
      LineNumberTable:
        line 86: 0
        line 87: 13
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      15     1   csq   Ljava/lang/CharSequence;
            0      15     2 start   I
            0      15     3   end   I
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public void close() throws java.io.IOException;
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 98: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0  this   Lorg/apache/commons/io/output/AppendableWriter;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       1     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public void flush() throws java.io.IOException;
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 108: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0  this   Lorg/apache/commons/io/output/AppendableWriter;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       1     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public T getAppendable();
    descriptor: ()Ljava/lang/Appendable;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
         4: areturn
      LineNumberTable:
        line 116: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/apache/commons/io/output/AppendableWriter;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Signature: #56                          // ()TT;

  public void write(char[], int, int) throws java.io.IOException;
    descriptor: ([CII)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=5, args_size=4
         0: aload_1
         1: ldc           #6                  // String Character array is missing
         3: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
         6: pop
         7: iload_3
         8: iflt          19
        11: iload_2
        12: iload_3
        13: iadd
        14: aload_1
        15: arraylength
        16: if_icmple     65
        19: new           #8                  // class java/lang/IndexOutOfBoundsException
        22: dup
        23: new           #9                  // class java/lang/StringBuilder
        26: dup
        27: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
        30: ldc           #11                 // String Array Size=
        32: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        35: aload_1
        36: arraylength
        37: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        40: ldc           #14                 // String , offset=
        42: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        45: iload_2
        46: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        49: ldc           #15                 // String , length=
        51: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        54: iload_3
        55: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        58: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        61: invokespecial #17                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
        64: athrow
        65: iconst_0
        66: istore        4
        68: iload         4
        70: iload_3
        71: if_icmpge     96
        74: aload_0
        75: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
        78: aload_1
        79: iload_2
        80: iload         4
        82: iadd
        83: caload
        84: invokeinterface #3,  2            // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
        89: pop
        90: iinc          4, 1
        93: goto          68
        96: return
      LineNumberTable:
        line 129: 0
        line 130: 7
        line 131: 19
        line 134: 65
        line 135: 74
        line 134: 90
        line 137: 96
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           68      28     4     i   I
            0      97     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      97     1  cbuf   [C
            0      97     2   off   I
            0      97     3   len   I
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      97     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
      StackMapTable: number_of_entries = 4
        frame_type = 19 /* same */
        frame_type = 45 /* same */
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 27
    Exceptions:
      throws java.io.IOException

  public void write(int) throws java.io.IOException;
    descriptor: (I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
         4: iload_1
         5: i2c
         6: invokeinterface #3,  2            // InterfaceMethod java/lang/Appendable.append:(C)Ljava/lang/Appendable;
        11: pop
        12: return
      LineNumberTable:
        line 147: 0
        line 148: 12
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      13     1     c   I
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public void write(java.lang.String, int, int) throws java.io.IOException;
    descriptor: (Ljava/lang/String;II)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=4, args_size=4
         0: aload_1
         1: ldc           #18                 // String String is missing
         3: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
         6: pop
         7: aload_0
         8: getfield      #2                  // Field appendable:Ljava/lang/Appendable;
        11: aload_1
        12: iload_2
        13: iload_2
        14: iload_3
        15: iadd
        16: invokeinterface #5,  4            // InterfaceMethod java/lang/Appendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
        21: pop
        22: return
      LineNumberTable:
        line 161: 0
        line 162: 7
        line 163: 22
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lorg/apache/commons/io/output/AppendableWriter;
            0      23     1   str   Ljava/lang/String;
            0      23     2   off   I
            0      23     3   len   I
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public java.lang.Appendable append(char) throws java.io.IOException;
    descriptor: (C)Ljava/lang/Appendable;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokevirtual #19                 // Method append:(C)Ljava/io/Writer;
         5: areturn
      LineNumberTable:
        line 36: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/apache/commons/io/output/AppendableWriter;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
    descriptor: (Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_0
         1: aload_1
         2: iload_2
         3: iload_3
         4: invokevirtual #20                 // Method append:(Ljava/lang/CharSequence;II)Ljava/io/Writer;
         7: areturn
      LineNumberTable:
        line 36: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lorg/apache/commons/io/output/AppendableWriter;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       8     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException

  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
    descriptor: (Ljava/lang/CharSequence;)Ljava/lang/Appendable;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokevirtual #21                 // Method append:(Ljava/lang/CharSequence;)Ljava/io/Writer;
         5: areturn
      LineNumberTable:
        line 36: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/apache/commons/io/output/AppendableWriter;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/apache/commons/io/output/AppendableWriter<TT;>;
    Exceptions:
      throws java.io.IOException
}
Signature: #72                          // <T::Ljava/lang/Appendable;>Ljava/io/Writer;
SourceFile: "AppendableWriter.java"
