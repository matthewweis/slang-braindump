Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/sireum/parser/Json$State$State$Slang$state$.class
  Last modified May 29, 2022; size 1969 bytes
  SHA-256 checksum 48ad9663c8f0e5d67ac96e94729689cee7592637941f032cb78d33d98b125ed7
  Compiled from "JsonParser.scala"
public class org.sireum.parser.Json$State$State$Slang$state$
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // org/sireum/parser/Json$State$State$Slang$state$
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 3, attributes: 4
Constant pool:
   #1 = Utf8               org/sireum/parser/Json$State$State$Slang$state$
   #2 = Class              #1             // org/sireum/parser/Json$State$State$Slang$state$
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               JsonParser.scala
   #6 = Utf8               org/sireum/parser/Json$State$
   #7 = Class              #6             // org/sireum/parser/Json$State$
   #8 = Utf8               org/sireum/parser/Json
   #9 = Class              #8             // org/sireum/parser/Json
  #10 = Utf8               State$
  #11 = Utf8               org/sireum/parser/Json$State$$String$
  #12 = Class              #11            // org/sireum/parser/Json$State$$String$
  #13 = Utf8               $String$
  #14 = Utf8               org/sireum/parser/Json$State$State$Slang
  #15 = Class              #14            // org/sireum/parser/Json$State$State$Slang
  #16 = Utf8               State$Slang
  #17 = Utf8               state$
  #18 = Utf8               $outer
  #19 = Utf8               Lorg/sireum/parser/Json$State$State$Slang;
  #20 = Utf8               apply
  #21 = Utf8               (Lscala/collection/immutable/Seq;)Lorg/sireum/Z;
  #22 = Utf8               (Lscala/collection/immutable/Seq<Ljava/lang/Object;>;)Lorg/sireum/Z;
  #23 = Utf8               args
  #24 = Utf8               scala/Predef$
  #25 = Class              #24            // scala/Predef$
  #26 = Utf8               MODULE$
  #27 = Utf8               Lscala/Predef$;
  #28 = NameAndType        #26:#27        // MODULE$:Lscala/Predef$;
  #29 = Fieldref           #25.#28        // scala/Predef$.MODULE$:Lscala/Predef$;
  #30 = Utf8               scala/collection/immutable/Seq
  #31 = Class              #30            // scala/collection/immutable/Seq
  #32 = Utf8               isEmpty
  #33 = Utf8               ()Z
  #34 = NameAndType        #32:#33        // isEmpty:()Z
  #35 = InterfaceMethodref #31.#34        // scala/collection/immutable/Seq.isEmpty:()Z
  #36 = NameAndType        #18:#19        // $outer:Lorg/sireum/parser/Json$State$State$Slang;
  #37 = Fieldref           #2.#36         // org/sireum/parser/Json$State$State$Slang$state$.$outer:Lorg/sireum/parser/Json$State$State$Slang;
  #38 = Utf8               sc
  #39 = Utf8               ()Lscala/StringContext;
  #40 = NameAndType        #38:#39        // sc:()Lscala/StringContext;
  #41 = Methodref          #15.#40        // org/sireum/parser/Json$State$State$Slang.sc:()Lscala/StringContext;
  #42 = Utf8               scala/StringContext
  #43 = Class              #42            // scala/StringContext
  #44 = Utf8               parts
  #45 = Utf8               ()Lscala/collection/immutable/Seq;
  #46 = NameAndType        #44:#45        // parts:()Lscala/collection/immutable/Seq;
  #47 = Methodref          #43.#46        // scala/StringContext.parts:()Lscala/collection/immutable/Seq;
  #48 = Utf8               length
  #49 = Utf8               ()I
  #50 = NameAndType        #48:#49        // length:()I
  #51 = InterfaceMethodref #31.#50        // scala/collection/immutable/Seq.length:()I
  #52 = Utf8               assume
  #53 = Utf8               (Z)V
  #54 = NameAndType        #52:#53        // assume:(Z)V
  #55 = Methodref          #25.#54        // scala/Predef$.assume:(Z)V
  #56 = Utf8               Lorg/sireum/parser/Json$State$$String$;
  #57 = NameAndType        #26:#56        // MODULE$:Lorg/sireum/parser/Json$State$$String$;
  #58 = Fieldref           #12.#57        // org/sireum/parser/Json$State$$String$.MODULE$:Lorg/sireum/parser/Json$State$$String$;
  #59 = Utf8               head
  #60 = Utf8               ()Ljava/lang/Object;
  #61 = NameAndType        #59:#60        // head:()Ljava/lang/Object;
  #62 = InterfaceMethodref #31.#61        // scala/collection/immutable/Seq.head:()Ljava/lang/Object;
  #63 = Utf8               java/lang/String
  #64 = Class              #63            // java/lang/String
  #65 = Utf8               (Ljava/lang/String;)Lorg/sireum/Z;
  #66 = NameAndType        #20:#65        // apply:(Ljava/lang/String;)Lorg/sireum/Z;
  #67 = Methodref          #12.#66        // org/sireum/parser/Json$State$$String$.apply:(Ljava/lang/String;)Lorg/sireum/Z;
  #68 = Utf8               this
  #69 = Utf8               Lorg/sireum/parser/Json$State$State$Slang$state$;
  #70 = Utf8               Lscala/collection/immutable/Seq;
  #71 = Utf8               unapply
  #72 = Utf8               (Lorg/sireum/Z;)Z
  #73 = Utf8               n
  #74 = Utf8               equals
  #75 = Utf8               (Ljava/lang/Object;)Z
  #76 = NameAndType        #74:#75        // equals:(Ljava/lang/Object;)Z
  #77 = Methodref          #4.#76         // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #78 = Utf8               Lorg/sireum/Z;
  #79 = Utf8               org/sireum/Z
  #80 = Class              #79            // org/sireum/Z
  #81 = Utf8               <init>
  #82 = Utf8               (Lorg/sireum/parser/Json$State$State$Slang;)V
  #83 = Utf8               ()V
  #84 = NameAndType        #81:#83        // "<init>":()V
  #85 = Methodref          #4.#84         // java/lang/Object."<init>":()V
  #86 = Utf8               Code
  #87 = Utf8               StackMapTable
  #88 = Utf8               LineNumberTable
  #89 = Utf8               LocalVariableTable
  #90 = Utf8               Signature
  #91 = Utf8               MethodParameters
  #92 = Utf8               InnerClasses
  #93 = Utf8               SourceFile
  #94 = Utf8               ScalaInlineInfo
  #95 = Utf8               Scala
{
  private final org.sireum.parser.Json$State$State$Slang $outer;
    descriptor: Lorg/sireum/parser/Json$State$State$Slang;
    flags: (0x1012) ACC_PRIVATE, ACC_FINAL, ACC_SYNTHETIC

  public org.sireum.Z apply(scala.collection.immutable.Seq<java.lang.Object>);
    descriptor: (Lscala/collection/immutable/Seq;)Lorg/sireum/Z;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: getstatic     #29                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
         3: aload_1
         4: invokeinterface #35,  1           // InterfaceMethod scala/collection/immutable/Seq.isEmpty:()Z
         9: ifeq          35
        12: aload_0
        13: getfield      #37                 // Field $outer:Lorg/sireum/parser/Json$State$State$Slang;
        16: invokevirtual #41                 // Method org/sireum/parser/Json$State$State$Slang.sc:()Lscala/StringContext;
        19: invokevirtual #47                 // Method scala/StringContext.parts:()Lscala/collection/immutable/Seq;
        22: invokeinterface #51,  1           // InterfaceMethod scala/collection/immutable/Seq.length:()I
        27: iconst_1
        28: if_icmpne     35
        31: iconst_1
        32: goto          36
        35: iconst_0
        36: invokevirtual #55                 // Method scala/Predef$.assume:(Z)V
        39: getstatic     #58                 // Field org/sireum/parser/Json$State$$String$.MODULE$:Lorg/sireum/parser/Json$State$$String$;
        42: aload_0
        43: getfield      #37                 // Field $outer:Lorg/sireum/parser/Json$State$State$Slang;
        46: invokevirtual #41                 // Method org/sireum/parser/Json$State$State$Slang.sc:()Lscala/StringContext;
        49: invokevirtual #47                 // Method scala/StringContext.parts:()Lscala/collection/immutable/Seq;
        52: invokeinterface #62,  1           // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
        57: checkcast     #64                 // class java/lang/String
        60: invokevirtual #67                 // Method org/sireum/parser/Json$State$$String$.apply:(Ljava/lang/String;)Lorg/sireum/Z;
        63: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 99 /* same_locals_1_stack_item */
          stack = [ class scala/Predef$ ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class org/sireum/parser/Json$State$State$Slang$state$, class scala/collection/immutable/Seq ]
          stack = [ class scala/Predef$, int ]
      LineNumberTable:
        line 38: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      64     0  this   Lorg/sireum/parser/Json$State$State$Slang$state$;
            0      64     1  args   Lscala/collection/immutable/Seq;
    Signature: #22                          // (Lscala/collection/immutable/Seq<Ljava/lang/Object;>;)Lorg/sireum/Z;
    MethodParameters:
      Name                           Flags
      args                           final

  public boolean unapply(org.sireum.Z);
    descriptor: (Lorg/sireum/Z;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: getstatic     #29                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
         3: aload_0
         4: getfield      #37                 // Field $outer:Lorg/sireum/parser/Json$State$State$Slang;
         7: invokevirtual #41                 // Method org/sireum/parser/Json$State$State$Slang.sc:()Lscala/StringContext;
        10: invokevirtual #47                 // Method scala/StringContext.parts:()Lscala/collection/immutable/Seq;
        13: invokeinterface #51,  1           // InterfaceMethod scala/collection/immutable/Seq.length:()I
        18: iconst_1
        19: if_icmpne     26
        22: iconst_1
        23: goto          27
        26: iconst_0
        27: invokevirtual #55                 // Method scala/Predef$.assume:(Z)V
        30: aload_1
        31: getstatic     #58                 // Field org/sireum/parser/Json$State$$String$.MODULE$:Lorg/sireum/parser/Json$State$$String$;
        34: aload_0
        35: getfield      #37                 // Field $outer:Lorg/sireum/parser/Json$State$State$Slang;
        38: invokevirtual #41                 // Method org/sireum/parser/Json$State$State$Slang.sc:()Lscala/StringContext;
        41: invokevirtual #47                 // Method scala/StringContext.parts:()Lscala/collection/immutable/Seq;
        44: invokeinterface #62,  1           // InterfaceMethod scala/collection/immutable/Seq.head:()Ljava/lang/Object;
        49: checkcast     #64                 // class java/lang/String
        52: invokevirtual #67                 // Method org/sireum/parser/Json$State$$String$.apply:(Ljava/lang/String;)Lorg/sireum/Z;
        55: astore_2
        56: dup
        57: ifnonnull     68
        60: pop
        61: aload_2
        62: ifnull        75
        65: goto          79
        68: aload_2
        69: invokevirtual #77                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        72: ifeq          79
        75: iconst_1
        76: goto          80
        79: iconst_0
        80: ireturn
      StackMapTable: number_of_entries = 6
        frame_type = 90 /* same_locals_1_stack_item */
          stack = [ class scala/Predef$ ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class org/sireum/parser/Json$State$State$Slang$state$, class org/sireum/Z ]
          stack = [ class scala/Predef$, int ]
        frame_type = 255 /* full_frame */
          offset_delta = 40
          locals = [ class org/sireum/parser/Json$State$State$Slang$state$, class org/sireum/Z, class org/sireum/Z ]
          stack = [ class org/sireum/Z ]
        frame_type = 6 /* same */
        frame_type = 3 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 38: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      81     0  this   Lorg/sireum/parser/Json$State$State$Slang$state$;
            0      81     1     n   Lorg/sireum/Z;
    MethodParameters:
      Name                           Flags
      n                              final

  public org.sireum.parser.Json$State$State$Slang$state$(org.sireum.parser.Json$State$State$Slang);
    descriptor: (Lorg/sireum/parser/Json$State$State$Slang;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: ifnonnull     6
         4: aconst_null
         5: athrow
         6: aload_0
         7: aload_1
         8: putfield      #37                 // Field $outer:Lorg/sireum/parser/Json$State$State$Slang;
        11: aload_0
        12: invokespecial #85                 // Method java/lang/Object."<init>":()V
        15: return
      StackMapTable: number_of_entries = 1
        frame_type = 6 /* same */
      LineNumberTable:
        line 38: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      16     0  this   Lorg/sireum/parser/Json$State$State$Slang$state$;
            0      16     1 $outer   Lorg/sireum/parser/Json$State$State$Slang;
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
}
InnerClasses:
  public static #10= #7 of #9;            // State$=class org/sireum/parser/Json$State$ of class org/sireum/parser/Json
  public static #13= #12 of #7;           // $String$=class org/sireum/parser/Json$State$$String$ of class org/sireum/parser/Json$State$
  public static #16= #15 of #7;           // State$Slang=class org/sireum/parser/Json$State$State$Slang of class org/sireum/parser/Json$State$
  public #17= #2 of #15;                  // state$=class org/sireum/parser/Json$State$State$Slang$state$ of class org/sireum/parser/Json$State$State$Slang
SourceFile: "JsonParser.scala"
  ScalaInlineInfo: length = 0x13 (unknown attribute)
   01 01 00 03 00 51 00 52 01 00 14 00 15 01 00 47
   00 48 01
  Scala: length = 0x0 (unknown attribute)

