Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/scalactic/TolerantNumerics.class
  Last modified May 29, 2022; size 7096 bytes
  SHA-256 checksum bf93dc7258a38a8ae0fdc7b7fd45619ea73816fdfea5c73f3b5087b1a0419aec
  Compiled from "TolerantNumerics.scala"
public interface org.scalactic.TolerantNumerics
  minor version: 0
  major version: 52
  flags: (0x0601) ACC_PUBLIC, ACC_INTERFACE, ACC_ABSTRACT
  this_class: #2                          // org/scalactic/TolerantNumerics
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 15, attributes: 5
Constant pool:
    #1 = Utf8               org/scalactic/TolerantNumerics
    #2 = Class              #1            // org/scalactic/TolerantNumerics
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               TolerantNumerics.scala
    #6 = Utf8               Lscala/reflect/ScalaSignature;
    #7 = Utf8               bytes
    #8 = Utf8               \u0006\u0005M4q\u0001D\u0007\u0011\u0002\u0007\u0005!\u0003C\u0003\u001a\u0001\u0011\u0005!\u0004C\u0003\u001f\u0001\u0011\u0005q\u0004C\u0003*\u0001\u0011\u0005!\u0006C\u00031\u0001\u0011\u0005\u0011\u0007C\u00038\u0001\u0011\u0005\u0001\bC\u0003?\u0001\u0011\u0005q\bC\u0003F\u0001\u0011\u0005a\tC\u0003M\u0001\u0011\u0005QjB\u0003n\u001b!\u0005aNB\u0003\r\u001b!\u0005q\u000eC\u0003r\u0015\u0011\u0005!O\u0001\tU_2,\'/\u00198u\u001dVlWM]5dg*\u0011abD\u0001\ng\u000e\fG.Y2uS\u000eT\u0011\u0001E\u0001\u0004_J<7\u0001A\n\u0003\u0001M\u0001\"\u0001F\f\u000e\u0003UQ\u0011AF\u0001\u0006g\u000e\fG.Y\u0005\u00031U\u0011a!\u00118z%\u00164\u0017A\u0002\u0013j]&$H\u0005F\u0001\u001c!\t!B$\u0003\u0002\u001e+\t!QK\\5u\u0003Y!x\u000e\\3sC:$Hi\\;cY\u0016,\u0015/^1mSRLHC\u0001\u0011(!\r\t#\u0005J\u0007\u0002\u001b%\u00111%\u0004\u0002\t\u000bF,\u0018\r\\5usB\u0011A#J\u0005\u0003MU\u0011a\u0001R8vE2,\u0007\"\u0002\u0015\u0003\u0001\u0004!\u0013!\u0003;pY\u0016\u0014\u0018M\\2f\u0003U!x\u000e\\3sC:$h\t\\8bi\u0016\u000bX/\u00197jif$\"aK\u0018\u0011\u0007\u0005\u0012C\u0006\u0005\u0002\u0015[%\u0011a&\u0006\u0002\u0006\r2|\u0017\r\u001e\u0005\u0006Q\r\u0001\r\u0001L\u0001\u0015i>dWM]1oi2{gnZ#rk\u0006d\u0017\u000e^=\u0015\u0005I2\u0004cA\u0011#gA\u0011A\u0003N\u0005\u0003kU\u0011A\u0001T8oO\")\u0001\u0006\u0002a\u0001g\u0005\u0019Bo\u001c7fe\u0006tG/\u00138u\u000bF,\u0018\r\\5usR\u0011\u0011(\u0010\t\u0004C\tR\u0004C\u0001\u000b<\u0013\taTCA\u0002J]RDQ\u0001K\u0003A\u0002i\nQ\u0003^8mKJ\fg\u000e^*i_J$X)];bY&$\u0018\u0010\u0006\u0002A\tB\u0019\u0011EI!\u0011\u0005Q\u0011\u0015BA\"\u0016\u0005\u0015\u0019\u0006n\u001c:u\u0011\u0015Ac\u00011\u0001B\u0003Q!x\u000e\\3sC:$()\u001f;f\u000bF,\u0018\r\\5usR\u0011qi\u0013\t\u0004C\tB\u0005C\u0001\u000bJ\u0013\tQUC\u0001\u0003CsR,\u0007\"\u0002\u0015\b\u0001\u0004A\u0015a\u0005;pY\u0016\u0014\u0018M\u001c;FcVLg/\u00197f]\u000e,WC\u0001(V)\tyE\u000e\u0006\u0002Q=B\u0019\u0011%U*\n\u0005Ik!aC#rk&4\u0018\r\\3oG\u0016\u0004\"\u0001V+\r\u0001\u0011)a\u000b\u0003b\u0001/\n\ta*\u0005\u0002Y7B\u0011A#W\u0005\u00035V\u0011qAT8uQ&tw\r\u0005\u0002\u00159&\u0011Q,\u0006\u0002\u0004\u0003:L\bbB0\t\u0003\u0003\u0005\u001d\u0001Y\u0001\u000bKZLG-\u001a8dK\u0012\n\u0004cA1j\':\u0011!m\u001a\b\u0003G\u001al\u0011\u0001\u001a\u0006\u0003KF\ta\u0001\u0010:p_Rt\u0014\"\u0001\f\n\u0005!,\u0012a\u00029bG.\fw-Z\u0005\u0003U.\u0014qAT;nKJL7M\u0003\u0002i+!)\u0001\u0006\u0003a\u0001\'\u0006\u0001Bk\u001c7fe\u0006tGOT;nKJL7m\u001d\t\u0003C)\u00192AC\nq!\t\t\u0003!\u0001\u0004=S:LGO\u0010\u000b\u0002]\u0002
    #9 = Utf8               org/scalactic/TolerantNumerics$$anon$1
   #10 = Class              #9            // org/scalactic/TolerantNumerics$$anon$1
   #11 = Utf8               org/scalactic/TolerantNumerics$$anon$2
   #12 = Class              #11           // org/scalactic/TolerantNumerics$$anon$2
   #13 = Utf8               org/scalactic/TolerantNumerics$$anon$3
   #14 = Class              #13           // org/scalactic/TolerantNumerics$$anon$3
   #15 = Utf8               org/scalactic/TolerantNumerics$$anon$4
   #16 = Class              #15           // org/scalactic/TolerantNumerics$$anon$4
   #17 = Utf8               org/scalactic/TolerantNumerics$$anon$5
   #18 = Class              #17           // org/scalactic/TolerantNumerics$$anon$5
   #19 = Utf8               org/scalactic/TolerantNumerics$$anon$6
   #20 = Class              #19           // org/scalactic/TolerantNumerics$$anon$6
   #21 = Utf8               org/scalactic/TolerantNumerics$$anon$7
   #22 = Class              #21           // org/scalactic/TolerantNumerics$$anon$7
   #23 = Utf8               tolerantDoubleEquality$
   #24 = Utf8               (Lorg/scalactic/TolerantNumerics;D)Lorg/scalactic/Equality;
   #25 = Utf8               $this
   #26 = Utf8               tolerance
   #27 = Utf8               tolerantDoubleEquality
   #28 = Utf8               (D)Lorg/scalactic/Equality;
   #29 = NameAndType        #27:#28       // tolerantDoubleEquality:(D)Lorg/scalactic/Equality;
   #30 = InterfaceMethodref #2.#29        // org/scalactic/TolerantNumerics.tolerantDoubleEquality:(D)Lorg/scalactic/Equality;
   #31 = Utf8               Lorg/scalactic/TolerantNumerics;
   #32 = Utf8               D
   #33 = Utf8               (D)Lorg/scalactic/Equality<Ljava/lang/Object;>;
   #34 = Utf8               java/lang/IllegalArgumentException
   #35 = Class              #34           // java/lang/IllegalArgumentException
   #36 = Utf8               java/lang/StringBuilder
   #37 = Class              #36           // java/lang/StringBuilder
   #38 = Integer            91
   #39 = Utf8               <init>
   #40 = Utf8               (I)V
   #41 = NameAndType        #39:#40       // "<init>":(I)V
   #42 = Methodref          #37.#41       // java/lang/StringBuilder."<init>":(I)V
   #43 = Utf8               java/lang/Double
   #44 = Class              #43           // java/lang/Double
   #45 = Utf8               toString
   #46 = Utf8               (D)Ljava/lang/String;
   #47 = NameAndType        #45:#46       // toString:(D)Ljava/lang/String;
   #48 = Methodref          #44.#47       // java/lang/Double.toString:(D)Ljava/lang/String;
   #49 = Utf8               append
   #50 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
   #51 = NameAndType        #49:#50       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #52 = Methodref          #37.#51       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #53 = Utf8                passed to tolerantDoubleEquality was zero or negative. Must be a positive non-zero number.
   #54 = String             #53           //  passed to tolerantDoubleEquality was zero or negative. Must be a positive non-zero number.
   #55 = Utf8               ()Ljava/lang/String;
   #56 = NameAndType        #45:#55       // toString:()Ljava/lang/String;
   #57 = Methodref          #37.#56       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #58 = Utf8               (Ljava/lang/String;)V
   #59 = NameAndType        #39:#58       // "<init>":(Ljava/lang/String;)V
   #60 = Methodref          #35.#59       // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
   #61 = Utf8               (Lorg/scalactic/TolerantNumerics;D)V
   #62 = NameAndType        #39:#61       // "<init>":(Lorg/scalactic/TolerantNumerics;D)V
   #63 = Methodref          #10.#62       // org/scalactic/TolerantNumerics$$anon$1."<init>":(Lorg/scalactic/TolerantNumerics;D)V
   #64 = Utf8               this
   #65 = Utf8               tolerantFloatEquality$
   #66 = Utf8               (Lorg/scalactic/TolerantNumerics;F)Lorg/scalactic/Equality;
   #67 = Utf8               tolerantFloatEquality
   #68 = Utf8               (F)Lorg/scalactic/Equality;
   #69 = NameAndType        #67:#68       // tolerantFloatEquality:(F)Lorg/scalactic/Equality;
   #70 = InterfaceMethodref #2.#69        // org/scalactic/TolerantNumerics.tolerantFloatEquality:(F)Lorg/scalactic/Equality;
   #71 = Utf8               F
   #72 = Utf8               (F)Lorg/scalactic/Equality<Ljava/lang/Object;>;
   #73 = Integer            90
   #74 = Utf8               java/lang/Float
   #75 = Class              #74           // java/lang/Float
   #76 = Utf8               (F)Ljava/lang/String;
   #77 = NameAndType        #45:#76       // toString:(F)Ljava/lang/String;
   #78 = Methodref          #75.#77       // java/lang/Float.toString:(F)Ljava/lang/String;
   #79 = Utf8                passed to tolerantFloatEquality was zero or negative. Must be a positive non-zero number.
   #80 = String             #79           //  passed to tolerantFloatEquality was zero or negative. Must be a positive non-zero number.
   #81 = Utf8               (Lorg/scalactic/TolerantNumerics;F)V
   #82 = NameAndType        #39:#81       // "<init>":(Lorg/scalactic/TolerantNumerics;F)V
   #83 = Methodref          #12.#82       // org/scalactic/TolerantNumerics$$anon$2."<init>":(Lorg/scalactic/TolerantNumerics;F)V
   #84 = Utf8               tolerantLongEquality$
   #85 = Utf8               (Lorg/scalactic/TolerantNumerics;J)Lorg/scalactic/Equality;
   #86 = Utf8               tolerantLongEquality
   #87 = Utf8               (J)Lorg/scalactic/Equality;
   #88 = NameAndType        #86:#87       // tolerantLongEquality:(J)Lorg/scalactic/Equality;
   #89 = InterfaceMethodref #2.#88        // org/scalactic/TolerantNumerics.tolerantLongEquality:(J)Lorg/scalactic/Equality;
   #90 = Utf8               J
   #91 = Utf8               (J)Lorg/scalactic/Equality<Ljava/lang/Object;>;
   #92 = Integer            89
   #93 = Utf8               java/lang/Long
   #94 = Class              #93           // java/lang/Long
   #95 = Utf8               (J)Ljava/lang/String;
   #96 = NameAndType        #45:#95       // toString:(J)Ljava/lang/String;
   #97 = Methodref          #94.#96       // java/lang/Long.toString:(J)Ljava/lang/String;
   #98 = Utf8                passed to tolerantLongEquality was zero or negative. Must be a positive non-zero number.
   #99 = String             #98           //  passed to tolerantLongEquality was zero or negative. Must be a positive non-zero number.
  #100 = Utf8               (Lorg/scalactic/TolerantNumerics;J)V
  #101 = NameAndType        #39:#100      // "<init>":(Lorg/scalactic/TolerantNumerics;J)V
  #102 = Methodref          #14.#101      // org/scalactic/TolerantNumerics$$anon$3."<init>":(Lorg/scalactic/TolerantNumerics;J)V
  #103 = Utf8               tolerantIntEquality$
  #104 = Utf8               (Lorg/scalactic/TolerantNumerics;I)Lorg/scalactic/Equality;
  #105 = Utf8               tolerantIntEquality
  #106 = Utf8               (I)Lorg/scalactic/Equality;
  #107 = NameAndType        #105:#106     // tolerantIntEquality:(I)Lorg/scalactic/Equality;
  #108 = InterfaceMethodref #2.#107       // org/scalactic/TolerantNumerics.tolerantIntEquality:(I)Lorg/scalactic/Equality;
  #109 = Utf8               I
  #110 = Utf8               (I)Lorg/scalactic/Equality<Ljava/lang/Object;>;
  #111 = Integer            88
  #112 = Utf8               java/lang/Integer
  #113 = Class              #112          // java/lang/Integer
  #114 = Utf8               (I)Ljava/lang/String;
  #115 = NameAndType        #45:#114      // toString:(I)Ljava/lang/String;
  #116 = Methodref          #113.#115     // java/lang/Integer.toString:(I)Ljava/lang/String;
  #117 = Utf8                passed to tolerantIntEquality was zero or negative. Must be a positive non-zero number.
  #118 = String             #117          //  passed to tolerantIntEquality was zero or negative. Must be a positive non-zero number.
  #119 = Utf8               (Lorg/scalactic/TolerantNumerics;I)V
  #120 = NameAndType        #39:#119      // "<init>":(Lorg/scalactic/TolerantNumerics;I)V
  #121 = Methodref          #16.#120      // org/scalactic/TolerantNumerics$$anon$4."<init>":(Lorg/scalactic/TolerantNumerics;I)V
  #122 = Utf8               tolerantShortEquality$
  #123 = Utf8               (Lorg/scalactic/TolerantNumerics;S)Lorg/scalactic/Equality;
  #124 = Utf8               tolerantShortEquality
  #125 = Utf8               (S)Lorg/scalactic/Equality;
  #126 = NameAndType        #124:#125     // tolerantShortEquality:(S)Lorg/scalactic/Equality;
  #127 = InterfaceMethodref #2.#126       // org/scalactic/TolerantNumerics.tolerantShortEquality:(S)Lorg/scalactic/Equality;
  #128 = Utf8               S
  #129 = Utf8               (S)Lorg/scalactic/Equality<Ljava/lang/Object;>;
  #130 = Utf8               java/lang/Short
  #131 = Class              #130          // java/lang/Short
  #132 = Utf8               (S)Ljava/lang/String;
  #133 = NameAndType        #45:#132      // toString:(S)Ljava/lang/String;
  #134 = Methodref          #131.#133     // java/lang/Short.toString:(S)Ljava/lang/String;
  #135 = Utf8                passed to tolerantShortEquality was zero or negative. Must be a positive non-zero number.
  #136 = String             #135          //  passed to tolerantShortEquality was zero or negative. Must be a positive non-zero number.
  #137 = Utf8               (Lorg/scalactic/TolerantNumerics;S)V
  #138 = NameAndType        #39:#137      // "<init>":(Lorg/scalactic/TolerantNumerics;S)V
  #139 = Methodref          #18.#138      // org/scalactic/TolerantNumerics$$anon$5."<init>":(Lorg/scalactic/TolerantNumerics;S)V
  #140 = Utf8               tolerantByteEquality$
  #141 = Utf8               (Lorg/scalactic/TolerantNumerics;B)Lorg/scalactic/Equality;
  #142 = Utf8               tolerantByteEquality
  #143 = Utf8               (B)Lorg/scalactic/Equality;
  #144 = NameAndType        #142:#143     // tolerantByteEquality:(B)Lorg/scalactic/Equality;
  #145 = InterfaceMethodref #2.#144       // org/scalactic/TolerantNumerics.tolerantByteEquality:(B)Lorg/scalactic/Equality;
  #146 = Utf8               B
  #147 = Utf8               (B)Lorg/scalactic/Equality<Ljava/lang/Object;>;
  #148 = Utf8               java/lang/Byte
  #149 = Class              #148          // java/lang/Byte
  #150 = Utf8               (B)Ljava/lang/String;
  #151 = NameAndType        #45:#150      // toString:(B)Ljava/lang/String;
  #152 = Methodref          #149.#151     // java/lang/Byte.toString:(B)Ljava/lang/String;
  #153 = Utf8                passed to tolerantByteEquality was zero or negative. Must be a positive non-zero number.
  #154 = String             #153          //  passed to tolerantByteEquality was zero or negative. Must be a positive non-zero number.
  #155 = Utf8               (Lorg/scalactic/TolerantNumerics;B)V
  #156 = NameAndType        #39:#155      // "<init>":(Lorg/scalactic/TolerantNumerics;B)V
  #157 = Methodref          #20.#156      // org/scalactic/TolerantNumerics$$anon$6."<init>":(Lorg/scalactic/TolerantNumerics;B)V
  #158 = Utf8               tolerantEquivalence$
  #159 = Utf8               (Lorg/scalactic/TolerantNumerics;Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
  #160 = Utf8               evidence$1
  #161 = Utf8               tolerantEquivalence
  #162 = Utf8               (Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
  #163 = NameAndType        #161:#162     // tolerantEquivalence:(Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
  #164 = InterfaceMethodref #2.#163       // org/scalactic/TolerantNumerics.tolerantEquivalence:(Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
  #165 = Utf8               Ljava/lang/Object;
  #166 = Utf8               Lscala/math/Numeric;
  #167 = Utf8               <N:Ljava/lang/Object;>(TN;Lscala/math/Numeric<TN;>;)Lorg/scalactic/Equivalence<TN;>;
  #168 = Utf8               scala/Predef$
  #169 = Class              #168          // scala/Predef$
  #170 = Utf8               MODULE$
  #171 = Utf8               Lscala/Predef$;
  #172 = NameAndType        #170:#171     // MODULE$:Lscala/Predef$;
  #173 = Fieldref           #169.#172     // scala/Predef$.MODULE$:Lscala/Predef$;
  #174 = Utf8               implicitly
  #175 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #176 = NameAndType        #174:#175     // implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
  #177 = Methodref          #169.#176     // scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
  #178 = Utf8               scala/math/Numeric
  #179 = Class              #178          // scala/math/Numeric
  #180 = Utf8               zero
  #181 = Utf8               ()Ljava/lang/Object;
  #182 = NameAndType        #180:#181     // zero:()Ljava/lang/Object;
  #183 = InterfaceMethodref #179.#182     // scala/math/Numeric.zero:()Ljava/lang/Object;
  #184 = Utf8               lt
  #185 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z
  #186 = NameAndType        #184:#185     // lt:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #187 = InterfaceMethodref #179.#186     // scala/math/Numeric.lt:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #188 = Methodref          #4.#56        // java/lang/Object.toString:()Ljava/lang/String;
  #189 = Utf8                passed to tolerantEquivalence was zero or negative. Must be a positive non-zero number.
  #190 = String             #189          //  passed to tolerantEquivalence was zero or negative. Must be a positive non-zero number.
  #191 = Utf8               (Lorg/scalactic/TolerantNumerics;Lscala/math/Numeric;Ljava/lang/Object;)V
  #192 = NameAndType        #39:#191      // "<init>":(Lorg/scalactic/TolerantNumerics;Lscala/math/Numeric;Ljava/lang/Object;)V
  #193 = Methodref          #22.#192      // org/scalactic/TolerantNumerics$$anon$7."<init>":(Lorg/scalactic/TolerantNumerics;Lscala/math/Numeric;Ljava/lang/Object;)V
  #194 = Utf8               numeric
  #195 = Utf8               $init$
  #196 = Utf8               (Lorg/scalactic/TolerantNumerics;)V
  #197 = Utf8               Code
  #198 = Utf8               LineNumberTable
  #199 = Utf8               LocalVariableTable
  #200 = Utf8               MethodParameters
  #201 = Utf8               StackMapTable
  #202 = Utf8               Signature
  #203 = Utf8               InnerClasses
  #204 = Utf8               SourceFile
  #205 = Utf8               RuntimeVisibleAnnotations
  #206 = Utf8               ScalaInlineInfo
  #207 = Utf8               ScalaSig
{
  public static org.scalactic.Equality tolerantDoubleEquality$(org.scalactic.TolerantNumerics, double);
    descriptor: (Lorg/scalactic/TolerantNumerics;D)Lorg/scalactic/Equality;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: dload_1
         2: invokespecial #30                 // InterfaceMethod tolerantDoubleEquality:(D)Lorg/scalactic/Equality;
         5: areturn
      LineNumberTable:
        line 121: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lorg/scalactic/TolerantNumerics;
            0       6     1 tolerance   D
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final

  public default org.scalactic.Equality<java.lang.Object> tolerantDoubleEquality(double);
    descriptor: (D)Lorg/scalactic/Equality;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=3, args_size=2
         0: dload_1
         1: dconst_0
         2: dcmpg
         3: ifgt          38
         6: new           #35                 // class java/lang/IllegalArgumentException
         9: dup
        10: new           #37                 // class java/lang/StringBuilder
        13: dup
        14: ldc           #38                 // int 91
        16: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        19: dload_1
        20: invokestatic  #48                 // Method java/lang/Double.toString:(D)Ljava/lang/String;
        23: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        26: ldc           #54                 // String  passed to tolerantDoubleEquality was zero or negative. Must be a positive non-zero number.
        28: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        31: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        34: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        37: athrow
        38: new           #10                 // class org/scalactic/TolerantNumerics$$anon$1
        41: dup
        42: aconst_null
        43: dload_1
        44: invokespecial #63                 // Method org/scalactic/TolerantNumerics$$anon$1."<init>":(Lorg/scalactic/TolerantNumerics;D)V
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 38 /* same */
      LineNumberTable:
        line 122: 0
        line 123: 6
        line 124: 38
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lorg/scalactic/TolerantNumerics;
            0      48     1 tolerance   D
    Signature: #33                          // (D)Lorg/scalactic/Equality<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public static org.scalactic.Equality tolerantFloatEquality$(org.scalactic.TolerantNumerics, float);
    descriptor: (Lorg/scalactic/TolerantNumerics;F)Lorg/scalactic/Equality;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: fload_1
         2: invokespecial #70                 // InterfaceMethod tolerantFloatEquality:(F)Lorg/scalactic/Equality;
         5: areturn
      LineNumberTable:
        line 142: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lorg/scalactic/TolerantNumerics;
            0       6     1 tolerance   F
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final

  public default org.scalactic.Equality<java.lang.Object> tolerantFloatEquality(float);
    descriptor: (F)Lorg/scalactic/Equality;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: fload_1
         1: fconst_0
         2: fcmpg
         3: ifgt          38
         6: new           #35                 // class java/lang/IllegalArgumentException
         9: dup
        10: new           #37                 // class java/lang/StringBuilder
        13: dup
        14: ldc           #73                 // int 90
        16: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        19: fload_1
        20: invokestatic  #78                 // Method java/lang/Float.toString:(F)Ljava/lang/String;
        23: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        26: ldc           #80                 // String  passed to tolerantFloatEquality was zero or negative. Must be a positive non-zero number.
        28: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        31: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        34: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        37: athrow
        38: new           #12                 // class org/scalactic/TolerantNumerics$$anon$2
        41: dup
        42: aconst_null
        43: fload_1
        44: invokespecial #83                 // Method org/scalactic/TolerantNumerics$$anon$2."<init>":(Lorg/scalactic/TolerantNumerics;F)V
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 38 /* same */
      LineNumberTable:
        line 143: 0
        line 144: 6
        line 145: 38
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lorg/scalactic/TolerantNumerics;
            0      48     1 tolerance   F
    Signature: #72                          // (F)Lorg/scalactic/Equality<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public static org.scalactic.Equality tolerantLongEquality$(org.scalactic.TolerantNumerics, long);
    descriptor: (Lorg/scalactic/TolerantNumerics;J)Lorg/scalactic/Equality;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=2
         0: aload_0
         1: lload_1
         2: invokespecial #89                 // InterfaceMethod tolerantLongEquality:(J)Lorg/scalactic/Equality;
         5: areturn
      LineNumberTable:
        line 163: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lorg/scalactic/TolerantNumerics;
            0       6     1 tolerance   J
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final

  public default org.scalactic.Equality<java.lang.Object> tolerantLongEquality(long);
    descriptor: (J)Lorg/scalactic/Equality;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=3, args_size=2
         0: lload_1
         1: lconst_0
         2: lcmp
         3: ifgt          38
         6: new           #35                 // class java/lang/IllegalArgumentException
         9: dup
        10: new           #37                 // class java/lang/StringBuilder
        13: dup
        14: ldc           #92                 // int 89
        16: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        19: lload_1
        20: invokestatic  #97                 // Method java/lang/Long.toString:(J)Ljava/lang/String;
        23: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        26: ldc           #99                 // String  passed to tolerantLongEquality was zero or negative. Must be a positive non-zero number.
        28: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        31: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        34: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        37: athrow
        38: new           #14                 // class org/scalactic/TolerantNumerics$$anon$3
        41: dup
        42: aconst_null
        43: lload_1
        44: invokespecial #102                // Method org/scalactic/TolerantNumerics$$anon$3."<init>":(Lorg/scalactic/TolerantNumerics;J)V
        47: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 38 /* same */
      LineNumberTable:
        line 164: 0
        line 165: 6
        line 166: 38
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      48     0  this   Lorg/scalactic/TolerantNumerics;
            0      48     1 tolerance   J
    Signature: #91                          // (J)Lorg/scalactic/Equality<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public static org.scalactic.Equality tolerantIntEquality$(org.scalactic.TolerantNumerics, int);
    descriptor: (Lorg/scalactic/TolerantNumerics;I)Lorg/scalactic/Equality;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokespecial #108                // InterfaceMethod tolerantIntEquality:(I)Lorg/scalactic/Equality;
         5: areturn
      LineNumberTable:
        line 184: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lorg/scalactic/TolerantNumerics;
            0       6     1 tolerance   I
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final

  public default org.scalactic.Equality<java.lang.Object> tolerantIntEquality(int);
    descriptor: (I)Lorg/scalactic/Equality;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: iload_1
         1: iconst_0
         2: if_icmpgt     37
         5: new           #35                 // class java/lang/IllegalArgumentException
         8: dup
         9: new           #37                 // class java/lang/StringBuilder
        12: dup
        13: ldc           #111                // int 88
        15: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        18: iload_1
        19: invokestatic  #116                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
        22: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        25: ldc           #118                // String  passed to tolerantIntEquality was zero or negative. Must be a positive non-zero number.
        27: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        30: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        33: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        36: athrow
        37: new           #16                 // class org/scalactic/TolerantNumerics$$anon$4
        40: dup
        41: aconst_null
        42: iload_1
        43: invokespecial #121                // Method org/scalactic/TolerantNumerics$$anon$4."<init>":(Lorg/scalactic/TolerantNumerics;I)V
        46: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 37 /* same */
      LineNumberTable:
        line 185: 0
        line 186: 5
        line 187: 37
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lorg/scalactic/TolerantNumerics;
            0      47     1 tolerance   I
    Signature: #110                         // (I)Lorg/scalactic/Equality<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public static org.scalactic.Equality tolerantShortEquality$(org.scalactic.TolerantNumerics, short);
    descriptor: (Lorg/scalactic/TolerantNumerics;S)Lorg/scalactic/Equality;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokespecial #127                // InterfaceMethod tolerantShortEquality:(S)Lorg/scalactic/Equality;
         5: areturn
      LineNumberTable:
        line 205: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lorg/scalactic/TolerantNumerics;
            0       6     1 tolerance   S
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final

  public default org.scalactic.Equality<java.lang.Object> tolerantShortEquality(short);
    descriptor: (S)Lorg/scalactic/Equality;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: iload_1
         1: iconst_0
         2: if_icmpgt     37
         5: new           #35                 // class java/lang/IllegalArgumentException
         8: dup
         9: new           #37                 // class java/lang/StringBuilder
        12: dup
        13: ldc           #73                 // int 90
        15: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        18: iload_1
        19: invokestatic  #134                // Method java/lang/Short.toString:(S)Ljava/lang/String;
        22: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        25: ldc           #136                // String  passed to tolerantShortEquality was zero or negative. Must be a positive non-zero number.
        27: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        30: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        33: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        36: athrow
        37: new           #18                 // class org/scalactic/TolerantNumerics$$anon$5
        40: dup
        41: aconst_null
        42: iload_1
        43: invokespecial #139                // Method org/scalactic/TolerantNumerics$$anon$5."<init>":(Lorg/scalactic/TolerantNumerics;S)V
        46: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 37 /* same */
      LineNumberTable:
        line 206: 0
        line 207: 5
        line 208: 37
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lorg/scalactic/TolerantNumerics;
            0      47     1 tolerance   S
    Signature: #129                         // (S)Lorg/scalactic/Equality<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public static org.scalactic.Equality tolerantByteEquality$(org.scalactic.TolerantNumerics, byte);
    descriptor: (Lorg/scalactic/TolerantNumerics;B)Lorg/scalactic/Equality;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokespecial #145                // InterfaceMethod tolerantByteEquality:(B)Lorg/scalactic/Equality;
         5: areturn
      LineNumberTable:
        line 226: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0 $this   Lorg/scalactic/TolerantNumerics;
            0       6     1 tolerance   B
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final

  public default org.scalactic.Equality<java.lang.Object> tolerantByteEquality(byte);
    descriptor: (B)Lorg/scalactic/Equality;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: iload_1
         1: iconst_0
         2: if_icmpgt     37
         5: new           #35                 // class java/lang/IllegalArgumentException
         8: dup
         9: new           #37                 // class java/lang/StringBuilder
        12: dup
        13: ldc           #92                 // int 89
        15: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        18: iload_1
        19: invokestatic  #152                // Method java/lang/Byte.toString:(B)Ljava/lang/String;
        22: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        25: ldc           #154                // String  passed to tolerantByteEquality was zero or negative. Must be a positive non-zero number.
        27: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        30: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        33: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        36: athrow
        37: new           #20                 // class org/scalactic/TolerantNumerics$$anon$6
        40: dup
        41: aconst_null
        42: iload_1
        43: invokespecial #157                // Method org/scalactic/TolerantNumerics$$anon$6."<init>":(Lorg/scalactic/TolerantNumerics;B)V
        46: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 37 /* same */
      LineNumberTable:
        line 227: 0
        line 228: 5
        line 229: 37
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      47     0  this   Lorg/scalactic/TolerantNumerics;
            0      47     1 tolerance   B
    Signature: #147                         // (B)Lorg/scalactic/Equality<Ljava/lang/Object;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public static org.scalactic.Equivalence tolerantEquivalence$(org.scalactic.TolerantNumerics, java.lang.Object, scala.math.Numeric);
    descriptor: (Lorg/scalactic/TolerantNumerics;Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
    flags: (0x1009) ACC_PUBLIC, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: aload_2
         3: invokespecial #164                // InterfaceMethod tolerantEquivalence:(Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
         6: areturn
      LineNumberTable:
        line 247: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0 $this   Lorg/scalactic/TolerantNumerics;
            0       7     1 tolerance   Ljava/lang/Object;
            0       7     2 evidence$1   Lscala/math/Numeric;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
      tolerance                      final
      evidence$1                     final

  public default <N extends java.lang.Object> org.scalactic.Equivalence<N> tolerantEquivalence(N, scala.math.Numeric<N>);
    descriptor: (Ljava/lang/Object;Lscala/math/Numeric;)Lorg/scalactic/Equivalence;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=4, args_size=3
         0: getstatic     #173                // Field scala/Predef$.MODULE$:Lscala/Predef$;
         3: aload_2
         4: invokevirtual #177                // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
         7: checkcast     #179                // class scala/math/Numeric
        10: astore_3
        11: aload_3
        12: aload_1
        13: aload_3
        14: invokeinterface #183,  1          // InterfaceMethod scala/math/Numeric.zero:()Ljava/lang/Object;
        19: invokeinterface #187,  3          // InterfaceMethod scala/math/Numeric.lt:(Ljava/lang/Object;Ljava/lang/Object;)Z
        24: ifeq          59
        27: new           #35                 // class java/lang/IllegalArgumentException
        30: dup
        31: new           #37                 // class java/lang/StringBuilder
        34: dup
        35: ldc           #111                // int 88
        37: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
        40: aload_1
        41: invokevirtual #188                // Method java/lang/Object.toString:()Ljava/lang/String;
        44: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        47: ldc           #190                // String  passed to tolerantEquivalence was zero or negative. Must be a positive non-zero number.
        49: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        52: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        55: invokespecial #60                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        58: athrow
        59: new           #22                 // class org/scalactic/TolerantNumerics$$anon$7
        62: dup
        63: aconst_null
        64: aload_3
        65: aload_1
        66: invokespecial #193                // Method org/scalactic/TolerantNumerics$$anon$7."<init>":(Lorg/scalactic/TolerantNumerics;Lscala/math/Numeric;Ljava/lang/Object;)V
        69: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 59
          locals = [ class scala/math/Numeric ]
      LineNumberTable:
        line 248: 0
        line 249: 11
        line 250: 27
        line 251: 59
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           11      58     3 numeric   Lscala/math/Numeric;
            0      70     0  this   Lorg/scalactic/TolerantNumerics;
            0      70     1 tolerance   Ljava/lang/Object;
            0      70     2 evidence$1   Lscala/math/Numeric;
    Signature: #167                         // <N:Ljava/lang/Object;>(TN;Lscala/math/Numeric<TN;>;)Lorg/scalactic/Equivalence<TN;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final
      evidence$1                     final

  public static void $init$(org.scalactic.TolerantNumerics);
    descriptor: (Lorg/scalactic/TolerantNumerics;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=0, locals=1, args_size=1
         0: return
      LineNumberTable:
        line 111: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       1     0 $this   Lorg/scalactic/TolerantNumerics;
    MethodParameters:
      Name                           Flags
      $this                          final synthetic
}
InnerClasses:
  public final #10;                       // class org/scalactic/TolerantNumerics$$anon$1
  public final #12;                       // class org/scalactic/TolerantNumerics$$anon$2
  public final #14;                       // class org/scalactic/TolerantNumerics$$anon$3
  public final #16;                       // class org/scalactic/TolerantNumerics$$anon$4
  public final #18;                       // class org/scalactic/TolerantNumerics$$anon$5
  public final #20;                       // class org/scalactic/TolerantNumerics$$anon$6
  public final #22;                       // class org/scalactic/TolerantNumerics$$anon$7
SourceFile: "TolerantNumerics.scala"
RuntimeVisibleAnnotations:
  0: #6(#7=s#8)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005M4q\u0001D\u0007\u0011\u0002\u0007\u0005!\u0003C\u0003\u001a\u0001\u0011\u0005!\u0004C\u0003\u001f\u0001\u0011\u0005q\u0004C\u0003*\u0001\u0011\u0005!\u0006C\u00031\u0001\u0011\u0005\u0011\u0007C\u00038\u0001\u0011\u0005\u0001\bC\u0003?\u0001\u0011\u0005q\bC\u0003F\u0001\u0011\u0005a\tC\u0003M\u0001\u0011\u0005QjB\u0003n\u001b!\u0005aNB\u0003\r\u001b!\u0005q\u000eC\u0003r\u0015\u0011\u0005!O\u0001\tU_2,\'/\u00198u\u001dVlWM]5dg*\u0011abD\u0001\ng\u000e\fG.Y2uS\u000eT\u0011\u0001E\u0001\u0004_J<7\u0001A\n\u0003\u0001M\u0001\"\u0001F\f\u000e\u0003UQ\u0011AF\u0001\u0006g\u000e\fG.Y\u0005\u00031U\u0011a!\u00118z%\u00164\u0017A\u0002\u0013j]&$H\u0005F\u0001\u001c!\t!B$\u0003\u0002\u001e+\t!QK\\5u\u0003Y!x\u000e\\3sC:$Hi\\;cY\u0016,\u0015/^1mSRLHC\u0001\u0011(!\r\t#\u0005J\u0007\u0002\u001b%\u00111%\u0004\u0002\t\u000bF,\u0018\r\\5usB\u0011A#J\u0005\u0003MU\u0011a\u0001R8vE2,\u0007\"\u0002\u0015\u0003\u0001\u0004!\u0013!\u0003;pY\u0016\u0014\u0018M\\2f\u0003U!x\u000e\\3sC:$h\t\\8bi\u0016\u000bX/\u00197jif$\"aK\u0018\u0011\u0007\u0005\u0012C\u0006\u0005\u0002\u0015[%\u0011a&\u0006\u0002\u0006\r2|\u0017\r\u001e\u0005\u0006Q\r\u0001\r\u0001L\u0001\u0015i>dWM]1oi2{gnZ#rk\u0006d\u0017\u000e^=\u0015\u0005I2\u0004cA\u0011#gA\u0011A\u0003N\u0005\u0003kU\u0011A\u0001T8oO\")\u0001\u0006\u0002a\u0001g\u0005\u0019Bo\u001c7fe\u0006tG/\u00138u\u000bF,\u0018\r\\5usR\u0011\u0011(\u0010\t\u0004C\tR\u0004C\u0001\u000b<\u0013\taTCA\u0002J]RDQ\u0001K\u0003A\u0002i\nQ\u0003^8mKJ\fg\u000e^*i_J$X)];bY&$\u0018\u0010\u0006\u0002A\tB\u0019\u0011EI!\u0011\u0005Q\u0011\u0015BA\"\u0016\u0005\u0015\u0019\u0006n\u001c:u\u0011\u0015Ac\u00011\u0001B\u0003Q!x\u000e\\3sC:$()\u001f;f\u000bF,\u0018\r\\5usR\u0011qi\u0013\t\u0004C\tB\u0005C\u0001\u000bJ\u0013\tQUC\u0001\u0003CsR,\u0007\"\u0002\u0015\b\u0001\u0004A\u0015a\u0005;pY\u0016\u0014\u0018M\u001c;FcVLg/\u00197f]\u000e,WC\u0001(V)\tyE\u000e\u0006\u0002Q=B\u0019\u0011%U*\n\u0005Ik!aC#rk&4\u0018\r\\3oG\u0016\u0004\"\u0001V+\r\u0001\u0011)a\u000b\u0003b\u0001/\n\ta*\u0005\u0002Y7B\u0011A#W\u0005\u00035V\u0011qAT8uQ&tw\r\u0005\u0002\u00159&\u0011Q,\u0006\u0002\u0004\u0003:L\bbB0\t\u0003\u0003\u0005\u001d\u0001Y\u0001\u000bKZLG-\u001a8dK\u0012\n\u0004cA1j\':\u0011!m\u001a\b\u0003G\u001al\u0011\u0001\u001a\u0006\u0003KF\ta\u0001\u0010:p_Rt\u0014\"\u0001\f\n\u0005!,\u0012a\u00029bG.\fw-Z\u0005\u0003U.\u0014qAT;nKJL7M\u0003\u0002i+!)\u0001\u0006\u0003a\u0001\'\u0006\u0001Bk\u001c7fe\u0006tGOT;nKJL7m\u001d\t\u0003C)\u00192AC\nq!\t\t\u0003!\u0001\u0004=S:LGO\u0010\u000b\u0002]\u0002"
    )
  ScalaInlineInfo: length = 0x4F (unknown attribute)
   01 00 00 0F 00 C3 00 C4 01 00 8E 00 8F 00 00 8C
   00 8D 01 00 1B 00 1C 00 00 17 00 18 01 00 A1 00
   A2 00 00 9E 00 9F 01 00 43 00 44 00 00 41 00 42
   01 00 69 00 6A 00 00 67 00 68 01 00 56 00 57 00
   00 54 00 55 01 00 7C 00 7D 00 00 7A 00 7B 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
