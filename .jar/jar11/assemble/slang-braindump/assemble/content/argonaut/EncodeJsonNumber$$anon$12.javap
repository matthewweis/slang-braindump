Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/argonaut/EncodeJsonNumber$$anon$12.class
  Last modified May 29, 2022; size 1624 bytes
  SHA-256 checksum ea3b0ab41986f2818684ee9c5751f9d770913273b57c096cd001e51c3abc045b
  Compiled from "JsonNumber.scala"
public final class argonaut.EncodeJsonNumber$$anon$12 extends java.lang.Object implements argonaut.EncodePossibleJsonNumber<java.lang.Object>
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // argonaut/EncodeJsonNumber$$anon$12
  super_class: #5                         // java/lang/Object
  interfaces: 1, fields: 0, methods: 3, attributes: 6
Constant pool:
   #1 = Utf8               argonaut/EncodeJsonNumber$$anon$12
   #2 = Class              #1             // argonaut/EncodeJsonNumber$$anon$12
   #3 = Utf8               Ljava/lang/Object;Largonaut/EncodePossibleJsonNumber<Ljava/lang/Object;>;
   #4 = Utf8               java/lang/Object
   #5 = Class              #4             // java/lang/Object
   #6 = Utf8               argonaut/EncodePossibleJsonNumber
   #7 = Class              #6             // argonaut/EncodePossibleJsonNumber
   #8 = Utf8               JsonNumber.scala
   #9 = Utf8               argonaut/EncodeJsonNumber$
  #10 = Class              #9             // argonaut/EncodeJsonNumber$
  #11 = Utf8               possiblyEncodeJsonNumber
  #12 = Utf8               (D)Lscala/Option;
  #13 = Utf8               (D)Lscala/Option<Largonaut/JsonNumber;>;
  #14 = Utf8               value
  #15 = Utf8               scala/runtime/RichDouble$
  #16 = Class              #15            // scala/runtime/RichDouble$
  #17 = Utf8               MODULE$
  #18 = Utf8               Lscala/runtime/RichDouble$;
  #19 = NameAndType        #17:#18        // MODULE$:Lscala/runtime/RichDouble$;
  #20 = Fieldref           #16.#19        // scala/runtime/RichDouble$.MODULE$:Lscala/runtime/RichDouble$;
  #21 = Utf8               scala/Predef$
  #22 = Class              #21            // scala/Predef$
  #23 = Utf8               Lscala/Predef$;
  #24 = NameAndType        #17:#23        // MODULE$:Lscala/Predef$;
  #25 = Fieldref           #22.#24        // scala/Predef$.MODULE$:Lscala/Predef$;
  #26 = Utf8               doubleWrapper
  #27 = Utf8               (D)D
  #28 = NameAndType        #26:#27        // doubleWrapper:(D)D
  #29 = Methodref          #22.#28        // scala/Predef$.doubleWrapper:(D)D
  #30 = Utf8               isInfinity$extension
  #31 = Utf8               (D)Z
  #32 = NameAndType        #30:#31        // isInfinity$extension:(D)Z
  #33 = Methodref          #16.#32        // scala/runtime/RichDouble$.isInfinity$extension:(D)Z
  #34 = Utf8               java/lang/Double
  #35 = Class              #34            // java/lang/Double
  #36 = Utf8               isNaN
  #37 = NameAndType        #36:#31        // isNaN:(D)Z
  #38 = Methodref          #35.#37        // java/lang/Double.isNaN:(D)Z
  #39 = Utf8               scala/None$
  #40 = Class              #39            // scala/None$
  #41 = Utf8               Lscala/None$;
  #42 = NameAndType        #17:#41        // MODULE$:Lscala/None$;
  #43 = Fieldref           #40.#42        // scala/None$.MODULE$:Lscala/None$;
  #44 = Utf8               scala/Some
  #45 = Class              #44            // scala/Some
  #46 = Utf8               argonaut/JsonDecimal
  #47 = Class              #46            // argonaut/JsonDecimal
  #48 = Utf8               scala/runtime/BoxesRunTime
  #49 = Class              #48            // scala/runtime/BoxesRunTime
  #50 = Utf8               boxToDouble
  #51 = Utf8               (D)Ljava/lang/Double;
  #52 = NameAndType        #50:#51        // boxToDouble:(D)Ljava/lang/Double;
  #53 = Methodref          #49.#52        // scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
  #54 = Utf8               toString
  #55 = Utf8               ()Ljava/lang/String;
  #56 = NameAndType        #54:#55        // toString:()Ljava/lang/String;
  #57 = Methodref          #5.#56         // java/lang/Object.toString:()Ljava/lang/String;
  #58 = Utf8               <init>
  #59 = Utf8               (Ljava/lang/String;)V
  #60 = NameAndType        #58:#59        // "<init>":(Ljava/lang/String;)V
  #61 = Methodref          #47.#60        // argonaut/JsonDecimal."<init>":(Ljava/lang/String;)V
  #62 = Utf8               (Ljava/lang/Object;)V
  #63 = NameAndType        #58:#62        // "<init>":(Ljava/lang/Object;)V
  #64 = Methodref          #45.#63        // scala/Some."<init>":(Ljava/lang/Object;)V
  #65 = Utf8               this
  #66 = Utf8               Largonaut/EncodeJsonNumber$$anon$12;
  #67 = Utf8               D
  #68 = Utf8               scala/Option
  #69 = Class              #68            // scala/Option
  #70 = Utf8               (Ljava/lang/Object;)Lscala/Option;
  #71 = Utf8               unboxToDouble
  #72 = Utf8               (Ljava/lang/Object;)D
  #73 = NameAndType        #71:#72        // unboxToDouble:(Ljava/lang/Object;)D
  #74 = Methodref          #49.#73        // scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
  #75 = NameAndType        #11:#12        // possiblyEncodeJsonNumber:(D)Lscala/Option;
  #76 = Methodref          #2.#75         // argonaut/EncodeJsonNumber$$anon$12.possiblyEncodeJsonNumber:(D)Lscala/Option;
  #77 = Utf8               Ljava/lang/Object;
  #78 = Utf8               ()V
  #79 = NameAndType        #58:#78        // "<init>":()V
  #80 = Methodref          #5.#79         // java/lang/Object."<init>":()V
  #81 = Utf8               Code
  #82 = Utf8               StackMapTable
  #83 = Utf8               LineNumberTable
  #84 = Utf8               LocalVariableTable
  #85 = Utf8               Signature
  #86 = Utf8               MethodParameters
  #87 = Utf8               InnerClasses
  #88 = Utf8               EnclosingMethod
  #89 = Utf8               SourceFile
  #90 = Utf8               ScalaInlineInfo
  #91 = Utf8               Scala
{
  public scala.Option<argonaut.JsonNumber> possiblyEncodeJsonNumber(double);
    descriptor: (D)Lscala/Option;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=3, args_size=2
         0: getstatic     #20                 // Field scala/runtime/RichDouble$.MODULE$:Lscala/runtime/RichDouble$;
         3: getstatic     #25                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
         6: dload_1
         7: invokevirtual #29                 // Method scala/Predef$.doubleWrapper:(D)D
        10: invokevirtual #33                 // Method scala/runtime/RichDouble$.isInfinity$extension:(D)Z
        13: ifne          23
        16: dload_1
        17: invokestatic  #38                 // Method java/lang/Double.isNaN:(D)Z
        20: ifeq          29
        23: getstatic     #43                 // Field scala/None$.MODULE$:Lscala/None$;
        26: goto          50
        29: new           #45                 // class scala/Some
        32: dup
        33: new           #47                 // class argonaut/JsonDecimal
        36: dup
        37: dload_1
        38: invokestatic  #53                 // Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
        41: invokevirtual #57                 // Method java/lang/Object.toString:()Ljava/lang/String;
        44: invokespecial #61                 // Method argonaut/JsonDecimal."<init>":(Ljava/lang/String;)V
        47: invokespecial #64                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
        50: areturn
      StackMapTable: number_of_entries = 3
        frame_type = 23 /* same */
        frame_type = 5 /* same */
        frame_type = 84 /* same_locals_1_stack_item */
          stack = [ class scala/Option ]
      LineNumberTable:
        line 430: 0
        line 431: 23
        line 433: 29
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      51     0  this   Largonaut/EncodeJsonNumber$$anon$12;
            0      51     1 value   D
    Signature: #13                          // (D)Lscala/Option<Largonaut/JsonNumber;>;
    MethodParameters:
      Name                           Flags
      value                          final

  public scala.Option possiblyEncodeJsonNumber(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Lscala/Option;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=3, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #74                 // Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
         5: invokevirtual #76                 // Method possiblyEncodeJsonNumber:(D)Lscala/Option;
         8: areturn
      LineNumberTable:
        line 428: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Largonaut/EncodeJsonNumber$$anon$12;
            0       9     1 value   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      value                          final

  public argonaut.EncodeJsonNumber$$anon$12();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #80                 // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 428: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Largonaut/EncodeJsonNumber$$anon$12;
}
InnerClasses:
  public final #2;                        // class argonaut/EncodeJsonNumber$$anon$12
EnclosingMethod: #10.#0                 // argonaut.EncodeJsonNumber$
Signature: #3                           // Ljava/lang/Object;Largonaut/EncodePossibleJsonNumber<Ljava/lang/Object;>;
SourceFile: "JsonNumber.scala"
  ScalaInlineInfo: length = 0x13 (unknown attribute)
   01 01 00 03 00 3A 00 4E 01 00 0B 00 0C 01 00 0B
   00 46 01
  Scala: length = 0x0 (unknown attribute)

