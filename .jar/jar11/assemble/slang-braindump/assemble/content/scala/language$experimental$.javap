Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/scala/language$experimental$.class
  Last modified May 29, 2022; size 1174 bytes
  SHA-256 checksum 48450418efff022322af4368186a5e7b33055d2166a29b910dff71cc0187daf3
  Compiled from "language.scala"
public class scala.language$experimental$
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // scala/language$experimental$
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 3, methods: 4, attributes: 4
Constant pool:
   #1 = Utf8               scala/language$experimental$
   #2 = Class              #1             // scala/language$experimental$
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               language.scala
   #6 = Utf8               scala/language
   #7 = Class              #6             // scala/language
   #8 = Utf8               experimental$
   #9 = Utf8               scala/languageFeature$experimental$
  #10 = Class              #9             // scala/languageFeature$experimental$
  #11 = Utf8               scala/languageFeature
  #12 = Class              #11            // scala/languageFeature
  #13 = Utf8               scala/languageFeature$experimental$macros
  #14 = Class              #13            // scala/languageFeature$experimental$macros
  #15 = Utf8               macros
  #16 = Utf8               scala/languageFeature$experimental$macros$
  #17 = Class              #16            // scala/languageFeature$experimental$macros$
  #18 = Utf8               macros$
  #19 = Utf8               MODULE$
  #20 = Utf8               Lscala/language$experimental$;
  #21 = Utf8               Lscala/languageFeature$experimental$macros;
  #22 = Utf8               bitmap$0
  #23 = Utf8               Z
  #24 = Utf8               <clinit>
  #25 = Utf8               ()V
  #26 = Utf8               <init>
  #27 = NameAndType        #26:#25        // "<init>":()V
  #28 = Methodref          #2.#27         // scala/language$experimental$."<init>":()V
  #29 = NameAndType        #19:#20        // MODULE$:Lscala/language$experimental$;
  #30 = Fieldref           #2.#29         // scala/language$experimental$.MODULE$:Lscala/language$experimental$;
  #31 = Utf8               macros$lzycompute
  #32 = Utf8               ()Lscala/languageFeature$experimental$macros;
  #33 = NameAndType        #22:#23        // bitmap$0:Z
  #34 = Fieldref           #2.#33         // scala/language$experimental$.bitmap$0:Z
  #35 = Utf8               Lscala/languageFeature$experimental$macros$;
  #36 = NameAndType        #19:#35        // MODULE$:Lscala/languageFeature$experimental$macros$;
  #37 = Fieldref           #17.#36        // scala/languageFeature$experimental$macros$.MODULE$:Lscala/languageFeature$experimental$macros$;
  #38 = NameAndType        #15:#21        // macros:Lscala/languageFeature$experimental$macros;
  #39 = Fieldref           #2.#38         // scala/language$experimental$.macros:Lscala/languageFeature$experimental$macros;
  #40 = Utf8               this
  #41 = Utf8               java/lang/Throwable
  #42 = Class              #41            // java/lang/Throwable
  #43 = NameAndType        #31:#32        // macros$lzycompute:()Lscala/languageFeature$experimental$macros;
  #44 = Methodref          #2.#43         // scala/language$experimental$.macros$lzycompute:()Lscala/languageFeature$experimental$macros;
  #45 = Methodref          #4.#27         // java/lang/Object."<init>":()V
  #46 = Utf8               Code
  #47 = Utf8               LineNumberTable
  #48 = Utf8               StackMapTable
  #49 = Utf8               LocalVariableTable
  #50 = Utf8               InnerClasses
  #51 = Utf8               SourceFile
  #52 = Utf8               ScalaInlineInfo
  #53 = Utf8               Scala
{
  public static final scala.language$experimental$ MODULE$;
    descriptor: Lscala/language$experimental$;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  private static scala.languageFeature$experimental$macros macros;
    descriptor: Lscala/languageFeature$experimental$macros;
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC

  private static volatile boolean bitmap$0;
    descriptor: Z
    flags: (0x004a) ACC_PRIVATE, ACC_STATIC, ACC_VOLATILE

  public static {};
    descriptor: ()V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #2                  // class scala/language$experimental$
         3: dup
         4: invokespecial #28                 // Method "<init>":()V
         7: putstatic     #30                 // Field MODULE$:Lscala/language$experimental$;
        10: return
      LineNumberTable:
        line 187: 0

  private scala.languageFeature$experimental$macros macros$lzycompute();
    descriptor: ()Lscala/languageFeature$experimental$macros;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: monitorenter
         2: getstatic     #34                 // Field bitmap$0:Z
         5: ifne          18
         8: getstatic     #37                 // Field scala/languageFeature$experimental$macros$.MODULE$:Lscala/languageFeature$experimental$macros$;
        11: putstatic     #39                 // Field macros:Lscala/languageFeature$experimental$macros;
        14: iconst_1
        15: putstatic     #34                 // Field bitmap$0:Z
        18: aload_0
        19: monitorexit
        20: goto          26
        23: aload_0
        24: monitorexit
        25: athrow
        26: getstatic     #39                 // Field macros:Lscala/languageFeature$experimental$macros;
        29: areturn
      Exception table:
         from    to  target type
             2    18    23   any
      StackMapTable: number_of_entries = 3
        frame_type = 18 /* same */
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 2 /* same */
      LineNumberTable:
        line 205: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      30     0  this   Lscala/language$experimental$;

  public scala.languageFeature$experimental$macros macros();
    descriptor: ()Lscala/languageFeature$experimental$macros;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: getstatic     #34                 // Field bitmap$0:Z
         3: ifne          11
         6: aload_0
         7: invokespecial #44                 // Method macros$lzycompute:()Lscala/languageFeature$experimental$macros;
        10: areturn
        11: getstatic     #39                 // Field macros:Lscala/languageFeature$experimental$macros;
        14: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 11 /* same */
      LineNumberTable:
        line 205: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lscala/language$experimental$;

  public scala.language$experimental$();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #45                 // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 187: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lscala/language$experimental$;
}
InnerClasses:
  public static #8= #2 of #7;             // experimental$=class scala/language$experimental$ of class scala/language
  public static #8= #10 of #12;           // experimental$=class scala/languageFeature$experimental$ of class scala/languageFeature
  public static #15= #14 of #10;          // macros=class scala/languageFeature$experimental$macros of class scala/languageFeature$experimental$
  public static #18= #17 of #10;          // macros$=class scala/languageFeature$experimental$macros$ of class scala/languageFeature$experimental$
SourceFile: "language.scala"
  ScalaInlineInfo: length = 0x13 (unknown attribute)
   01 01 00 03 00 1A 00 19 01 00 0F 00 20 01 00 1F
   00 20 01
  Scala: length = 0x0 (unknown attribute)

