Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/coursier/cache/internal/ThreadUtil$$anon$1.class
  Last modified May 29, 2022; size 1568 bytes
  SHA-256 checksum 38f8b7f964d907ee3c097ac40d28297d6ecd4f026974a9672c27e66795f8e4c0
  Compiled from "ThreadUtil.scala"
public final class coursier.cache.internal.ThreadUtil$$anon$1 implements java.util.concurrent.ThreadFactory
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // coursier/cache/internal/ThreadUtil$$anon$1
  super_class: #4                         // java/lang/Object
  interfaces: 1, fields: 2, methods: 2, attributes: 5
Constant pool:
   #1 = Utf8               coursier/cache/internal/ThreadUtil$$anon$1
   #2 = Class              #1             // coursier/cache/internal/ThreadUtil$$anon$1
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               java/util/concurrent/ThreadFactory
   #6 = Class              #5             // java/util/concurrent/ThreadFactory
   #7 = Utf8               ThreadUtil.scala
   #8 = Utf8               coursier/cache/internal/ThreadUtil$
   #9 = Class              #8             // coursier/cache/internal/ThreadUtil$
  #10 = Utf8               daemonThreadFactory
  #11 = Utf8               ()Ljava/util/concurrent/ThreadFactory;
  #12 = NameAndType        #10:#11        // daemonThreadFactory:()Ljava/util/concurrent/ThreadFactory;
  #13 = Utf8               threadNumber$1
  #14 = Utf8               Ljava/util/concurrent/atomic/AtomicInteger;
  #15 = Utf8               poolNumber0$1
  #16 = Utf8               I
  #17 = Utf8               newThread
  #18 = Utf8               (Ljava/lang/Runnable;)Ljava/lang/Thread;
  #19 = Utf8               r
  #20 = NameAndType        #13:#14        // threadNumber$1:Ljava/util/concurrent/atomic/AtomicInteger;
  #21 = Fieldref           #2.#20         // coursier/cache/internal/ThreadUtil$$anon$1.threadNumber$1:Ljava/util/concurrent/atomic/AtomicInteger;
  #22 = Utf8               java/util/concurrent/atomic/AtomicInteger
  #23 = Class              #22            // java/util/concurrent/atomic/AtomicInteger
  #24 = Utf8               getAndIncrement
  #25 = Utf8               ()I
  #26 = NameAndType        #24:#25        // getAndIncrement:()I
  #27 = Methodref          #23.#26        // java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
  #28 = Utf8               java/lang/Thread
  #29 = Class              #28            // java/lang/Thread
  #30 = Utf8               java/lang/StringBuilder
  #31 = Class              #30            // java/lang/StringBuilder
  #32 = Integer            22
  #33 = Utf8               <init>
  #34 = Utf8               (I)V
  #35 = NameAndType        #33:#34        // "<init>":(I)V
  #36 = Methodref          #31.#35        // java/lang/StringBuilder."<init>":(I)V
  #37 = Utf8               coursier-pool-
  #38 = String             #37            // coursier-pool-
  #39 = Utf8               append
  #40 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #41 = NameAndType        #39:#40        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #42 = Methodref          #31.#41        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #43 = NameAndType        #15:#16        // poolNumber0$1:I
  #44 = Fieldref           #2.#43         // coursier/cache/internal/ThreadUtil$$anon$1.poolNumber0$1:I
  #45 = Utf8               (I)Ljava/lang/StringBuilder;
  #46 = NameAndType        #39:#45        // append:(I)Ljava/lang/StringBuilder;
  #47 = Methodref          #31.#46        // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
  #48 = Utf8               -thread-
  #49 = String             #48            // -thread-
  #50 = Utf8               toString
  #51 = Utf8               ()Ljava/lang/String;
  #52 = NameAndType        #50:#51        // toString:()Ljava/lang/String;
  #53 = Methodref          #31.#52        // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #54 = Utf8               (Ljava/lang/Runnable;Ljava/lang/String;)V
  #55 = NameAndType        #33:#54        // "<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
  #56 = Methodref          #29.#55        // java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
  #57 = Utf8               setDaemon
  #58 = Utf8               (Z)V
  #59 = NameAndType        #57:#58        // setDaemon:(Z)V
  #60 = Methodref          #29.#59        // java/lang/Thread.setDaemon:(Z)V
  #61 = Utf8               setPriority
  #62 = NameAndType        #61:#34        // setPriority:(I)V
  #63 = Methodref          #29.#62        // java/lang/Thread.setPriority:(I)V
  #64 = Utf8               threadNumber0
  #65 = Utf8               t
  #66 = Utf8               Ljava/lang/Thread;
  #67 = Utf8               this
  #68 = Utf8               Lcoursier/cache/internal/ThreadUtil$$anon$1;
  #69 = Utf8               Ljava/lang/Runnable;
  #70 = Utf8               (Ljava/util/concurrent/atomic/AtomicInteger;I)V
  #71 = Utf8               ()V
  #72 = NameAndType        #33:#71        // "<init>":()V
  #73 = Methodref          #4.#72         // java/lang/Object."<init>":()V
  #74 = Utf8               Code
  #75 = Utf8               LineNumberTable
  #76 = Utf8               LocalVariableTable
  #77 = Utf8               MethodParameters
  #78 = Utf8               InnerClasses
  #79 = Utf8               EnclosingMethod
  #80 = Utf8               SourceFile
  #81 = Utf8               ScalaInlineInfo
  #82 = Utf8               Scala
{
  private final java.util.concurrent.atomic.AtomicInteger threadNumber$1;
    descriptor: Ljava/util/concurrent/atomic/AtomicInteger;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final int poolNumber0$1;
    descriptor: I
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public java.lang.Thread newThread(java.lang.Runnable);
    descriptor: (Ljava/lang/Runnable;)Ljava/lang/Thread;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=4, args_size=2
         0: aload_0
         1: getfield      #21                 // Field threadNumber$1:Ljava/util/concurrent/atomic/AtomicInteger;
         4: invokevirtual #27                 // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
         7: istore_2
         8: new           #29                 // class java/lang/Thread
        11: dup
        12: aload_1
        13: new           #31                 // class java/lang/StringBuilder
        16: dup
        17: ldc           #32                 // int 22
        19: invokespecial #36                 // Method java/lang/StringBuilder."<init>":(I)V
        22: ldc           #38                 // String coursier-pool-
        24: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        27: aload_0
        28: getfield      #44                 // Field poolNumber0$1:I
        31: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        34: ldc           #49                 // String -thread-
        36: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        39: iload_2
        40: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        43: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        46: invokespecial #56                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
        49: astore_3
        50: aload_3
        51: iconst_1
        52: invokevirtual #60                 // Method java/lang/Thread.setDaemon:(Z)V
        55: aload_3
        56: iconst_5
        57: invokevirtual #63                 // Method java/lang/Thread.setPriority:(I)V
        60: aload_3
        61: areturn
      LineNumberTable:
        line 18: 0
        line 19: 8
        line 20: 50
        line 21: 55
        line 22: 60
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            8      53     2 threadNumber0   I
           50      11     3     t   Ljava/lang/Thread;
            0      62     0  this   Lcoursier/cache/internal/ThreadUtil$$anon$1;
            0      62     1     r   Ljava/lang/Runnable;
    MethodParameters:
      Name                           Flags
      r                              final

  public coursier.cache.internal.ThreadUtil$$anon$1(java.util.concurrent.atomic.AtomicInteger, int);
    descriptor: (Ljava/util/concurrent/atomic/AtomicInteger;I)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: putfield      #21                 // Field threadNumber$1:Ljava/util/concurrent/atomic/AtomicInteger;
         5: aload_0
         6: iload_2
         7: putfield      #44                 // Field poolNumber0$1:I
        10: aload_0
        11: invokespecial #73                 // Method java/lang/Object."<init>":()V
        14: return
      LineNumberTable:
        line 14: 0
        line 12: 5
        line 16: 10
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lcoursier/cache/internal/ThreadUtil$$anon$1;
            0      15     1 threadNumber$1   Ljava/util/concurrent/atomic/AtomicInteger;
            0      15     2 poolNumber0$1   I
    MethodParameters:
      Name                           Flags
      threadNumber$1                 final
      poolNumber0$1                  final
}
InnerClasses:
  public final #2;                        // class coursier/cache/internal/ThreadUtil$$anon$1
EnclosingMethod: #9.#12                 // coursier.cache.internal.ThreadUtil$.daemonThreadFactory
SourceFile: "ThreadUtil.scala"
  ScalaInlineInfo: length = 0xE (unknown attribute)
   01 01 00 02 00 21 00 46 01 00 11 00 12 01
  Scala: length = 0x0 (unknown attribute)

