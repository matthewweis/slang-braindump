Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/apache/commons/io/input/SequenceReader.class
  Last modified May 29, 2022; size 2423 bytes
  SHA-256 checksum 1fe50df9f546546524e20d4092a2e2132b644784b8a8d3ff3cf256bad14c3c43
  Compiled from "SequenceReader.java"
public class org.apache.commons.io.input.SequenceReader extends java.io.Reader
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #28                         // org/apache/commons/io/input/SequenceReader
  super_class: #14                        // java/io/Reader
  interfaces: 0, fields: 2, methods: 6, attributes: 1
Constant pool:
    #1 = Class              #69           // org/apache/commons/io/IOUtils
    #2 = Methodref          #14.#70       // java/io/Reader."<init>":()V
    #3 = String             #31           // readers
    #4 = Methodref          #71.#72       // java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
    #5 = Class              #73           // java/lang/Iterable
    #6 = InterfaceMethodref #5.#74        // java/lang/Iterable.iterator:()Ljava/util/Iterator;
    #7 = Fieldref           #28.#75       // org/apache/commons/io/input/SequenceReader.readers:Ljava/util/Iterator;
    #8 = Methodref          #28.#76       // org/apache/commons/io/input/SequenceReader.nextReader:()Ljava/io/Reader;
    #9 = Fieldref           #28.#77       // org/apache/commons/io/input/SequenceReader.reader:Ljava/io/Reader;
   #10 = Methodref          #78.#79       // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
   #11 = Methodref          #28.#80       // org/apache/commons/io/input/SequenceReader."<init>":(Ljava/lang/Iterable;)V
   #12 = InterfaceMethodref #81.#82       // java/util/Iterator.hasNext:()Z
   #13 = InterfaceMethodref #81.#83       // java/util/Iterator.next:()Ljava/lang/Object;
   #14 = Class              #84           // java/io/Reader
   #15 = Methodref          #14.#85       // java/io/Reader.read:()I
   #16 = String             #62           // cbuf
   #17 = Class              #86           // java/lang/IndexOutOfBoundsException
   #18 = Class              #87           // java/lang/StringBuilder
   #19 = Methodref          #18.#70       // java/lang/StringBuilder."<init>":()V
   #20 = String             #88           // Array Size=
   #21 = Methodref          #18.#89       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #22 = Methodref          #18.#90       // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   #23 = String             #91           // , offset=
   #24 = String             #92           // , length=
   #25 = Methodref          #18.#93       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #26 = Methodref          #17.#94       // java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
   #27 = Methodref          #14.#95       // java/io/Reader.read:([CII)I
   #28 = Class              #96           // org/apache/commons/io/input/SequenceReader
   #29 = Utf8               reader
   #30 = Utf8               Ljava/io/Reader;
   #31 = Utf8               readers
   #32 = Utf8               Ljava/util/Iterator;
   #33 = Utf8               Signature
   #34 = Utf8               Ljava/util/Iterator<+Ljava/io/Reader;>;
   #35 = Utf8               <init>
   #36 = Utf8               (Ljava/lang/Iterable;)V
   #37 = Utf8               Code
   #38 = Utf8               LineNumberTable
   #39 = Utf8               LocalVariableTable
   #40 = Utf8               this
   #41 = Utf8               Lorg/apache/commons/io/input/SequenceReader;
   #42 = Utf8               Ljava/lang/Iterable;
   #43 = Utf8               LocalVariableTypeTable
   #44 = Utf8               Ljava/lang/Iterable<+Ljava/io/Reader;>;
   #45 = Utf8               (Ljava/lang/Iterable<+Ljava/io/Reader;>;)V
   #46 = Utf8               ([Ljava/io/Reader;)V
   #47 = Utf8               [Ljava/io/Reader;
   #48 = Utf8               close
   #49 = Utf8               ()V
   #50 = Utf8               Exceptions
   #51 = Class              #97           // java/io/IOException
   #52 = Utf8               nextReader
   #53 = Utf8               ()Ljava/io/Reader;
   #54 = Utf8               StackMapTable
   #55 = Class              #84           // java/io/Reader
   #56 = Utf8               read
   #57 = Utf8               ()I
   #58 = Utf8               c
   #59 = Utf8               I
   #60 = Utf8               ([CII)I
   #61 = Utf8               readLen
   #62 = Utf8               cbuf
   #63 = Utf8               [C
   #64 = Utf8               off
   #65 = Utf8               len
   #66 = Utf8               count
   #67 = Utf8               SourceFile
   #68 = Utf8               SequenceReader.java
   #69 = Utf8               org/apache/commons/io/IOUtils
   #70 = NameAndType        #35:#49       // "<init>":()V
   #71 = Class              #98           // java/util/Objects
   #72 = NameAndType        #99:#100      // requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
   #73 = Utf8               java/lang/Iterable
   #74 = NameAndType        #101:#102     // iterator:()Ljava/util/Iterator;
   #75 = NameAndType        #31:#32       // readers:Ljava/util/Iterator;
   #76 = NameAndType        #52:#53       // nextReader:()Ljava/io/Reader;
   #77 = NameAndType        #29:#30       // reader:Ljava/io/Reader;
   #78 = Class              #103          // java/util/Arrays
   #79 = NameAndType        #104:#105     // asList:([Ljava/lang/Object;)Ljava/util/List;
   #80 = NameAndType        #35:#36       // "<init>":(Ljava/lang/Iterable;)V
   #81 = Class              #106          // java/util/Iterator
   #82 = NameAndType        #107:#108     // hasNext:()Z
   #83 = NameAndType        #109:#110     // next:()Ljava/lang/Object;
   #84 = Utf8               java/io/Reader
   #85 = NameAndType        #56:#57       // read:()I
   #86 = Utf8               java/lang/IndexOutOfBoundsException
   #87 = Utf8               java/lang/StringBuilder
   #88 = Utf8               Array Size=
   #89 = NameAndType        #111:#112     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #90 = NameAndType        #111:#113     // append:(I)Ljava/lang/StringBuilder;
   #91 = Utf8               , offset=
   #92 = Utf8               , length=
   #93 = NameAndType        #114:#115     // toString:()Ljava/lang/String;
   #94 = NameAndType        #35:#116      // "<init>":(Ljava/lang/String;)V
   #95 = NameAndType        #56:#60       // read:([CII)I
   #96 = Utf8               org/apache/commons/io/input/SequenceReader
   #97 = Utf8               java/io/IOException
   #98 = Utf8               java/util/Objects
   #99 = Utf8               requireNonNull
  #100 = Utf8               (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
  #101 = Utf8               iterator
  #102 = Utf8               ()Ljava/util/Iterator;
  #103 = Utf8               java/util/Arrays
  #104 = Utf8               asList
  #105 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;
  #106 = Utf8               java/util/Iterator
  #107 = Utf8               hasNext
  #108 = Utf8               ()Z
  #109 = Utf8               next
  #110 = Utf8               ()Ljava/lang/Object;
  #111 = Utf8               append
  #112 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #113 = Utf8               (I)Ljava/lang/StringBuilder;
  #114 = Utf8               toString
  #115 = Utf8               ()Ljava/lang/String;
  #116 = Utf8               (Ljava/lang/String;)V
{
  private java.io.Reader reader;
    descriptor: Ljava/io/Reader;
    flags: (0x0002) ACC_PRIVATE

  private java.util.Iterator<? extends java.io.Reader> readers;
    descriptor: Ljava/util/Iterator;
    flags: (0x0002) ACC_PRIVATE
    Signature: #34                          // Ljava/util/Iterator<+Ljava/io/Reader;>;

  public org.apache.commons.io.input.SequenceReader(java.lang.Iterable<? extends java.io.Reader>);
    descriptor: (Ljava/lang/Iterable;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: aload_0
         1: invokespecial #2                  // Method java/io/Reader."<init>":()V
         4: aload_0
         5: aload_1
         6: ldc           #3                  // String readers
         8: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
        11: checkcast     #5                  // class java/lang/Iterable
        14: invokeinterface #6,  1            // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
        19: putfield      #7                  // Field readers:Ljava/util/Iterator;
        22: aload_0
        23: aload_0
        24: invokespecial #8                  // Method nextReader:()Ljava/io/Reader;
        27: putfield      #9                  // Field reader:Ljava/io/Reader;
        30: return
      LineNumberTable:
        line 42: 0
        line 43: 4
        line 44: 22
        line 45: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      31     0  this   Lorg/apache/commons/io/input/SequenceReader;
            0      31     1 readers   Ljava/lang/Iterable;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      31     1 readers   Ljava/lang/Iterable<+Ljava/io/Reader;>;
    Signature: #45                          // (Ljava/lang/Iterable<+Ljava/io/Reader;>;)V

  public org.apache.commons.io.input.SequenceReader(java.io.Reader...);
    descriptor: ([Ljava/io/Reader;)V
    flags: (0x0081) ACC_PUBLIC, ACC_VARARGS
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #10                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
         5: invokespecial #11                 // Method "<init>":(Ljava/lang/Iterable;)V
         8: return
      LineNumberTable:
        line 53: 0
        line 54: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lorg/apache/commons/io/input/SequenceReader;
            0       9     1 readers   [Ljava/io/Reader;

  public void close() throws java.io.IOException;
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: aconst_null
         2: putfield      #7                  // Field readers:Ljava/util/Iterator;
         5: aload_0
         6: aconst_null
         7: putfield      #9                  // Field reader:Ljava/io/Reader;
        10: return
      LineNumberTable:
        line 63: 0
        line 64: 5
        line 65: 10
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      11     0  this   Lorg/apache/commons/io/input/SequenceReader;
    Exceptions:
      throws java.io.IOException

  private java.io.Reader nextReader();
    descriptor: ()Ljava/io/Reader;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #7                  // Field readers:Ljava/util/Iterator;
         4: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
         9: ifeq          27
        12: aload_0
        13: getfield      #7                  // Field readers:Ljava/util/Iterator;
        16: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
        21: checkcast     #14                 // class java/io/Reader
        24: goto          28
        27: aconst_null
        28: areturn
      LineNumberTable:
        line 73: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      29     0  this   Lorg/apache/commons/io/input/SequenceReader;
      StackMapTable: number_of_entries = 2
        frame_type = 27 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ class java/io/Reader ]

  public int read() throws java.io.IOException;
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=1
         0: iconst_m1
         1: istore_1
         2: aload_0
         3: getfield      #9                  // Field reader:Ljava/io/Reader;
         6: ifnull        33
         9: aload_0
        10: getfield      #9                  // Field reader:Ljava/io/Reader;
        13: invokevirtual #15                 // Method java/io/Reader.read:()I
        16: istore_1
        17: iload_1
        18: iconst_m1
        19: if_icmpne     33
        22: aload_0
        23: aload_0
        24: invokespecial #8                  // Method nextReader:()Ljava/io/Reader;
        27: putfield      #9                  // Field reader:Ljava/io/Reader;
        30: goto          2
        33: iload_1
        34: ireturn
      LineNumberTable:
        line 83: 0
        line 84: 2
        line 85: 9
        line 86: 17
        line 87: 22
        line 92: 33
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      35     0  this   Lorg/apache/commons/io/input/SequenceReader;
            2      33     1     c   I
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 30 /* same */
    Exceptions:
      throws java.io.IOException

  public int read(char[], int, int) throws java.io.IOException;
    descriptor: ([CII)I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=6, args_size=4
         0: aload_1
         1: ldc           #16                 // String cbuf
         3: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
         6: pop
         7: iload_3
         8: iflt          23
        11: iload_2
        12: iflt          23
        15: iload_2
        16: iload_3
        17: iadd
        18: aload_1
        19: arraylength
        20: if_icmple     69
        23: new           #17                 // class java/lang/IndexOutOfBoundsException
        26: dup
        27: new           #18                 // class java/lang/StringBuilder
        30: dup
        31: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
        34: ldc           #20                 // String Array Size=
        36: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        39: aload_1
        40: arraylength
        41: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        44: ldc           #23                 // String , offset=
        46: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        49: iload_2
        50: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        53: ldc           #24                 // String , length=
        55: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        58: iload_3
        59: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
        62: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        65: invokespecial #26                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
        68: athrow
        69: iconst_0
        70: istore        4
        72: aload_0
        73: getfield      #9                  // Field reader:Ljava/io/Reader;
        76: ifnull        135
        79: aload_0
        80: getfield      #9                  // Field reader:Ljava/io/Reader;
        83: aload_1
        84: iload_2
        85: iload_3
        86: invokevirtual #27                 // Method java/io/Reader.read:([CII)I
        89: istore        5
        91: iload         5
        93: iconst_m1
        94: if_icmpne     108
        97: aload_0
        98: aload_0
        99: invokespecial #8                  // Method nextReader:()Ljava/io/Reader;
       102: putfield      #9                  // Field reader:Ljava/io/Reader;
       105: goto          132
       108: iload         4
       110: iload         5
       112: iadd
       113: istore        4
       115: iload_2
       116: iload         5
       118: iadd
       119: istore_2
       120: iload_3
       121: iload         5
       123: isub
       124: istore_3
       125: iload_3
       126: ifgt          132
       129: goto          135
       132: goto          72
       135: iload         4
       137: ifle          143
       140: iload         4
       142: ireturn
       143: iconst_m1
       144: ireturn
      LineNumberTable:
        line 102: 0
        line 103: 7
        line 104: 23
        line 106: 69
        line 107: 72
        line 108: 79
        line 109: 91
        line 110: 97
        line 112: 108
        line 113: 115
        line 114: 120
        line 115: 125
        line 116: 129
        line 119: 132
        line 120: 135
        line 121: 140
        line 123: 143
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           91      41     5 readLen   I
            0     145     0  this   Lorg/apache/commons/io/input/SequenceReader;
            0     145     1  cbuf   [C
            0     145     2   off   I
            0     145     3   len   I
           72      73     4 count   I
      StackMapTable: number_of_entries = 7
        frame_type = 23 /* same */
        frame_type = 45 /* same */
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 252 /* append */
          offset_delta = 35
          locals = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 23
        frame_type = 2 /* same */
        frame_type = 7 /* same */
    Exceptions:
      throws java.io.IOException
}
SourceFile: "SequenceReader.java"
