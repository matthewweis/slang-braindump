Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/coursier/params/rule/Rule.class
  Last modified May 29, 2022; size 6020 bytes
  SHA-256 checksum 00304929e2fe17946536b57c092bcc94ae6cbecd8feb8eb983187fc1f1a2f9f8
  Compiled from "Rule.scala"
public abstract class coursier.params.rule.Rule implements scala.Product,java.io.Serializable
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #2                          // coursier/params/rule/Rule
  super_class: #4                         // java/lang/Object
  interfaces: 2, fields: 0, methods: 11, attributes: 6
Constant pool:
    #1 = Utf8               coursier/params/rule/Rule
    #2 = Class              #1            // coursier/params/rule/Rule
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               scala/Product
    #6 = Class              #5            // scala/Product
    #7 = Utf8               java/io/Serializable
    #8 = Class              #7            // java/io/Serializable
    #9 = Utf8               Rule.scala
   #10 = Utf8               Lscala/reflect/ScalaSignature;
   #11 = Utf8               bytes
   #12 = Utf8               \u0006\u000514Qa\u0002\u0005\u0002\u0002=AQ!\n\u0001\u0005\u0002\u0019\"Q!\u000b\u0001\u0003\u0002)BQA\u000e\u0001\u0007\u0002]BQ!\u0012\u0001\u0007\u0002\u0019CQa\u0016\u0001\u0005\u0002aCQA\u0019\u0001\u0005\u0002\r\u0014AAU;mK*\u0011\u0011BC\u0001\u0005eVdWM\u0003\u0002\f\u0019\u00051\u0001/\u0019:b[NT\u0011!D\u0001\tG>,(o]5fe\u000e\u00011\u0003\u0002\u0001\u0011-e\u0001\"!\u0005\u000b\u000e\u0003IQ\u0011aE\u0001\u0006g\u000e\fG.Y\u0005\u0003+I\u0011a!\u00118z%\u00164\u0007CA\t\u0018\u0013\tA\"CA\u0004Qe>$Wo\u0019;\u0011\u0005i\u0011cBA\u000e!\u001d\tar$D\u0001\u001e\u0015\tqb\"\u0001\u0004=e>|GOP\u0005\u0002\'%\u0011\u0011EE\u0001\ba\u0006\u001c7.Y4f\u0013\t\u0019CE\u0001\u0007TKJL\u0017\r\\5{C\ndWM\u0003\u0002\"%\u00051A(\u001b8jiz\"\u0012a\n\t\u0003Q\u0001i\u0011\u0001\u0003\u0002\u0002\u0007F\u00111F\f\t\u0003#1J!!\f\n\u0003\u000f9{G\u000f[5oOB\u0011q\u0006N\u0007\u0002a)\u0011\u0011GM\u0001\tG>tg\r\\5di*\u00111\u0007D\u0001\u0006KJ\u0014xN]\u0005\u0003kA\u0012q\"\u00168tCRL7OZ5fIJ+H.Z\u0001\u0006G\",7m\u001b\u000b\u0003qu\u00022!E\u001d<\u0013\tQ$C\u0001\u0004PaRLwN\u001c\t\u0003y\ti\u0011\u0001\u0001\u0005\u0006}\r\u0001\raP\u0001\u0004e\u0016\u001c\bC\u0001!D\u001b\u0005\t%B\u0001\"\r\u0003\u0011\u0019wN]3\n\u0005\u0011\u000b%A\u0003*fg>dW\u000f^5p]\u0006QAO]=SKN|GN^3\u0015\u0007\u001d+f\u000b\u0005\u0003\u001b\u0011*{\u0014BA%%\u0005\u0019)\u0015\u000e\u001e5feB\u00111J\u0015\b\u0003\u0019Bs!!T(\u000f\u0005qq\u0015\"A\u0007\n\u0005Mb\u0011BA)3\u0003=\u0011Vm]8mkRLwN\\#se>\u0014\u0018BA*U\u0005E)fn]1uSN4\u0017.\u00192mKJ+H.\u001a\u0006\u0003#JBQA\u0010\u0003A\u0002}BQ!\r\u0003A\u0002m\nq!\u001a8g_J\u001cW\rF\u0002Z9v\u0003BA\u0007%K5B!!\u0004\u0013\u0018\\!\r\t\u0012h\u0010\u0005\u0006}\u0015\u0001\ra\u0010\u0005\u0006=\u0016\u0001\raX\u0001\beVdWMU3t!\tA\u0003-\u0003\u0002b\u0011\tq!+\u001e7f%\u0016\u001cx\u000e\\;uS>t\u0017\u0001\u0002:faJ,\u0012\u0001\u001a\t\u0003K&t!AZ4\u0011\u0005q\u0011\u0012B\u00015\u0013\u0003\u0019\u0001&/\u001a3fM&\u0011!n\u001b\u0002\u0007\'R\u0014\u0018N\\4\u000b\u0005!\u0014\u0002
   #13 = Utf8               coursier/error/ResolutionError$UnsatisfiableRule
   #14 = Class              #13           // coursier/error/ResolutionError$UnsatisfiableRule
   #15 = Utf8               coursier/error/ResolutionError
   #16 = Class              #15           // coursier/error/ResolutionError
   #17 = Utf8               UnsatisfiableRule
   #18 = Utf8               coursier/params/rule/RuleResolution$Fail$
   #19 = Class              #18           // coursier/params/rule/RuleResolution$Fail$
   #20 = Utf8               coursier/params/rule/RuleResolution
   #21 = Class              #20           // coursier/params/rule/RuleResolution
   #22 = Utf8
   #23 = Utf8               coursier/params/rule/RuleResolution$TryResolve$
   #24 = Class              #23           // coursier/params/rule/RuleResolution$TryResolve$
   #25 = Utf8               coursier/params/rule/RuleResolution$Warn$
   #26 = Class              #25           // coursier/params/rule/RuleResolution$Warn$
   #27 = Utf8               java/lang/invoke/MethodHandles$Lookup
   #28 = Class              #27           // java/lang/invoke/MethodHandles$Lookup
   #29 = Utf8               java/lang/invoke/MethodHandles
   #30 = Class              #29           // java/lang/invoke/MethodHandles
   #31 = Utf8               Lookup
   #32 = Utf8               productIterator
   #33 = Utf8               ()Lscala/collection/Iterator;
   #34 = Utf8               ()Lscala/collection/Iterator<Ljava/lang/Object;>;
   #35 = Utf8               productIterator$
   #36 = Utf8               (Lscala/Product;)Lscala/collection/Iterator;
   #37 = NameAndType        #35:#36       // productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
   #38 = InterfaceMethodref #6.#37        // scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
   #39 = Utf8               this
   #40 = Utf8               Lcoursier/params/rule/Rule;
   #41 = Utf8               productPrefix
   #42 = Utf8               ()Ljava/lang/String;
   #43 = Utf8               productPrefix$
   #44 = Utf8               (Lscala/Product;)Ljava/lang/String;
   #45 = NameAndType        #43:#44       // productPrefix$:(Lscala/Product;)Ljava/lang/String;
   #46 = InterfaceMethodref #6.#45        // scala/Product.productPrefix$:(Lscala/Product;)Ljava/lang/String;
   #47 = Utf8               productElementName
   #48 = Utf8               (I)Ljava/lang/String;
   #49 = Utf8               n
   #50 = Utf8               productElementName$
   #51 = Utf8               (Lscala/Product;I)Ljava/lang/String;
   #52 = NameAndType        #50:#51       // productElementName$:(Lscala/Product;I)Ljava/lang/String;
   #53 = InterfaceMethodref #6.#52        // scala/Product.productElementName$:(Lscala/Product;I)Ljava/lang/String;
   #54 = Utf8               I
   #55 = Utf8               productElementNames
   #56 = Utf8               ()Lscala/collection/Iterator<Ljava/lang/String;>;
   #57 = Utf8               productElementNames$
   #58 = NameAndType        #57:#36       // productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
   #59 = InterfaceMethodref #6.#58        // scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
   #60 = Utf8               check
   #61 = Utf8               (Lcoursier/core/Resolution;)Lscala/Option;
   #62 = Utf8               (Lcoursier/core/Resolution;)Lscala/Option<Lcoursier/error/conflict/UnsatisfiedRule;>;
   #63 = Utf8               res
   #64 = Utf8               tryResolve
   #65 = Utf8               (Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
   #66 = Utf8               (Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either<Lcoursier/error/ResolutionError$UnsatisfiableRule;Lcoursier/core/Resolution;>;
   #67 = Utf8               conflict
   #68 = Utf8               enforce
   #69 = Utf8               (Lcoursier/core/Resolution;Lcoursier/params/rule/RuleResolution;)Lscala/util/Either;
   #70 = Utf8               (Lcoursier/core/Resolution;Lcoursier/params/rule/RuleResolution;)Lscala/util/Either<Lcoursier/error/ResolutionError$UnsatisfiableRule;Lscala/util/Either<Lcoursier/error/conflict/UnsatisfiedRule;Lscala/Option<Lcoursier/core/Resolution;>;>;>;
   #71 = Utf8               ruleRes
   #72 = NameAndType        #60:#61       // check:(Lcoursier/core/Resolution;)Lscala/Option;
   #73 = Methodref          #2.#72        // coursier/params/rule/Rule.check:(Lcoursier/core/Resolution;)Lscala/Option;
   #74 = Utf8               scala/None$
   #75 = Class              #74           // scala/None$
   #76 = Utf8               MODULE$
   #77 = Utf8               Lscala/None$;
   #78 = NameAndType        #76:#77       // MODULE$:Lscala/None$;
   #79 = Fieldref           #75.#78       // scala/None$.MODULE$:Lscala/None$;
   #80 = Utf8               equals
   #81 = Utf8               (Ljava/lang/Object;)Z
   #82 = NameAndType        #80:#81       // equals:(Ljava/lang/Object;)Z
   #83 = Methodref          #4.#82        // java/lang/Object.equals:(Ljava/lang/Object;)Z
   #84 = Utf8               scala/package$
   #85 = Class              #84           // scala/package$
   #86 = Utf8               Lscala/package$;
   #87 = NameAndType        #76:#86       // MODULE$:Lscala/package$;
   #88 = Fieldref           #85.#87       // scala/package$.MODULE$:Lscala/package$;
   #89 = Utf8               Right
   #90 = Utf8               ()Lscala/util/Right$;
   #91 = NameAndType        #89:#90       // Right:()Lscala/util/Right$;
   #92 = Methodref          #85.#91       // scala/package$.Right:()Lscala/util/Right$;
   #93 = Utf8               scala/util/Right$
   #94 = Class              #93           // scala/util/Right$
   #95 = Utf8               apply
   #96 = Utf8               (Ljava/lang/Object;)Lscala/util/Right;
   #97 = NameAndType        #95:#96       // apply:(Ljava/lang/Object;)Lscala/util/Right;
   #98 = Methodref          #94.#97       // scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
   #99 = Utf8               scala/Option
  #100 = Class              #99           // scala/Option
  #101 = Utf8               scala/Some
  #102 = Class              #101          // scala/Some
  #103 = Utf8               value
  #104 = Utf8               ()Ljava/lang/Object;
  #105 = NameAndType        #103:#104     // value:()Ljava/lang/Object;
  #106 = Methodref          #102.#105     // scala/Some.value:()Ljava/lang/Object;
  #107 = Utf8               coursier/error/conflict/UnsatisfiedRule
  #108 = Class              #107          // coursier/error/conflict/UnsatisfiedRule
  #109 = Utf8               Lcoursier/params/rule/RuleResolution$Fail$;
  #110 = NameAndType        #76:#109      // MODULE$:Lcoursier/params/rule/RuleResolution$Fail$;
  #111 = Fieldref           #19.#110      // coursier/params/rule/RuleResolution$Fail$.MODULE$:Lcoursier/params/rule/RuleResolution$Fail$;
  #112 = Utf8               Left
  #113 = Utf8               ()Lscala/util/Left$;
  #114 = NameAndType        #112:#113     // Left:()Lscala/util/Left$;
  #115 = Methodref          #85.#114      // scala/package$.Left:()Lscala/util/Left$;
  #116 = Utf8               coursier/error/conflict/StrictRule
  #117 = Class              #116          // coursier/error/conflict/StrictRule
  #118 = Utf8               <init>
  #119 = Utf8               (Lcoursier/core/Resolution;Lcoursier/params/rule/Rule;Lcoursier/error/conflict/UnsatisfiedRule;)V
  #120 = NameAndType        #118:#119     // "<init>":(Lcoursier/core/Resolution;Lcoursier/params/rule/Rule;Lcoursier/error/conflict/UnsatisfiedRule;)V
  #121 = Methodref          #117.#120     // coursier/error/conflict/StrictRule."<init>":(Lcoursier/core/Resolution;Lcoursier/params/rule/Rule;Lcoursier/error/conflict/UnsatisfiedRule;)V
  #122 = Utf8               scala/util/Left$
  #123 = Class              #122          // scala/util/Left$
  #124 = Utf8               (Ljava/lang/Object;)Lscala/util/Left;
  #125 = NameAndType        #95:#124      // apply:(Ljava/lang/Object;)Lscala/util/Left;
  #126 = Methodref          #123.#125     // scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
  #127 = Utf8               Lcoursier/params/rule/RuleResolution$Warn$;
  #128 = NameAndType        #76:#127      // MODULE$:Lcoursier/params/rule/RuleResolution$Warn$;
  #129 = Fieldref           #26.#128      // coursier/params/rule/RuleResolution$Warn$.MODULE$:Lcoursier/params/rule/RuleResolution$Warn$;
  #130 = Utf8               Lcoursier/params/rule/RuleResolution$TryResolve$;
  #131 = NameAndType        #76:#130      // MODULE$:Lcoursier/params/rule/RuleResolution$TryResolve$;
  #132 = Fieldref           #24.#131      // coursier/params/rule/RuleResolution$TryResolve$.MODULE$:Lcoursier/params/rule/RuleResolution$TryResolve$;
  #133 = NameAndType        #64:#65       // tryResolve:(Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
  #134 = Methodref          #2.#133       // coursier/params/rule/Rule.tryResolve:(Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
  #135 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #136 = MethodType         #135          //  (Ljava/lang/Object;)Ljava/lang/Object;
  #137 = Utf8               $anonfun$enforce$1
  #138 = Utf8               (Lcoursier/core/Resolution;)Lscala/util/Right;
  #139 = NameAndType        #137:#138     // $anonfun$enforce$1:(Lcoursier/core/Resolution;)Lscala/util/Right;
  #140 = Methodref          #2.#139       // coursier/params/rule/Rule.$anonfun$enforce$1:(Lcoursier/core/Resolution;)Lscala/util/Right;
  #141 = MethodHandle       6:#140        // REF_invokeStatic coursier/params/rule/Rule.$anonfun$enforce$1:(Lcoursier/core/Resolution;)Lscala/util/Right;
  #142 = MethodType         #138          //  (Lcoursier/core/Resolution;)Lscala/util/Right;
  #143 = Integer            5
  #144 = Integer            1
  #145 = Utf8               java/lang/invoke/LambdaMetafactory
  #146 = Class              #145          // java/lang/invoke/LambdaMetafactory
  #147 = Utf8               altMetafactory
  #148 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #149 = NameAndType        #147:#148     // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #150 = Methodref          #146.#149     // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #151 = MethodHandle       6:#150        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #152 = Utf8               ()Lscala/Function1;
  #153 = NameAndType        #95:#152      // apply:()Lscala/Function1;
  #154 = InvokeDynamic      #0:#153       // #0:apply:()Lscala/Function1;
  #155 = Utf8               scala/util/Either
  #156 = Class              #155          // scala/util/Either
  #157 = Utf8               map
  #158 = Utf8               (Lscala/Function1;)Lscala/util/Either;
  #159 = NameAndType        #157:#158     // map:(Lscala/Function1;)Lscala/util/Either;
  #160 = Methodref          #156.#159     // scala/util/Either.map:(Lscala/Function1;)Lscala/util/Either;
  #161 = Utf8               scala/MatchError
  #162 = Class              #161          // scala/MatchError
  #163 = Utf8               (Ljava/lang/Object;)V
  #164 = NameAndType        #118:#163     // "<init>":(Ljava/lang/Object;)V
  #165 = Methodref          #162.#164     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #166 = Utf8               coursier/core/Resolution
  #167 = Class              #166          // coursier/core/Resolution
  #168 = Utf8               c
  #169 = Utf8               Lcoursier/error/conflict/UnsatisfiedRule;
  #170 = Utf8               Lcoursier/core/Resolution;
  #171 = Utf8               Lcoursier/params/rule/RuleResolution;
  #172 = Utf8               repr
  #173 = Utf8               toString
  #174 = NameAndType        #173:#42      // toString:()Ljava/lang/String;
  #175 = Methodref          #2.#174       // coursier/params/rule/Rule.toString:()Ljava/lang/String;
  #176 = Utf8               r
  #177 = Methodref          #102.#164     // scala/Some."<init>":(Ljava/lang/Object;)V
  #178 = Utf8               ()V
  #179 = NameAndType        #118:#178     // "<init>":()V
  #180 = Methodref          #4.#179       // java/lang/Object."<init>":()V
  #181 = Utf8               $init$
  #182 = Utf8               (Lscala/Product;)V
  #183 = NameAndType        #181:#182     // $init$:(Lscala/Product;)V
  #184 = InterfaceMethodref #6.#183       // scala/Product.$init$:(Lscala/Product;)V
  #185 = Utf8               $deserializeLambda$
  #186 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #187 = Utf8               scala/runtime/LambdaDeserialize
  #188 = Class              #187          // scala/runtime/LambdaDeserialize
  #189 = Utf8               bootstrap
  #190 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #191 = NameAndType        #189:#190     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #192 = Methodref          #188.#191     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #193 = MethodHandle       6:#192        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #194 = Utf8               lambdaDeserialize
  #195 = NameAndType        #194:#186     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #196 = InvokeDynamic      #1:#195       // #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #197 = Utf8               Code
  #198 = Utf8               LineNumberTable
  #199 = Utf8               LocalVariableTable
  #200 = Utf8               Signature
  #201 = Utf8               MethodParameters
  #202 = Utf8               StackMapTable
  #203 = Utf8               InnerClasses
  #204 = Utf8               SourceFile
  #205 = Utf8               RuntimeVisibleAnnotations
  #206 = Utf8               BootstrapMethods
  #207 = Utf8               ScalaInlineInfo
  #208 = Utf8               ScalaSig
{
  public scala.collection.Iterator<java.lang.Object> productIterator();
    descriptor: ()Lscala/collection/Iterator;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #38                 // InterfaceMethod scala/Product.productIterator$:(Lscala/Product;)Lscala/collection/Iterator;
         4: areturn
      LineNumberTable:
        line 7: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/params/rule/Rule;
    Signature: #34                          // ()Lscala/collection/Iterator<Ljava/lang/Object;>;

  public java.lang.String productPrefix();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #46                 // InterfaceMethod scala/Product.productPrefix$:(Lscala/Product;)Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 7: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/params/rule/Rule;

  public java.lang.String productElementName(int);
    descriptor: (I)Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: invokestatic  #53                 // InterfaceMethod scala/Product.productElementName$:(Lscala/Product;I)Ljava/lang/String;
         5: areturn
      LineNumberTable:
        line 7: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lcoursier/params/rule/Rule;
            0       6     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.collection.Iterator<java.lang.String> productElementNames();
    descriptor: ()Lscala/collection/Iterator;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #59                 // InterfaceMethod scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
         4: areturn
      LineNumberTable:
        line 7: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/params/rule/Rule;
    Signature: #56                          // ()Lscala/collection/Iterator<Ljava/lang/String;>;

  public abstract scala.Option<coursier.error.conflict.UnsatisfiedRule> check(coursier.core.Resolution);
    descriptor: (Lcoursier/core/Resolution;)Lscala/Option;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #62                          // (Lcoursier/core/Resolution;)Lscala/Option<Lcoursier/error/conflict/UnsatisfiedRule;>;
    MethodParameters:
      Name                           Flags
      res                            final

  public abstract scala.util.Either<coursier.error.ResolutionError$UnsatisfiableRule, coursier.core.Resolution> tryResolve(coursier.core.Resolution, coursier.error.conflict.UnsatisfiedRule);
    descriptor: (Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
    flags: (0x0401) ACC_PUBLIC, ACC_ABSTRACT
    Signature: #66                          // (Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either<Lcoursier/error/ResolutionError$UnsatisfiableRule;Lcoursier/core/Resolution;>;
    MethodParameters:
      Name                           Flags
      res                            final
      conflict                       final

  public scala.util.Either<coursier.error.ResolutionError$UnsatisfiableRule, scala.util.Either<coursier.error.conflict.UnsatisfiedRule, scala.Option<coursier.core.Resolution>>> enforce(coursier.core.Resolution, coursier.params.rule.RuleResolution);
    descriptor: (Lcoursier/core/Resolution;Lcoursier/params/rule/RuleResolution;)Lscala/util/Either;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=9, args_size=3
         0: aload_0
         1: aload_1
         2: invokevirtual #73                 // Method check:(Lcoursier/core/Resolution;)Lscala/Option;
         5: astore        5
         7: getstatic     #79                 // Field scala/None$.MODULE$:Lscala/None$;
        10: aload         5
        12: invokevirtual #83                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        15: ifeq          43
        18: getstatic     #88                 // Field scala/package$.MODULE$:Lscala/package$;
        21: invokevirtual #92                 // Method scala/package$.Right:()Lscala/util/Right$;
        24: getstatic     #88                 // Field scala/package$.MODULE$:Lscala/package$;
        27: invokevirtual #92                 // Method scala/package$.Right:()Lscala/util/Right$;
        30: getstatic     #79                 // Field scala/None$.MODULE$:Lscala/None$;
        33: invokevirtual #98                 // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        36: invokevirtual #98                 // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        39: astore_3
        40: goto          215
        43: goto          46
        46: aload         5
        48: instanceof    #102                // class scala/Some
        51: ifeq          202
        54: aload         5
        56: checkcast     #102                // class scala/Some
        59: astore        6
        61: aload         6
        63: invokevirtual #106                // Method scala/Some.value:()Ljava/lang/Object;
        66: checkcast     #108                // class coursier/error/conflict/UnsatisfiedRule
        69: astore        7
        71: aload_2
        72: astore        8
        74: getstatic     #111                // Field coursier/params/rule/RuleResolution$Fail$.MODULE$:Lcoursier/params/rule/RuleResolution$Fail$;
        77: aload         8
        79: invokevirtual #83                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        82: ifeq          110
        85: getstatic     #88                 // Field scala/package$.MODULE$:Lscala/package$;
        88: invokevirtual #115                // Method scala/package$.Left:()Lscala/util/Left$;
        91: new           #117                // class coursier/error/conflict/StrictRule
        94: dup
        95: aload_1
        96: aload_0
        97: aload         7
        99: invokespecial #121                // Method coursier/error/conflict/StrictRule."<init>":(Lcoursier/core/Resolution;Lcoursier/params/rule/Rule;Lcoursier/error/conflict/UnsatisfiedRule;)V
       102: invokevirtual #126                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
       105: astore        4
       107: goto          196
       110: goto          113
       113: getstatic     #129                // Field coursier/params/rule/RuleResolution$Warn$.MODULE$:Lcoursier/params/rule/RuleResolution$Warn$;
       116: aload         8
       118: invokevirtual #83                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       121: ifeq          149
       124: getstatic     #88                 // Field scala/package$.MODULE$:Lscala/package$;
       127: invokevirtual #92                 // Method scala/package$.Right:()Lscala/util/Right$;
       130: getstatic     #88                 // Field scala/package$.MODULE$:Lscala/package$;
       133: invokevirtual #115                // Method scala/package$.Left:()Lscala/util/Left$;
       136: aload         7
       138: invokevirtual #126                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
       141: invokevirtual #98                 // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
       144: astore        4
       146: goto          196
       149: goto          152
       152: getstatic     #132                // Field coursier/params/rule/RuleResolution$TryResolve$.MODULE$:Lcoursier/params/rule/RuleResolution$TryResolve$;
       155: aload         8
       157: invokevirtual #83                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       160: ifeq          183
       163: aload_0
       164: aload_1
       165: aload         7
       167: invokevirtual #134                // Method tryResolve:(Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
       170: invokedynamic #154,  0            // InvokeDynamic #0:apply:()Lscala/Function1;
       175: invokevirtual #160                // Method scala/util/Either.map:(Lscala/Function1;)Lscala/util/Either;
       178: astore        4
       180: goto          196
       183: goto          186
       186: new           #162                // class scala/MatchError
       189: dup
       190: aload         8
       192: invokespecial #165                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       195: athrow
       196: aload         4
       198: astore_3
       199: goto          215
       202: goto          205
       205: new           #162                // class scala/MatchError
       208: dup
       209: aload         5
       211: invokespecial #165                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       214: athrow
       215: aload_3
       216: areturn
      StackMapTable: number_of_entries = 12
        frame_type = 254 /* append */
          offset_delta = 43
          locals = [ top, top, class scala/Option ]
        frame_type = 2 /* same */
        frame_type = 254 /* append */
          offset_delta = 63
          locals = [ class scala/Some, class coursier/error/conflict/UnsatisfiedRule, class coursier/params/rule/RuleResolution ]
        frame_type = 2 /* same */
        frame_type = 35 /* same */
        frame_type = 2 /* same */
        frame_type = 30 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/params/rule/Rule, class coursier/core/Resolution, class coursier/params/rule/RuleResolution, top, class scala/util/Either, class scala/Option, class scala/Some, class coursier/error/conflict/UnsatisfiedRule, class coursier/params/rule/RuleResolution ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 5
          locals = [ class coursier/params/rule/Rule, class coursier/core/Resolution, class coursier/params/rule/RuleResolution, top, top, class scala/Option ]
          stack = []
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/params/rule/Rule, class coursier/core/Resolution, class coursier/params/rule/RuleResolution, class scala/util/Either, top, class scala/Option ]
          stack = []
      LineNumberTable:
        line 15: 0
        line 16: 7
        line 17: 18
        line 16: 43
        line 18: 46
        line 19: 71
        line 20: 74
        line 21: 85
        line 20: 110
        line 22: 113
        line 23: 124
        line 22: 149
        line 24: 152
        line 25: 163
        line 24: 183
        line 19: 186
        line 18: 202
        line 15: 205
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           71     131     7     c   Lcoursier/error/conflict/UnsatisfiedRule;
            0     217     0  this   Lcoursier/params/rule/Rule;
            0     217     1   res   Lcoursier/core/Resolution;
            0     217     2 ruleRes   Lcoursier/params/rule/RuleResolution;
    Signature: #70                          // (Lcoursier/core/Resolution;Lcoursier/params/rule/RuleResolution;)Lscala/util/Either<Lcoursier/error/ResolutionError$UnsatisfiableRule;Lscala/util/Either<Lcoursier/error/conflict/UnsatisfiedRule;Lscala/Option<Lcoursier/core/Resolution;>;>;>;
    MethodParameters:
      Name                           Flags
      res                            final
      ruleRes                        final

  public java.lang.String repr();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #175                // Method toString:()Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 30: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/params/rule/Rule;

  public static final scala.util.Right $anonfun$enforce$1(coursier.core.Resolution);
    descriptor: (Lcoursier/core/Resolution;)Lscala/util/Right;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=4, locals=1, args_size=1
         0: getstatic     #88                 // Field scala/package$.MODULE$:Lscala/package$;
         3: invokevirtual #92                 // Method scala/package$.Right:()Lscala/util/Right$;
         6: new           #102                // class scala/Some
         9: dup
        10: aload_0
        11: invokespecial #177                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        14: invokevirtual #98                 // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        17: areturn
      LineNumberTable:
        line 25: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      18     0     r   Lcoursier/core/Resolution;
    MethodParameters:
      Name                           Flags
      r                              final

  public coursier.params.rule.Rule();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #180                // Method java/lang/Object."<init>":()V
         4: aload_0
         5: invokestatic  #184                // InterfaceMethod scala/Product.$init$:(Lscala/Product;)V
         8: return
      LineNumberTable:
        line 7: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lcoursier/params/rule/Rule;

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #196,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static abstract #17= #14 of #16; // UnsatisfiableRule=class coursier/error/ResolutionError$UnsatisfiableRule of class coursier/error/ResolutionError
  public static #22= #19 of #21;          // =class coursier/params/rule/RuleResolution$Fail$ of class coursier/params/rule/RuleResolution
  public static #22= #24 of #21;          // =class coursier/params/rule/RuleResolution$TryResolve$ of class coursier/params/rule/RuleResolution
  public static #22= #26 of #21;          // =class coursier/params/rule/RuleResolution$Warn$ of class coursier/params/rule/RuleResolution
  public static final #31= #28 of #30;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
SourceFile: "Rule.scala"
RuntimeVisibleAnnotations:
  0: #10(#11=s#12)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u000514Qa\u0002\u0005\u0002\u0002=AQ!\n\u0001\u0005\u0002\u0019\"Q!\u000b\u0001\u0003\u0002)BQA\u000e\u0001\u0007\u0002]BQ!\u0012\u0001\u0007\u0002\u0019CQa\u0016\u0001\u0005\u0002aCQA\u0019\u0001\u0005\u0002\r\u0014AAU;mK*\u0011\u0011BC\u0001\u0005eVdWM\u0003\u0002\f\u0019\u00051\u0001/\u0019:b[NT\u0011!D\u0001\tG>,(o]5fe\u000e\u00011\u0003\u0002\u0001\u0011-e\u0001\"!\u0005\u000b\u000e\u0003IQ\u0011aE\u0001\u0006g\u000e\fG.Y\u0005\u0003+I\u0011a!\u00118z%\u00164\u0007CA\t\u0018\u0013\tA\"CA\u0004Qe>$Wo\u0019;\u0011\u0005i\u0011cBA\u000e!\u001d\tar$D\u0001\u001e\u0015\tqb\"\u0001\u0004=e>|GOP\u0005\u0002\'%\u0011\u0011EE\u0001\ba\u0006\u001c7.Y4f\u0013\t\u0019CE\u0001\u0007TKJL\u0017\r\\5{C\ndWM\u0003\u0002\"%\u00051A(\u001b8jiz\"\u0012a\n\t\u0003Q\u0001i\u0011\u0001\u0003\u0002\u0002\u0007F\u00111F\f\t\u0003#1J!!\f\n\u0003\u000f9{G\u000f[5oOB\u0011q\u0006N\u0007\u0002a)\u0011\u0011GM\u0001\tG>tg\r\\5di*\u00111\u0007D\u0001\u0006KJ\u0014xN]\u0005\u0003kA\u0012q\"\u00168tCRL7OZ5fIJ+H.Z\u0001\u0006G\",7m\u001b\u000b\u0003qu\u00022!E\u001d<\u0013\tQ$C\u0001\u0004PaRLwN\u001c\t\u0003y\ti\u0011\u0001\u0001\u0005\u0006}\r\u0001\raP\u0001\u0004e\u0016\u001c\bC\u0001!D\u001b\u0005\t%B\u0001\"\r\u0003\u0011\u0019wN]3\n\u0005\u0011\u000b%A\u0003*fg>dW\u000f^5p]\u0006QAO]=SKN|GN^3\u0015\u0007\u001d+f\u000b\u0005\u0003\u001b\u0011*{\u0014BA%%\u0005\u0019)\u0015\u000e\u001e5feB\u00111J\u0015\b\u0003\u0019Bs!!T(\u000f\u0005qq\u0015\"A\u0007\n\u0005Mb\u0011BA)3\u0003=\u0011Vm]8mkRLwN\\#se>\u0014\u0018BA*U\u0005E)fn]1uSN4\u0017.\u00192mKJ+H.\u001a\u0006\u0003#JBQA\u0010\u0003A\u0002}BQ!\r\u0003A\u0002m\nq!\u001a8g_J\u001cW\rF\u0002Z9v\u0003BA\u0007%K5B!!\u0004\u0013\u0018\\!\r\t\u0012h\u0010\u0005\u0006}\u0015\u0001\ra\u0010\u0005\u0006=\u0016\u0001\raX\u0001\beVdWMU3t!\tA\u0003-\u0003\u0002b\u0011\tq!+\u001e7f%\u0016\u001cx\u000e\\;uS>t\u0017\u0001\u0002:faJ,\u0012\u0001\u001a\t\u0003K&t!AZ4\u0011\u0005q\u0011\u0012B\u00015\u0013\u0003\u0019\u0001&/\u001a3fM&\u0011!n\u001b\u0002\u0007\'R\u0014\u0018N\\4\u000b\u0005!\u0014\u0002"
    )
BootstrapMethods:
  0: #151 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #136 (Ljava/lang/Object;)Ljava/lang/Object;
      #141 REF_invokeStatic coursier/params/rule/Rule.$anonfun$enforce$1:(Lcoursier/core/Resolution;)Lscala/util/Right;
      #142 (Lcoursier/core/Resolution;)Lscala/util/Right;
      #143 5
      #144 1
      #142 (Lcoursier/core/Resolution;)Lscala/util/Right;
  1: #193 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #141 REF_invokeStatic coursier/params/rule/Rule.$anonfun$enforce$1:(Lcoursier/core/Resolution;)Lscala/util/Right;
  ScalaInlineInfo: length = 0x36 (unknown attribute)
   01 00 00 0A 00 89 00 8A 01 00 76 00 B4 00 00 3E
   00 3F 00 00 46 00 47 00 00 31 00 32 00 00 39 00
   23 00 00 22 00 23 00 00 2B 00 2C 00 00 AE 00 2C
   00 00 42 00 43 00
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
