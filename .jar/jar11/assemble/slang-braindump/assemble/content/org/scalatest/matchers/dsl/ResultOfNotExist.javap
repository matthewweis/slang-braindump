Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/scalatest/matchers/dsl/ResultOfNotExist.class
  Last modified May 29, 2022; size 2740 bytes
  SHA-256 checksum c72d20e69c510ebeb61d87f6cfba2ebafc69974b23148f78f9a592e666f46593
  Compiled from "ResultOfNotExist.scala"
public final class org.scalatest.matchers.dsl.ResultOfNotExist
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // org/scalatest/matchers/dsl/ResultOfNotExist
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 6, attributes: 4
Constant pool:
   #1 = Utf8               org/scalatest/matchers/dsl/ResultOfNotExist
   #2 = Class              #1             // org/scalatest/matchers/dsl/ResultOfNotExist
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               ResultOfNotExist.scala
   #6 = Utf8               Lscala/reflect/ScalaSignature;
   #7 = Utf8               bytes
   #8 = Utf8               \u0006\u0005\t4A\u0001C\u0005\u0003%!A\u0011\u0004\u0001B\u0001B\u0003%!\u0004C\u0003\u001f\u0001\u0011\u0005q\u0004C\u0003#\u0001\u0011\u00051\u0005C\u0003#\u0001\u0011\u0005a\u0007C\u0003J\u0001\u0011\u0005!\nC\u0003J\u0001\u0011\u0005A\nC\u0003V\u0001\u0011\u0005cK\u0001\tSKN,H\u000e^(g\u001d>$X\t_5ti*\u0011!bC\u0001\u0004INd\'B\u0001\u0007\u000e\u0003!i\u0017\r^2iKJ\u001c(B\u0001\b\u0010\u0003%\u00198-\u00197bi\u0016\u001cHOC\u0001\u0011\u0003\ry\'oZ\u0002\u0001\'\t\u00011\u0003\u0005\u0002\u0015/5\tQCC\u0001\u0017\u0003\u0015\u00198-\u00197b\u0013\tARC\u0001\u0004B]f\u0014VMZ\u0001\b]>$xk\u001c:e!\tYB$D\u0001\n\u0013\ti\u0012BA\u0004O_R<vN\u001d3\u0002\rqJg.\u001b;?)\t\u0001\u0013\u0005\u0005\u0002\u001c\u0001!)\u0011D\u0001a\u00015\u0005\u0019\u0011M\u001c3\u0015\u0005\u0011\u0002\u0004\u0003B\u000e&O)J!AJ\u0005\u0003\u001f5\u000bGo\u00195fe\u001a\u000b7\r^8ssF\u0002\"\u0001\u0006\u0015\n\u0005%*\"aA!osB\u00111FL\u0007\u0002Y)\u0011Q&D\u0001\tK:\f\'\r\\3sg&\u0011q\u0006\f\u0002\n\u000bbL7\u000f^3oG\u0016DQ!M\u0002A\u0002I\na\"\u00198pi\",\'/T1uG\",\'\u000fE\u00024i\u001dj\u0011aC\u0005\u0003k-\u0011q!T1uG\",\'/\u0006\u00028{Q\u0011\u0001H\u0012\t\u00067e:#fO\u0005\u0003u%\u0011q\"T1uG\",\'OR1di>\u0014\u0018P\r\t\u0003yub\u0001\u0001B\u0003?\t\t\u0007qH\u0001\u0006U3B+5\tT!T\'F*\"\u0001\u0011#\u0012\u0005\u0005;\u0003C\u0001\u000bC\u0013\t\u0019UCA\u0004O_RD\u0017N\\4\u0005\u000b\u0015k$\u0019\u0001!\u0003\u0003}CQa\u0012\u0003A\u0002!\u000bQ#\u00198pi\",\'/T1uG\",\'OR1di>\u0014\u0018\u0010\u0005\u0003\u001cK\u001dZ\u0014AA8s)\t!3\nC\u00032\u000b\u0001\u0007!\'\u0006\u0002N!R\u0011aj\u0015\t\u00067e:#f\u0014\t\u0003yA#QA\u0010\u0004C\u0002E+\"\u0001\u0011*\u0005\u000b\u0015\u0003&\u0019\u0001!\t\u000b\u001d3\u0001\u0019\u0001+\u0011\tm)seT\u0001\ti>\u001cFO]5oOR\tq\u000b\u0005\u0002Y?:\u0011\u0011,\u0018\t\u00035Vi\u0011a\u0017\u0006\u00039F\ta\u0001\u0010:p_Rt\u0014B\u00010\u0016\u0003\u0019\u0001&/\u001a3fM&\u0011\u0001-\u0019\u0002\u0007\'R\u0014\u0018N\\4\u000b\u0005y+\u0002
   #9 = Utf8               notWord
  #10 = Utf8               Lorg/scalatest/matchers/dsl/NotWord;
  #11 = Utf8               and
  #12 = Utf8               (Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #13 = Utf8               (Lorg/scalatest/matchers/Matcher<Ljava/lang/Object;>;)Lorg/scalatest/matchers/dsl/MatcherFactory1<Ljava/lang/Object;Lorg/scalatest/enablers/Existence;>;
  #14 = Utf8               anotherMatcher
  #15 = NameAndType        #9:#10         // notWord:Lorg/scalatest/matchers/dsl/NotWord;
  #16 = Fieldref           #2.#15         // org/scalatest/matchers/dsl/ResultOfNotExist.notWord:Lorg/scalatest/matchers/dsl/NotWord;
  #17 = Utf8               org/scalatest/matchers/dsl/NotWord
  #18 = Class              #17            // org/scalatest/matchers/dsl/NotWord
  #19 = Utf8               exist
  #20 = Utf8               ()Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #21 = NameAndType        #19:#20        // exist:()Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #22 = Methodref          #18.#21        // org/scalatest/matchers/dsl/NotWord.exist:()Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #23 = Utf8               org/scalatest/matchers/dsl/MatcherFactory1
  #24 = Class              #23            // org/scalatest/matchers/dsl/MatcherFactory1
  #25 = NameAndType        #11:#12        // and:(Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #26 = Methodref          #24.#25        // org/scalatest/matchers/dsl/MatcherFactory1.and:(Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #27 = Utf8               this
  #28 = Utf8               Lorg/scalatest/matchers/dsl/ResultOfNotExist;
  #29 = Utf8               Lorg/scalatest/matchers/Matcher;
  #30 = Utf8               (Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
  #31 = Utf8               <TYPECLASS1:Ljava/lang/Object;>(Lorg/scalatest/matchers/dsl/MatcherFactory1<Ljava/lang/Object;TTYPECLASS1;>;)Lorg/scalatest/matchers/dsl/MatcherFactory2<Ljava/lang/Object;Lorg/scalatest/enablers/Existence;TTYPECLASS1;>;
  #32 = Utf8               anotherMatcherFactory
  #33 = NameAndType        #11:#30        // and:(Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
  #34 = Methodref          #24.#33        // org/scalatest/matchers/dsl/MatcherFactory1.and:(Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
  #35 = Utf8               Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #36 = Utf8               or
  #37 = NameAndType        #36:#12        // or:(Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #38 = Methodref          #24.#37        // org/scalatest/matchers/dsl/MatcherFactory1.or:(Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
  #39 = NameAndType        #36:#30        // or:(Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
  #40 = Methodref          #24.#39        // org/scalatest/matchers/dsl/MatcherFactory1.or:(Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
  #41 = Utf8               toString
  #42 = Utf8               ()Ljava/lang/String;
  #43 = Utf8               not (exist)
  #44 = String             #43            // not (exist)
  #45 = Utf8               <init>
  #46 = Utf8               (Lorg/scalatest/matchers/dsl/NotWord;)V
  #47 = Utf8               ()V
  #48 = NameAndType        #45:#47        // "<init>":()V
  #49 = Methodref          #4.#48         // java/lang/Object."<init>":()V
  #50 = Utf8               Code
  #51 = Utf8               LineNumberTable
  #52 = Utf8               LocalVariableTable
  #53 = Utf8               Signature
  #54 = Utf8               MethodParameters
  #55 = Utf8               SourceFile
  #56 = Utf8               RuntimeVisibleAnnotations
  #57 = Utf8               ScalaInlineInfo
  #58 = Utf8               ScalaSig
{
  private final org.scalatest.matchers.dsl.NotWord notWord;
    descriptor: Lorg/scalatest/matchers/dsl/NotWord;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public org.scalatest.matchers.dsl.MatcherFactory1<java.lang.Object, org.scalatest.enablers.Existence> and(org.scalatest.matchers.Matcher<java.lang.Object>);
    descriptor: (Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #16                 // Field notWord:Lorg/scalatest/matchers/dsl/NotWord;
         4: invokevirtual #22                 // Method org/scalatest/matchers/dsl/NotWord.exist:()Lorg/scalatest/matchers/dsl/MatcherFactory1;
         7: aload_1
         8: invokevirtual #26                 // Method org/scalatest/matchers/dsl/MatcherFactory1.and:(Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
        11: areturn
      LineNumberTable:
        line 41: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      12     0  this   Lorg/scalatest/matchers/dsl/ResultOfNotExist;
            0      12     1 anotherMatcher   Lorg/scalatest/matchers/Matcher;
    Signature: #13                          // (Lorg/scalatest/matchers/Matcher<Ljava/lang/Object;>;)Lorg/scalatest/matchers/dsl/MatcherFactory1<Ljava/lang/Object;Lorg/scalatest/enablers/Existence;>;
    MethodParameters:
      Name                           Flags
      anotherMatcher                 final

  public <TYPECLASS1 extends java.lang.Object> org.scalatest.matchers.dsl.MatcherFactory2<java.lang.Object, org.scalatest.enablers.Existence, TYPECLASS1> and(org.scalatest.matchers.dsl.MatcherFactory1<java.lang.Object, TYPECLASS1>);
    descriptor: (Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #16                 // Field notWord:Lorg/scalatest/matchers/dsl/NotWord;
         4: invokevirtual #22                 // Method org/scalatest/matchers/dsl/NotWord.exist:()Lorg/scalatest/matchers/dsl/MatcherFactory1;
         7: aload_1
         8: invokevirtual #34                 // Method org/scalatest/matchers/dsl/MatcherFactory1.and:(Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
        11: areturn
      LineNumberTable:
        line 54: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      12     0  this   Lorg/scalatest/matchers/dsl/ResultOfNotExist;
            0      12     1 anotherMatcherFactory   Lorg/scalatest/matchers/dsl/MatcherFactory1;
    Signature: #31                          // <TYPECLASS1:Ljava/lang/Object;>(Lorg/scalatest/matchers/dsl/MatcherFactory1<Ljava/lang/Object;TTYPECLASS1;>;)Lorg/scalatest/matchers/dsl/MatcherFactory2<Ljava/lang/Object;Lorg/scalatest/enablers/Existence;TTYPECLASS1;>;
    MethodParameters:
      Name                           Flags
      anotherMatcherFactory          final

  public org.scalatest.matchers.dsl.MatcherFactory1<java.lang.Object, org.scalatest.enablers.Existence> or(org.scalatest.matchers.Matcher<java.lang.Object>);
    descriptor: (Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #16                 // Field notWord:Lorg/scalatest/matchers/dsl/NotWord;
         4: invokevirtual #22                 // Method org/scalatest/matchers/dsl/NotWord.exist:()Lorg/scalatest/matchers/dsl/MatcherFactory1;
         7: aload_1
         8: invokevirtual #38                 // Method org/scalatest/matchers/dsl/MatcherFactory1.or:(Lorg/scalatest/matchers/Matcher;)Lorg/scalatest/matchers/dsl/MatcherFactory1;
        11: areturn
      LineNumberTable:
        line 65: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      12     0  this   Lorg/scalatest/matchers/dsl/ResultOfNotExist;
            0      12     1 anotherMatcher   Lorg/scalatest/matchers/Matcher;
    Signature: #13                          // (Lorg/scalatest/matchers/Matcher<Ljava/lang/Object;>;)Lorg/scalatest/matchers/dsl/MatcherFactory1<Ljava/lang/Object;Lorg/scalatest/enablers/Existence;>;
    MethodParameters:
      Name                           Flags
      anotherMatcher                 final

  public <TYPECLASS1 extends java.lang.Object> org.scalatest.matchers.dsl.MatcherFactory2<java.lang.Object, org.scalatest.enablers.Existence, TYPECLASS1> or(org.scalatest.matchers.dsl.MatcherFactory1<java.lang.Object, TYPECLASS1>);
    descriptor: (Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: getfield      #16                 // Field notWord:Lorg/scalatest/matchers/dsl/NotWord;
         4: invokevirtual #22                 // Method org/scalatest/matchers/dsl/NotWord.exist:()Lorg/scalatest/matchers/dsl/MatcherFactory1;
         7: aload_1
         8: invokevirtual #40                 // Method org/scalatest/matchers/dsl/MatcherFactory1.or:(Lorg/scalatest/matchers/dsl/MatcherFactory1;)Lorg/scalatest/matchers/dsl/MatcherFactory2;
        11: areturn
      LineNumberTable:
        line 76: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      12     0  this   Lorg/scalatest/matchers/dsl/ResultOfNotExist;
            0      12     1 anotherMatcherFactory   Lorg/scalatest/matchers/dsl/MatcherFactory1;
    Signature: #31                          // <TYPECLASS1:Ljava/lang/Object;>(Lorg/scalatest/matchers/dsl/MatcherFactory1<Ljava/lang/Object;TTYPECLASS1;>;)Lorg/scalatest/matchers/dsl/MatcherFactory2<Ljava/lang/Object;Lorg/scalatest/enablers/Existence;TTYPECLASS1;>;
    MethodParameters:
      Name                           Flags
      anotherMatcherFactory          final

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: ldc           #44                 // String not (exist)
         2: areturn
      LineNumberTable:
        line 81: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lorg/scalatest/matchers/dsl/ResultOfNotExist;

  public org.scalatest.matchers.dsl.ResultOfNotExist(org.scalatest.matchers.dsl.NotWord);
    descriptor: (Lorg/scalatest/matchers/dsl/NotWord;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: putfield      #16                 // Field notWord:Lorg/scalatest/matchers/dsl/NotWord;
         5: aload_0
         6: invokespecial #49                 // Method java/lang/Object."<init>":()V
         9: return
      LineNumberTable:
        line 30: 0
        line 83: 5
        line 30: 9
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lorg/scalatest/matchers/dsl/ResultOfNotExist;
            0      10     1 notWord   Lorg/scalatest/matchers/dsl/NotWord;
    MethodParameters:
      Name                           Flags
      notWord                        final
}
SourceFile: "ResultOfNotExist.scala"
RuntimeVisibleAnnotations:
  0: #6(#7=s#8)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\t4A\u0001C\u0005\u0003%!A\u0011\u0004\u0001B\u0001B\u0003%!\u0004C\u0003\u001f\u0001\u0011\u0005q\u0004C\u0003#\u0001\u0011\u00051\u0005C\u0003#\u0001\u0011\u0005a\u0007C\u0003J\u0001\u0011\u0005!\nC\u0003J\u0001\u0011\u0005A\nC\u0003V\u0001\u0011\u0005cK\u0001\tSKN,H\u000e^(g\u001d>$X\t_5ti*\u0011!bC\u0001\u0004INd\'B\u0001\u0007\u000e\u0003!i\u0017\r^2iKJ\u001c(B\u0001\b\u0010\u0003%\u00198-\u00197bi\u0016\u001cHOC\u0001\u0011\u0003\ry\'oZ\u0002\u0001\'\t\u00011\u0003\u0005\u0002\u0015/5\tQCC\u0001\u0017\u0003\u0015\u00198-\u00197b\u0013\tARC\u0001\u0004B]f\u0014VMZ\u0001\b]>$xk\u001c:e!\tYB$D\u0001\n\u0013\ti\u0012BA\u0004O_R<vN\u001d3\u0002\rqJg.\u001b;?)\t\u0001\u0013\u0005\u0005\u0002\u001c\u0001!)\u0011D\u0001a\u00015\u0005\u0019\u0011M\u001c3\u0015\u0005\u0011\u0002\u0004\u0003B\u000e&O)J!AJ\u0005\u0003\u001f5\u000bGo\u00195fe\u001a\u000b7\r^8ssF\u0002\"\u0001\u0006\u0015\n\u0005%*\"aA!osB\u00111FL\u0007\u0002Y)\u0011Q&D\u0001\tK:\f\'\r\\3sg&\u0011q\u0006\f\u0002\n\u000bbL7\u000f^3oG\u0016DQ!M\u0002A\u0002I\na\"\u00198pi\",\'/T1uG\",\'\u000fE\u00024i\u001dj\u0011aC\u0005\u0003k-\u0011q!T1uG\",\'/\u0006\u00028{Q\u0011\u0001H\u0012\t\u00067e:#fO\u0005\u0003u%\u0011q\"T1uG\",\'OR1di>\u0014\u0018P\r\t\u0003yub\u0001\u0001B\u0003?\t\t\u0007qH\u0001\u0006U3B+5\tT!T\'F*\"\u0001\u0011#\u0012\u0005\u0005;\u0003C\u0001\u000bC\u0013\t\u0019UCA\u0004O_RD\u0017N\\4\u0005\u000b\u0015k$\u0019\u0001!\u0003\u0003}CQa\u0012\u0003A\u0002!\u000bQ#\u00198pi\",\'/T1uG\",\'OR1di>\u0014\u0018\u0010\u0005\u0003\u001cK\u001dZ\u0014AA8s)\t!3\nC\u00032\u000b\u0001\u0007!\'\u0006\u0002N!R\u0011aj\u0015\t\u00067e:#f\u0014\t\u0003yA#QA\u0010\u0004C\u0002E+\"\u0001\u0011*\u0005\u000b\u0015\u0003&\u0019\u0001!\t\u000b\u001d3\u0001\u0019\u0001+\u0011\tm)seT\u0001\ti>\u001cFO]5oOR\tq\u000b\u0005\u0002Y?:\u0011\u0011,\u0018\t\u00035Vi\u0011a\u0017\u0006\u00039F\ta\u0001\u0010:p_Rt\u0014B\u00010\u0016\u0003\u0019\u0001&/\u001a3fM&\u0011\u0001-\u0019\u0002\u0007\'R\u0014\u0018N\\4\u000b\u0005y+\u0002"
    )
  ScalaInlineInfo: length = 0x22 (unknown attribute)
   01 01 00 06 00 2D 00 2E 01 00 0B 00 0C 01 00 0B
   00 1E 01 00 24 00 0C 01 00 24 00 1E 01 00 29 00
   2A 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
