Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/org/scalactic/IsInstanceOfMacroBool.class
  Last modified May 29, 2022; size 6572 bytes
  SHA-256 checksum f161839c266451ef312a966292e0aa572637057f511697b91e0dcb7fa3542afb
  Compiled from "Bool.scala"
public class org.scalactic.IsInstanceOfMacroBool implements org.scalactic.Bool
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #2                          // org/scalactic/IsInstanceOfMacroBool
  super_class: #4                         // java/lang/Object
  interfaces: 1, fields: 7, methods: 22, attributes: 4
Constant pool:
    #1 = Utf8               org/scalactic/IsInstanceOfMacroBool
    #2 = Class              #1            // org/scalactic/IsInstanceOfMacroBool
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               org/scalactic/Bool
    #6 = Class              #5            // org/scalactic/Bool
    #7 = Utf8               Bool.scala
    #8 = Utf8               Lscala/reflect/ScalaSignature;
    #9 = Utf8               bytes
   #10 = Utf8               \u0006\u0005q3QAE\n\u0001\']A\u0001B\t\u0001\u0003\u0002\u0003\u0006I\u0001\n\u0005\tO\u0001\u0011\t\u0011)A\u0005Q!A1\u0007\u0001B\u0001B\u0003%\u0001\u0006\u0003\u00055\u0001\t\u0005\t\u0015!\u00036\u0011!A\u0004A!b\u0001\n\u0003I\u0004\u0002C\u001f\u0001\u0005\u0003\u0005\u000b\u0011\u0002\u001e\t\u000by\u0002A\u0011A \t\u000f\u0019\u0003!\u0019!C\u0001\u000f\"1\u0001\n\u0001Q\u0001\nUBQ!\u0013\u0001\u0005\u0002)CQa\u0013\u0001\u0005\u0002)CQ\u0001\u0014\u0001\u0005\u0002)CQ!\u0014\u0001\u0005\u0002)CQA\u0014\u0001\u0005\u0002=CQ!\u0017\u0001\u0005\u0002=CQA\u0017\u0001\u0005\u0002=CQa\u0017\u0001\u0005\u0002=\u0013Q#S:J]N$\u0018M\\2f\u001f\u001al\u0015m\u0019:p\u0005>|GN\u0003\u0002\u0015+\u0005I1oY1mC\u000e$\u0018n\u0019\u0006\u0002-\u0005\u0019qN]4\u0014\u0007\u0001Ab\u0004\u0005\u0002\u001a95\t!DC\u0001\u001c\u0003\u0015\u00198-\u00197b\u0013\ti\"D\u0001\u0004B]f\u0014VM\u001a\t\u0003?\u0001j\u0011aE\u0005\u0003CM\u0011AAQ8pY\u0006!A.\u001a4u\u0007\u0001\u0001\"!G\u0013\n\u0005\u0019R\"aA!os\u0006Aq\u000e]3sCR|\'\u000f\u0005\u0002*a9\u0011!F\f\t\u0003Wii\u0011\u0001\f\u0006\u0003[\r\na\u0001\u0010:p_Rt\u0014BA\u0018\u001b\u0003\u0019\u0001&/\u001a3fM&\u0011\u0011G\r\u0002\u0007\'R\u0014\u0018N\\4\u000b\u0005=R\u0012!C2mCN\u001ch*Y7f\u0003))\u0007\u0010\u001d:fgNLwN\u001c\t\u00033YJ!a\u000e\u000e\u0003\u000f\t{w\u000e\\3b]\u0006Q\u0001O]3ui&4\u0017.\u001a:\u0016\u0003i\u0002\"aH\u001e\n\u0005q\u001a\"A\u0003)sKR$\u0018NZ5fe\u0006Y\u0001O]3ui&4\u0017.\u001a:!\u0003\u0019a\u0014N\\5u}Q1\u0001)\u0011\"D\t\u0016\u0003\"a\b\u0001\t\u000b\t:\u0001\u0019\u0001\u0013\t\u000b\u001d:\u0001\u0019\u0001\u0015\t\u000bM:\u0001\u0019\u0001\u0015\t\u000bQ:\u0001\u0019A\u001b\t\u000ba:\u0001\u0019\u0001\u001e\u0002\u000bY\fG.^3\u0016\u0003U\naA^1mk\u0016\u0004\u0013!\u0005:bo\u001a\u000b\u0017\u000e\\;sK6+7o]1hKV\t\u0001&\u0001\rsC^tUmZ1uK\u00124\u0015-\u001b7ve\u0016lUm]:bO\u0016\fAD]1x\u001b&$7+\u001a8uK:\u001cWMR1jYV\u0014X-T3tg\u0006<W-A\u0012sC^l\u0015\u000eZ*f]R,gnY3OK\u001e\fG/\u001a3GC&dWO]3NKN\u001c\u0018mZ3\u0002%\u0019\f\u0017\u000e\\;sK6+7o]1hK\u0006\u0013xm]\u000b\u0002!B\u0019\u0011K\u0016\u0013\u000f\u0005I#fBA\u0016T\u0013\u0005Y\u0012BA+\u001b\u0003\u001d\u0001\u0018mY6bO\u0016L!a\u0016-\u0003\u0015%sG-\u001a=fIN+\u0017O\u0003\u0002V5\u0005Ib.Z4bi\u0016$g)Y5mkJ,W*Z:tC\u001e,\u0017I]4t\u0003ui\u0017\u000eZ*f]R,gnY3GC&dWO]3NKN\u001c\u0018mZ3Be\u001e\u001c\u0018\u0001J7jIN+g\u000e^3oG\u0016tUmZ1uK\u00124\u0015-\u001b7ve\u0016lUm]:bO\u0016\f%oZ:
   #11 = Utf8               left
   #12 = Utf8               Ljava/lang/Object;
   #13 = Utf8               operator
   #14 = Utf8               Ljava/lang/String;
   #15 = Utf8               className
   #16 = Utf8               prettifier
   #17 = Utf8               Lorg/scalactic/Prettifier;
   #18 = Utf8               value
   #19 = Utf8               Z
   #20 = Utf8               analysis
   #21 = Utf8               Lscala/collection/immutable/IndexedSeq;
   #22 = Utf8               Lscala/collection/immutable/IndexedSeq<Ljava/lang/String;>;
   #23 = Utf8               bitmap$0
   #24 = Utf8               failureMessage
   #25 = Utf8               ()Ljava/lang/String;
   #26 = Utf8               failureMessage$
   #27 = Utf8               (Lorg/scalactic/Bool;)Ljava/lang/String;
   #28 = NameAndType        #26:#27       // failureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #29 = InterfaceMethodref #6.#28        // org/scalactic/Bool.failureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #30 = Utf8               this
   #31 = Utf8               Lorg/scalactic/IsInstanceOfMacroBool;
   #32 = Utf8               negatedFailureMessage
   #33 = Utf8               negatedFailureMessage$
   #34 = NameAndType        #33:#27       // negatedFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #35 = InterfaceMethodref #6.#34        // org/scalactic/Bool.negatedFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #36 = Utf8               midSentenceFailureMessage
   #37 = Utf8               midSentenceFailureMessage$
   #38 = NameAndType        #37:#27       // midSentenceFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #39 = InterfaceMethodref #6.#38        // org/scalactic/Bool.midSentenceFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #40 = Utf8               midSentenceNegatedFailureMessage
   #41 = Utf8               midSentenceNegatedFailureMessage$
   #42 = NameAndType        #41:#27       // midSentenceNegatedFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #43 = InterfaceMethodref #6.#42        // org/scalactic/Bool.midSentenceNegatedFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
   #44 = Utf8               $amp$amp
   #45 = Utf8               (Lscala/Function0;)Lorg/scalactic/Bool;
   #46 = Utf8               (Lscala/Function0<Lorg/scalactic/Bool;>;)Lorg/scalactic/Bool;
   #47 = Utf8               bool
   #48 = Utf8               $amp$amp$
   #49 = Utf8               (Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #50 = NameAndType        #48:#49       // $amp$amp$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #51 = InterfaceMethodref #6.#50        // org/scalactic/Bool.$amp$amp$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #52 = Utf8               Lscala/Function0;
   #53 = Utf8               $amp
   #54 = Utf8               $amp$
   #55 = NameAndType        #54:#49       // $amp$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #56 = InterfaceMethodref #6.#55        // org/scalactic/Bool.$amp$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #57 = Utf8               $bar$bar
   #58 = Utf8               $bar$bar$
   #59 = NameAndType        #58:#49       // $bar$bar$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #60 = InterfaceMethodref #6.#59        // org/scalactic/Bool.$bar$bar$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #61 = Utf8               $bar
   #62 = Utf8               $bar$
   #63 = NameAndType        #62:#49       // $bar$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #64 = InterfaceMethodref #6.#63        // org/scalactic/Bool.$bar$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
   #65 = Utf8               unary_$bang
   #66 = Utf8               ()Lorg/scalactic/Bool;
   #67 = Utf8               unary_$bang$
   #68 = Utf8               (Lorg/scalactic/Bool;)Lorg/scalactic/Bool;
   #69 = NameAndType        #67:#68       // unary_$bang$:(Lorg/scalactic/Bool;)Lorg/scalactic/Bool;
   #70 = InterfaceMethodref #6.#69        // org/scalactic/Bool.unary_$bang$:(Lorg/scalactic/Bool;)Lorg/scalactic/Bool;
   #71 = Utf8               analysis$lzycompute
   #72 = Utf8               ()Lscala/collection/immutable/IndexedSeq;
   #73 = Utf8               ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/String;>;
   #74 = NameAndType        #23:#19       // bitmap$0:Z
   #75 = Fieldref           #2.#74        // org/scalactic/IsInstanceOfMacroBool.bitmap$0:Z
   #76 = Utf8               analysis$
   #77 = Utf8               (Lorg/scalactic/Bool;)Lscala/collection/immutable/IndexedSeq;
   #78 = NameAndType        #76:#77       // analysis$:(Lorg/scalactic/Bool;)Lscala/collection/immutable/IndexedSeq;
   #79 = InterfaceMethodref #6.#78        // org/scalactic/Bool.analysis$:(Lorg/scalactic/Bool;)Lscala/collection/immutable/IndexedSeq;
   #80 = NameAndType        #20:#21       // analysis:Lscala/collection/immutable/IndexedSeq;
   #81 = Fieldref           #2.#80        // org/scalactic/IsInstanceOfMacroBool.analysis:Lscala/collection/immutable/IndexedSeq;
   #82 = Utf8               java/lang/Throwable
   #83 = Class              #82           // java/lang/Throwable
   #84 = NameAndType        #71:#72       // analysis$lzycompute:()Lscala/collection/immutable/IndexedSeq;
   #85 = Methodref          #2.#84        // org/scalactic/IsInstanceOfMacroBool.analysis$lzycompute:()Lscala/collection/immutable/IndexedSeq;
   #86 = Utf8               scala/collection/immutable/IndexedSeq
   #87 = Class              #86           // scala/collection/immutable/IndexedSeq
   #88 = Utf8               ()Lorg/scalactic/Prettifier;
   #89 = NameAndType        #16:#17       // prettifier:Lorg/scalactic/Prettifier;
   #90 = Fieldref           #2.#89        // org/scalactic/IsInstanceOfMacroBool.prettifier:Lorg/scalactic/Prettifier;
   #91 = Utf8               ()Z
   #92 = NameAndType        #18:#19       // value:Z
   #93 = Fieldref           #2.#92        // org/scalactic/IsInstanceOfMacroBool.value:Z
   #94 = Utf8               rawFailureMessage
   #95 = NameAndType        #13:#14       // operator:Ljava/lang/String;
   #96 = Fieldref           #2.#95        // org/scalactic/IsInstanceOfMacroBool.operator:Ljava/lang/String;
   #97 = Utf8               java/lang/String
   #98 = Class              #97           // java/lang/String
   #99 = Utf8               hashCode
  #100 = Utf8               ()I
  #101 = NameAndType        #99:#100      // hashCode:()I
  #102 = Methodref          #98.#101      // java/lang/String.hashCode:()I
  #103 = Utf8               isInstanceOf
  #104 = String             #103          // isInstanceOf
  #105 = Utf8               equals
  #106 = Utf8               (Ljava/lang/Object;)Z
  #107 = NameAndType        #105:#106     // equals:(Ljava/lang/Object;)Z
  #108 = Methodref          #98.#107      // java/lang/String.equals:(Ljava/lang/Object;)Z
  #109 = Utf8               org/scalactic/Resources$
  #110 = Class              #109          // org/scalactic/Resources$
  #111 = Utf8               MODULE$
  #112 = Utf8               Lorg/scalactic/Resources$;
  #113 = NameAndType        #111:#112     // MODULE$:Lorg/scalactic/Resources$;
  #114 = Fieldref           #110.#113     // org/scalactic/Resources$.MODULE$:Lorg/scalactic/Resources$;
  #115 = Utf8               rawWasNotInstanceOf
  #116 = NameAndType        #115:#25      // rawWasNotInstanceOf:()Ljava/lang/String;
  #117 = Methodref          #110.#116     // org/scalactic/Resources$.rawWasNotInstanceOf:()Ljava/lang/String;
  #118 = Utf8               rawExpressionWasFalse
  #119 = NameAndType        #118:#25      // rawExpressionWasFalse:()Ljava/lang/String;
  #120 = Methodref          #110.#119     // org/scalactic/Resources$.rawExpressionWasFalse:()Ljava/lang/String;
  #121 = Utf8               rawNegatedFailureMessage
  #122 = Utf8               rawWasInstanceOf
  #123 = NameAndType        #122:#25      // rawWasInstanceOf:()Ljava/lang/String;
  #124 = Methodref          #110.#123     // org/scalactic/Resources$.rawWasInstanceOf:()Ljava/lang/String;
  #125 = Utf8               rawExpressionWasTrue
  #126 = NameAndType        #125:#25      // rawExpressionWasTrue:()Ljava/lang/String;
  #127 = Methodref          #110.#126     // org/scalactic/Resources$.rawExpressionWasTrue:()Ljava/lang/String;
  #128 = Utf8               rawMidSentenceFailureMessage
  #129 = NameAndType        #94:#25       // rawFailureMessage:()Ljava/lang/String;
  #130 = Methodref          #2.#129       // org/scalactic/IsInstanceOfMacroBool.rawFailureMessage:()Ljava/lang/String;
  #131 = Utf8               rawMidSentenceNegatedFailureMessage
  #132 = NameAndType        #121:#25      // rawNegatedFailureMessage:()Ljava/lang/String;
  #133 = Methodref          #2.#132       // org/scalactic/IsInstanceOfMacroBool.rawNegatedFailureMessage:()Ljava/lang/String;
  #134 = Utf8               failureMessageArgs
  #135 = Utf8               ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/Object;>;
  #136 = Utf8               scala/package$
  #137 = Class              #136          // scala/package$
  #138 = Utf8               Lscala/package$;
  #139 = NameAndType        #111:#138     // MODULE$:Lscala/package$;
  #140 = Fieldref           #137.#139     // scala/package$.MODULE$:Lscala/package$;
  #141 = Utf8               Vector
  #142 = Utf8               ()Lscala/collection/immutable/Vector$;
  #143 = NameAndType        #141:#142     // Vector:()Lscala/collection/immutable/Vector$;
  #144 = Methodref          #137.#143     // scala/package$.Vector:()Lscala/collection/immutable/Vector$;
  #145 = Utf8               scala/runtime/ScalaRunTime$
  #146 = Class              #145          // scala/runtime/ScalaRunTime$
  #147 = Utf8               Lscala/runtime/ScalaRunTime$;
  #148 = NameAndType        #111:#147     // MODULE$:Lscala/runtime/ScalaRunTime$;
  #149 = Fieldref           #146.#148     // scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
  #150 = NameAndType        #11:#12       // left:Ljava/lang/Object;
  #151 = Fieldref           #2.#150       // org/scalactic/IsInstanceOfMacroBool.left:Ljava/lang/Object;
  #152 = Utf8               org/scalactic/UnquotedString$
  #153 = Class              #152          // org/scalactic/UnquotedString$
  #154 = Utf8               Lorg/scalactic/UnquotedString$;
  #155 = NameAndType        #111:#154     // MODULE$:Lorg/scalactic/UnquotedString$;
  #156 = Fieldref           #153.#155     // org/scalactic/UnquotedString$.MODULE$:Lorg/scalactic/UnquotedString$;
  #157 = NameAndType        #15:#14       // className:Ljava/lang/String;
  #158 = Fieldref           #2.#157       // org/scalactic/IsInstanceOfMacroBool.className:Ljava/lang/String;
  #159 = Utf8               apply
  #160 = Utf8               (Ljava/lang/String;)Lorg/scalactic/UnquotedString;
  #161 = NameAndType        #159:#160     // apply:(Ljava/lang/String;)Lorg/scalactic/UnquotedString;
  #162 = Methodref          #153.#161     // org/scalactic/UnquotedString$.apply:(Ljava/lang/String;)Lorg/scalactic/UnquotedString;
  #163 = Utf8               genericWrapArray
  #164 = Utf8               (Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #165 = NameAndType        #163:#164     // genericWrapArray:(Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #166 = Methodref          #146.#165     // scala/runtime/ScalaRunTime$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
  #167 = Utf8               scala/collection/immutable/Vector$
  #168 = Class              #167          // scala/collection/immutable/Vector$
  #169 = Utf8               (Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #170 = NameAndType        #159:#169     // apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #171 = Methodref          #168.#170     // scala/collection/immutable/Vector$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
  #172 = Utf8               empty
  #173 = Utf8               ()Lscala/collection/immutable/Vector;
  #174 = NameAndType        #172:#173     // empty:()Lscala/collection/immutable/Vector;
  #175 = Methodref          #168.#174     // scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
  #176 = Utf8               negatedFailureMessageArgs
  #177 = Utf8               midSentenceFailureMessageArgs
  #178 = NameAndType        #134:#72      // failureMessageArgs:()Lscala/collection/immutable/IndexedSeq;
  #179 = Methodref          #2.#178       // org/scalactic/IsInstanceOfMacroBool.failureMessageArgs:()Lscala/collection/immutable/IndexedSeq;
  #180 = Utf8               midSentenceNegatedFailureMessageArgs
  #181 = NameAndType        #176:#72      // negatedFailureMessageArgs:()Lscala/collection/immutable/IndexedSeq;
  #182 = Methodref          #2.#181       // org/scalactic/IsInstanceOfMacroBool.negatedFailureMessageArgs:()Lscala/collection/immutable/IndexedSeq;
  #183 = Utf8               <init>
  #184 = Utf8               (Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;ZLorg/scalactic/Prettifier;)V
  #185 = Utf8               expression
  #186 = Utf8               ()V
  #187 = NameAndType        #183:#186     // "<init>":()V
  #188 = Methodref          #4.#187       // java/lang/Object."<init>":()V
  #189 = Utf8               $init$
  #190 = Utf8               (Lorg/scalactic/Bool;)V
  #191 = NameAndType        #189:#190     // $init$:(Lorg/scalactic/Bool;)V
  #192 = InterfaceMethodref #6.#191       // org/scalactic/Bool.$init$:(Lorg/scalactic/Bool;)V
  #193 = Utf8               Signature
  #194 = Utf8               Code
  #195 = Utf8               LineNumberTable
  #196 = Utf8               LocalVariableTable
  #197 = Utf8               MethodParameters
  #198 = Utf8               StackMapTable
  #199 = Utf8               SourceFile
  #200 = Utf8               RuntimeVisibleAnnotations
  #201 = Utf8               ScalaInlineInfo
  #202 = Utf8               ScalaSig
{
  private final java.lang.Object left;
    descriptor: Ljava/lang/Object;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.lang.String operator;
    descriptor: Ljava/lang/String;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final java.lang.String className;
    descriptor: Ljava/lang/String;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final org.scalactic.Prettifier prettifier;
    descriptor: Lorg/scalactic/Prettifier;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final boolean value;
    descriptor: Z
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private scala.collection.immutable.IndexedSeq<java.lang.String> analysis;
    descriptor: Lscala/collection/immutable/IndexedSeq;
    flags: (0x0002) ACC_PRIVATE
    Signature: #22                          // Lscala/collection/immutable/IndexedSeq<Ljava/lang/String;>;

  private volatile boolean bitmap$0;
    descriptor: Z
    flags: (0x0042) ACC_PRIVATE, ACC_VOLATILE

  public java.lang.String failureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #29                 // InterfaceMethod org/scalactic/Bool.failureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String negatedFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #35                 // InterfaceMethod org/scalactic/Bool.negatedFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String midSentenceFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #39                 // InterfaceMethod org/scalactic/Bool.midSentenceFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String midSentenceNegatedFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #43                 // InterfaceMethod org/scalactic/Bool.midSentenceNegatedFailureMessage$:(Lorg/scalactic/Bool;)Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public org.scalactic.Bool $amp$amp(scala.Function0<org.scalactic.Bool>);
    descriptor: (Lscala/Function0;)Lorg/scalactic/Bool;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #51                 // InterfaceMethod org/scalactic/Bool.$amp$amp$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
         5: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
            0       6     1  bool   Lscala/Function0;
    Signature: #46                          // (Lscala/Function0<Lorg/scalactic/Bool;>;)Lorg/scalactic/Bool;
    MethodParameters:
      Name                           Flags
      bool                           final

  public org.scalactic.Bool $amp(scala.Function0<org.scalactic.Bool>);
    descriptor: (Lscala/Function0;)Lorg/scalactic/Bool;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #56                 // InterfaceMethod org/scalactic/Bool.$amp$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
         5: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
            0       6     1  bool   Lscala/Function0;
    Signature: #46                          // (Lscala/Function0<Lorg/scalactic/Bool;>;)Lorg/scalactic/Bool;
    MethodParameters:
      Name                           Flags
      bool                           final

  public org.scalactic.Bool $bar$bar(scala.Function0<org.scalactic.Bool>);
    descriptor: (Lscala/Function0;)Lorg/scalactic/Bool;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #60                 // InterfaceMethod org/scalactic/Bool.$bar$bar$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
         5: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
            0       6     1  bool   Lscala/Function0;
    Signature: #46                          // (Lscala/Function0<Lorg/scalactic/Bool;>;)Lorg/scalactic/Bool;
    MethodParameters:
      Name                           Flags
      bool                           final

  public org.scalactic.Bool $bar(scala.Function0<org.scalactic.Bool>);
    descriptor: (Lscala/Function0;)Lorg/scalactic/Bool;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: invokestatic  #64                 // InterfaceMethod org/scalactic/Bool.$bar$:(Lorg/scalactic/Bool;Lscala/Function0;)Lorg/scalactic/Bool;
         5: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
            0       6     1  bool   Lscala/Function0;
    Signature: #46                          // (Lscala/Function0<Lorg/scalactic/Bool;>;)Lorg/scalactic/Bool;
    MethodParameters:
      Name                           Flags
      bool                           final

  public org.scalactic.Bool unary_$bang();
    descriptor: ()Lorg/scalactic/Bool;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #70                 // InterfaceMethod org/scalactic/Bool.unary_$bang$:(Lorg/scalactic/Bool;)Lorg/scalactic/Bool;
         4: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  private scala.collection.immutable.IndexedSeq<java.lang.String> analysis$lzycompute();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=2, locals=2, args_size=1
         0: aload_0
         1: dup
         2: astore_1
         3: monitorenter
         4: aload_0
         5: getfield      #75                 // Field bitmap$0:Z
         8: ifne          24
        11: aload_0
        12: aload_0
        13: invokestatic  #79                 // InterfaceMethod org/scalactic/Bool.analysis$:(Lorg/scalactic/Bool;)Lscala/collection/immutable/IndexedSeq;
        16: putfield      #81                 // Field analysis:Lscala/collection/immutable/IndexedSeq;
        19: aload_0
        20: iconst_1
        21: putfield      #75                 // Field bitmap$0:Z
        24: aload_1
        25: monitorexit
        26: goto          32
        29: aload_1
        30: monitorexit
        31: athrow
        32: aload_0
        33: getfield      #81                 // Field analysis:Lscala/collection/immutable/IndexedSeq;
        36: areturn
      Exception table:
         from    to  target type
             4    24    29   any
      StackMapTable: number_of_entries = 3
        frame_type = 252 /* append */
          offset_delta = 24
          locals = [ class org/scalactic/IsInstanceOfMacroBool ]
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 2 /* same */
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      37     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
    Signature: #73                          // ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/String;>;

  public scala.collection.immutable.IndexedSeq<java.lang.String> analysis();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #75                 // Field bitmap$0:Z
         4: ifne          14
         7: aload_0
         8: invokespecial #85                 // Method analysis$lzycompute:()Lscala/collection/immutable/IndexedSeq;
        11: goto          18
        14: aload_0
        15: getfield      #81                 // Field analysis:Lscala/collection/immutable/IndexedSeq;
        18: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 14 /* same */
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ class scala/collection/immutable/IndexedSeq ]
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      19     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
    Signature: #73                          // ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/String;>;

  public org.scalactic.Prettifier prettifier();
    descriptor: ()Lorg/scalactic/Prettifier;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #90                 // Field prettifier:Lorg/scalactic/Prettifier;
         4: areturn
      LineNumberTable:
        line 996: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public boolean value();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #93                 // Field value:Z
         4: ireturn
      LineNumberTable:
        line 1001: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String rawFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: aload_0
         1: getfield      #96                 // Field operator:Ljava/lang/String;
         4: astore_2
         5: aload_2
         6: ifnonnull     13
         9: iconst_0
        10: goto          17
        13: aload_2
        14: invokevirtual #102                // Method java/lang/String.hashCode:()I
        17: tableswitch   { // -1221670378 to -1221670378
             -1221670378: 36
                 default: 58
            }
        36: ldc           #104                // String isInstanceOf
        38: aload_2
        39: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
        42: ifeq          55
        45: getstatic     #114                // Field org/scalactic/Resources$.MODULE$:Lorg/scalactic/Resources$;
        48: invokevirtual #117                // Method org/scalactic/Resources$.rawWasNotInstanceOf:()Ljava/lang/String;
        51: astore_1
        52: goto          71
        55: goto          61
        58: goto          61
        61: getstatic     #114                // Field org/scalactic/Resources$.MODULE$:Lorg/scalactic/Resources$;
        64: invokevirtual #120                // Method org/scalactic/Resources$.rawExpressionWasFalse:()Ljava/lang/String;
        67: astore_1
        68: goto          71
        71: aload_1
        72: areturn
      StackMapTable: number_of_entries = 7
        frame_type = 253 /* append */
          offset_delta = 13
          locals = [ top, class java/lang/String ]
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 18 /* same */
        frame_type = 18 /* same */
        frame_type = 2 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class org/scalactic/IsInstanceOfMacroBool, class java/lang/String, class java/lang/String ]
          stack = []
      LineNumberTable:
        line 1010: 0
        line 1011: 36
        line 1010: 55
        line 1012: 61
        line 1010: 71
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      73     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String rawNegatedFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=1
         0: aload_0
         1: getfield      #96                 // Field operator:Ljava/lang/String;
         4: astore_2
         5: aload_2
         6: ifnonnull     13
         9: iconst_0
        10: goto          17
        13: aload_2
        14: invokevirtual #102                // Method java/lang/String.hashCode:()I
        17: tableswitch   { // -1221670378 to -1221670378
             -1221670378: 36
                 default: 58
            }
        36: ldc           #104                // String isInstanceOf
        38: aload_2
        39: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
        42: ifeq          55
        45: getstatic     #114                // Field org/scalactic/Resources$.MODULE$:Lorg/scalactic/Resources$;
        48: invokevirtual #124                // Method org/scalactic/Resources$.rawWasInstanceOf:()Ljava/lang/String;
        51: astore_1
        52: goto          71
        55: goto          61
        58: goto          61
        61: getstatic     #114                // Field org/scalactic/Resources$.MODULE$:Lorg/scalactic/Resources$;
        64: invokevirtual #127                // Method org/scalactic/Resources$.rawExpressionWasTrue:()Ljava/lang/String;
        67: astore_1
        68: goto          71
        71: aload_1
        72: areturn
      StackMapTable: number_of_entries = 7
        frame_type = 253 /* append */
          offset_delta = 13
          locals = [ top, class java/lang/String ]
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 18 /* same */
        frame_type = 18 /* same */
        frame_type = 2 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class org/scalactic/IsInstanceOfMacroBool, class java/lang/String, class java/lang/String ]
          stack = []
      LineNumberTable:
        line 1023: 0
        line 1024: 36
        line 1023: 55
        line 1025: 61
        line 1023: 71
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      73     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String rawMidSentenceFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #130                // Method rawFailureMessage:()Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 1033: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public java.lang.String rawMidSentenceNegatedFailureMessage();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #133                // Method rawNegatedFailureMessage:()Ljava/lang/String;
         4: areturn
      LineNumberTable:
        line 1040: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;

  public scala.collection.immutable.IndexedSeq<java.lang.Object> failureMessageArgs();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=3, args_size=1
         0: aload_0
         1: getfield      #96                 // Field operator:Ljava/lang/String;
         4: astore_2
         5: aload_2
         6: ifnonnull     13
         9: iconst_0
        10: goto          17
        13: aload_2
        14: invokevirtual #102                // Method java/lang/String.hashCode:()I
        17: tableswitch   { // -1221670378 to -1221670378
             -1221670378: 36
                 default: 94
            }
        36: ldc           #104                // String isInstanceOf
        38: aload_2
        39: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
        42: ifeq          91
        45: getstatic     #140                // Field scala/package$.MODULE$:Lscala/package$;
        48: invokevirtual #144                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
        51: getstatic     #149                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
        54: iconst_2
        55: anewarray     #4                  // class java/lang/Object
        58: dup
        59: iconst_0
        60: aload_0
        61: getfield      #151                // Field left:Ljava/lang/Object;
        64: aastore
        65: dup
        66: iconst_1
        67: getstatic     #156                // Field org/scalactic/UnquotedString$.MODULE$:Lorg/scalactic/UnquotedString$;
        70: aload_0
        71: getfield      #158                // Field className:Ljava/lang/String;
        74: invokevirtual #162                // Method org/scalactic/UnquotedString$.apply:(Ljava/lang/String;)Lorg/scalactic/UnquotedString;
        77: aastore
        78: invokevirtual #166                // Method scala/runtime/ScalaRunTime$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
        81: invokevirtual #171                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
        84: checkcast     #87                 // class scala/collection/immutable/IndexedSeq
        87: astore_1
        88: goto          110
        91: goto          97
        94: goto          97
        97: getstatic     #140                // Field scala/package$.MODULE$:Lscala/package$;
       100: invokevirtual #144                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       103: invokevirtual #175                // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
       106: astore_1
       107: goto          110
       110: aload_1
       111: areturn
      StackMapTable: number_of_entries = 7
        frame_type = 253 /* append */
          offset_delta = 13
          locals = [ top, class java/lang/String ]
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 18 /* same */
        frame_type = 54 /* same */
        frame_type = 2 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 12
          locals = [ class org/scalactic/IsInstanceOfMacroBool, class scala/collection/immutable/IndexedSeq, class java/lang/String ]
          stack = []
      LineNumberTable:
        line 1050: 0
        line 1051: 36
        line 1052: 45
        line 1050: 91
        line 1053: 97
        line 1050: 110
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     112     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
    Signature: #135                         // ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/Object;>;

  public scala.collection.immutable.IndexedSeq<java.lang.Object> negatedFailureMessageArgs();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=3, args_size=1
         0: aload_0
         1: getfield      #96                 // Field operator:Ljava/lang/String;
         4: astore_2
         5: aload_2
         6: ifnonnull     13
         9: iconst_0
        10: goto          17
        13: aload_2
        14: invokevirtual #102                // Method java/lang/String.hashCode:()I
        17: tableswitch   { // -1221670378 to -1221670378
             -1221670378: 36
                 default: 94
            }
        36: ldc           #104                // String isInstanceOf
        38: aload_2
        39: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
        42: ifeq          91
        45: getstatic     #140                // Field scala/package$.MODULE$:Lscala/package$;
        48: invokevirtual #144                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
        51: getstatic     #149                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
        54: iconst_2
        55: anewarray     #4                  // class java/lang/Object
        58: dup
        59: iconst_0
        60: aload_0
        61: getfield      #151                // Field left:Ljava/lang/Object;
        64: aastore
        65: dup
        66: iconst_1
        67: getstatic     #156                // Field org/scalactic/UnquotedString$.MODULE$:Lorg/scalactic/UnquotedString$;
        70: aload_0
        71: getfield      #158                // Field className:Ljava/lang/String;
        74: invokevirtual #162                // Method org/scalactic/UnquotedString$.apply:(Ljava/lang/String;)Lorg/scalactic/UnquotedString;
        77: aastore
        78: invokevirtual #166                // Method scala/runtime/ScalaRunTime$.genericWrapArray:(Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
        81: invokevirtual #171                // Method scala/collection/immutable/Vector$.apply:(Lscala/collection/immutable/Seq;)Ljava/lang/Object;
        84: checkcast     #87                 // class scala/collection/immutable/IndexedSeq
        87: astore_1
        88: goto          110
        91: goto          97
        94: goto          97
        97: getstatic     #140                // Field scala/package$.MODULE$:Lscala/package$;
       100: invokevirtual #144                // Method scala/package$.Vector:()Lscala/collection/immutable/Vector$;
       103: invokevirtual #175                // Method scala/collection/immutable/Vector$.empty:()Lscala/collection/immutable/Vector;
       106: astore_1
       107: goto          110
       110: aload_1
       111: areturn
      StackMapTable: number_of_entries = 7
        frame_type = 253 /* append */
          offset_delta = 13
          locals = [ top, class java/lang/String ]
        frame_type = 67 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 18 /* same */
        frame_type = 54 /* same */
        frame_type = 2 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 12
          locals = [ class org/scalactic/IsInstanceOfMacroBool, class scala/collection/immutable/IndexedSeq, class java/lang/String ]
          stack = []
      LineNumberTable:
        line 1064: 0
        line 1065: 36
        line 1066: 45
        line 1064: 91
        line 1067: 97
        line 1064: 110
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     112     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
    Signature: #135                         // ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/Object;>;

  public scala.collection.immutable.IndexedSeq<java.lang.Object> midSentenceFailureMessageArgs();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #179                // Method failureMessageArgs:()Lscala/collection/immutable/IndexedSeq;
         4: areturn
      LineNumberTable:
        line 1075: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
    Signature: #135                         // ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/Object;>;

  public scala.collection.immutable.IndexedSeq<java.lang.Object> midSentenceNegatedFailureMessageArgs();
    descriptor: ()Lscala/collection/immutable/IndexedSeq;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokevirtual #182                // Method negatedFailureMessageArgs:()Lscala/collection/immutable/IndexedSeq;
         4: areturn
      LineNumberTable:
        line 1082: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
    Signature: #135                         // ()Lscala/collection/immutable/IndexedSeq<Ljava/lang/Object;>;

  public org.scalactic.IsInstanceOfMacroBool(java.lang.Object, java.lang.String, java.lang.String, boolean, org.scalactic.Prettifier);
    descriptor: (Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;ZLorg/scalactic/Prettifier;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=6, args_size=6
         0: aload_0
         1: aload_1
         2: putfield      #151                // Field left:Ljava/lang/Object;
         5: aload_0
         6: aload_2
         7: putfield      #96                 // Field operator:Ljava/lang/String;
        10: aload_0
        11: aload_3
        12: putfield      #158                // Field className:Ljava/lang/String;
        15: aload_0
        16: aload         5
        18: putfield      #90                 // Field prettifier:Lorg/scalactic/Prettifier;
        21: aload_0
        22: invokespecial #188                // Method java/lang/Object."<init>":()V
        25: aload_0
        26: invokestatic  #192                // InterfaceMethod org/scalactic/Bool.$init$:(Lorg/scalactic/Bool;)V
        29: aload_0
        30: iload         4
        32: putfield      #93                 // Field value:Z
        35: return
      LineNumberTable:
        line 996: 0
        line 1001: 29
        line 996: 35
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      36     0  this   Lorg/scalactic/IsInstanceOfMacroBool;
            0      36     1  left   Ljava/lang/Object;
            0      36     2 operator   Ljava/lang/String;
            0      36     3 className   Ljava/lang/String;
            0      36     4 expression   Z
            0      36     5 prettifier   Lorg/scalactic/Prettifier;
    MethodParameters:
      Name                           Flags
      left                           final
      operator                       final
      className                      final
      expression                     final
      prettifier                     final
}
SourceFile: "Bool.scala"
RuntimeVisibleAnnotations:
  0: #8(#9=s#10)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005q3QAE\n\u0001\']A\u0001B\t\u0001\u0003\u0002\u0003\u0006I\u0001\n\u0005\tO\u0001\u0011\t\u0011)A\u0005Q!A1\u0007\u0001B\u0001B\u0003%\u0001\u0006\u0003\u00055\u0001\t\u0005\t\u0015!\u00036\u0011!A\u0004A!b\u0001\n\u0003I\u0004\u0002C\u001f\u0001\u0005\u0003\u0005\u000b\u0011\u0002\u001e\t\u000by\u0002A\u0011A \t\u000f\u0019\u0003!\u0019!C\u0001\u000f\"1\u0001\n\u0001Q\u0001\nUBQ!\u0013\u0001\u0005\u0002)CQa\u0013\u0001\u0005\u0002)CQ\u0001\u0014\u0001\u0005\u0002)CQ!\u0014\u0001\u0005\u0002)CQA\u0014\u0001\u0005\u0002=CQ!\u0017\u0001\u0005\u0002=CQA\u0017\u0001\u0005\u0002=CQa\u0017\u0001\u0005\u0002=\u0013Q#S:J]N$\u0018M\\2f\u001f\u001al\u0015m\u0019:p\u0005>|GN\u0003\u0002\u0015+\u0005I1oY1mC\u000e$\u0018n\u0019\u0006\u0002-\u0005\u0019qN]4\u0014\u0007\u0001Ab\u0004\u0005\u0002\u001a95\t!DC\u0001\u001c\u0003\u0015\u00198-\u00197b\u0013\ti\"D\u0001\u0004B]f\u0014VM\u001a\t\u0003?\u0001j\u0011aE\u0005\u0003CM\u0011AAQ8pY\u0006!A.\u001a4u\u0007\u0001\u0001\"!G\u0013\n\u0005\u0019R\"aA!os\u0006Aq\u000e]3sCR|\'\u000f\u0005\u0002*a9\u0011!F\f\t\u0003Wii\u0011\u0001\f\u0006\u0003[\r\na\u0001\u0010:p_Rt\u0014BA\u0018\u001b\u0003\u0019\u0001&/\u001a3fM&\u0011\u0011G\r\u0002\u0007\'R\u0014\u0018N\\4\u000b\u0005=R\u0012!C2mCN\u001ch*Y7f\u0003))\u0007\u0010\u001d:fgNLwN\u001c\t\u00033YJ!a\u000e\u000e\u0003\u000f\t{w\u000e\\3b]\u0006Q\u0001O]3ui&4\u0017.\u001a:\u0016\u0003i\u0002\"aH\u001e\n\u0005q\u001a\"A\u0003)sKR$\u0018NZ5fe\u0006Y\u0001O]3ui&4\u0017.\u001a:!\u0003\u0019a\u0014N\\5u}Q1\u0001)\u0011\"D\t\u0016\u0003\"a\b\u0001\t\u000b\t:\u0001\u0019\u0001\u0013\t\u000b\u001d:\u0001\u0019\u0001\u0015\t\u000bM:\u0001\u0019\u0001\u0015\t\u000bQ:\u0001\u0019A\u001b\t\u000ba:\u0001\u0019\u0001\u001e\u0002\u000bY\fG.^3\u0016\u0003U\naA^1mk\u0016\u0004\u0013!\u0005:bo\u001a\u000b\u0017\u000e\\;sK6+7o]1hKV\t\u0001&\u0001\rsC^tUmZ1uK\u00124\u0015-\u001b7ve\u0016lUm]:bO\u0016\fAD]1x\u001b&$7+\u001a8uK:\u001cWMR1jYV\u0014X-T3tg\u0006<W-A\u0012sC^l\u0015\u000eZ*f]R,gnY3OK\u001e\fG/\u001a3GC&dWO]3NKN\u001c\u0018mZ3\u0002%\u0019\f\u0017\u000e\\;sK6+7o]1hK\u0006\u0013xm]\u000b\u0002!B\u0019\u0011K\u0016\u0013\u000f\u0005I#fBA\u0016T\u0013\u0005Y\u0012BA+\u001b\u0003\u001d\u0001\u0018mY6bO\u0016L!a\u0016-\u0003\u0015%sG-\u001a=fIN+\u0017O\u0003\u0002V5\u0005Ib.Z4bi\u0016$g)Y5mkJ,W*Z:tC\u001e,\u0017I]4t\u0003ui\u0017\u000eZ*f]R,gnY3GC&dWO]3NKN\u001c\u0018mZ3Be\u001e\u001c\u0018\u0001J7jIN+g\u000e^3oG\u0016tUmZ1uK\u00124\u0015-\u001b7ve\u0016lUm]:bO\u0016\f%oZ:"
    )
  ScalaInlineInfo: length = 0x72 (unknown attribute)
   01 00 00 16 00 35 00 2D 00 00 2C 00 2D 00 00 3D
   00 2D 00 00 39 00 2D 00 00 B7 00 B8 00 00 14 00
   48 00 00 47 00 48 01 00 18 00 19 00 00 86 00 48
   00 00 24 00 19 00 00 B1 00 48 00 00 28 00 19 00
   00 B4 00 48 00 00 20 00 19 00 00 B0 00 48 00 00
   10 00 58 00 00 5E 00 19 00 00 80 00 19 00 00 83
   00 19 00 00 79 00 19 00 00 41 00 42 00 00 12 00
   5B 00
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
