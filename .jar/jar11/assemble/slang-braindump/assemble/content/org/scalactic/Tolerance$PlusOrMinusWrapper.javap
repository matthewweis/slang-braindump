Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/scalactic/Tolerance$PlusOrMinusWrapper.class
  Last modified May 29, 2022; size 2008 bytes
  SHA-256 checksum 9edaedefd901ec024f243c2a084d82a4a71c9157631bbfaae752c1dc1f8364cb
  Compiled from "Tolerance.scala"
public final class org.scalactic.Tolerance$PlusOrMinusWrapper<T extends java.lang.Object> extends java.lang.Object
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // org/scalactic/Tolerance$PlusOrMinusWrapper
  super_class: #5                         // java/lang/Object
  interfaces: 0, fields: 2, methods: 2, attributes: 5
Constant pool:
   #1 = Utf8               org/scalactic/Tolerance$PlusOrMinusWrapper
   #2 = Class              #1             // org/scalactic/Tolerance$PlusOrMinusWrapper
   #3 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;
   #4 = Utf8               java/lang/Object
   #5 = Class              #4             // java/lang/Object
   #6 = Utf8               Tolerance.scala
   #7 = Utf8               org/scalactic/Tolerance
   #8 = Class              #7             // org/scalactic/Tolerance
   #9 = Utf8               PlusOrMinusWrapper
  #10 = Utf8               org/scalactic/TripleEqualsSupport$Spread
  #11 = Class              #10            // org/scalactic/TripleEqualsSupport$Spread
  #12 = Utf8               org/scalactic/TripleEqualsSupport
  #13 = Class              #12            // org/scalactic/TripleEqualsSupport
  #14 = Utf8               Spread
  #15 = Utf8               pivot
  #16 = Utf8               Ljava/lang/Object;
  #17 = Utf8               TT;
  #18 = Utf8               evidence$1
  #19 = Utf8               Lscala/math/Numeric;
  #20 = Utf8               Lscala/math/Numeric<TT;>;
  #21 = Utf8               $plus$minus
  #22 = Utf8               (Ljava/lang/Object;)Lorg/scalactic/TripleEqualsSupport$Spread;
  #23 = Utf8               (TT;)Lorg/scalactic/TripleEqualsSupport$Spread<TT;>;
  #24 = Utf8               tolerance
  #25 = Utf8               scala/Predef$
  #26 = Class              #25            // scala/Predef$
  #27 = Utf8               MODULE$
  #28 = Utf8               Lscala/Predef$;
  #29 = NameAndType        #27:#28        // MODULE$:Lscala/Predef$;
  #30 = Fieldref           #26.#29        // scala/Predef$.MODULE$:Lscala/Predef$;
  #31 = NameAndType        #18:#19        // evidence$1:Lscala/math/Numeric;
  #32 = Fieldref           #2.#31         // org/scalactic/Tolerance$PlusOrMinusWrapper.evidence$1:Lscala/math/Numeric;
  #33 = Utf8               implicitly
  #34 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #35 = NameAndType        #33:#34        // implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
  #36 = Methodref          #26.#35        // scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
  #37 = Utf8               scala/math/Numeric
  #38 = Class              #37            // scala/math/Numeric
  #39 = Utf8               zero
  #40 = Utf8               ()Ljava/lang/Object;
  #41 = NameAndType        #39:#40        // zero:()Ljava/lang/Object;
  #42 = InterfaceMethodref #38.#41        // scala/math/Numeric.zero:()Ljava/lang/Object;
  #43 = Utf8               lteq
  #44 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z
  #45 = NameAndType        #43:#44        // lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #46 = InterfaceMethodref #38.#45        // scala/math/Numeric.lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #47 = Utf8               java/lang/IllegalArgumentException
  #48 = Class              #47            // java/lang/IllegalArgumentException
  #49 = Utf8               java/lang/StringBuilder
  #50 = Class              #49            // java/lang/StringBuilder
  #51 = Integer            71
  #52 = Utf8               <init>
  #53 = Utf8               (I)V
  #54 = NameAndType        #52:#53        // "<init>":(I)V
  #55 = Methodref          #50.#54        // java/lang/StringBuilder."<init>":(I)V
  #56 = Utf8               toString
  #57 = Utf8               ()Ljava/lang/String;
  #58 = NameAndType        #56:#57        // toString:()Ljava/lang/String;
  #59 = Methodref          #5.#58         // java/lang/Object.toString:()Ljava/lang/String;
  #60 = Utf8               append
  #61 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #62 = NameAndType        #60:#61        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #63 = Methodref          #50.#62        // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #64 = Utf8                passed to +- was zero or negative. Must be a positive non-zero number.
  #65 = String             #64            //  passed to +- was zero or negative. Must be a positive non-zero number.
  #66 = Methodref          #50.#58        // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #67 = Utf8               (Ljava/lang/String;)V
  #68 = NameAndType        #52:#67        // "<init>":(Ljava/lang/String;)V
  #69 = Methodref          #48.#68        // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
  #70 = NameAndType        #15:#16        // pivot:Ljava/lang/Object;
  #71 = Fieldref           #2.#70         // org/scalactic/Tolerance$PlusOrMinusWrapper.pivot:Ljava/lang/Object;
  #72 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Numeric;)V
  #73 = NameAndType        #52:#72        // "<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Numeric;)V
  #74 = Methodref          #11.#73        // org/scalactic/TripleEqualsSupport$Spread."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Numeric;)V
  #75 = Utf8               numeric
  #76 = Utf8               this
  #77 = Utf8               Lorg/scalactic/Tolerance$PlusOrMinusWrapper;
  #78 = Utf8               (Lorg/scalactic/Tolerance;Ljava/lang/Object;Lscala/math/Numeric;)V
  #79 = Utf8               (TT;Lscala/math/Numeric<TT;>;)V
  #80 = Utf8               $outer
  #81 = Utf8               ()V
  #82 = NameAndType        #52:#81        // "<init>":()V
  #83 = Methodref          #5.#82         // java/lang/Object."<init>":()V
  #84 = Utf8               Lorg/scalactic/Tolerance;
  #85 = Utf8               Signature
  #86 = Utf8               Code
  #87 = Utf8               StackMapTable
  #88 = Utf8               LineNumberTable
  #89 = Utf8               LocalVariableTable
  #90 = Utf8               MethodParameters
  #91 = Utf8               InnerClasses
  #92 = Utf8               SourceFile
  #93 = Utf8               ScalaInlineInfo
  #94 = Utf8               Scala
{
  private final T pivot;
    descriptor: Ljava/lang/Object;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #17                          // TT;

  private final scala.math.Numeric<T> evidence$1;
    descriptor: Lscala/math/Numeric;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #20                          // Lscala/math/Numeric<TT;>;

  public org.scalactic.TripleEqualsSupport$Spread<T> $plus$minus(T);
    descriptor: (Ljava/lang/Object;)Lorg/scalactic/TripleEqualsSupport$Spread;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=3, args_size=2
         0: getstatic     #30                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
         3: aload_0
         4: getfield      #32                 // Field evidence$1:Lscala/math/Numeric;
         7: invokevirtual #36                 // Method scala/Predef$.implicitly:(Ljava/lang/Object;)Ljava/lang/Object;
        10: checkcast     #38                 // class scala/math/Numeric
        13: astore_2
        14: aload_2
        15: aload_1
        16: aload_2
        17: invokeinterface #42,  1           // InterfaceMethod scala/math/Numeric.zero:()Ljava/lang/Object;
        22: invokeinterface #46,  3           // InterfaceMethod scala/math/Numeric.lteq:(Ljava/lang/Object;Ljava/lang/Object;)Z
        27: ifeq          62
        30: new           #48                 // class java/lang/IllegalArgumentException
        33: dup
        34: new           #50                 // class java/lang/StringBuilder
        37: dup
        38: ldc           #51                 // int 71
        40: invokespecial #55                 // Method java/lang/StringBuilder."<init>":(I)V
        43: aload_1
        44: invokevirtual #59                 // Method java/lang/Object.toString:()Ljava/lang/String;
        47: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        50: ldc           #65                 // String  passed to +- was zero or negative. Must be a positive non-zero number.
        52: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        55: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        58: invokespecial #69                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        61: athrow
        62: new           #11                 // class org/scalactic/TripleEqualsSupport$Spread
        65: dup
        66: aload_0
        67: getfield      #71                 // Field pivot:Ljava/lang/Object;
        70: aload_1
        71: aload_0
        72: getfield      #32                 // Field evidence$1:Lscala/math/Numeric;
        75: invokespecial #74                 // Method org/scalactic/TripleEqualsSupport$Spread."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/math/Numeric;)V
        78: areturn
      StackMapTable: number_of_entries = 1
        frame_type = 252 /* append */
          offset_delta = 62
          locals = [ class scala/math/Numeric ]
      LineNumberTable:
        line 53: 0
        line 54: 14
        line 55: 30
        line 57: 62
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           14      64     2 numeric   Lscala/math/Numeric;
            0      79     0  this   Lorg/scalactic/Tolerance$PlusOrMinusWrapper;
            0      79     1 tolerance   Ljava/lang/Object;
    Signature: #23                          // (TT;)Lorg/scalactic/TripleEqualsSupport$Spread<TT;>;
    MethodParameters:
      Name                           Flags
      tolerance                      final

  public org.scalactic.Tolerance$PlusOrMinusWrapper(T, scala.math.Numeric<T>);
    descriptor: (Lorg/scalactic/Tolerance;Ljava/lang/Object;Lscala/math/Numeric;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=4, args_size=4
         0: aload_0
         1: aload_2
         2: putfield      #71                 // Field pivot:Ljava/lang/Object;
         5: aload_0
         6: aload_3
         7: putfield      #32                 // Field evidence$1:Lscala/math/Numeric;
        10: aload_0
        11: invokespecial #83                 // Method java/lang/Object."<init>":()V
        14: return
      LineNumberTable:
        line 44: 0
        line 61: 10
        line 44: 14
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lorg/scalactic/Tolerance$PlusOrMinusWrapper;
            0      15     1 $outer   Lorg/scalactic/Tolerance;
            0      15     2 pivot   Ljava/lang/Object;
            0      15     3 evidence$1   Lscala/math/Numeric;
    Signature: #79                          // (TT;Lscala/math/Numeric<TT;>;)V
    MethodParameters:
      Name                           Flags
      $outer                         final synthetic
      pivot                          final
      evidence$1                     final
}
InnerClasses:
  public final #9= #2 of #8;              // PlusOrMinusWrapper=class org/scalactic/Tolerance$PlusOrMinusWrapper of class org/scalactic/Tolerance
  public static final #14= #11 of #13;    // Spread=class org/scalactic/TripleEqualsSupport$Spread of class org/scalactic/TripleEqualsSupport
Signature: #3                           // <T:Ljava/lang/Object;>Ljava/lang/Object;
SourceFile: "Tolerance.scala"
  ScalaInlineInfo: length = 0xE (unknown attribute)
   01 01 00 02 00 15 00 16 01 00 34 00 4E 01
  Scala: length = 0x0 (unknown attribute)

