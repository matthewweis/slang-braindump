Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/apache/commons/io/filefilter/MagicNumberFileFilter.class
  Last modified May 29, 2022; size 3192 bytes
  SHA-256 checksum bcc8763ee8fd15f235944572ffed0b883b18e986001724a4c18fc308d887b03e
  Compiled from "MagicNumberFileFilter.java"
public class org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
  minor version: 0
  major version: 52
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #38                         // org/apache/commons/io/filefilter/MagicNumberFileFilter
  super_class: #39                        // org/apache/commons/io/filefilter/AbstractFileFilter
  interfaces: 1, fields: 3, methods: 6, attributes: 1
Constant pool:
    #1 = Methodref          #38.#85       // org/apache/commons/io/filefilter/MagicNumberFileFilter."<init>":([BJ)V
    #2 = Methodref          #38.#86       // org/apache/commons/io/filefilter/MagicNumberFileFilter."<init>":(Ljava/lang/String;J)V
    #3 = Methodref          #39.#87       // org/apache/commons/io/filefilter/AbstractFileFilter."<init>":()V
    #4 = Class              #88           // java/lang/IllegalArgumentException
    #5 = String             #89           // The magic number cannot be null
    #6 = Methodref          #4.#90        // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
    #7 = Methodref          #32.#91       // java/lang/String.isEmpty:()Z
    #8 = String             #92           // The magic number must contain at least one byte
    #9 = String             #93           // The offset cannot be negative
   #10 = Methodref          #94.#95       // java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
   #11 = Methodref          #32.#96       // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
   #12 = Fieldref           #38.#97       // org/apache/commons/io/filefilter/MagicNumberFileFilter.magicNumbers:[B
   #13 = Fieldref           #38.#98       // org/apache/commons/io/filefilter/MagicNumberFileFilter.byteOffset:J
   #14 = Methodref          #99.#100      // java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
   #15 = Methodref          #101.#102     // java/io/File.isFile:()Z
   #16 = Methodref          #101.#103     // java/io/File.canRead:()Z
   #17 = Class              #104          // java/io/RandomAccessFile
   #18 = String             #105          // r
   #19 = Methodref          #17.#106      // java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
   #20 = Methodref          #17.#107      // java/io/RandomAccessFile.seek:(J)V
   #21 = Methodref          #17.#108      // java/io/RandomAccessFile.read:([B)I
   #22 = Methodref          #17.#109      // java/io/RandomAccessFile.close:()V
   #23 = Class              #110          // java/lang/Throwable
   #24 = Methodref          #23.#111      // java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
   #25 = Methodref          #112.#113     // java/util/Arrays.equals:([B[B)Z
   #26 = Class              #114          // java/io/IOException
   #27 = Class              #115          // java/lang/StringBuilder
   #28 = Methodref          #39.#116      // org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;
   #29 = Methodref          #27.#90       // java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
   #30 = String             #117          // (
   #31 = Methodref          #27.#118      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #32 = Class              #119          // java/lang/String
   #33 = Methodref          #32.#120      // java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
   #34 = String             #121          // ,
   #35 = Methodref          #27.#122      // java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   #36 = String             #123          // )
   #37 = Methodref          #27.#116      // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #38 = Class              #124          // org/apache/commons/io/filefilter/MagicNumberFileFilter
   #39 = Class              #125          // org/apache/commons/io/filefilter/AbstractFileFilter
   #40 = Class              #126          // java/io/Serializable
   #41 = Utf8               serialVersionUID
   #42 = Utf8               J
   #43 = Utf8               ConstantValue
   #44 = Long               -547733176983104172l
   #46 = Utf8               magicNumbers
   #47 = Utf8               [B
   #48 = Utf8               byteOffset
   #49 = Utf8               <init>
   #50 = Utf8               ([B)V
   #51 = Utf8               Code
   #52 = Utf8               LineNumberTable
   #53 = Utf8               LocalVariableTable
   #54 = Utf8               this
   #55 = Utf8               Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
   #56 = Utf8               magicNumber
   #57 = Utf8               (Ljava/lang/String;)V
   #58 = Utf8               Ljava/lang/String;
   #59 = Utf8               (Ljava/lang/String;J)V
   #60 = Utf8               offset
   #61 = Utf8               StackMapTable
   #62 = Class              #124          // org/apache/commons/io/filefilter/MagicNumberFileFilter
   #63 = Class              #119          // java/lang/String
   #64 = Utf8               ([BJ)V
   #65 = Class              #47           // "[B"
   #66 = Utf8               accept
   #67 = Utf8               (Ljava/io/File;)Z
   #68 = Utf8               fileBytes
   #69 = Utf8               read
   #70 = Utf8               I
   #71 = Utf8               randomAccessFile
   #72 = Utf8               Ljava/io/RandomAccessFile;
   #73 = Utf8               file
   #74 = Utf8               Ljava/io/File;
   #75 = Class              #127          // java/io/File
   #76 = Class              #104          // java/io/RandomAccessFile
   #77 = Class              #110          // java/lang/Throwable
   #78 = Class              #114          // java/io/IOException
   #79 = Utf8               toString
   #80 = Utf8               ()Ljava/lang/String;
   #81 = Utf8               builder
   #82 = Utf8               Ljava/lang/StringBuilder;
   #83 = Utf8               SourceFile
   #84 = Utf8               MagicNumberFileFilter.java
   #85 = NameAndType        #49:#64       // "<init>":([BJ)V
   #86 = NameAndType        #49:#59       // "<init>":(Ljava/lang/String;J)V
   #87 = NameAndType        #49:#128      // "<init>":()V
   #88 = Utf8               java/lang/IllegalArgumentException
   #89 = Utf8               The magic number cannot be null
   #90 = NameAndType        #49:#57       // "<init>":(Ljava/lang/String;)V
   #91 = NameAndType        #129:#130     // isEmpty:()Z
   #92 = Utf8               The magic number must contain at least one byte
   #93 = Utf8               The offset cannot be negative
   #94 = Class              #131          // java/nio/charset/Charset
   #95 = NameAndType        #132:#133     // defaultCharset:()Ljava/nio/charset/Charset;
   #96 = NameAndType        #134:#135     // getBytes:(Ljava/nio/charset/Charset;)[B
   #97 = NameAndType        #46:#47       // magicNumbers:[B
   #98 = NameAndType        #48:#42       // byteOffset:J
   #99 = Class              #136          // java/lang/System
  #100 = NameAndType        #137:#138     // arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
  #101 = Class              #127          // java/io/File
  #102 = NameAndType        #139:#130     // isFile:()Z
  #103 = NameAndType        #140:#130     // canRead:()Z
  #104 = Utf8               java/io/RandomAccessFile
  #105 = Utf8               r
  #106 = NameAndType        #49:#141      // "<init>":(Ljava/io/File;Ljava/lang/String;)V
  #107 = NameAndType        #142:#143     // seek:(J)V
  #108 = NameAndType        #69:#144      // read:([B)I
  #109 = NameAndType        #145:#128     // close:()V
  #110 = Utf8               java/lang/Throwable
  #111 = NameAndType        #146:#147     // addSuppressed:(Ljava/lang/Throwable;)V
  #112 = Class              #148          // java/util/Arrays
  #113 = NameAndType        #149:#150     // equals:([B[B)Z
  #114 = Utf8               java/io/IOException
  #115 = Utf8               java/lang/StringBuilder
  #116 = NameAndType        #79:#80       // toString:()Ljava/lang/String;
  #117 = Utf8               (
  #118 = NameAndType        #151:#152     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #119 = Utf8               java/lang/String
  #120 = NameAndType        #49:#153      // "<init>":([BLjava/nio/charset/Charset;)V
  #121 = Utf8               ,
  #122 = NameAndType        #151:#154     // append:(J)Ljava/lang/StringBuilder;
  #123 = Utf8               )
  #124 = Utf8               org/apache/commons/io/filefilter/MagicNumberFileFilter
  #125 = Utf8               org/apache/commons/io/filefilter/AbstractFileFilter
  #126 = Utf8               java/io/Serializable
  #127 = Utf8               java/io/File
  #128 = Utf8               ()V
  #129 = Utf8               isEmpty
  #130 = Utf8               ()Z
  #131 = Utf8               java/nio/charset/Charset
  #132 = Utf8               defaultCharset
  #133 = Utf8               ()Ljava/nio/charset/Charset;
  #134 = Utf8               getBytes
  #135 = Utf8               (Ljava/nio/charset/Charset;)[B
  #136 = Utf8               java/lang/System
  #137 = Utf8               arraycopy
  #138 = Utf8               (Ljava/lang/Object;ILjava/lang/Object;II)V
  #139 = Utf8               isFile
  #140 = Utf8               canRead
  #141 = Utf8               (Ljava/io/File;Ljava/lang/String;)V
  #142 = Utf8               seek
  #143 = Utf8               (J)V
  #144 = Utf8               ([B)I
  #145 = Utf8               close
  #146 = Utf8               addSuppressed
  #147 = Utf8               (Ljava/lang/Throwable;)V
  #148 = Utf8               java/util/Arrays
  #149 = Utf8               equals
  #150 = Utf8               ([B[B)Z
  #151 = Utf8               append
  #152 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #153 = Utf8               ([BLjava/nio/charset/Charset;)V
  #154 = Utf8               (J)Ljava/lang/StringBuilder;
{
  private static final long serialVersionUID;
    descriptor: J
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    ConstantValue: long -547733176983104172l

  private final byte[] magicNumbers;
    descriptor: [B
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  private final long byteOffset;
    descriptor: J
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[]);
    descriptor: ([B)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: lconst_0
         3: invokespecial #1                  // Method "<init>":([BJ)V
         6: return
      LineNumberTable:
        line 112: 0
        line 113: 6
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
            0       7     1 magicNumber   [B

  public org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=2, args_size=2
         0: aload_0
         1: aload_1
         2: lconst_0
         3: invokespecial #2                  // Method "<init>":(Ljava/lang/String;J)V
         6: return
      LineNumberTable:
        line 137: 0
        line 138: 6
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       7     0  this   Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
            0       7     1 magicNumber   Ljava/lang/String;

  public org.apache.commons.io.filefilter.MagicNumberFileFilter(java.lang.String, long);
    descriptor: (Ljava/lang/String;J)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=3
         0: aload_0
         1: invokespecial #3                  // Method org/apache/commons/io/filefilter/AbstractFileFilter."<init>":()V
         4: aload_1
         5: ifnonnull     18
         8: new           #4                  // class java/lang/IllegalArgumentException
        11: dup
        12: ldc           #5                  // String The magic number cannot be null
        14: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        17: athrow
        18: aload_1
        19: invokevirtual #7                  // Method java/lang/String.isEmpty:()Z
        22: ifeq          35
        25: new           #4                  // class java/lang/IllegalArgumentException
        28: dup
        29: ldc           #8                  // String The magic number must contain at least one byte
        31: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        34: athrow
        35: lload_2
        36: lconst_0
        37: lcmp
        38: ifge          51
        41: new           #4                  // class java/lang/IllegalArgumentException
        44: dup
        45: ldc           #9                  // String The offset cannot be negative
        47: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        50: athrow
        51: aload_0
        52: aload_1
        53: invokestatic  #10                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
        56: invokevirtual #11                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
        59: putfield      #12                 // Field magicNumbers:[B
        62: aload_0
        63: lload_2
        64: putfield      #13                 // Field byteOffset:J
        67: return
      LineNumberTable:
        line 160: 0
        line 161: 4
        line 162: 8
        line 164: 18
        line 165: 25
        line 167: 35
        line 168: 41
        line 171: 51
        line 173: 62
        line 174: 67
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      68     0  this   Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
            0      68     1 magicNumber   Ljava/lang/String;
            0      68     2 offset   J
      StackMapTable: number_of_entries = 3
        frame_type = 255 /* full_frame */
          offset_delta = 18
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class java/lang/String, long ]
          stack = []
        frame_type = 16 /* same */
        frame_type = 15 /* same */

  public org.apache.commons.io.filefilter.MagicNumberFileFilter(byte[], long);
    descriptor: ([BJ)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=4, args_size=3
         0: aload_0
         1: invokespecial #3                  // Method org/apache/commons/io/filefilter/AbstractFileFilter."<init>":()V
         4: aload_1
         5: ifnonnull     18
         8: new           #4                  // class java/lang/IllegalArgumentException
        11: dup
        12: ldc           #5                  // String The magic number cannot be null
        14: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        17: athrow
        18: aload_1
        19: arraylength
        20: ifne          33
        23: new           #4                  // class java/lang/IllegalArgumentException
        26: dup
        27: ldc           #8                  // String The magic number must contain at least one byte
        29: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        32: athrow
        33: lload_2
        34: lconst_0
        35: lcmp
        36: ifge          49
        39: new           #4                  // class java/lang/IllegalArgumentException
        42: dup
        43: ldc           #9                  // String The offset cannot be negative
        45: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        48: athrow
        49: aload_0
        50: aload_1
        51: arraylength
        52: newarray       byte
        54: putfield      #12                 // Field magicNumbers:[B
        57: aload_1
        58: iconst_0
        59: aload_0
        60: getfield      #12                 // Field magicNumbers:[B
        63: iconst_0
        64: aload_1
        65: arraylength
        66: invokestatic  #14                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
        69: aload_0
        70: lload_2
        71: putfield      #13                 // Field byteOffset:J
        74: return
      LineNumberTable:
        line 200: 0
        line 201: 4
        line 202: 8
        line 204: 18
        line 205: 23
        line 207: 33
        line 208: 39
        line 211: 49
        line 212: 57
        line 213: 69
        line 214: 74
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      75     0  this   Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
            0      75     1 magicNumber   [B
            0      75     2 offset   J
      StackMapTable: number_of_entries = 3
        frame_type = 255 /* full_frame */
          offset_delta = 18
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class "[B", long ]
          stack = []
        frame_type = 14 /* same */
        frame_type = 15 /* same */

  public boolean accept(java.io.File);
    descriptor: (Ljava/io/File;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=10, args_size=2
         0: aload_1
         1: ifnull        190
         4: aload_1
         5: invokevirtual #15                 // Method java/io/File.isFile:()Z
         8: ifeq          190
        11: aload_1
        12: invokevirtual #16                 // Method java/io/File.canRead:()Z
        15: ifeq          190
        18: new           #17                 // class java/io/RandomAccessFile
        21: dup
        22: aload_1
        23: ldc           #18                 // String r
        25: invokespecial #19                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
        28: astore_2
        29: aconst_null
        30: astore_3
        31: aload_0
        32: getfield      #12                 // Field magicNumbers:[B
        35: arraylength
        36: newarray       byte
        38: astore        4
        40: aload_2
        41: aload_0
        42: getfield      #13                 // Field byteOffset:J
        45: invokevirtual #20                 // Method java/io/RandomAccessFile.seek:(J)V
        48: aload_2
        49: aload         4
        51: invokevirtual #21                 // Method java/io/RandomAccessFile.read:([B)I
        54: istore        5
        56: iload         5
        58: aload_0
        59: getfield      #12                 // Field magicNumbers:[B
        62: arraylength
        63: if_icmpeq     102
        66: iconst_0
        67: istore        6
        69: aload_2
        70: ifnull        99
        73: aload_3
        74: ifnull        95
        77: aload_2
        78: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V
        81: goto          99
        84: astore        7
        86: aload_3
        87: aload         7
        89: invokevirtual #24                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
        92: goto          99
        95: aload_2
        96: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V
        99: iload         6
       101: ireturn
       102: aload_0
       103: getfield      #12                 // Field magicNumbers:[B
       106: aload         4
       108: invokestatic  #25                 // Method java/util/Arrays.equals:([B[B)Z
       111: istore        6
       113: aload_2
       114: ifnull        143
       117: aload_3
       118: ifnull        139
       121: aload_2
       122: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V
       125: goto          143
       128: astore        7
       130: aload_3
       131: aload         7
       133: invokevirtual #24                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
       136: goto          143
       139: aload_2
       140: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V
       143: iload         6
       145: ireturn
       146: astore        4
       148: aload         4
       150: astore_3
       151: aload         4
       153: athrow
       154: astore        8
       156: aload_2
       157: ifnull        186
       160: aload_3
       161: ifnull        182
       164: aload_2
       165: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V
       168: goto          186
       171: astore        9
       173: aload_3
       174: aload         9
       176: invokevirtual #24                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
       179: goto          186
       182: aload_2
       183: invokevirtual #22                 // Method java/io/RandomAccessFile.close:()V
       186: aload         8
       188: athrow
       189: astore_2
       190: iconst_0
       191: ireturn
      Exception table:
         from    to  target type
            77    81    84   Class java/lang/Throwable
           121   125   128   Class java/lang/Throwable
            31    69   146   Class java/lang/Throwable
           102   113   146   Class java/lang/Throwable
            31    69   154   any
           102   113   154   any
           164   168   171   Class java/lang/Throwable
           146   156   154   any
            18    99   189   Class java/io/IOException
           102   143   189   Class java/io/IOException
           146   189   189   Class java/io/IOException
      LineNumberTable:
        line 234: 0
        line 236: 18
        line 237: 31
        line 238: 40
        line 239: 48
        line 240: 56
        line 241: 66
        line 244: 69
        line 241: 99
        line 243: 102
        line 244: 113
        line 243: 143
        line 236: 146
        line 244: 154
        line 246: 189
        line 251: 190
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           40     106     4 fileBytes   [B
           56      90     5  read   I
           29     160     2 randomAccessFile   Ljava/io/RandomAccessFile;
            0     192     0  this   Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
            0     192     1  file   Ljava/io/File;
      StackMapTable: number_of_entries = 14
        frame_type = 255 /* full_frame */
          offset_delta = 84
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class java/io/File, class java/io/RandomAccessFile, class java/lang/Throwable, class "[B", int, int ]
          stack = [ class java/lang/Throwable ]
        frame_type = 10 /* same */
        frame_type = 3 /* same */
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 255 /* full_frame */
          offset_delta = 25
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class java/io/File, class java/io/RandomAccessFile, class java/lang/Throwable, class "[B", int, int ]
          stack = [ class java/lang/Throwable ]
        frame_type = 10 /* same */
        frame_type = 3 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class java/io/File, class java/io/RandomAccessFile, class java/lang/Throwable ]
          stack = [ class java/lang/Throwable ]
        frame_type = 71 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 16
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class java/io/File, class java/io/RandomAccessFile, class java/lang/Throwable, top, top, top, top, class java/lang/Throwable ]
          stack = [ class java/lang/Throwable ]
        frame_type = 10 /* same */
        frame_type = 3 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class org/apache/commons/io/filefilter/MagicNumberFileFilter, class java/io/File ]
          stack = [ class java/io/IOException ]
        frame_type = 0 /* same */

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=1
         0: new           #27                 // class java/lang/StringBuilder
         3: dup
         4: aload_0
         5: invokespecial #28                 // Method org/apache/commons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;
         8: invokespecial #29                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
        11: astore_1
        12: aload_1
        13: ldc           #30                 // String (
        15: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        18: pop
        19: aload_1
        20: new           #32                 // class java/lang/String
        23: dup
        24: aload_0
        25: getfield      #12                 // Field magicNumbers:[B
        28: invokestatic  #10                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
        31: invokespecial #33                 // Method java/lang/String."<init>":([BLjava/nio/charset/Charset;)V
        34: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        37: pop
        38: aload_1
        39: ldc           #34                 // String ,
        41: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        44: pop
        45: aload_1
        46: aload_0
        47: getfield      #13                 // Field byteOffset:J
        50: invokevirtual #35                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
        53: pop
        54: aload_1
        55: ldc           #36                 // String )
        57: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        60: pop
        61: aload_1
        62: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        65: areturn
      LineNumberTable:
        line 262: 0
        line 263: 12
        line 264: 19
        line 266: 38
        line 267: 45
        line 268: 54
        line 269: 61
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      66     0  this   Lorg/apache/commons/io/filefilter/MagicNumberFileFilter;
           12      54     1 builder   Ljava/lang/StringBuilder;
}
SourceFile: "MagicNumberFileFilter.java"
