Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.class
  Last modified May 29, 2022; size 1544 bytes
  SHA-256 checksum 5c25be1b4b6e4619a0d81d73b71cee758ebf260a93a55e8120db6c75703603d9
  Compiled from "AtomicSafeInitializer.java"
public abstract class org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T extends java.lang.Object> extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T>
  minor version: 0
  major version: 52
  flags: (0x0421) ACC_PUBLIC, ACC_SUPER, ACC_ABSTRACT
  this_class: #10                         // org/apache/commons/lang3/concurrent/AtomicSafeInitializer
  super_class: #11                        // java/lang/Object
  interfaces: 1, fields: 2, methods: 3, attributes: 2
Constant pool:
   #1 = Methodref          #11.#41        // java/lang/Object."<init>":()V
   #2 = Class              #42            // java/util/concurrent/atomic/AtomicReference
   #3 = Methodref          #2.#41         // java/util/concurrent/atomic/AtomicReference."<init>":()V
   #4 = Fieldref           #10.#43        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.factory:Ljava/util/concurrent/atomic/AtomicReference;
   #5 = Fieldref           #10.#44        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.reference:Ljava/util/concurrent/atomic/AtomicReference;
   #6 = Methodref          #2.#45         // java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
   #7 = Methodref          #2.#46         // java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
   #8 = Methodref          #10.#47        // org/apache/commons/lang3/concurrent/AtomicSafeInitializer.initialize:()Ljava/lang/Object;
   #9 = Methodref          #2.#48         // java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
  #10 = Class              #49            // org/apache/commons/lang3/concurrent/AtomicSafeInitializer
  #11 = Class              #50            // java/lang/Object
  #12 = Class              #51            // org/apache/commons/lang3/concurrent/ConcurrentInitializer
  #13 = Utf8               factory
  #14 = Utf8               Ljava/util/concurrent/atomic/AtomicReference;
  #15 = Utf8               Signature
  #16 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;
  #17 = Utf8               reference
  #18 = Utf8               Ljava/util/concurrent/atomic/AtomicReference<TT;>;
  #19 = Utf8               <init>
  #20 = Utf8               ()V
  #21 = Utf8               Code
  #22 = Utf8               LineNumberTable
  #23 = Utf8               LocalVariableTable
  #24 = Utf8               this
  #25 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;
  #26 = Utf8               LocalVariableTypeTable
  #27 = Utf8               Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;
  #28 = Utf8               get
  #29 = Utf8               ()Ljava/lang/Object;
  #30 = Utf8               result
  #31 = Utf8               Ljava/lang/Object;
  #32 = Utf8               TT;
  #33 = Utf8               StackMapTable
  #34 = Utf8               Exceptions
  #35 = Class              #52            // org/apache/commons/lang3/concurrent/ConcurrentException
  #36 = Utf8               ()TT;
  #37 = Utf8               initialize
  #38 = Utf8               <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;
  #39 = Utf8               SourceFile
  #40 = Utf8               AtomicSafeInitializer.java
  #41 = NameAndType        #19:#20        // "<init>":()V
  #42 = Utf8               java/util/concurrent/atomic/AtomicReference
  #43 = NameAndType        #13:#14        // factory:Ljava/util/concurrent/atomic/AtomicReference;
  #44 = NameAndType        #17:#14        // reference:Ljava/util/concurrent/atomic/AtomicReference;
  #45 = NameAndType        #28:#29        // get:()Ljava/lang/Object;
  #46 = NameAndType        #53:#54        // compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
  #47 = NameAndType        #37:#29        // initialize:()Ljava/lang/Object;
  #48 = NameAndType        #55:#56        // set:(Ljava/lang/Object;)V
  #49 = Utf8               org/apache/commons/lang3/concurrent/AtomicSafeInitializer
  #50 = Utf8               java/lang/Object
  #51 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentInitializer
  #52 = Utf8               org/apache/commons/lang3/concurrent/ConcurrentException
  #53 = Utf8               compareAndSet
  #54 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Z
  #55 = Utf8               set
  #56 = Utf8               (Ljava/lang/Object;)V
{
  private final java.util.concurrent.atomic.AtomicReference<org.apache.commons.lang3.concurrent.AtomicSafeInitializer<T>> factory;
    descriptor: Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #16                          // Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;>;

  private final java.util.concurrent.atomic.AtomicReference<T> reference;
    descriptor: Ljava/util/concurrent/atomic/AtomicReference;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Signature: #18                          // Ljava/util/concurrent/atomic/AtomicReference<TT;>;

  public org.apache.commons.lang3.concurrent.AtomicSafeInitializer();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: new           #2                  // class java/util/concurrent/atomic/AtomicReference
         8: dup
         9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
        12: putfield      #4                  // Field factory:Ljava/util/concurrent/atomic/AtomicReference;
        15: aload_0
        16: new           #2                  // class java/util/concurrent/atomic/AtomicReference
        19: dup
        20: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
        23: putfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
        26: return
      LineNumberTable:
        line 55: 0
        line 58: 4
        line 62: 15
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      27     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      27     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;

  public final T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;
    descriptor: ()Ljava/lang/Object;
    flags: (0x0011) ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=2, args_size=1
         0: aload_0
         1: getfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
         4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
         7: dup
         8: astore_1
         9: ifnonnull     38
        12: aload_0
        13: getfield      #4                  // Field factory:Ljava/util/concurrent/atomic/AtomicReference;
        16: aconst_null
        17: aload_0
        18: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
        21: ifeq          0
        24: aload_0
        25: getfield      #5                  // Field reference:Ljava/util/concurrent/atomic/AtomicReference;
        28: aload_0
        29: invokevirtual #8                  // Method initialize:()Ljava/lang/Object;
        32: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
        35: goto          0
        38: aload_1
        39: areturn
      LineNumberTable:
        line 75: 0
        line 76: 12
        line 77: 24
        line 81: 38
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      40     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer;
            9      31     1 result   Ljava/lang/Object;
      LocalVariableTypeTable:
        Start  Length  Slot  Name   Signature
            0      40     0  this   Lorg/apache/commons/lang3/concurrent/AtomicSafeInitializer<TT;>;
            9      31     1 result   TT;
      StackMapTable: number_of_entries = 2
        frame_type = 0 /* same */
        frame_type = 252 /* append */
          offset_delta = 37
          locals = [ class java/lang/Object ]
    Exceptions:
      throws org.apache.commons.lang3.concurrent.ConcurrentException
    Signature: #36                          // ()TT;

  protected abstract T initialize() throws org.apache.commons.lang3.concurrent.ConcurrentException;
    descriptor: ()Ljava/lang/Object;
    flags: (0x0404) ACC_PROTECTED, ACC_ABSTRACT
    Exceptions:
      throws org.apache.commons.lang3.concurrent.ConcurrentException
    Signature: #36                          // ()TT;
}
Signature: #38                          // <T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/lang3/concurrent/ConcurrentInitializer<TT;>;
SourceFile: "AtomicSafeInitializer.java"
