Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/coursier/params/rule/AlwaysFail.class
  Last modified May 29, 2022; size 6434 bytes
  SHA-256 checksum cefce51ce74d35de0a1462a3e52648593d621a084bd5f7c27b4907b9d48a9657
  Compiled from "AlwaysFail.scala"
public final class coursier.params.rule.AlwaysFail extends coursier.params.rule.Rule
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // coursier/params/rule/AlwaysFail
  super_class: #4                         // coursier/params/rule/Rule
  interfaces: 0, fields: 1, methods: 18, attributes: 5
Constant pool:
    #1 = Utf8               coursier/params/rule/AlwaysFail
    #2 = Class              #1            // coursier/params/rule/AlwaysFail
    #3 = Utf8               coursier/params/rule/Rule
    #4 = Class              #3            // coursier/params/rule/Rule
    #5 = Utf8               AlwaysFail.scala
    #6 = Utf8               Lscala/reflect/ScalaSignature;
    #7 = Utf8               bytes
    #8 = Utf8               \u0006\u0005\u0005]e\u0001B\u0011#\u0005%B\u0001\u0002\u0011\u0001\u0003\u0006\u0004%\t!\u0011\u0005\t\u000b\u0002\u0011\t\u0011)A\u0005\u0005\")a\t\u0001C\u0001\u000f\")a\t\u0001C\u0001\u0015\u0016!1\n\u0001\u0001M\u0011\u001d\ti\u0003\u0001C\u0001\u0003_Aq!a\u000f\u0001\t\u0003\ti\u0004C\u0004\u0002J\u0001!\t!a\u0013\t\u000f\u0005=\u0003\u0001\"\u0011\u0002R!9\u0011\u0011\f\u0001\u0005B\u0005m\u0003bBA4\u0001\u0011\u0005\u0013\u0011\u000e\u0005\b\u0003[\u0002A\u0011IA8\u0011\u001d\t9\b\u0001C\u0005\u0003sBq!!!\u0001\t\u0003\n\u0019\tC\u0004\u0002\u0006\u0002!\t%a\"\t\u000f\u0005%\u0005\u0001\"\u0011\u0002\f\"9\u0011\u0011\u0013\u0001\u0005B\u0005Mu!\u0002(#\u0011\u0003ye!B\u0011#\u0011\u0003\u0001\u0006\"\u0002$\u0014\t\u0003Yf\u0001\u0002/\u0014\u0005uC\u0001bI\u000b\u0003\u0006\u0004%\tE\u001a\u0005\nOV\u0011\t\u0011)A\u0005\u0011\"DQAR\u000b\u0005\u0002%4A!\\\n\u0003]\"Q!0\u0007B\u0001B\u0003%10a\u0001\t\u0015\rJ\"\u0011!Q\u0001\n!\u000bI\u0001\u0003\u0006b3\t\u0005\t\u0015!\u0003k\u0003\u0017AaAR\r\u0005\u0002\u00055\u0001BBA\f\'\u0011\u0005!\nC\u0004\u0002\u0018M!\t!!\u0007\t\u0013\u0005u1#!A\u0005\n\u0005}!AC!mo\u0006L8OR1jY*\u00111\u0005J\u0001\u0005eVdWM\u0003\u0002&M\u00051\u0001/\u0019:b[NT\u0011aJ\u0001\tG>,(o]5fe\u000e\u00011\u0003\u0002\u0001+]Q\u0002\"a\u000b\u0017\u000e\u0003\tJ!!\f\u0012\u0003\tI+H.\u001a\t\u0003_Ij\u0011\u0001\r\u0006\u0002c\u0005)1oY1mC&\u00111\u0007\r\u0002\b!J|G-^2u!\t)TH\u0004\u00027w9\u0011qGO\u0007\u0002q)\u0011\u0011\bK\u0001\u0007yI|w\u000e\u001e \n\u0003EJ!\u0001\u0010\u0019\u0002\u000fA\f7m[1hK&\u0011ah\u0010\u0002\r\'\u0016\u0014\u0018.\u00197ju\u0006\u0014G.\u001a\u0006\u0003yA\nA\u0002Z8Uef\u0014Vm]8mm\u0016,\u0012A\u0011\t\u0003_\rK!\u0001\u0012\u0019\u0003\u000f\t{w\u000e\\3b]\u0006iAm\u001c+ssJ+7o\u001c7wK\u0002\na\u0001P5oSRtDC\u0001%J!\tY\u0003\u0001C\u0003A\u0007\u0001\u0007!\tF\u0001I\u0005\u0005\u0019\u0005CA\'\u0016\u001d\tY##\u0001\u0006BY^\f\u0017p\u001d$bS2\u0004\"aK\n\u0014\u0007M\tF\u000b\u0005\u00020%&\u00111\u000b\r\u0002\u0007\u0003:L(+\u001a4\u0011\u0005USV\"\u0001,\u000b\u0005]C\u0016AA5p\u0015\u0005I\u0016\u0001\u00026bm\u0006L!A\u0010,\u0015\u0003=\u0013AAT8qKN\u0011QC\u0018\t\u0003?\u0012l\u0011\u0001\u0019\u0006\u0003C\n\f\u0001bY8oM2L7\r\u001e\u0006\u0003G\u001a\nQ!\u001a:s_JL!!\u001a1\u0003\u001fUs7/\u0019;jg\u001aLW\r\u001a*vY\u0016,\u0012\u0001S\u0001\u0006eVdW\rI\u0005\u0003G\u0011$\"A\u001b7\u0011\u0005-,R\"A\n\t\u000b\rB\u0002\u0019\u0001%\u0003\u00159{\u0007/\u001b;z\u001d>\u0004Xm\u0005\u0002\u001a_B\u0011\u0001o\u001e\b\u0003cVt!A\u001d;\u000f\u0005]\u001a\u0018\"A\u0014\n\u0005\r4\u0013B\u0001<c\u0003=\u0011Vm]8mkRLwN\\#se>\u0014\u0018B\u0001=z\u0005E)fn]1uSN4\u0017.\u00192mKJ+H.\u001a\u0006\u0003m\n\f!B]3t_2,H/[8o!\tax0D\u0001~\u0015\tqh%\u0001\u0003d_J,\u0017bAA\u0001{\nQ!+Z:pYV$\u0018n\u001c8\n\u0007i\f)!C\u0002\u0002\b\t\u0014qBU3t_2,H/[8o\u000bJ\u0014xN]\u0005\u0003G]L!!Y<\u0015\u0011\u0005=\u0011\u0011CA\n\u0003+\u0001\"a[\r\t\u000bil\u0002\u0019A>\t\u000b\rj\u0002\u0019\u0001%\t\u000b\u0005l\u0002\u0019\u00016\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\u0007!\u000bY\u0002C\u0003A?\u0001\u0007!)\u0001\u0007xe&$XMU3qY\u0006\u001cW\r\u0006\u0002\u0002\"A!\u00111EA\u0015\u001b\t\t)CC\u0002\u0002(a\u000bA\u0001\\1oO&!\u00111FA\u0013\u0005\u0019y%M[3di\u0006)1\r[3dWR!\u0011\u0011GA\u001c!\u0011y\u00131\u0007\'\n\u0007\u0005U\u0002G\u0001\u0004PaRLwN\u001c\u0005\u0007\u0003s1\u0001\u0019A>\u0002\u0007I,7/\u0001\u0006uef\u0014Vm]8mm\u0016$b!a\u0010\u0002F\u0005\u001d\u0003#B\u001b\u0002B=\\\u0018bAA\"\u007f\t1Q)\u001b;iKJDa!!\u000f\b\u0001\u0004Y\b\"B1\b\u0001\u0004a\u0015\u0001E<ji\"$u\u000e\u0016:z%\u0016\u001cx\u000e\u001c<f)\rA\u0015Q\n\u0005\u0006\u0001\"\u0001\rAQ\u0001\ti>\u001cFO]5oOR\u0011\u00111\u000b\t\u0005\u0003G\t)&\u0003\u0003\u0002X\u0005\u0015\"AB*ue&tw-\u0001\u0005dC:,\u0015/^1m)\r\u0011\u0015Q\f\u0005\b\u0003?R\u0001\u0019AA1\u0003\ry\'M\u001b\t\u0004_\u0005\r\u0014bAA3a\t\u0019\u0011I\\=\u0002\r\u0015\fX/\u00197t)\r\u0011\u00151\u000e\u0005\b\u0003?Z\u0001\u0019AA1\u0003!A\u0017m\u001d5D_\u0012,GCAA9!\ry\u00131O\u0005\u0004\u0003k\u0002$aA%oi\u0006)A/\u001e9mKV\u0011\u00111\u0010\t\u0005_\u0005u$)C\u0002\u0002\u0000A\u0012a\u0001V;qY\u0016\f\u0014!\u00049s_\u0012,8\r\u001e)sK\u001aL\u00070\u0006\u0002\u0002T\u0005a\u0001O]8ek\u000e$\u0018I]5usV\u0011\u0011\u0011O\u0001\u000faJ|G-^2u\u000b2,W.\u001a8u)\u0011\t\t\'!$\t\u000f\u0005=\u0005\u00031\u0001\u0002r\u0005\ta.\u0001\nqe>$Wo\u0019;FY\u0016lWM\u001c;OC6,G\u0003BA*\u0003+Cq!a$\u0012\u0001\u0004\t\t\b
    #9 = Utf8               coursier/error/ResolutionError$UnsatisfiableRule
   #10 = Class              #9            // coursier/error/ResolutionError$UnsatisfiableRule
   #11 = Utf8               coursier/error/ResolutionError
   #12 = Class              #11           // coursier/error/ResolutionError
   #13 = Utf8               UnsatisfiableRule
   #14 = Utf8               coursier/params/rule/AlwaysFail$Nope
   #15 = Class              #14           // coursier/params/rule/AlwaysFail$Nope
   #16 = Utf8               Nope
   #17 = Utf8               coursier/params/rule/AlwaysFail$NopityNope
   #18 = Class              #17           // coursier/params/rule/AlwaysFail$NopityNope
   #19 = Utf8               NopityNope
   #20 = Utf8               doTryResolve
   #21 = Utf8               Z
   #22 = Utf8               apply
   #23 = Utf8               (Z)Lcoursier/params/rule/AlwaysFail;
   #24 = Utf8               coursier/params/rule/AlwaysFail$
   #25 = Class              #24           // coursier/params/rule/AlwaysFail$
   #26 = Utf8               MODULE$
   #27 = Utf8               Lcoursier/params/rule/AlwaysFail$;
   #28 = NameAndType        #26:#27       // MODULE$:Lcoursier/params/rule/AlwaysFail$;
   #29 = Fieldref           #25.#28       // coursier/params/rule/AlwaysFail$.MODULE$:Lcoursier/params/rule/AlwaysFail$;
   #30 = NameAndType        #22:#23       // apply:(Z)Lcoursier/params/rule/AlwaysFail;
   #31 = Methodref          #25.#30       // coursier/params/rule/AlwaysFail$.apply:(Z)Lcoursier/params/rule/AlwaysFail;
   #32 = Utf8               ()Lcoursier/params/rule/AlwaysFail;
   #33 = NameAndType        #22:#32       // apply:()Lcoursier/params/rule/AlwaysFail;
   #34 = Methodref          #25.#33       // coursier/params/rule/AlwaysFail$.apply:()Lcoursier/params/rule/AlwaysFail;
   #35 = Utf8               ()Z
   #36 = NameAndType        #20:#21       // doTryResolve:Z
   #37 = Fieldref           #2.#36        // coursier/params/rule/AlwaysFail.doTryResolve:Z
   #38 = Utf8               this
   #39 = Utf8               Lcoursier/params/rule/AlwaysFail;
   #40 = Utf8               check
   #41 = Utf8               (Lcoursier/core/Resolution;)Lscala/Option;
   #42 = Utf8               (Lcoursier/core/Resolution;)Lscala/Option<Lcoursier/params/rule/AlwaysFail$Nope;>;
   #43 = Utf8               res
   #44 = Utf8               scala/Some
   #45 = Class              #44           // scala/Some
   #46 = Utf8               <init>
   #47 = Utf8               (Lcoursier/params/rule/AlwaysFail;)V
   #48 = NameAndType        #46:#47       // "<init>":(Lcoursier/params/rule/AlwaysFail;)V
   #49 = Methodref          #15.#48       // coursier/params/rule/AlwaysFail$Nope."<init>":(Lcoursier/params/rule/AlwaysFail;)V
   #50 = Utf8               (Ljava/lang/Object;)V
   #51 = NameAndType        #46:#50       // "<init>":(Ljava/lang/Object;)V
   #52 = Methodref          #45.#51       // scala/Some."<init>":(Ljava/lang/Object;)V
   #53 = Utf8               Lcoursier/core/Resolution;
   #54 = Utf8               tryResolve
   #55 = Utf8               (Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either;
   #56 = Utf8               (Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either<Lcoursier/error/ResolutionError$UnsatisfiableRule;Lcoursier/core/Resolution;>;
   #57 = Utf8               conflict
   #58 = NameAndType        #20:#35       // doTryResolve:()Z
   #59 = Methodref          #2.#58        // coursier/params/rule/AlwaysFail.doTryResolve:()Z
   #60 = Utf8               scala/package$
   #61 = Class              #60           // scala/package$
   #62 = Utf8               Lscala/package$;
   #63 = NameAndType        #26:#62       // MODULE$:Lscala/package$;
   #64 = Fieldref           #61.#63       // scala/package$.MODULE$:Lscala/package$;
   #65 = Utf8               Right
   #66 = Utf8               ()Lscala/util/Right$;
   #67 = NameAndType        #65:#66       // Right:()Lscala/util/Right$;
   #68 = Methodref          #61.#67       // scala/package$.Right:()Lscala/util/Right$;
   #69 = Utf8               scala/util/Right$
   #70 = Class              #69           // scala/util/Right$
   #71 = Utf8               (Ljava/lang/Object;)Lscala/util/Right;
   #72 = NameAndType        #22:#71       // apply:(Ljava/lang/Object;)Lscala/util/Right;
   #73 = Methodref          #70.#72       // scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
   #74 = Utf8               Left
   #75 = Utf8               ()Lscala/util/Left$;
   #76 = NameAndType        #74:#75       // Left:()Lscala/util/Left$;
   #77 = Methodref          #61.#76       // scala/package$.Left:()Lscala/util/Left$;
   #78 = Utf8               (Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail;Lcoursier/params/rule/AlwaysFail$Nope;)V
   #79 = NameAndType        #46:#78       // "<init>":(Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail;Lcoursier/params/rule/AlwaysFail$Nope;)V
   #80 = Methodref          #18.#79       // coursier/params/rule/AlwaysFail$NopityNope."<init>":(Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail;Lcoursier/params/rule/AlwaysFail$Nope;)V
   #81 = Utf8               scala/util/Left$
   #82 = Class              #81           // scala/util/Left$
   #83 = Utf8               (Ljava/lang/Object;)Lscala/util/Left;
   #84 = NameAndType        #22:#83       // apply:(Ljava/lang/Object;)Lscala/util/Left;
   #85 = Methodref          #82.#84       // scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
   #86 = Utf8               scala/util/Either
   #87 = Class              #86           // scala/util/Either
   #88 = Utf8               Lcoursier/params/rule/AlwaysFail$Nope;
   #89 = Utf8               withDoTryResolve
   #90 = Utf8               (Z)V
   #91 = NameAndType        #46:#90       // "<init>":(Z)V
   #92 = Methodref          #2.#91        // coursier/params/rule/AlwaysFail."<init>":(Z)V
   #93 = Utf8               toString
   #94 = Utf8               ()Ljava/lang/String;
   #95 = Utf8               java/lang/StringBuilder
   #96 = Class              #95           // java/lang/StringBuilder
   #97 = Utf8               AlwaysFail(
   #98 = String             #97           // AlwaysFail(
   #99 = Utf8               (Ljava/lang/String;)V
  #100 = NameAndType        #46:#99       // "<init>":(Ljava/lang/String;)V
  #101 = Methodref          #96.#100      // java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
  #102 = Utf8               java/lang/String
  #103 = Class              #102          // java/lang/String
  #104 = Utf8               valueOf
  #105 = Utf8               (Z)Ljava/lang/String;
  #106 = NameAndType        #104:#105     // valueOf:(Z)Ljava/lang/String;
  #107 = Methodref          #103.#106     // java/lang/String.valueOf:(Z)Ljava/lang/String;
  #108 = Utf8               append
  #109 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #110 = NameAndType        #108:#109     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #111 = Methodref          #96.#110      // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #112 = Utf8               )
  #113 = String             #112          // )
  #114 = NameAndType        #93:#94       // toString:()Ljava/lang/String;
  #115 = Methodref          #96.#114      // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #116 = Utf8               b
  #117 = Utf8               Ljava/lang/StringBuilder;
  #118 = Utf8               canEqual
  #119 = Utf8               (Ljava/lang/Object;)Z
  #120 = Utf8               obj
  #121 = Utf8               Ljava/lang/Object;
  #122 = Utf8               equals
  #123 = NameAndType        #118:#119     // canEqual:(Ljava/lang/Object;)Z
  #124 = Methodref          #2.#123       // coursier/params/rule/AlwaysFail.canEqual:(Ljava/lang/Object;)Z
  #125 = Utf8               other
  #126 = Utf8               hashCode
  #127 = Utf8               ()I
  #128 = Utf8               AlwaysFail
  #129 = String             #128          // AlwaysFail
  #130 = Utf8               scala/runtime/Statics
  #131 = Class              #130          // scala/runtime/Statics
  #132 = Utf8               anyHash
  #133 = Utf8               (Ljava/lang/Object;)I
  #134 = NameAndType        #132:#133     // anyHash:(Ljava/lang/Object;)I
  #135 = Methodref          #131.#134     // scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
  #136 = Utf8               code
  #137 = Utf8               I
  #138 = Utf8               tuple
  #139 = Utf8               ()Lscala/Tuple1;
  #140 = Utf8               ()Lscala/Tuple1<Ljava/lang/Object;>;
  #141 = Utf8               scala/Tuple1
  #142 = Class              #141          // scala/Tuple1
  #143 = Utf8               scala/runtime/BoxesRunTime
  #144 = Class              #143          // scala/runtime/BoxesRunTime
  #145 = Utf8               boxToBoolean
  #146 = Utf8               (Z)Ljava/lang/Boolean;
  #147 = NameAndType        #145:#146     // boxToBoolean:(Z)Ljava/lang/Boolean;
  #148 = Methodref          #144.#147     // scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
  #149 = Methodref          #142.#51      // scala/Tuple1."<init>":(Ljava/lang/Object;)V
  #150 = Utf8               productPrefix
  #151 = Utf8               productArity
  #152 = Utf8               productElement
  #153 = Utf8               (I)Ljava/lang/Object;
  #154 = Utf8               n
  #155 = Utf8               java/lang/IndexOutOfBoundsException
  #156 = Class              #155          // java/lang/IndexOutOfBoundsException
  #157 = Utf8               boxToInteger
  #158 = Utf8               (I)Ljava/lang/Integer;
  #159 = NameAndType        #157:#158     // boxToInteger:(I)Ljava/lang/Integer;
  #160 = Methodref          #144.#159     // scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
  #161 = Utf8               java/lang/Object
  #162 = Class              #161          // java/lang/Object
  #163 = Methodref          #162.#114     // java/lang/Object.toString:()Ljava/lang/String;
  #164 = Methodref          #156.#100     // java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
  #165 = Utf8               java/lang/Boolean
  #166 = Class              #165          // java/lang/Boolean
  #167 = Utf8               productElementName
  #168 = Utf8               (I)Ljava/lang/String;
  #169 = String             #20           // doTryResolve
  #170 = Utf8               (Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
  #171 = NameAndType        #54:#55       // tryResolve:(Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either;
  #172 = Methodref          #2.#171       // coursier/params/rule/AlwaysFail.tryResolve:(Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either;
  #173 = Utf8               Lcoursier/error/conflict/UnsatisfiedRule;
  #174 = Utf8               ()V
  #175 = NameAndType        #46:#174      // "<init>":()V
  #176 = Methodref          #4.#175       // coursier/params/rule/Rule."<init>":()V
  #177 = Utf8               Code
  #178 = Utf8               MethodParameters
  #179 = Utf8               LineNumberTable
  #180 = Utf8               LocalVariableTable
  #181 = Utf8               Signature
  #182 = Utf8               StackMapTable
  #183 = Utf8               InnerClasses
  #184 = Utf8               SourceFile
  #185 = Utf8               RuntimeVisibleAnnotations
  #186 = Utf8               ScalaInlineInfo
  #187 = Utf8               ScalaSig
{
  private final boolean doTryResolve;
    descriptor: Z
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL

  public static coursier.params.rule.AlwaysFail apply(boolean);
    descriptor: (Z)Lcoursier/params/rule/AlwaysFail;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=1, args_size=1
         0: getstatic     #29                 // Field coursier/params/rule/AlwaysFail$.MODULE$:Lcoursier/params/rule/AlwaysFail$;
         3: iload_0
         4: invokevirtual #31                 // Method coursier/params/rule/AlwaysFail$.apply:(Z)Lcoursier/params/rule/AlwaysFail;
         7: areturn
    MethodParameters:
      Name                           Flags
      doTryResolve                   final

  public static coursier.params.rule.AlwaysFail apply();
    descriptor: ()Lcoursier/params/rule/AlwaysFail;
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #29                 // Field coursier/params/rule/AlwaysFail$.MODULE$:Lcoursier/params/rule/AlwaysFail$;
         3: invokevirtual #34                 // Method coursier/params/rule/AlwaysFail$.apply:()Lcoursier/params/rule/AlwaysFail;
         6: areturn

  public boolean doTryResolve();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: getfield      #37                 // Field doTryResolve:Z
         4: ireturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/params/rule/AlwaysFail;

  public scala.Option<coursier.params.rule.AlwaysFail$Nope> check(coursier.core.Resolution);
    descriptor: (Lcoursier/core/Resolution;)Lscala/Option;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: new           #45                 // class scala/Some
         3: dup
         4: new           #15                 // class coursier/params/rule/AlwaysFail$Nope
         7: dup
         8: aload_0
         9: invokespecial #49                 // Method coursier/params/rule/AlwaysFail$Nope."<init>":(Lcoursier/params/rule/AlwaysFail;)V
        12: invokespecial #52                 // Method scala/Some."<init>":(Ljava/lang/Object;)V
        15: areturn
      LineNumberTable:
        line 23: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      16     0  this   Lcoursier/params/rule/AlwaysFail;
            0      16     1   res   Lcoursier/core/Resolution;
    Signature: #42                          // (Lcoursier/core/Resolution;)Lscala/Option<Lcoursier/params/rule/AlwaysFail$Nope;>;
    MethodParameters:
      Name                           Flags
      res                            final

  public scala.util.Either<coursier.error.ResolutionError$UnsatisfiableRule, coursier.core.Resolution> tryResolve(coursier.core.Resolution, coursier.params.rule.AlwaysFail$Nope);
    descriptor: (Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=3, args_size=3
         0: aload_0
         1: invokevirtual #59                 // Method doTryResolve:()Z
         4: ifeq          20
         7: getstatic     #64                 // Field scala/package$.MODULE$:Lscala/package$;
        10: invokevirtual #68                 // Method scala/package$.Right:()Lscala/util/Right$;
        13: aload_1
        14: invokevirtual #73                 // Method scala/util/Right$.apply:(Ljava/lang/Object;)Lscala/util/Right;
        17: goto          39
        20: getstatic     #64                 // Field scala/package$.MODULE$:Lscala/package$;
        23: invokevirtual #77                 // Method scala/package$.Left:()Lscala/util/Left$;
        26: new           #18                 // class coursier/params/rule/AlwaysFail$NopityNope
        29: dup
        30: aload_1
        31: aload_0
        32: aload_2
        33: invokespecial #80                 // Method coursier/params/rule/AlwaysFail$NopityNope."<init>":(Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail;Lcoursier/params/rule/AlwaysFail$Nope;)V
        36: invokevirtual #85                 // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
        39: areturn
      StackMapTable: number_of_entries = 2
        frame_type = 20 /* same */
        frame_type = 82 /* same_locals_1_stack_item */
          stack = [ class scala/util/Either ]
      LineNumberTable:
        line 25: 0
        line 26: 7
        line 28: 20
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      40     0  this   Lcoursier/params/rule/AlwaysFail;
            0      40     1   res   Lcoursier/core/Resolution;
            0      40     2 conflict   Lcoursier/params/rule/AlwaysFail$Nope;
    Signature: #56                          // (Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either<Lcoursier/error/ResolutionError$UnsatisfiableRule;Lcoursier/core/Resolution;>;
    MethodParameters:
      Name                           Flags
      res                            final
      conflict                       final

  public coursier.params.rule.AlwaysFail withDoTryResolve(boolean);
    descriptor: (Z)Lcoursier/params/rule/AlwaysFail;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: new           #2                  // class coursier/params/rule/AlwaysFail
         3: dup
         4: iload_1
         5: invokespecial #92                 // Method "<init>":(Z)V
         8: areturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  this   Lcoursier/params/rule/AlwaysFail;
            0       9     1 doTryResolve   Z
    MethodParameters:
      Name                           Flags
      doTryResolve                   final

  public java.lang.String toString();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: new           #96                 // class java/lang/StringBuilder
         3: dup
         4: ldc           #98                 // String AlwaysFail(
         6: invokespecial #101                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
         9: astore_1
        10: aload_1
        11: aload_0
        12: invokevirtual #59                 // Method doTryResolve:()Z
        15: invokestatic  #107                // Method java/lang/String.valueOf:(Z)Ljava/lang/String;
        18: invokevirtual #111                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        21: pop
        22: aload_1
        23: ldc           #113                // String )
        25: invokevirtual #111                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        28: pop
        29: aload_1
        30: invokevirtual #115                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        33: areturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           10      23     1     b   Ljava/lang/StringBuilder;
            0      34     0  this   Lcoursier/params/rule/AlwaysFail;

  public boolean canEqual(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1
         1: ifnull        15
         4: aload_1
         5: instanceof    #2                  // class coursier/params/rule/AlwaysFail
         8: ifeq          15
        11: iconst_1
        12: goto          16
        15: iconst_0
        16: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 15 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lcoursier/params/rule/AlwaysFail;
            0      17     1   obj   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      obj                            final

  public boolean equals(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=3, args_size=2
         0: aload_0
         1: aload_1
         2: if_acmpeq     41
         5: aload_0
         6: aload_1
         7: invokevirtual #124                // Method canEqual:(Ljava/lang/Object;)Z
        10: ifeq          45
        13: aload_1
        14: checkcast     #2                  // class coursier/params/rule/AlwaysFail
        17: astore_2
        18: iconst_1
        19: ifeq          37
        22: aload_0
        23: invokevirtual #59                 // Method doTryResolve:()Z
        26: aload_2
        27: invokevirtual #59                 // Method doTryResolve:()Z
        30: if_icmpne     37
        33: iconst_1
        34: goto          38
        37: iconst_0
        38: ifeq          45
        41: iconst_1
        42: goto          46
        45: iconst_0
        46: ireturn
      StackMapTable: number_of_entries = 5
        frame_type = 252 /* append */
          offset_delta = 37
          locals = [ class coursier/params/rule/AlwaysFail ]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 2
        frame_type = 3 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ int ]
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           18      20     2 other   Lcoursier/params/rule/AlwaysFail;
            0      47     0  this   Lcoursier/params/rule/AlwaysFail;
            0      47     1   obj   Ljava/lang/Object;
    MethodParameters:
      Name                           Flags
      obj                            final

  public int hashCode();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=1
         0: bipush        17
         2: ldc           #129                // String AlwaysFail
         4: invokestatic  #135                // Method scala/runtime/Statics.anyHash:(Ljava/lang/Object;)I
         7: iadd
         8: istore_1
         9: bipush        37
        11: iload_1
        12: imul
        13: aload_0
        14: invokevirtual #59                 // Method doTryResolve:()Z
        17: ifeq          26
        20: sipush        1231
        23: goto          29
        26: sipush        1237
        29: iadd
        30: istore_1
        31: bipush        37
        33: iload_1
        34: imul
        35: ireturn
      StackMapTable: number_of_entries = 2
        frame_type = 255 /* full_frame */
          offset_delta = 26
          locals = [ class coursier/params/rule/AlwaysFail, int ]
          stack = [ int ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/params/rule/AlwaysFail, int ]
          stack = [ int, int ]
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            9      26     1  code   I
            0      36     0  this   Lcoursier/params/rule/AlwaysFail;

  private scala.Tuple1<java.lang.Object> tuple();
    descriptor: ()Lscala/Tuple1;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=3, locals=1, args_size=1
         0: new           #142                // class scala/Tuple1
         3: dup
         4: aload_0
         5: invokevirtual #59                 // Method doTryResolve:()Z
         8: invokestatic  #148                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        11: invokespecial #149                // Method scala/Tuple1."<init>":(Ljava/lang/Object;)V
        14: areturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      15     0  this   Lcoursier/params/rule/AlwaysFail;
    Signature: #140                         // ()Lscala/Tuple1<Ljava/lang/Object;>;

  public java.lang.String productPrefix();
    descriptor: ()Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: ldc           #129                // String AlwaysFail
         2: areturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       3     0  this   Lcoursier/params/rule/AlwaysFail;

  public int productArity();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_1
         1: ireturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Lcoursier/params/rule/AlwaysFail;

  public java.lang.Object productElement(int);
    descriptor: (I)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: iload_1
         1: istore_2
         2: iload_2
         3: tableswitch   { // 0 to 0
                       0: 20
                 default: 30
            }
        20: aload_0
        21: invokevirtual #59                 // Method doTryResolve:()Z
        24: invokestatic  #148                // Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
        27: goto          45
        30: new           #156                // class java/lang/IndexOutOfBoundsException
        33: dup
        34: iload_2
        35: invokestatic  #160                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
        38: invokevirtual #163                // Method java/lang/Object.toString:()Ljava/lang/String;
        41: invokespecial #164                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
        44: athrow
        45: areturn
      StackMapTable: number_of_entries = 3
        frame_type = 252 /* append */
          offset_delta = 20
          locals = [ int ]
        frame_type = 9 /* same */
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class java/lang/Boolean ]
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      46     0  this   Lcoursier/params/rule/AlwaysFail;
            0      46     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public java.lang.String productElementName(int);
    descriptor: (I)Ljava/lang/String;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=2
         0: iload_1
         1: istore_2
         2: iload_2
         3: tableswitch   { // 0 to 0
                       0: 20
                 default: 25
            }
        20: ldc           #169                // String doTryResolve
        22: goto          40
        25: new           #156                // class java/lang/IndexOutOfBoundsException
        28: dup
        29: iload_2
        30: invokestatic  #160                // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
        33: invokevirtual #163                // Method java/lang/Object.toString:()Ljava/lang/String;
        36: invokespecial #164                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
        39: athrow
        40: areturn
      StackMapTable: number_of_entries = 3
        frame_type = 252 /* append */
          offset_delta = 20
          locals = [ int ]
        frame_type = 4 /* same */
        frame_type = 78 /* same_locals_1_stack_item */
          stack = [ class java/lang/String ]
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      41     0  this   Lcoursier/params/rule/AlwaysFail;
            0      41     1     n   I
    MethodParameters:
      Name                           Flags
      n                              final

  public scala.util.Either tryResolve(coursier.core.Resolution, coursier.error.conflict.UnsatisfiedRule);
    descriptor: (Lcoursier/core/Resolution;Lcoursier/error/conflict/UnsatisfiedRule;)Lscala/util/Either;
    flags: (0x1041) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC
    Code:
      stack=3, locals=3, args_size=3
         0: aload_0
         1: aload_1
         2: aload_2
         3: checkcast     #15                 // class coursier/params/rule/AlwaysFail$Nope
         6: invokevirtual #172                // Method tryResolve:(Lcoursier/core/Resolution;Lcoursier/params/rule/AlwaysFail$Nope;)Lscala/util/Either;
         9: areturn
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lcoursier/params/rule/AlwaysFail;
            0      10     1   res   Lcoursier/core/Resolution;
            0      10     2 conflict   Lcoursier/error/conflict/UnsatisfiedRule;
    MethodParameters:
      Name                           Flags
      res                            final
      conflict                       final

  public coursier.params.rule.AlwaysFail(boolean);
    descriptor: (Z)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_0
         1: iload_1
         2: putfield      #37                 // Field doTryResolve:Z
         5: aload_0
         6: invokespecial #176                // Method coursier/params/rule/Rule."<init>":()V
         9: return
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      10     0  this   Lcoursier/params/rule/AlwaysFail;
            0      10     1 doTryResolve   Z
    MethodParameters:
      Name                           Flags
      doTryResolve                   final

  public coursier.params.rule.AlwaysFail();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: iconst_0
         2: invokespecial #92                 // Method "<init>":(Z)V
         5: return
      LineNumberTable:
        line 16: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       6     0  this   Lcoursier/params/rule/AlwaysFail;
}
InnerClasses:
  public static abstract #13= #10 of #12; // UnsatisfiableRule=class coursier/error/ResolutionError$UnsatisfiableRule of class coursier/error/ResolutionError
  public static final #16= #15 of #2;     // Nope=class coursier/params/rule/AlwaysFail$Nope of class coursier/params/rule/AlwaysFail
  public static final #19= #18 of #2;     // NopityNope=class coursier/params/rule/AlwaysFail$NopityNope of class coursier/params/rule/AlwaysFail
SourceFile: "AlwaysFail.scala"
RuntimeVisibleAnnotations:
  0: #6(#7=s#8)
    scala.reflect.ScalaSignature(
      bytes="\u0006\u0005\u0005]e\u0001B\u0011#\u0005%B\u0001\u0002\u0011\u0001\u0003\u0006\u0004%\t!\u0011\u0005\t\u000b\u0002\u0011\t\u0011)A\u0005\u0005\")a\t\u0001C\u0001\u000f\")a\t\u0001C\u0001\u0015\u0016!1\n\u0001\u0001M\u0011\u001d\ti\u0003\u0001C\u0001\u0003_Aq!a\u000f\u0001\t\u0003\ti\u0004C\u0004\u0002J\u0001!\t!a\u0013\t\u000f\u0005=\u0003\u0001\"\u0011\u0002R!9\u0011\u0011\f\u0001\u0005B\u0005m\u0003bBA4\u0001\u0011\u0005\u0013\u0011\u000e\u0005\b\u0003[\u0002A\u0011IA8\u0011\u001d\t9\b\u0001C\u0005\u0003sBq!!!\u0001\t\u0003\n\u0019\tC\u0004\u0002\u0006\u0002!\t%a\"\t\u000f\u0005%\u0005\u0001\"\u0011\u0002\f\"9\u0011\u0011\u0013\u0001\u0005B\u0005Mu!\u0002(#\u0011\u0003ye!B\u0011#\u0011\u0003\u0001\u0006\"\u0002$\u0014\t\u0003Yf\u0001\u0002/\u0014\u0005uC\u0001bI\u000b\u0003\u0006\u0004%\tE\u001a\u0005\nOV\u0011\t\u0011)A\u0005\u0011\"DQAR\u000b\u0005\u0002%4A!\\\n\u0003]\"Q!0\u0007B\u0001B\u0003%10a\u0001\t\u0015\rJ\"\u0011!Q\u0001\n!\u000bI\u0001\u0003\u0006b3\t\u0005\t\u0015!\u0003k\u0003\u0017AaAR\r\u0005\u0002\u00055\u0001BBA\f\'\u0011\u0005!\nC\u0004\u0002\u0018M!\t!!\u0007\t\u0013\u0005u1#!A\u0005\n\u0005}!AC!mo\u0006L8OR1jY*\u00111\u0005J\u0001\u0005eVdWM\u0003\u0002&M\u00051\u0001/\u0019:b[NT\u0011aJ\u0001\tG>,(o]5fe\u000e\u00011\u0003\u0002\u0001+]Q\u0002\"a\u000b\u0017\u000e\u0003\tJ!!\f\u0012\u0003\tI+H.\u001a\t\u0003_Ij\u0011\u0001\r\u0006\u0002c\u0005)1oY1mC&\u00111\u0007\r\u0002\b!J|G-^2u!\t)TH\u0004\u00027w9\u0011qGO\u0007\u0002q)\u0011\u0011\bK\u0001\u0007yI|w\u000e\u001e \n\u0003EJ!\u0001\u0010\u0019\u0002\u000fA\f7m[1hK&\u0011ah\u0010\u0002\r\'\u0016\u0014\u0018.\u00197ju\u0006\u0014G.\u001a\u0006\u0003yA\nA\u0002Z8Uef\u0014Vm]8mm\u0016,\u0012A\u0011\t\u0003_\rK!\u0001\u0012\u0019\u0003\u000f\t{w\u000e\\3b]\u0006iAm\u001c+ssJ+7o\u001c7wK\u0002\na\u0001P5oSRtDC\u0001%J!\tY\u0003\u0001C\u0003A\u0007\u0001\u0007!\tF\u0001I\u0005\u0005\u0019\u0005CA\'\u0016\u001d\tY##\u0001\u0006BY^\f\u0017p\u001d$bS2\u0004\"aK\n\u0014\u0007M\tF\u000b\u0005\u00020%&\u00111\u000b\r\u0002\u0007\u0003:L(+\u001a4\u0011\u0005USV\"\u0001,\u000b\u0005]C\u0016AA5p\u0015\u0005I\u0016\u0001\u00026bm\u0006L!A\u0010,\u0015\u0003=\u0013AAT8qKN\u0011QC\u0018\t\u0003?\u0012l\u0011\u0001\u0019\u0006\u0003C\n\f\u0001bY8oM2L7\r\u001e\u0006\u0003G\u001a\nQ!\u001a:s_JL!!\u001a1\u0003\u001fUs7/\u0019;jg\u001aLW\r\u001a*vY\u0016,\u0012\u0001S\u0001\u0006eVdW\rI\u0005\u0003G\u0011$\"A\u001b7\u0011\u0005-,R\"A\n\t\u000b\rB\u0002\u0019\u0001%\u0003\u00159{\u0007/\u001b;z\u001d>\u0004Xm\u0005\u0002\u001a_B\u0011\u0001o\u001e\b\u0003cVt!A\u001d;\u000f\u0005]\u001a\u0018\"A\u0014\n\u0005\r4\u0013B\u0001<c\u0003=\u0011Vm]8mkRLwN\\#se>\u0014\u0018B\u0001=z\u0005E)fn]1uSN4\u0017.\u00192mKJ+H.\u001a\u0006\u0003m\n\f!B]3t_2,H/[8o!\tax0D\u0001~\u0015\tqh%\u0001\u0003d_J,\u0017bAA\u0001{\nQ!+Z:pYV$\u0018n\u001c8\n\u0007i\f)!C\u0002\u0002\b\t\u0014qBU3t_2,H/[8o\u000bJ\u0014xN]\u0005\u0003G]L!!Y<\u0015\u0011\u0005=\u0011\u0011CA\n\u0003+\u0001\"a[\r\t\u000bil\u0002\u0019A>\t\u000b\rj\u0002\u0019\u0001%\t\u000b\u0005l\u0002\u0019\u00016\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\u0007!\u000bY\u0002C\u0003A?\u0001\u0007!)\u0001\u0007xe&$XMU3qY\u0006\u001cW\r\u0006\u0002\u0002\"A!\u00111EA\u0015\u001b\t\t)CC\u0002\u0002(a\u000bA\u0001\\1oO&!\u00111FA\u0013\u0005\u0019y%M[3di\u0006)1\r[3dWR!\u0011\u0011GA\u001c!\u0011y\u00131\u0007\'\n\u0007\u0005U\u0002G\u0001\u0004PaRLwN\u001c\u0005\u0007\u0003s1\u0001\u0019A>\u0002\u0007I,7/\u0001\u0006uef\u0014Vm]8mm\u0016$b!a\u0010\u0002F\u0005\u001d\u0003#B\u001b\u0002B=\\\u0018bAA\"\u007f\t1Q)\u001b;iKJDa!!\u000f\b\u0001\u0004Y\b\"B1\b\u0001\u0004a\u0015\u0001E<ji\"$u\u000e\u0016:z%\u0016\u001cx\u000e\u001c<f)\rA\u0015Q\n\u0005\u0006\u0001\"\u0001\rAQ\u0001\ti>\u001cFO]5oOR\u0011\u00111\u000b\t\u0005\u0003G\t)&\u0003\u0003\u0002X\u0005\u0015\"AB*ue&tw-\u0001\u0005dC:,\u0015/^1m)\r\u0011\u0015Q\f\u0005\b\u0003?R\u0001\u0019AA1\u0003\ry\'M\u001b\t\u0004_\u0005\r\u0014bAA3a\t\u0019\u0011I\\=\u0002\r\u0015\fX/\u00197t)\r\u0011\u00151\u000e\u0005\b\u0003?Z\u0001\u0019AA1\u0003!A\u0017m\u001d5D_\u0012,GCAA9!\ry\u00131O\u0005\u0004\u0003k\u0002$aA%oi\u0006)A/\u001e9mKV\u0011\u00111\u0010\t\u0005_\u0005u$)C\u0002\u0002\u0000A\u0012a\u0001V;qY\u0016\f\u0014!\u00049s_\u0012,8\r\u001e)sK\u001aL\u00070\u0006\u0002\u0002T\u0005a\u0001O]8ek\u000e$\u0018I]5usV\u0011\u0011\u0011O\u0001\u000faJ|G-^2u\u000b2,W.\u001a8u)\u0011\t\t\'!$\t\u000f\u0005=\u0005\u00031\u0001\u0002r\u0005\ta.\u0001\nqe>$Wo\u0019;FY\u0016lWM\u001c;OC6,G\u0003BA*\u0003+Cq!a$\u0012\u0001\u0004\t\t\b"
    )
  ScalaInlineInfo: length = 0x54 (unknown attribute)
   01 01 00 10 00 2E 00 AE 01 00 2E 00 5A 01 00 76
   00 77 01 00 28 00 29 01 00 14 00 23 01 00 7A 00
   77 01 00 7E 00 7F 01 00 97 00 7F 01 00 98 00 99
   01 00 A7 00 A8 01 00 96 00 5E 01 00 5D 00 5E 01
   00 36 00 AA 01 00 36 00 37 01 00 8A 00 8B 01 00
   59 00 17 01
  ScalaSig: length = 0x3 (unknown attribute)
   05 02 00
