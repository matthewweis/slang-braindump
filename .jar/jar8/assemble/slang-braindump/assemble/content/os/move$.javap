Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/os/move$.class
  Last modified May 29, 2022; size 5108 bytes
  SHA-256 checksum 9f38b818b95dc6a8e76b422f41f1711b3d53c9fce910f8802c0f74bc90429b9f
  Compiled from "FileOps.scala"
public final class os.move$
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // os/move$
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 1, methods: 13, attributes: 5
Constant pool:
    #1 = Utf8               os/move$
    #2 = Class              #1            // os/move$
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               FileOps.scala
    #6 = Utf8               java/lang/invoke/MethodHandles$Lookup
    #7 = Class              #6            // java/lang/invoke/MethodHandles$Lookup
    #8 = Utf8               java/lang/invoke/MethodHandles
    #9 = Class              #8            // java/lang/invoke/MethodHandles
   #10 = Utf8               Lookup
   #11 = Utf8               os/PathChunk$RelPathChunk
   #12 = Class              #11           // os/PathChunk$RelPathChunk
   #13 = Utf8               os/PathChunk
   #14 = Class              #13           // os/PathChunk
   #15 = Utf8               RelPathChunk
   #16 = Utf8               os/makeDir$all$
   #17 = Class              #16           // os/makeDir$all$
   #18 = Utf8               os/makeDir
   #19 = Class              #18           // os/makeDir
   #20 = Utf8               all$
   #21 = Utf8               os/move$$anon$1
   #22 = Class              #21           // os/move$$anon$1
   #23 = Utf8               MODULE$
   #24 = Utf8               Los/move$;
   #25 = Utf8               <clinit>
   #26 = Utf8               ()V
   #27 = Utf8               <init>
   #28 = NameAndType        #27:#26       // "<init>":()V
   #29 = Methodref          #2.#28        // os/move$."<init>":()V
   #30 = NameAndType        #23:#24       // MODULE$:Los/move$;
   #31 = Fieldref           #2.#30        // os/move$.MODULE$:Los/move$;
   #32 = Utf8               matching
   #33 = Utf8               (ZZZLscala/PartialFunction;)Lscala/PartialFunction;
   #34 = Utf8               (ZZZLscala/PartialFunction<Los/Path;Los/Path;>;)Lscala/PartialFunction<Los/Path;Lscala/runtime/BoxedUnit;>;
   #35 = Utf8               replaceExisting
   #36 = Utf8               atomicMove
   #37 = Utf8               createFolders
   #38 = Utf8               partialFunction
   #39 = Utf8               (Lscala/PartialFunction;ZZZ)V
   #40 = NameAndType        #27:#39       // "<init>":(Lscala/PartialFunction;ZZZ)V
   #41 = Methodref          #22.#40       // os/move$$anon$1."<init>":(Lscala/PartialFunction;ZZZ)V
   #42 = Utf8               this
   #43 = Utf8               Z
   #44 = Utf8               Lscala/PartialFunction;
   #45 = Utf8               (Lscala/PartialFunction;)Lscala/PartialFunction;
   #46 = Utf8               (Lscala/PartialFunction<Los/Path;Los/Path;>;)Lscala/PartialFunction<Los/Path;Lscala/runtime/BoxedUnit;>;
   #47 = Utf8               matching$default$1
   #48 = Utf8               ()Z
   #49 = NameAndType        #47:#48       // matching$default$1:()Z
   #50 = Methodref          #2.#49        // os/move$.matching$default$1:()Z
   #51 = Utf8               matching$default$2
   #52 = NameAndType        #51:#48       // matching$default$2:()Z
   #53 = Methodref          #2.#52        // os/move$.matching$default$2:()Z
   #54 = Utf8               matching$default$3
   #55 = NameAndType        #54:#48       // matching$default$3:()Z
   #56 = Methodref          #2.#55        // os/move$.matching$default$3:()Z
   #57 = NameAndType        #32:#33       // matching:(ZZZLscala/PartialFunction;)Lscala/PartialFunction;
   #58 = Methodref          #2.#57        // os/move$.matching:(ZZZLscala/PartialFunction;)Lscala/PartialFunction;
   #59 = Utf8               apply
   #60 = Utf8               (Los/Path;Los/Path;ZZZ)V
   #61 = Utf8               from
   #62 = Utf8               to
   #63 = Utf8               Los/makeDir$all$;
   #64 = NameAndType        #23:#63       // MODULE$:Los/makeDir$all$;
   #65 = Fieldref           #17.#64       // os/makeDir$all$.MODULE$:Los/makeDir$all$;
   #66 = Utf8               os/PathChunk$
   #67 = Class              #66           // os/PathChunk$
   #68 = Utf8               Los/PathChunk$;
   #69 = NameAndType        #23:#68       // MODULE$:Los/PathChunk$;
   #70 = Fieldref           #67.#69       // os/PathChunk$.MODULE$:Los/PathChunk$;
   #71 = Utf8               os/package$
   #72 = Class              #71           // os/package$
   #73 = Utf8               Los/package$;
   #74 = NameAndType        #23:#73       // MODULE$:Los/package$;
   #75 = Fieldref           #72.#74       // os/package$.MODULE$:Los/package$;
   #76 = Utf8               up
   #77 = Utf8               ()Los/RelPath;
   #78 = NameAndType        #76:#77       // up:()Los/RelPath;
   #79 = Methodref          #72.#78       // os/package$.up:()Los/RelPath;
   #80 = Utf8               (Los/RelPath;)Los/PathChunk$RelPathChunk;
   #81 = NameAndType        #15:#80       // RelPathChunk:(Los/RelPath;)Los/PathChunk$RelPathChunk;
   #82 = Methodref          #67.#81       // os/PathChunk$.RelPathChunk:(Los/RelPath;)Los/PathChunk$RelPathChunk;
   #83 = Utf8               os/Path
   #84 = Class              #83           // os/Path
   #85 = Utf8               $div
   #86 = Utf8               (Los/PathChunk;)Los/Path;
   #87 = NameAndType        #85:#86       // $div:(Los/PathChunk;)Los/Path;
   #88 = Methodref          #84.#87       // os/Path.$div:(Los/PathChunk;)Los/Path;
   #89 = Utf8               (Los/Path;)V
   #90 = NameAndType        #59:#89       // apply:(Los/Path;)V
   #91 = Methodref          #17.#90       // os/makeDir$all$.apply:(Los/Path;)V
   #92 = Utf8               java/nio/file/CopyOption
   #93 = Class              #92           // java/nio/file/CopyOption
   #94 = Utf8               java/nio/file/StandardCopyOption
   #95 = Class              #94           // java/nio/file/StandardCopyOption
   #96 = Utf8               REPLACE_EXISTING
   #97 = Utf8               Ljava/nio/file/StandardCopyOption;
   #98 = NameAndType        #96:#97       // REPLACE_EXISTING:Ljava/nio/file/StandardCopyOption;
   #99 = Fieldref           #95.#98       // java/nio/file/StandardCopyOption.REPLACE_EXISTING:Ljava/nio/file/StandardCopyOption;
  #100 = Utf8               [Ljava/lang/Object;
  #101 = Class              #100          // "[Ljava/lang/Object;"
  #102 = Utf8               [Ljava/nio/file/CopyOption;
  #103 = Class              #102          // "[Ljava/nio/file/CopyOption;"
  #104 = Utf8               scala/Array$
  #105 = Class              #104          // scala/Array$
  #106 = Utf8               Lscala/Array$;
  #107 = NameAndType        #23:#106      // MODULE$:Lscala/Array$;
  #108 = Fieldref           #105.#107     // scala/Array$.MODULE$:Lscala/Array$;
  #109 = Utf8               scala/collection/immutable/Nil$
  #110 = Class              #109          // scala/collection/immutable/Nil$
  #111 = Utf8               Lscala/collection/immutable/Nil$;
  #112 = NameAndType        #23:#111      // MODULE$:Lscala/collection/immutable/Nil$;
  #113 = Fieldref           #110.#112     // scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
  #114 = Utf8               scala/reflect/ClassTag$
  #115 = Class              #114          // scala/reflect/ClassTag$
  #116 = Utf8               Lscala/reflect/ClassTag$;
  #117 = NameAndType        #23:#116      // MODULE$:Lscala/reflect/ClassTag$;
  #118 = Fieldref           #115.#117     // scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
  #119 = Utf8               (Ljava/lang/Class;)Lscala/reflect/ClassTag;
  #120 = NameAndType        #59:#119      // apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
  #121 = Methodref          #115.#120     // scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
  #122 = Utf8               (Lscala/collection/immutable/Seq;Lscala/reflect/ClassTag;)Ljava/lang/Object;
  #123 = NameAndType        #59:#122      // apply:(Lscala/collection/immutable/Seq;Lscala/reflect/ClassTag;)Ljava/lang/Object;
  #124 = Methodref          #105.#123     // scala/Array$.apply:(Lscala/collection/immutable/Seq;Lscala/reflect/ClassTag;)Ljava/lang/Object;
  #125 = Utf8               ATOMIC_MOVE
  #126 = NameAndType        #125:#97      // ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;
  #127 = Fieldref           #95.#126      // java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;
  #128 = Utf8               scala/Predef$
  #129 = Class              #128          // scala/Predef$
  #130 = Utf8               Lscala/Predef$;
  #131 = NameAndType        #23:#130      // MODULE$:Lscala/Predef$;
  #132 = Fieldref           #129.#131     // scala/Predef$.MODULE$:Lscala/Predef$;
  #133 = Utf8               startsWith
  #134 = Utf8               (Los/Path;)Z
  #135 = NameAndType        #133:#134     // startsWith:(Los/Path;)Z
  #136 = Methodref          #84.#135      // os/Path.startsWith:(Los/Path;)Z
  #137 = Utf8               ()Ljava/lang/Object;
  #138 = MethodType         #137          //  ()Ljava/lang/Object;
  #139 = Utf8               $anonfun$apply$1
  #140 = Utf8               (Los/Path;Los/Path;)Ljava/lang/String;
  #141 = NameAndType        #139:#140     // $anonfun$apply$1:(Los/Path;Los/Path;)Ljava/lang/String;
  #142 = Methodref          #2.#141       // os/move$.$anonfun$apply$1:(Los/Path;Los/Path;)Ljava/lang/String;
  #143 = MethodHandle       6:#142        // REF_invokeStatic os/move$.$anonfun$apply$1:(Los/Path;Los/Path;)Ljava/lang/String;
  #144 = Utf8               ()Ljava/lang/String;
  #145 = MethodType         #144          //  ()Ljava/lang/String;
  #146 = Integer            5
  #147 = Integer            1
  #148 = Utf8               java/lang/invoke/LambdaMetafactory
  #149 = Class              #148          // java/lang/invoke/LambdaMetafactory
  #150 = Utf8               altMetafactory
  #151 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #152 = NameAndType        #150:#151     // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #153 = Methodref          #149.#152     // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #154 = MethodHandle       6:#153        // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #155 = Utf8               (Los/Path;Los/Path;)Lscala/Function0;
  #156 = NameAndType        #59:#155      // apply:(Los/Path;Los/Path;)Lscala/Function0;
  #157 = InvokeDynamic      #0:#156       // #0:apply:(Los/Path;Los/Path;)Lscala/Function0;
  #158 = Utf8               require
  #159 = Utf8               (ZLscala/Function0;)V
  #160 = NameAndType        #158:#159     // require:(ZLscala/Function0;)V
  #161 = Methodref          #129.#160     // scala/Predef$.require:(ZLscala/Function0;)V
  #162 = Utf8               wrapped
  #163 = Utf8               ()Ljava/nio/file/Path;
  #164 = NameAndType        #162:#163     // wrapped:()Ljava/nio/file/Path;
  #165 = Methodref          #84.#164      // os/Path.wrapped:()Ljava/nio/file/Path;
  #166 = Utf8               scala/collection/ArrayOps$
  #167 = Class              #166          // scala/collection/ArrayOps$
  #168 = Utf8               Lscala/collection/ArrayOps$;
  #169 = NameAndType        #23:#168      // MODULE$:Lscala/collection/ArrayOps$;
  #170 = Fieldref           #167.#169     // scala/collection/ArrayOps$.MODULE$:Lscala/collection/ArrayOps$;
  #171 = Utf8               refArrayOps
  #172 = Utf8               ([Ljava/lang/Object;)Ljava/lang/Object;
  #173 = NameAndType        #171:#172     // refArrayOps:([Ljava/lang/Object;)Ljava/lang/Object;
  #174 = Methodref          #129.#173     // scala/Predef$.refArrayOps:([Ljava/lang/Object;)Ljava/lang/Object;
  #175 = Utf8               $plus$plus$extension
  #176 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;Lscala/reflect/ClassTag;)Ljava/lang/Object;
  #177 = NameAndType        #175:#176     // $plus$plus$extension:(Ljava/lang/Object;Ljava/lang/Object;Lscala/reflect/ClassTag;)Ljava/lang/Object;
  #178 = Methodref          #167.#177     // scala/collection/ArrayOps$.$plus$plus$extension:(Ljava/lang/Object;Ljava/lang/Object;Lscala/reflect/ClassTag;)Ljava/lang/Object;
  #179 = Utf8               java/nio/file/Files
  #180 = Class              #179          // java/nio/file/Files
  #181 = Utf8               move
  #182 = Utf8               (Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
  #183 = NameAndType        #181:#182     // move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
  #184 = Methodref          #180.#183     // java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
  #185 = Utf8               opts1
  #186 = Utf8               opts2
  #187 = Utf8               Los/Path;
  #188 = Utf8               apply$default$3
  #189 = Utf8               apply$default$4
  #190 = Utf8               apply$default$5
  #191 = Utf8               to$1
  #192 = Utf8               from$1
  #193 = Utf8               java/lang/StringBuilder
  #194 = Class              #193          // java/lang/StringBuilder
  #195 = Integer            47
  #196 = Utf8               (I)V
  #197 = NameAndType        #27:#196      // "<init>":(I)V
  #198 = Methodref          #194.#197     // java/lang/StringBuilder."<init>":(I)V
  #199 = Utf8               Can\'t move a directory into itself:
  #200 = String             #199          // Can\'t move a directory into itself:
  #201 = Utf8               append
  #202 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
  #203 = NameAndType        #201:#202     // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #204 = Methodref          #194.#203     // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
  #205 = Utf8               (Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #206 = NameAndType        #201:#205     // append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #207 = Methodref          #194.#206     // java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
  #208 = Utf8                is inside
  #209 = String             #208          //  is inside
  #210 = Utf8               toString
  #211 = NameAndType        #210:#144     // toString:()Ljava/lang/String;
  #212 = Methodref          #194.#211     // java/lang/StringBuilder.toString:()Ljava/lang/String;
  #213 = Methodref          #4.#28        // java/lang/Object."<init>":()V
  #214 = Utf8               $deserializeLambda$
  #215 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #216 = Utf8               scala/runtime/LambdaDeserialize
  #217 = Class              #216          // scala/runtime/LambdaDeserialize
  #218 = Utf8               bootstrap
  #219 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #220 = NameAndType        #218:#219     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #221 = Methodref          #217.#220     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #222 = MethodHandle       6:#221        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #223 = Utf8               lambdaDeserialize
  #224 = NameAndType        #223:#215     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #225 = InvokeDynamic      #1:#224       // #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #226 = Utf8               Code
  #227 = Utf8               LineNumberTable
  #228 = Utf8               LocalVariableTable
  #229 = Utf8               Signature
  #230 = Utf8               MethodParameters
  #231 = Utf8               StackMapTable
  #232 = Utf8               InnerClasses
  #233 = Utf8               SourceFile
  #234 = Utf8               BootstrapMethods
  #235 = Utf8               ScalaInlineInfo
  #236 = Utf8               Scala
{
  public static final os.move$ MODULE$;
    descriptor: Los/move$;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static {};
    descriptor: ()V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #2                  // class os/move$
         3: dup
         4: invokespecial #29                 // Method "<init>":()V
         7: putstatic     #31                 // Field MODULE$:Los/move$;
        10: return
      LineNumberTable:
        line 62: 0

  public scala.PartialFunction<os.Path, scala.runtime.BoxedUnit> matching(boolean, boolean, boolean, scala.PartialFunction<os.Path, os.Path>);
    descriptor: (ZZZLscala/PartialFunction;)Lscala/PartialFunction;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=6, locals=5, args_size=5
         0: new           #22                 // class os/move$$anon$1
         3: dup
         4: aload         4
         6: iload_1
         7: iload_2
         8: iload_3
         9: invokespecial #41                 // Method os/move$$anon$1."<init>":(Lscala/PartialFunction;ZZZ)V
        12: areturn
      LineNumberTable:
        line 67: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Los/move$;
            0      13     1 replaceExisting   Z
            0      13     2 atomicMove   Z
            0      13     3 createFolders   Z
            0      13     4 partialFunction   Lscala/PartialFunction;
    Signature: #34                          // (ZZZLscala/PartialFunction<Los/Path;Los/Path;>;)Lscala/PartialFunction<Los/Path;Lscala/runtime/BoxedUnit;>;
    MethodParameters:
      Name                           Flags
      replaceExisting                final
      atomicMove                     final
      createFolders                  final
      partialFunction                final

  public scala.PartialFunction<os.Path, scala.runtime.BoxedUnit> matching(scala.PartialFunction<os.Path, os.Path>);
    descriptor: (Lscala/PartialFunction;)Lscala/PartialFunction;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=2, args_size=2
         0: aload_0
         1: aload_0
         2: invokevirtual #50                 // Method matching$default$1:()Z
         5: aload_0
         6: invokevirtual #53                 // Method matching$default$2:()Z
         9: aload_0
        10: invokevirtual #56                 // Method matching$default$3:()Z
        13: aload_1
        14: invokevirtual #58                 // Method matching:(ZZZLscala/PartialFunction;)Lscala/PartialFunction;
        17: areturn
      LineNumberTable:
        line 78: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      18     0  this   Los/move$;
            0      18     1 partialFunction   Lscala/PartialFunction;
    Signature: #46                          // (Lscala/PartialFunction<Los/Path;Los/Path;>;)Lscala/PartialFunction<Los/Path;Lscala/runtime/BoxedUnit;>;
    MethodParameters:
      Name                           Flags
      partialFunction                final

  public boolean matching$default$1();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 63: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Los/move$;

  public boolean matching$default$2();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 64: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Los/move$;

  public boolean matching$default$3();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 65: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Los/move$;

  public void apply(os.Path, os.Path, boolean, boolean, boolean);
    descriptor: (Los/Path;Los/Path;ZZZ)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=7, locals=8, args_size=6
         0: iload         5
         2: ifeq          30
         5: getstatic     #65                 // Field os/makeDir$all$.MODULE$:Los/makeDir$all$;
         8: aload_2
         9: getstatic     #70                 // Field os/PathChunk$.MODULE$:Los/PathChunk$;
        12: getstatic     #75                 // Field os/package$.MODULE$:Los/package$;
        15: invokevirtual #79                 // Method os/package$.up:()Los/RelPath;
        18: invokevirtual #82                 // Method os/PathChunk$.RelPathChunk:(Los/RelPath;)Los/PathChunk$RelPathChunk;
        21: invokevirtual #88                 // Method os/Path.$div:(Los/PathChunk;)Los/Path;
        24: invokevirtual #91                 // Method os/makeDir$all$.apply:(Los/Path;)V
        27: goto          30
        30: iload_3
        31: ifeq          53
        34: iconst_1
        35: anewarray     #93                 // class java/nio/file/CopyOption
        38: dup
        39: iconst_0
        40: getstatic     #99                 // Field java/nio/file/StandardCopyOption.REPLACE_EXISTING:Ljava/nio/file/StandardCopyOption;
        43: aastore
        44: checkcast     #101                // class "[Ljava/lang/Object;"
        47: checkcast     #103                // class "[Ljava/nio/file/CopyOption;"
        50: goto          73
        53: getstatic     #108                // Field scala/Array$.MODULE$:Lscala/Array$;
        56: getstatic     #113                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
        59: getstatic     #118                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
        62: ldc           #93                 // class java/nio/file/CopyOption
        64: invokevirtual #121                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
        67: invokevirtual #124                // Method scala/Array$.apply:(Lscala/collection/immutable/Seq;Lscala/reflect/ClassTag;)Ljava/lang/Object;
        70: checkcast     #103                // class "[Ljava/nio/file/CopyOption;"
        73: astore        6
        75: iload         4
        77: ifeq          99
        80: iconst_1
        81: anewarray     #93                 // class java/nio/file/CopyOption
        84: dup
        85: iconst_0
        86: getstatic     #127                // Field java/nio/file/StandardCopyOption.ATOMIC_MOVE:Ljava/nio/file/StandardCopyOption;
        89: aastore
        90: checkcast     #101                // class "[Ljava/lang/Object;"
        93: checkcast     #103                // class "[Ljava/nio/file/CopyOption;"
        96: goto          119
        99: getstatic     #108                // Field scala/Array$.MODULE$:Lscala/Array$;
       102: getstatic     #113                // Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
       105: getstatic     #118                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       108: ldc           #93                 // class java/nio/file/CopyOption
       110: invokevirtual #121                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
       113: invokevirtual #124                // Method scala/Array$.apply:(Lscala/collection/immutable/Seq;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       116: checkcast     #103                // class "[Ljava/nio/file/CopyOption;"
       119: astore        7
       121: getstatic     #132                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       124: aload_2
       125: aload_1
       126: invokevirtual #136                // Method os/Path.startsWith:(Los/Path;)Z
       129: ifne          136
       132: iconst_1
       133: goto          137
       136: iconst_0
       137: aload_2
       138: aload_1
       139: invokedynamic #157,  0            // InvokeDynamic #0:apply:(Los/Path;Los/Path;)Lscala/Function0;
       144: invokevirtual #161                // Method scala/Predef$.require:(ZLscala/Function0;)V
       147: aload_1
       148: invokevirtual #165                // Method os/Path.wrapped:()Ljava/nio/file/Path;
       151: aload_2
       152: invokevirtual #165                // Method os/Path.wrapped:()Ljava/nio/file/Path;
       155: getstatic     #170                // Field scala/collection/ArrayOps$.MODULE$:Lscala/collection/ArrayOps$;
       158: getstatic     #132                // Field scala/Predef$.MODULE$:Lscala/Predef$;
       161: aload         6
       163: checkcast     #101                // class "[Ljava/lang/Object;"
       166: invokevirtual #174                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)Ljava/lang/Object;
       169: aload         7
       171: getstatic     #118                // Field scala/reflect/ClassTag$.MODULE$:Lscala/reflect/ClassTag$;
       174: ldc           #93                 // class java/nio/file/CopyOption
       176: invokevirtual #121                // Method scala/reflect/ClassTag$.apply:(Ljava/lang/Class;)Lscala/reflect/ClassTag;
       179: invokevirtual #178                // Method scala/collection/ArrayOps$.$plus$plus$extension:(Ljava/lang/Object;Ljava/lang/Object;Lscala/reflect/ClassTag;)Ljava/lang/Object;
       182: checkcast     #103                // class "[Ljava/nio/file/CopyOption;"
       185: invokestatic  #184                // Method java/nio/file/Files.move:(Ljava/nio/file/Path;Ljava/nio/file/Path;[Ljava/nio/file/CopyOption;)Ljava/nio/file/Path;
       188: pop
       189: return
      StackMapTable: number_of_entries = 7
        frame_type = 30 /* same */
        frame_type = 22 /* same */
        frame_type = 83 /* same_locals_1_stack_item */
          stack = [ class "[Ljava/nio/file/CopyOption;" ]
        frame_type = 252 /* append */
          offset_delta = 25
          locals = [ class "[Ljava/nio/file/CopyOption;" ]
        frame_type = 83 /* same_locals_1_stack_item */
          stack = [ class "[Ljava/nio/file/CopyOption;" ]
        frame_type = 255 /* full_frame */
          offset_delta = 16
          locals = [ class os/move$, class os/Path, class os/Path, int, int, int, class "[Ljava/nio/file/CopyOption;", class "[Ljava/nio/file/CopyOption;" ]
          stack = [ class scala/Predef$ ]
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class os/move$, class os/Path, class os/Path, int, int, int, class "[Ljava/nio/file/CopyOption;", class "[Ljava/nio/file/CopyOption;" ]
          stack = [ class scala/Predef$, int ]
      LineNumberTable:
        line 85: 0
        line 87: 30
        line 88: 53
        line 90: 75
        line 91: 99
        line 92: 121
        line 93: 124
        line 94: 137
        line 96: 147
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           75     114     6 opts1   [Ljava/nio/file/CopyOption;
          121      68     7 opts2   [Ljava/nio/file/CopyOption;
            0     190     0  this   Los/move$;
            0     190     1  from   Los/Path;
            0     190     2    to   Los/Path;
            0     190     3 replaceExisting   Z
            0     190     4 atomicMove   Z
            0     190     5 createFolders   Z
    MethodParameters:
      Name                           Flags
      from                           final
      to                             final
      replaceExisting                final
      atomicMove                     final
      createFolders                  final

  public boolean apply$default$3();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 82: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Los/move$;

  public boolean apply$default$4();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 83: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Los/move$;

  public boolean apply$default$5();
    descriptor: ()Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: iconst_0
         1: ireturn
      LineNumberTable:
        line 84: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       2     0  this   Los/move$;

  public static final java.lang.String $anonfun$apply$1(os.Path, os.Path);
    descriptor: (Los/Path;Los/Path;)Ljava/lang/String;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=3, locals=2, args_size=2
         0: new           #194                // class java/lang/StringBuilder
         3: dup
         4: ldc           #195                // int 47
         6: invokespecial #198                // Method java/lang/StringBuilder."<init>":(I)V
         9: ldc           #200                // String Can\'t move a directory into itself:
        11: invokevirtual #204                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        14: aload_0
        15: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        18: ldc           #209                // String  is inside
        20: invokevirtual #204                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        23: aload_1
        24: invokevirtual #207                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
        27: invokevirtual #212                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        30: areturn
      LineNumberTable:
        line 94: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      31     0  to$1   Los/Path;
            0      31     1 from$1   Los/Path;
    MethodParameters:
      Name                           Flags
      to$1                           final
      from$1                         final

  private os.move$();
    descriptor: ()V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #213                // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 134: 0
        line 62: 4
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Los/move$;

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #225,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #10= #7 of #9;      // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
  public static #15= #12 of #14;          // RelPathChunk=class os/PathChunk$RelPathChunk of class os/PathChunk
  public static #20= #17 of #19;          // all$=class os/makeDir$all$ of class os/makeDir
  public final #22;                       // class os/move$$anon$1
SourceFile: "FileOps.scala"
BootstrapMethods:
  0: #154 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #138 ()Ljava/lang/Object;
      #143 REF_invokeStatic os/move$.$anonfun$apply$1:(Los/Path;Los/Path;)Ljava/lang/String;
      #145 ()Ljava/lang/String;
      #146 5
      #147 1
      #145 ()Ljava/lang/String;
  1: #222 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #143 REF_invokeStatic os/move$.$anonfun$apply$1:(Los/Path;Los/Path;)Ljava/lang/String;
  ScalaInlineInfo: length = 0x3B (unknown attribute)
   01 01 00 0B 00 8B 00 8C 01 00 1B 00 1A 01 00 3B
   00 3C 01 00 BC 00 30 01 00 BD 00 30 01 00 BE 00
   30 01 00 20 00 2D 01 00 20 00 21 01 00 2F 00 30
   01 00 33 00 30 01 00 36 00 30 01
  Scala: length = 0x0 (unknown attribute)

