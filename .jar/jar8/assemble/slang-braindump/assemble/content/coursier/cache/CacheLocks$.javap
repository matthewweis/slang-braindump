Classfile /Users/mw/Projects/slang-braindump/.jar/jar8/assemble/slang-braindump/assemble/content/coursier/cache/CacheLocks$.class
  Last modified May 29, 2022; size 8173 bytes
  SHA-256 checksum 4944c08860f861b6245e83b8c98ab273e71053a23270242bc992e71e2e749ff5
  Compiled from "CacheLocks.scala"
public final class coursier.cache.CacheLocks$
  minor version: 0
  major version: 52
  flags: (0x0031) ACC_PUBLIC, ACC_FINAL, ACC_SUPER
  this_class: #2                          // coursier/cache/CacheLocks$
  super_class: #4                         // java/lang/Object
  interfaces: 0, fields: 3, methods: 14, attributes: 5
Constant pool:
    #1 = Utf8               coursier/cache/CacheLocks$
    #2 = Class              #1            // coursier/cache/CacheLocks$
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               CacheLocks.scala
    #6 = Utf8               coursier/cache/ArtifactError$Locked
    #7 = Class              #6            // coursier/cache/ArtifactError$Locked
    #8 = Utf8               coursier/cache/ArtifactError
    #9 = Class              #8            // coursier/cache/ArtifactError
   #10 = Utf8               Locked
   #11 = Utf8               coursier/cache/CacheLocks$$anon$1
   #12 = Class              #11           // coursier/cache/CacheLocks$$anon$1
   #13 = Utf8               coursier/cache/CacheLocks$$anon$2
   #14 = Class              #13           // coursier/cache/CacheLocks$$anon$2
   #15 = Utf8               java/lang/invoke/MethodHandles$Lookup
   #16 = Class              #15           // java/lang/invoke/MethodHandles$Lookup
   #17 = Utf8               java/lang/invoke/MethodHandles
   #18 = Class              #17           // java/lang/invoke/MethodHandles
   #19 = Utf8               Lookup
   #20 = Utf8               MODULE$
   #21 = Utf8               Lcoursier/cache/CacheLocks$;
   #22 = Utf8               urlLocks
   #23 = Utf8               Ljava/util/concurrent/ConcurrentHashMap;
   #24 = Utf8               Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
   #25 = Utf8               urlLockDummyObject
   #26 = Utf8               Ljava/lang/Object;
   #27 = Utf8               <clinit>
   #28 = Utf8               ()V
   #29 = Utf8               <init>
   #30 = NameAndType        #29:#28       // "<init>":()V
   #31 = Methodref          #2.#30        // coursier/cache/CacheLocks$."<init>":()V
   #32 = NameAndType        #20:#21       // MODULE$:Lcoursier/cache/CacheLocks$;
   #33 = Fieldref           #2.#32        // coursier/cache/CacheLocks$.MODULE$:Lcoursier/cache/CacheLocks$;
   #34 = Utf8               java/util/concurrent/ConcurrentHashMap
   #35 = Class              #34           // java/util/concurrent/ConcurrentHashMap
   #36 = Methodref          #35.#30       // java/util/concurrent/ConcurrentHashMap."<init>":()V
   #37 = NameAndType        #22:#23       // urlLocks:Ljava/util/concurrent/ConcurrentHashMap;
   #38 = Fieldref           #2.#37        // coursier/cache/CacheLocks$.urlLocks:Ljava/util/concurrent/ConcurrentHashMap;
   #39 = Methodref          #4.#30        // java/lang/Object."<init>":()V
   #40 = NameAndType        #25:#26       // urlLockDummyObject:Ljava/lang/Object;
   #41 = Fieldref           #2.#40        // coursier/cache/CacheLocks$.urlLockDummyObject:Ljava/lang/Object;
   #42 = Utf8               withStructureLock
   #43 = Utf8               (Ljava/io/File;Lscala/Function0;)Ljava/lang/Object;
   #44 = Utf8               <T:Ljava/lang/Object;>(Ljava/io/File;Lscala/Function0<TT;>;)TT;
   #45 = Utf8               cache
   #46 = Utf8               f
   #47 = Utf8               (Lscala/Function0;)V
   #48 = NameAndType        #29:#47       // "<init>":(Lscala/Function0;)V
   #49 = Methodref          #12.#48       // coursier/cache/CacheLocks$$anon$1."<init>":(Lscala/Function0;)V
   #50 = Utf8               coursier/paths/CachePath
   #51 = Class              #50           // coursier/paths/CachePath
   #52 = Utf8               (Ljava/io/File;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #53 = NameAndType        #42:#52       // withStructureLock:(Ljava/io/File;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #54 = Methodref          #51.#53       // coursier/paths/CachePath.withStructureLock:(Ljava/io/File;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #55 = Utf8               this
   #56 = Utf8               Ljava/io/File;
   #57 = Utf8               Lscala/Function0;
   #58 = Utf8               (Ljava/nio/file/Path;Lscala/Function0;)Ljava/lang/Object;
   #59 = Utf8               <T:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/Function0<TT;>;)TT;
   #60 = Methodref          #14.#48       // coursier/cache/CacheLocks$$anon$2."<init>":(Lscala/Function0;)V
   #61 = Utf8               (Ljava/nio/file/Path;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #62 = NameAndType        #42:#61       // withStructureLock:(Ljava/nio/file/Path;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #63 = Methodref          #51.#62       // coursier/paths/CachePath.withStructureLock:(Ljava/nio/file/Path;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #64 = Utf8               Ljava/nio/file/Path;
   #65 = Utf8               withLockOr
   #66 = Utf8               (Ljava/io/File;Ljava/io/File;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
   #67 = Utf8               <T:Ljava/lang/Object;>(Ljava/io/File;Ljava/io/File;Lscala/Function0<TT;>;Lscala/Function0<Lscala/Option<TT;>;>;)TT;
   #68 = Utf8               file
   #69 = Utf8               ifLocked
   #70 = Utf8               lockFile
   #71 = Utf8               (Ljava/io/File;)Ljava/io/File;
   #72 = NameAndType        #70:#71       // lockFile:(Ljava/io/File;)Ljava/io/File;
   #73 = Methodref          #51.#72       // coursier/paths/CachePath.lockFile:(Ljava/io/File;)Ljava/io/File;
   #74 = Utf8               java/io/File
   #75 = Class              #74           // java/io/File
   #76 = Utf8               toPath
   #77 = Utf8               ()Ljava/nio/file/Path;
   #78 = NameAndType        #76:#77       // toPath:()Ljava/nio/file/Path;
   #79 = Methodref          #75.#78       // java/io/File.toPath:()Ljava/nio/file/Path;
   #80 = Utf8               scala/runtime/ObjectRef
   #81 = Class              #80           // scala/runtime/ObjectRef
   #82 = Utf8               create
   #83 = Utf8               (Ljava/lang/Object;)Lscala/runtime/ObjectRef;
   #84 = NameAndType        #82:#83       // create:(Ljava/lang/Object;)Lscala/runtime/ObjectRef;
   #85 = Methodref          #81.#84       // scala/runtime/ObjectRef.create:(Ljava/lang/Object;)Lscala/runtime/ObjectRef;
   #86 = MethodType         #28           //  ()V
   #87 = Utf8               $anonfun$withLockOr$1
   #88 = Utf8               (Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
   #89 = NameAndType        #87:#88       // $anonfun$withLockOr$1:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
   #90 = Methodref          #2.#89        // coursier/cache/CacheLocks$.$anonfun$withLockOr$1:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
   #91 = MethodHandle       6:#90         // REF_invokeStatic coursier/cache/CacheLocks$.$anonfun$withLockOr$1:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
   #92 = Integer            1
   #93 = Utf8               java/lang/invoke/LambdaMetafactory
   #94 = Class              #93           // java/lang/invoke/LambdaMetafactory
   #95 = Utf8               altMetafactory
   #96 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #97 = NameAndType        #95:#96       // altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #98 = Methodref          #94.#97       // java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
   #99 = MethodHandle       6:#98         // REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
  #100 = Utf8               apply$mcV$sp
  #101 = Utf8               (Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
  #102 = NameAndType        #100:#101     // apply$mcV$sp:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
  #103 = InvokeDynamic      #0:#102       // #0:apply$mcV$sp:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
  #104 = NameAndType        #42:#43       // withStructureLock:(Ljava/io/File;Lscala/Function0;)Ljava/lang/Object;
  #105 = Methodref          #2.#104       // coursier/cache/CacheLocks$.withStructureLock:(Ljava/io/File;Lscala/Function0;)Ljava/lang/Object;
  #106 = Utf8               loop$1
  #107 = Utf8               (Lscala/runtime/ObjectRef;Lscala/Function0;Lscala/Function0;Ljava/nio/file/Path;)Ljava/lang/Object;
  #108 = NameAndType        #106:#107     // loop$1:(Lscala/runtime/ObjectRef;Lscala/Function0;Lscala/Function0;Ljava/nio/file/Path;)Ljava/lang/Object;
  #109 = Methodref          #2.#108       // coursier/cache/CacheLocks$.loop$1:(Lscala/runtime/ObjectRef;Lscala/Function0;Lscala/Function0;Ljava/nio/file/Path;)Ljava/lang/Object;
  #110 = Utf8               scala/Function0
  #111 = Class              #110          // scala/Function0
  #112 = Utf8               java/nio/file/Path
  #113 = Class              #112          // java/nio/file/Path
  #114 = Utf8               java/lang/Throwable
  #115 = Class              #114          // java/lang/Throwable
  #116 = Utf8               elem
  #117 = NameAndType        #116:#26      // elem:Ljava/lang/Object;
  #118 = Fieldref           #81.#117      // scala/runtime/ObjectRef.elem:Ljava/lang/Object;
  #119 = Utf8               java/nio/channels/FileChannel
  #120 = Class              #119          // java/nio/channels/FileChannel
  #121 = Utf8               close
  #122 = NameAndType        #121:#28      // close:()V
  #123 = Methodref          #120.#122     // java/nio/channels/FileChannel.close:()V
  #124 = Utf8               channel
  #125 = Utf8               Lscala/runtime/ObjectRef;
  #126 = Utf8               withLockFor
  #127 = Utf8               (Ljava/io/File;Ljava/io/File;Lscala/Function0;)Lscala/util/Either;
  #128 = Utf8               <T:Ljava/lang/Object;>(Ljava/io/File;Ljava/io/File;Lscala/Function0<Lscala/util/Either<Lcoursier/cache/ArtifactError;TT;>;>;)Lscala/util/Either<Lcoursier/cache/ArtifactError;TT;>;
  #129 = Utf8               ()Ljava/lang/Object;
  #130 = MethodType         #129          //  ()Ljava/lang/Object;
  #131 = Utf8               $anonfun$withLockFor$1
  #132 = Utf8               (Ljava/io/File;)Lscala/Some;
  #133 = NameAndType        #131:#132     // $anonfun$withLockFor$1:(Ljava/io/File;)Lscala/Some;
  #134 = Methodref          #2.#133       // coursier/cache/CacheLocks$.$anonfun$withLockFor$1:(Ljava/io/File;)Lscala/Some;
  #135 = MethodHandle       6:#134        // REF_invokeStatic coursier/cache/CacheLocks$.$anonfun$withLockFor$1:(Ljava/io/File;)Lscala/Some;
  #136 = Utf8               ()Lscala/Some;
  #137 = MethodType         #136          //  ()Lscala/Some;
  #138 = Integer            5
  #139 = Utf8               apply
  #140 = Utf8               (Ljava/io/File;)Lscala/Function0;
  #141 = NameAndType        #139:#140     // apply:(Ljava/io/File;)Lscala/Function0;
  #142 = InvokeDynamic      #1:#141       // #1:apply:(Ljava/io/File;)Lscala/Function0;
  #143 = NameAndType        #65:#66       // withLockOr:(Ljava/io/File;Ljava/io/File;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
  #144 = Methodref          #2.#143       // coursier/cache/CacheLocks$.withLockOr:(Ljava/io/File;Ljava/io/File;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
  #145 = Utf8               scala/util/Either
  #146 = Class              #145          // scala/util/Either
  #147 = Utf8               ()Ljava/util/concurrent/ConcurrentHashMap;
  #148 = Utf8               ()Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;
  #149 = Utf8               withUrlLock
  #150 = Utf8               (Ljava/lang/String;Lscala/Function0;)Lscala/Option;
  #151 = Utf8               <T:Ljava/lang/Object;>(Ljava/lang/String;Lscala/Function0<TT;>;)Lscala/Option<TT;>;
  #152 = Utf8               url
  #153 = NameAndType        #22:#147      // urlLocks:()Ljava/util/concurrent/ConcurrentHashMap;
  #154 = Methodref          #2.#153       // coursier/cache/CacheLocks$.urlLocks:()Ljava/util/concurrent/ConcurrentHashMap;
  #155 = NameAndType        #25:#129      // urlLockDummyObject:()Ljava/lang/Object;
  #156 = Methodref          #2.#155       // coursier/cache/CacheLocks$.urlLockDummyObject:()Ljava/lang/Object;
  #157 = Utf8               putIfAbsent
  #158 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #159 = NameAndType        #157:#158     // putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #160 = Methodref          #35.#159      // java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #161 = Utf8               scala/Some
  #162 = Class              #161          // scala/Some
  #163 = NameAndType        #139:#129     // apply:()Ljava/lang/Object;
  #164 = InterfaceMethodref #111.#163     // scala/Function0.apply:()Ljava/lang/Object;
  #165 = Utf8               (Ljava/lang/Object;)V
  #166 = NameAndType        #29:#165      // "<init>":(Ljava/lang/Object;)V
  #167 = Methodref          #162.#166     // scala/Some."<init>":(Ljava/lang/Object;)V
  #168 = Utf8               java/lang/String
  #169 = Class              #168          // java/lang/String
  #170 = Utf8               remove
  #171 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #172 = NameAndType        #170:#171     // remove:(Ljava/lang/Object;)Ljava/lang/Object;
  #173 = Methodref          #35.#172      // java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
  #174 = Utf8               scala/None$
  #175 = Class              #174          // scala/None$
  #176 = Utf8               Lscala/None$;
  #177 = NameAndType        #20:#176      // MODULE$:Lscala/None$;
  #178 = Fieldref           #175.#177     // scala/None$.MODULE$:Lscala/None$;
  #179 = Utf8               scala/Option
  #180 = Class              #179          // scala/Option
  #181 = Utf8               prev
  #182 = Utf8               Ljava/lang/String;
  #183 = Utf8               lockFile$1
  #184 = Utf8               channel$1
  #185 = Utf8               getParent
  #186 = NameAndType        #185:#77      // getParent:()Ljava/nio/file/Path;
  #187 = InterfaceMethodref #113.#186     // java/nio/file/Path.getParent:()Ljava/nio/file/Path;
  #188 = Utf8               coursier/paths/Util
  #189 = Class              #188          // coursier/paths/Util
  #190 = Utf8               createDirectories
  #191 = Utf8               (Ljava/nio/file/Path;)V
  #192 = NameAndType        #190:#191     // createDirectories:(Ljava/nio/file/Path;)V
  #193 = Methodref          #189.#192     // coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
  #194 = Utf8               java/nio/file/OpenOption
  #195 = Class              #194          // java/nio/file/OpenOption
  #196 = Utf8               java/nio/file/StandardOpenOption
  #197 = Class              #196          // java/nio/file/StandardOpenOption
  #198 = Utf8               CREATE
  #199 = Utf8               Ljava/nio/file/StandardOpenOption;
  #200 = NameAndType        #198:#199     // CREATE:Ljava/nio/file/StandardOpenOption;
  #201 = Fieldref           #197.#200     // java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
  #202 = Utf8               WRITE
  #203 = NameAndType        #202:#199     // WRITE:Ljava/nio/file/StandardOpenOption;
  #204 = Fieldref           #197.#203     // java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
  #205 = Utf8               open
  #206 = Utf8               (Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
  #207 = NameAndType        #205:#206     // open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
  #208 = Methodref          #120.#207     // java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
  #209 = Utf8               liftedTree1$1
  #210 = Utf8               (Lscala/runtime/ObjectRef;Lscala/runtime/BooleanRef;)Ljava/nio/channels/FileLock;
  #211 = Utf8               deadlockAvoided$1
  #212 = Utf8               tryLock
  #213 = Utf8               ()Ljava/nio/channels/FileLock;
  #214 = NameAndType        #212:#213     // tryLock:()Ljava/nio/channels/FileLock;
  #215 = Methodref          #120.#214     // java/nio/channels/FileChannel.tryLock:()Ljava/nio/channels/FileLock;
  #216 = Utf8               java/io/IOException
  #217 = Class              #216          // java/io/IOException
  #218 = Utf8               getMessage
  #219 = Utf8               ()Ljava/lang/String;
  #220 = NameAndType        #218:#219     // getMessage:()Ljava/lang/String;
  #221 = Methodref          #217.#220     // java/io/IOException.getMessage:()Ljava/lang/String;
  #222 = Utf8               Resource deadlock avoided
  #223 = String             #222          // Resource deadlock avoided
  #224 = Utf8               scala/runtime/BooleanRef
  #225 = Class              #224          // scala/runtime/BooleanRef
  #226 = Utf8               equals
  #227 = Utf8               (Ljava/lang/Object;)Z
  #228 = NameAndType        #226:#227     // equals:(Ljava/lang/Object;)Z
  #229 = Methodref          #4.#228       // java/lang/Object.equals:(Ljava/lang/Object;)Z
  #230 = Utf8               Z
  #231 = NameAndType        #116:#230     // elem:Z
  #232 = Fieldref           #225.#231     // scala/runtime/BooleanRef.elem:Z
  #233 = Long               200l
  #235 = Utf8               java/lang/Thread
  #236 = Class              #235          // java/lang/Thread
  #237 = Utf8               sleep
  #238 = Utf8               (J)V
  #239 = NameAndType        #237:#238     // sleep:(J)V
  #240 = Methodref          #236.#239     // java/lang/Thread.sleep:(J)V
  #241 = Utf8               java/nio/channels/FileLock
  #242 = Class              #241          // java/nio/channels/FileLock
  #243 = Utf8               Lscala/runtime/BooleanRef;
  #244 = Utf8               ifLocked$1
  #245 = Utf8               f$3
  #246 = Utf8               java/nio/channels/OverlappingFileLockException
  #247 = Class              #246          // java/nio/channels/OverlappingFileLockException
  #248 = Utf8               (Z)Lscala/runtime/BooleanRef;
  #249 = NameAndType        #82:#248      // create:(Z)Lscala/runtime/BooleanRef;
  #250 = Methodref          #225.#249     // scala/runtime/BooleanRef.create:(Z)Lscala/runtime/BooleanRef;
  #251 = NameAndType        #209:#210     // liftedTree1$1:(Lscala/runtime/ObjectRef;Lscala/runtime/BooleanRef;)Ljava/nio/channels/FileLock;
  #252 = Methodref          #2.#251       // coursier/cache/CacheLocks$.liftedTree1$1:(Lscala/runtime/ObjectRef;Lscala/runtime/BooleanRef;)Ljava/nio/channels/FileLock;
  #253 = Utf8               release
  #254 = NameAndType        #253:#28      // release:()V
  #255 = Methodref          #242.#254     // java/nio/channels/FileLock.release:()V
  #256 = Utf8               java/nio/file/Files
  #257 = Class              #256          // java/nio/file/Files
  #258 = Utf8               deleteIfExists
  #259 = Utf8               (Ljava/nio/file/Path;)Z
  #260 = NameAndType        #258:#259     // deleteIfExists:(Ljava/nio/file/Path;)Z
  #261 = Methodref          #257.#260     // java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z
  #262 = Utf8               value
  #263 = NameAndType        #262:#129     // value:()Ljava/lang/Object;
  #264 = Methodref          #162.#263     // scala/Some.value:()Ljava/lang/Object;
  #265 = Utf8               scala/MatchError
  #266 = Class              #265          // scala/MatchError
  #267 = Methodref          #266.#166     // scala/MatchError."<init>":(Ljava/lang/Object;)V
  #268 = Utf8               deadlockAvoided
  #269 = Utf8               lock
  #270 = Utf8               Ljava/nio/channels/FileLock;
  #271 = Utf8               res
  #272 = Utf8               resOpt
  #273 = Utf8               Lscala/Option;
  #274 = Utf8               file$1
  #275 = Utf8               scala/package$
  #276 = Class              #275          // scala/package$
  #277 = Utf8               Lscala/package$;
  #278 = NameAndType        #20:#277      // MODULE$:Lscala/package$;
  #279 = Fieldref           #276.#278     // scala/package$.MODULE$:Lscala/package$;
  #280 = Utf8               Left
  #281 = Utf8               ()Lscala/util/Left$;
  #282 = NameAndType        #280:#281     // Left:()Lscala/util/Left$;
  #283 = Methodref          #276.#282     // scala/package$.Left:()Lscala/util/Left$;
  #284 = Utf8               (Ljava/io/File;)V
  #285 = NameAndType        #29:#284      // "<init>":(Ljava/io/File;)V
  #286 = Methodref          #7.#285       // coursier/cache/ArtifactError$Locked."<init>":(Ljava/io/File;)V
  #287 = Utf8               scala/util/Left$
  #288 = Class              #287          // scala/util/Left$
  #289 = Utf8               (Ljava/lang/Object;)Lscala/util/Left;
  #290 = NameAndType        #139:#289     // apply:(Ljava/lang/Object;)Lscala/util/Left;
  #291 = Methodref          #288.#290     // scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
  #292 = Utf8               $deserializeLambda$
  #293 = Utf8               (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #294 = Utf8               scala/runtime/LambdaDeserialize
  #295 = Class              #294          // scala/runtime/LambdaDeserialize
  #296 = Utf8               bootstrap
  #297 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #298 = NameAndType        #296:#297     // bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #299 = Methodref          #295.#298     // scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #300 = MethodHandle       6:#299        // REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
  #301 = Utf8               lambdaDeserialize
  #302 = NameAndType        #301:#293     // lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #303 = InvokeDynamic      #2:#302       // #2:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
  #304 = Utf8               Signature
  #305 = Utf8               Code
  #306 = Utf8               LineNumberTable
  #307 = Utf8               LocalVariableTable
  #308 = Utf8               MethodParameters
  #309 = Utf8               StackMapTable
  #310 = Utf8               InnerClasses
  #311 = Utf8               SourceFile
  #312 = Utf8               BootstrapMethods
  #313 = Utf8               ScalaInlineInfo
  #314 = Utf8               Scala
{
  public static final coursier.cache.CacheLocks$ MODULE$;
    descriptor: Lcoursier/cache/CacheLocks$;
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  private static final java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Object> urlLocks;
    descriptor: Ljava/util/concurrent/ConcurrentHashMap;
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    Signature: #24                          // Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

  private static final java.lang.Object urlLockDummyObject;
    descriptor: Ljava/lang/Object;
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL

  public static {};
    descriptor: ()V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #2                  // class coursier/cache/CacheLocks$
         3: dup
         4: invokespecial #31                 // Method "<init>":()V
         7: putstatic     #33                 // Field MODULE$:Lcoursier/cache/CacheLocks$;
        10: new           #35                 // class java/util/concurrent/ConcurrentHashMap
        13: dup
        14: invokespecial #36                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
        17: putstatic     #38                 // Field urlLocks:Ljava/util/concurrent/ConcurrentHashMap;
        20: new           #4                  // class java/lang/Object
        23: dup
        24: invokespecial #39                 // Method java/lang/Object."<init>":()V
        27: putstatic     #41                 // Field urlLockDummyObject:Ljava/lang/Object;
        30: return
      LineNumberTable:
        line 12: 0
        line 108: 10
        line 109: 20
        line 12: 30

  public <T extends java.lang.Object> T withStructureLock(java.io.File, scala.Function0<T>);
    descriptor: (Ljava/io/File;Lscala/Function0;)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=3
         0: aload_1
         1: new           #12                 // class coursier/cache/CacheLocks$$anon$1
         4: dup
         5: aload_2
         6: invokespecial #49                 // Method coursier/cache/CacheLocks$$anon$1."<init>":(Lscala/Function0;)V
         9: invokestatic  #54                 // Method coursier/paths/CachePath.withStructureLock:(Ljava/io/File;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
        12: areturn
      LineNumberTable:
        line 21: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lcoursier/cache/CacheLocks$;
            0      13     1 cache   Ljava/io/File;
            0      13     2     f   Lscala/Function0;
    Signature: #44                          // <T:Ljava/lang/Object;>(Ljava/io/File;Lscala/Function0<TT;>;)TT;
    MethodParameters:
      Name                           Flags
      cache                          final
      f                              final

  public <T extends java.lang.Object> T withStructureLock(java.nio.file.Path, scala.Function0<T>);
    descriptor: (Ljava/nio/file/Path;Lscala/Function0;)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=4, locals=3, args_size=3
         0: aload_1
         1: new           #14                 // class coursier/cache/CacheLocks$$anon$2
         4: dup
         5: aload_2
         6: invokespecial #60                 // Method coursier/cache/CacheLocks$$anon$2."<init>":(Lscala/Function0;)V
         9: invokestatic  #63                 // Method coursier/paths/CachePath.withStructureLock:(Ljava/nio/file/Path;Ljava/util/concurrent/Callable;)Ljava/lang/Object;
        12: areturn
      LineNumberTable:
        line 24: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      13     0  this   Lcoursier/cache/CacheLocks$;
            0      13     1 cache   Ljava/nio/file/Path;
            0      13     2     f   Lscala/Function0;
    Signature: #59                          // <T:Ljava/lang/Object;>(Ljava/nio/file/Path;Lscala/Function0<TT;>;)TT;
    MethodParameters:
      Name                           Flags
      cache                          final
      f                              final

  public <T extends java.lang.Object> T withLockOr(java.io.File, java.io.File, scala.Function0<T>, scala.Function0<scala.Option<T>>);
    descriptor: (Ljava/io/File;Ljava/io/File;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=8, args_size=5
         0: aload_2
         1: invokestatic  #73                 // Method coursier/paths/CachePath.lockFile:(Ljava/io/File;)Ljava/io/File;
         4: invokevirtual #79                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
         7: astore        5
         9: aconst_null
        10: invokestatic  #85                 // Method scala/runtime/ObjectRef.create:(Ljava/lang/Object;)Lscala/runtime/ObjectRef;
        13: astore        6
        15: aload_0
        16: aload_1
        17: aload         5
        19: aload         6
        21: invokedynamic #103,  0            // InvokeDynamic #0:apply$mcV$sp:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)Lscala/runtime/java8/JFunction0$mcV$sp;
        26: invokevirtual #105                // Method withStructureLock:(Ljava/io/File;Lscala/Function0;)Ljava/lang/Object;
        29: pop
        30: aload_0
        31: aload         6
        33: aload         4
        35: aload_3
        36: aload         5
        38: invokespecial #109                // Method loop$1:(Lscala/runtime/ObjectRef;Lscala/Function0;Lscala/Function0;Ljava/nio/file/Path;)Ljava/lang/Object;
        41: goto          74
        44: astore        7
        46: aload         6
        48: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        51: checkcast     #120                // class java/nio/channels/FileChannel
        54: ifnull        71
        57: aload         6
        59: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        62: checkcast     #120                // class java/nio/channels/FileChannel
        65: invokevirtual #123                // Method java/nio/channels/FileChannel.close:()V
        68: goto          71
        71: aload         7
        73: athrow
        74: aload         6
        76: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        79: checkcast     #120                // class java/nio/channels/FileChannel
        82: ifnull        99
        85: aload         6
        87: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        90: checkcast     #120                // class java/nio/channels/FileChannel
        93: invokevirtual #123                // Method java/nio/channels/FileChannel.close:()V
        96: goto          99
        99: areturn
      Exception table:
         from    to  target type
            30    44    44   any
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 44
          locals = [ class coursier/cache/CacheLocks$, class java/io/File, class java/io/File, class scala/Function0, class scala/Function0, class java/nio/file/Path, class scala/runtime/ObjectRef ]
          stack = [ class java/lang/Throwable ]
        frame_type = 252 /* append */
          offset_delta = 26
          locals = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/cache/CacheLocks$, class java/io/File, class java/io/File, class scala/Function0, class scala/Function0, class java/nio/file/Path, class scala/runtime/ObjectRef ]
          stack = [ class java/lang/Object ]
        frame_type = 88 /* same_locals_1_stack_item */
          stack = [ class java/lang/Object ]
      LineNumberTable:
        line 34: 0
        line 36: 9
        line 38: 15
        line 98: 30
        line 100: 46
        line 101: 57
        line 100: 71
        line 101: 85
        line 100: 99
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            9      90     5 lockFile   Ljava/nio/file/Path;
           15      84     6 channel   Lscala/runtime/ObjectRef;
            0     100     0  this   Lcoursier/cache/CacheLocks$;
            0     100     1 cache   Ljava/io/File;
            0     100     2  file   Ljava/io/File;
            0     100     3     f   Lscala/Function0;
            0     100     4 ifLocked   Lscala/Function0;
    Signature: #67                          // <T:Ljava/lang/Object;>(Ljava/io/File;Ljava/io/File;Lscala/Function0<TT;>;Lscala/Function0<Lscala/Option<TT;>;>;)TT;
    MethodParameters:
      Name                           Flags
      cache                          final
      file                           final
      f                              final
      ifLocked                       final

  public <T extends java.lang.Object> scala.util.Either<coursier.cache.ArtifactError, T> withLockFor(java.io.File, java.io.File, scala.Function0<scala.util.Either<coursier.cache.ArtifactError, T>>);
    descriptor: (Ljava/io/File;Ljava/io/File;Lscala/Function0;)Lscala/util/Either;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=5, locals=4, args_size=4
         0: aload_0
         1: aload_1
         2: aload_2
         3: aload_3
         4: aload_2
         5: invokedynamic #142,  0            // InvokeDynamic #1:apply:(Ljava/io/File;)Lscala/Function0;
        10: invokevirtual #144                // Method withLockOr:(Ljava/io/File;Ljava/io/File;Lscala/Function0;Lscala/Function0;)Ljava/lang/Object;
        13: checkcast     #146                // class scala/util/Either
        16: areturn
      LineNumberTable:
        line 106: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lcoursier/cache/CacheLocks$;
            0      17     1 cache   Ljava/io/File;
            0      17     2  file   Ljava/io/File;
            0      17     3     f   Lscala/Function0;
    Signature: #128                         // <T:Ljava/lang/Object;>(Ljava/io/File;Ljava/io/File;Lscala/Function0<Lscala/util/Either<Lcoursier/cache/ArtifactError;TT;>;>;)Lscala/util/Either<Lcoursier/cache/ArtifactError;TT;>;
    MethodParameters:
      Name                           Flags
      cache                          final
      file                           final
      f                              final

  private java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Object> urlLocks();
    descriptor: ()Ljava/util/concurrent/ConcurrentHashMap;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: getstatic     #38                 // Field urlLocks:Ljava/util/concurrent/ConcurrentHashMap;
         3: areturn
      LineNumberTable:
        line 108: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lcoursier/cache/CacheLocks$;
    Signature: #148                         // ()Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Object;>;

  private java.lang.Object urlLockDummyObject();
    descriptor: ()Ljava/lang/Object;
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: getstatic     #41                 // Field urlLockDummyObject:Ljava/lang/Object;
         3: areturn
      LineNumberTable:
        line 109: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       4     0  this   Lcoursier/cache/CacheLocks$;

  public <T extends java.lang.Object> scala.Option<T> withUrlLock(java.lang.String, scala.Function0<T>);
    descriptor: (Ljava/lang/String;Lscala/Function0;)Lscala/Option;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=5, args_size=3
         0: aload_0
         1: invokespecial #154                // Method urlLocks:()Ljava/util/concurrent/ConcurrentHashMap;
         4: aload_1
         5: aload_0
         6: invokespecial #156                // Method urlLockDummyObject:()Ljava/lang/Object;
         9: invokevirtual #160                // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        12: astore_3
        13: aload_3
        14: ifnonnull     59
        17: new           #162                // class scala/Some
        20: dup
        21: aload_2
        22: invokeinterface #164,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
        27: invokespecial #167                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        30: goto          47
        33: astore        4
        35: aload_0
        36: invokespecial #154                // Method urlLocks:()Ljava/util/concurrent/ConcurrentHashMap;
        39: aload_1
        40: invokevirtual #173                // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
        43: pop
        44: aload         4
        46: athrow
        47: aload_0
        48: invokespecial #154                // Method urlLocks:()Ljava/util/concurrent/ConcurrentHashMap;
        51: aload_1
        52: invokevirtual #173                // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
        55: pop
        56: goto          62
        59: getstatic     #178                // Field scala/None$.MODULE$:Lscala/None$;
        62: areturn
      Exception table:
         from    to  target type
            17    33    33   any
      StackMapTable: number_of_entries = 4
        frame_type = 255 /* full_frame */
          offset_delta = 33
          locals = [ class coursier/cache/CacheLocks$, class java/lang/String, class scala/Function0, class java/lang/Object ]
          stack = [ class java/lang/Throwable ]
        frame_type = 77 /* same_locals_1_stack_item */
          stack = [ class scala/Some ]
        frame_type = 11 /* same */
        frame_type = 66 /* same_locals_1_stack_item */
          stack = [ class scala/Option ]
      LineNumberTable:
        line 113: 0
        line 115: 13
        line 116: 17
        line 118: 35
        line 121: 59
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           13      49     3  prev   Ljava/lang/Object;
            0      63     0  this   Lcoursier/cache/CacheLocks$;
            0      63     1   url   Ljava/lang/String;
            0      63     2     f   Lscala/Function0;
    Signature: #151                         // <T:Ljava/lang/Object;>(Ljava/lang/String;Lscala/Function0<TT;>;)Lscala/Option<TT;>;
    MethodParameters:
      Name                           Flags
      url                            final
      f                              final

  public static final void $anonfun$withLockOr$1(java.nio.file.Path, scala.runtime.ObjectRef);
    descriptor: (Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=6, locals=2, args_size=2
         0: aload_0
         1: invokeinterface #187,  1          // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
         6: invokestatic  #193                // Method coursier/paths/Util.createDirectories:(Ljava/nio/file/Path;)V
         9: aload_1
        10: aload_0
        11: iconst_2
        12: anewarray     #195                // class java/nio/file/OpenOption
        15: dup
        16: iconst_0
        17: getstatic     #201                // Field java/nio/file/StandardOpenOption.CREATE:Ljava/nio/file/StandardOpenOption;
        20: aastore
        21: dup
        22: iconst_1
        23: getstatic     #204                // Field java/nio/file/StandardOpenOption.WRITE:Ljava/nio/file/StandardOpenOption;
        26: aastore
        27: invokestatic  #208                // Method java/nio/channels/FileChannel.open:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/FileChannel;
        30: putfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        33: return
      LineNumberTable:
        line 39: 0
        line 40: 9
        line 41: 10
        line 42: 17
        line 43: 23
        line 40: 30
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      34     0 lockFile$1   Ljava/nio/file/Path;
            0      34     1 channel$1   Lscala/runtime/ObjectRef;
    MethodParameters:
      Name                           Flags
      lockFile$1                     final
      channel$1                      final

  private static final java.nio.channels.FileLock liftedTree1$1(scala.runtime.ObjectRef, scala.runtime.BooleanRef);
    descriptor: (Lscala/runtime/ObjectRef;Lscala/runtime/BooleanRef;)Ljava/nio/channels/FileLock;
    flags: (0x101a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=2, locals=7, args_size=2
         0: aload_0
         1: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
         4: checkcast     #120                // class java/nio/channels/FileChannel
         7: invokevirtual #215                // Method java/nio/channels/FileChannel.tryLock:()Ljava/nio/channels/FileLock;
        10: goto          90
        13: astore_3
        14: aload_3
        15: astore        4
        17: aload         4
        19: instanceof    #217                // class java/io/IOException
        22: ifeq          81
        25: aload         4
        27: checkcast     #217                // class java/io/IOException
        30: astore        5
        32: aload         5
        34: invokevirtual #221                // Method java/io/IOException.getMessage:()Ljava/lang/String;
        37: ldc           #223                // String Resource deadlock avoided
        39: astore        6
        41: dup
        42: ifnonnull     54
        45: pop
        46: aload         6
        48: ifnull        62
        51: goto          78
        54: aload         6
        56: invokevirtual #229                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
        59: ifeq          78
        62: aload_1
        63: iconst_1
        64: putfield      #232                // Field scala/runtime/BooleanRef.elem:Z
        67: ldc2_w        #233                // long 200l
        70: invokestatic  #240                // Method java/lang/Thread.sleep:(J)V
        73: aconst_null
        74: astore_2
        75: goto          86
        78: goto          84
        81: goto          84
        84: aload_3
        85: athrow
        86: aload_2
        87: goto          90
        90: areturn
      Exception table:
         from    to  target type
             0    10    13   Class java/lang/Throwable
      StackMapTable: number_of_entries = 8
        frame_type = 77 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 40
          locals = [ class scala/runtime/ObjectRef, class scala/runtime/BooleanRef, top, class java/lang/Throwable, class java/lang/Throwable, class java/io/IOException, class java/lang/String ]
          stack = [ class java/lang/String ]
        frame_type = 7 /* same */
        frame_type = 15 /* same */
        frame_type = 249 /* chop */
          offset_delta = 2
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class scala/runtime/ObjectRef, class scala/runtime/BooleanRef, null, class java/lang/Throwable, class java/lang/Throwable, class java/io/IOException, class java/lang/String ]
          stack = []
        frame_type = 255 /* full_frame */
          offset_delta = 3
          locals = [ class scala/runtime/ObjectRef, class scala/runtime/BooleanRef ]
          stack = [ class java/nio/channels/FileLock ]
      LineNumberTable:
        line 59: 0
        line 61: 14
        line 61: 17
        line 62: 62
        line 63: 67
        line 64: 73
        line 61: 78
        line 59: 84
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      91     0 channel$1   Lscala/runtime/ObjectRef;
            0      91     1 deadlockAvoided$1   Lscala/runtime/BooleanRef;
    MethodParameters:
      Name                           Flags
      channel$1                      final
      deadlockAvoided$1              final

  private final java.lang.Object loop$1(scala.runtime.ObjectRef, scala.Function0, scala.Function0, java.nio.file.Path);
    descriptor: (Lscala/runtime/ObjectRef;Lscala/Function0;Lscala/Function0;Ljava/nio/file/Path;)Ljava/lang/Object;
    flags: (0x0012) ACC_PRIVATE, ACC_FINAL
    Code:
      stack=3, locals=15, args_size=5
         0: aconst_null
         1: astore        8
         3: iconst_0
         4: invokestatic  #250                // Method scala/runtime/BooleanRef.create:(Z)Lscala/runtime/BooleanRef;
         7: astore        9
         9: aload_1
        10: aload         9
        12: invokestatic  #252                // Method liftedTree1$1:(Lscala/runtime/ObjectRef;Lscala/runtime/BooleanRef;)Ljava/nio/channels/FileLock;
        15: astore        8
        17: aload         9
        19: getfield      #232                // Field scala/runtime/BooleanRef.elem:Z
        22: ifeq          31
        25: getstatic     #178                // Field scala/None$.MODULE$:Lscala/None$;
        28: goto          127
        31: aload         8
        33: ifnonnull     48
        36: aload_2
        37: invokeinterface #164,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
        42: checkcast     #180                // class scala/Option
        45: goto          127
        48: new           #162                // class scala/Some
        51: dup
        52: aload_3
        53: invokeinterface #164,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
        58: invokespecial #167                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        61: goto          98
        64: astore        10
        66: aload         8
        68: invokevirtual #255                // Method java/nio/channels/FileLock.release:()V
        71: aconst_null
        72: astore        8
        74: aload_1
        75: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        78: checkcast     #120                // class java/nio/channels/FileChannel
        81: invokevirtual #123                // Method java/nio/channels/FileChannel.close:()V
        84: aload_1
        85: aconst_null
        86: putfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
        89: aload         4
        91: invokestatic  #261                // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z
        94: pop
        95: aload         10
        97: athrow
        98: aload         8
       100: invokevirtual #255                // Method java/nio/channels/FileLock.release:()V
       103: aconst_null
       104: astore        8
       106: aload_1
       107: getfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
       110: checkcast     #120                // class java/nio/channels/FileChannel
       113: invokevirtual #123                // Method java/nio/channels/FileChannel.close:()V
       116: aload_1
       117: aconst_null
       118: putfield      #118                // Field scala/runtime/ObjectRef.elem:Ljava/lang/Object;
       121: aload         4
       123: invokestatic  #261                // Method java/nio/file/Files.deleteIfExists:(Ljava/nio/file/Path;)Z
       126: pop
       127: goto          161
       130: pop
       131: aload_2
       132: invokeinterface #164,  1          // InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
       137: checkcast     #180                // class scala/Option
       140: goto          161
       143: astore        11
       145: aload         8
       147: ifnull        158
       150: aload         8
       152: invokevirtual #255                // Method java/nio/channels/FileLock.release:()V
       155: goto          158
       158: aload         11
       160: athrow
       161: aload         8
       163: ifnull        174
       166: aload         8
       168: invokevirtual #255                // Method java/nio/channels/FileLock.release:()V
       171: goto          174
       174: astore        7
       176: aload         7
       178: astore        12
       180: aload         12
       182: instanceof    #162                // class scala/Some
       185: ifeq          209
       188: aload         12
       190: checkcast     #162                // class scala/Some
       193: astore        13
       195: aload         13
       197: invokevirtual #264                // Method scala/Some.value:()Ljava/lang/Object;
       200: astore        14
       202: aload         14
       204: astore        6
       206: goto          239
       209: goto          212
       212: getstatic     #178                // Field scala/None$.MODULE$:Lscala/None$;
       215: aload         12
       217: invokevirtual #229                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       220: ifeq          226
       223: goto          0
       226: goto          229
       229: new           #266                // class scala/MatchError
       232: dup
       233: aload         12
       235: invokespecial #267                // Method scala/MatchError."<init>":(Ljava/lang/Object;)V
       238: athrow
       239: aload         6
       241: areturn
      Exception table:
         from    to  target type
            48    64    64   any
             3   127   130   Class java/nio/channels/OverlappingFileLockException
             3   143   143   any
      StackMapTable: number_of_entries = 16
        frame_type = 0 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 30
          locals = [ class coursier/cache/CacheLocks$, class scala/runtime/ObjectRef, class scala/Function0, class scala/Function0, class java/nio/file/Path, top, top, top, class java/nio/channels/FileLock, class scala/runtime/BooleanRef ]
          stack = []
        frame_type = 16 /* same */
        frame_type = 79 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 97 /* same_locals_1_stack_item */
          stack = [ class scala/Some ]
        frame_type = 92 /* same_locals_1_stack_item */
          stack = [ class scala/Option ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/cache/CacheLocks$, class scala/runtime/ObjectRef, class scala/Function0, class scala/Function0, class java/nio/file/Path, top, top, top, class java/nio/channels/FileLock ]
          stack = [ class java/nio/channels/OverlappingFileLockException ]
        frame_type = 76 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 254 /* append */
          offset_delta = 14
          locals = [ top, top, class java/lang/Throwable ]
        frame_type = 255 /* full_frame */
          offset_delta = 2
          locals = [ class coursier/cache/CacheLocks$, class scala/runtime/ObjectRef, class scala/Function0, class scala/Function0, class java/nio/file/Path, top, top, top, class java/nio/channels/FileLock ]
          stack = [ class scala/Option ]
        frame_type = 76 /* same_locals_1_stack_item */
          stack = [ class scala/Option ]
        frame_type = 255 /* full_frame */
          offset_delta = 34
          locals = [ class coursier/cache/CacheLocks$, class scala/runtime/ObjectRef, class scala/Function0, class scala/Function0, class java/nio/file/Path, top, top, class scala/Option, class java/nio/channels/FileLock, top, top, top, class scala/Option ]
          stack = []
        frame_type = 2 /* same */
        frame_type = 13 /* same */
        frame_type = 2 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 9
          locals = [ class coursier/cache/CacheLocks$, class scala/runtime/ObjectRef, class scala/Function0, class scala/Function0, class java/nio/file/Path, top, class java/lang/Object, class scala/Option, class java/nio/channels/FileLock, top, top, top, class scala/Option, class scala/Some, class java/lang/Object ]
          stack = []
      LineNumberTable:
        line 51: 0
        line 56: 3
        line 59: 9
        line 58: 15
        line 67: 17
        line 68: 25
        line 69: 31
        line 70: 36
        line 72: 48
        line 74: 66
        line 75: 71
        line 76: 74
        line 77: 84
        line 78: 89
        line 74: 98
        line 75: 103
        line 76: 106
        line 77: 116
        line 78: 121
        line 83: 131
        line 86: 145
        line 87: 150
        line 86: 158
        line 87: 166
        line 86: 174
        line 91: 176
        line 92: 180
        line 93: 212
        line 94: 223
        line 93: 226
        line 91: 229
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            9     118     9 deadlockAvoided   Lscala/runtime/BooleanRef;
            3     171     8  lock   Ljava/nio/channels/FileLock;
          202       7    14   res   Ljava/lang/Object;
          176      65     7 resOpt   Lscala/Option;
            0     242     0  this   Lcoursier/cache/CacheLocks$;
            0     242     1 channel$1   Lscala/runtime/ObjectRef;
            0     242     2 ifLocked$1   Lscala/Function0;
            0     242     3   f$3   Lscala/Function0;
            0     242     4 lockFile$1   Ljava/nio/file/Path;
    MethodParameters:
      Name                           Flags
      channel$1                      final
      ifLocked$1                     final
      f$3                            final
      lockFile$1                     final

  public static final scala.Some $anonfun$withLockFor$1(java.io.File);
    descriptor: (Ljava/io/File;)Lscala/Some;
    flags: (0x1019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
    Code:
      stack=6, locals=1, args_size=1
         0: new           #162                // class scala/Some
         3: dup
         4: getstatic     #279                // Field scala/package$.MODULE$:Lscala/package$;
         7: invokevirtual #283                // Method scala/package$.Left:()Lscala/util/Left$;
        10: new           #7                  // class coursier/cache/ArtifactError$Locked
        13: dup
        14: aload_0
        15: invokespecial #286                // Method coursier/cache/ArtifactError$Locked."<init>":(Ljava/io/File;)V
        18: invokevirtual #291                // Method scala/util/Left$.apply:(Ljava/lang/Object;)Lscala/util/Left;
        21: invokespecial #167                // Method scala/Some."<init>":(Ljava/lang/Object;)V
        24: areturn
      LineNumberTable:
        line 106: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      25     0 file$1   Ljava/io/File;
    MethodParameters:
      Name                           Flags
      file$1                         final

  private coursier.cache.CacheLocks$();
    descriptor: ()V
    flags: (0x0002) ACC_PRIVATE
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #39                 // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 124: 0
        line 12: 4
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcoursier/cache/CacheLocks$;

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    descriptor: (Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
    flags: (0x100a) ACC_PRIVATE, ACC_STATIC, ACC_SYNTHETIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokedynamic #303,  0            // InvokeDynamic #2:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
         6: areturn
}
InnerClasses:
  public static final #10= #7 of #9;      // Locked=class coursier/cache/ArtifactError$Locked of class coursier/cache/ArtifactError
  public final #12;                       // class coursier/cache/CacheLocks$$anon$1
  public final #14;                       // class coursier/cache/CacheLocks$$anon$2
  public static final #19= #16 of #18;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
SourceFile: "CacheLocks.scala"
BootstrapMethods:
  0: #99 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #86 ()V
      #91 REF_invokeStatic coursier/cache/CacheLocks$.$anonfun$withLockOr$1:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
      #86 ()V
      #92 1
  1: #99 REF_invokeStatic java/lang/invoke/LambdaMetafactory.altMetafactory:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #130 ()Ljava/lang/Object;
      #135 REF_invokeStatic coursier/cache/CacheLocks$.$anonfun$withLockFor$1:(Ljava/io/File;)Lscala/Some;
      #137 ()Lscala/Some;
      #138 5
      #92 1
      #137 ()Lscala/Some;
  2: #300 REF_invokeStatic scala/runtime/LambdaDeserialize.bootstrap:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;[Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #135 REF_invokeStatic coursier/cache/CacheLocks$.$anonfun$withLockFor$1:(Ljava/io/File;)Lscala/Some;
      #91 REF_invokeStatic coursier/cache/CacheLocks$.$anonfun$withLockOr$1:(Ljava/nio/file/Path;Lscala/runtime/ObjectRef;)V
  ScalaInlineInfo: length = 0x40 (unknown attribute)
   01 01 00 0C 00 83 00 84 01 00 57 00 58 01 00 1D
   00 1C 01 00 D1 00 D2 01 00 6A 00 6B 01 00 19 00
   81 01 00 16 00 93 01 00 7E 00 7F 01 00 41 00 42
   01 00 2A 00 2B 01 00 2A 00 3A 01 00 95 00 96 01

  Scala: length = 0x0 (unknown attribute)

