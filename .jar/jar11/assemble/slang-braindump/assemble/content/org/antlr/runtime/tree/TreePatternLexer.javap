Classfile /Users/mw/Projects/slang-braindump/.jar/jar11/assemble/slang-braindump/assemble/content/org/antlr/runtime/tree/TreePatternLexer.class
  Last modified May 29, 2022; size 1808 bytes
  SHA-256 checksum 8d97b3dfe0eed2f4a4a850c50e3e99c62427198e498563ce6874ac9a921b9f96
  Compiled from "TreePatternLexer.java"
public class org.antlr.runtime.tree.TreePatternLexer
  minor version: 0
  major version: 49
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #15                         // org/antlr/runtime/tree/TreePatternLexer
  super_class: #16                        // java/lang/Object
  interfaces: 0, fields: 14, methods: 3, attributes: 1
Constant pool:
   #1 = Methodref          #16.#57        // java/lang/Object."<init>":()V
   #2 = Fieldref           #15.#58        // org/antlr/runtime/tree/TreePatternLexer.p:I
   #3 = Class              #59            // java/lang/StringBuffer
   #4 = Methodref          #3.#57         // java/lang/StringBuffer."<init>":()V
   #5 = Fieldref           #15.#60        // org/antlr/runtime/tree/TreePatternLexer.sval:Ljava/lang/StringBuffer;
   #6 = Fieldref           #15.#61        // org/antlr/runtime/tree/TreePatternLexer.error:Z
   #7 = Fieldref           #15.#62        // org/antlr/runtime/tree/TreePatternLexer.pattern:Ljava/lang/String;
   #8 = Methodref          #63.#64        // java/lang/String.length:()I
   #9 = Fieldref           #15.#65        // org/antlr/runtime/tree/TreePatternLexer.n:I
  #10 = Methodref          #15.#66        // org/antlr/runtime/tree/TreePatternLexer.consume:()V
  #11 = Methodref          #3.#67         // java/lang/StringBuffer.setLength:(I)V
  #12 = Fieldref           #15.#68        // org/antlr/runtime/tree/TreePatternLexer.c:I
  #13 = Methodref          #3.#69         // java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
  #14 = Methodref          #63.#70        // java/lang/String.charAt:(I)C
  #15 = Class              #71            // org/antlr/runtime/tree/TreePatternLexer
  #16 = Class              #72            // java/lang/Object
  #17 = Utf8               EOF
  #18 = Utf8               I
  #19 = Utf8               ConstantValue
  #20 = Integer            -1
  #21 = Utf8               BEGIN
  #22 = Integer            1
  #23 = Utf8               END
  #24 = Integer            2
  #25 = Utf8               ID
  #26 = Integer            3
  #27 = Utf8               ARG
  #28 = Integer            4
  #29 = Utf8               PERCENT
  #30 = Integer            5
  #31 = Utf8               COLON
  #32 = Integer            6
  #33 = Utf8               DOT
  #34 = Integer            7
  #35 = Utf8               pattern
  #36 = Utf8               Ljava/lang/String;
  #37 = Utf8               p
  #38 = Utf8               c
  #39 = Utf8               n
  #40 = Utf8               sval
  #41 = Utf8               Ljava/lang/StringBuffer;
  #42 = Utf8               error
  #43 = Utf8               Z
  #44 = Utf8               <init>
  #45 = Utf8               (Ljava/lang/String;)V
  #46 = Utf8               Code
  #47 = Utf8               LineNumberTable
  #48 = Utf8               LocalVariableTable
  #49 = Utf8               this
  #50 = Utf8               Lorg/antlr/runtime/tree/TreePatternLexer;
  #51 = Utf8               nextToken
  #52 = Utf8               ()I
  #53 = Utf8               consume
  #54 = Utf8               ()V
  #55 = Utf8               SourceFile
  #56 = Utf8               TreePatternLexer.java
  #57 = NameAndType        #44:#54        // "<init>":()V
  #58 = NameAndType        #37:#18        // p:I
  #59 = Utf8               java/lang/StringBuffer
  #60 = NameAndType        #40:#41        // sval:Ljava/lang/StringBuffer;
  #61 = NameAndType        #42:#43        // error:Z
  #62 = NameAndType        #35:#36        // pattern:Ljava/lang/String;
  #63 = Class              #73            // java/lang/String
  #64 = NameAndType        #74:#52        // length:()I
  #65 = NameAndType        #39:#18        // n:I
  #66 = NameAndType        #53:#54        // consume:()V
  #67 = NameAndType        #75:#76        // setLength:(I)V
  #68 = NameAndType        #38:#18        // c:I
  #69 = NameAndType        #77:#78        // append:(C)Ljava/lang/StringBuffer;
  #70 = NameAndType        #79:#80        // charAt:(I)C
  #71 = Utf8               org/antlr/runtime/tree/TreePatternLexer
  #72 = Utf8               java/lang/Object
  #73 = Utf8               java/lang/String
  #74 = Utf8               length
  #75 = Utf8               setLength
  #76 = Utf8               (I)V
  #77 = Utf8               append
  #78 = Utf8               (C)Ljava/lang/StringBuffer;
  #79 = Utf8               charAt
  #80 = Utf8               (I)C
{
  public static final int EOF;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int -1

  public static final int BEGIN;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 1

  public static final int END;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 2

  public static final int ID;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 3

  public static final int ARG;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 4

  public static final int PERCENT;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 5

  public static final int COLON;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 6

  public static final int DOT;
    descriptor: I
    flags: (0x0019) ACC_PUBLIC, ACC_STATIC, ACC_FINAL
    ConstantValue: int 7

  protected java.lang.String pattern;
    descriptor: Ljava/lang/String;
    flags: (0x0004) ACC_PROTECTED

  protected int p;
    descriptor: I
    flags: (0x0004) ACC_PROTECTED

  protected int c;
    descriptor: I
    flags: (0x0004) ACC_PROTECTED

  protected int n;
    descriptor: I
    flags: (0x0004) ACC_PROTECTED

  public java.lang.StringBuffer sval;
    descriptor: Ljava/lang/StringBuffer;
    flags: (0x0001) ACC_PUBLIC

  public boolean error;
    descriptor: Z
    flags: (0x0001) ACC_PUBLIC

  public org.antlr.runtime.tree.TreePatternLexer(java.lang.String);
    descriptor: (Ljava/lang/String;)V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=2
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: iconst_m1
         6: putfield      #2                  // Field p:I
         9: aload_0
        10: new           #3                  // class java/lang/StringBuffer
        13: dup
        14: invokespecial #4                  // Method java/lang/StringBuffer."<init>":()V
        17: putfield      #5                  // Field sval:Ljava/lang/StringBuffer;
        20: aload_0
        21: iconst_0
        22: putfield      #6                  // Field error:Z
        25: aload_0
        26: aload_1
        27: putfield      #7                  // Field pattern:Ljava/lang/String;
        30: aload_0
        31: aload_1
        32: invokevirtual #8                  // Method java/lang/String.length:()I
        35: putfield      #9                  // Field n:I
        38: aload_0
        39: invokevirtual #10                 // Method consume:()V
        42: return
      LineNumberTable:
        line 57: 0
        line 44: 4
        line 53: 9
        line 55: 20
        line 58: 25
        line 59: 30
        line 60: 38
        line 61: 42
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      43     0  this   Lorg/antlr/runtime/tree/TreePatternLexer;
            0      43     1 pattern   Ljava/lang/String;

  public int nextToken();
    descriptor: ()I
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=1, args_size=1
         0: aload_0
         1: getfield      #5                  // Field sval:Ljava/lang/StringBuffer;
         4: iconst_0
         5: invokevirtual #11                 // Method java/lang/StringBuffer.setLength:(I)V
         8: aload_0
         9: getfield      #12                 // Field c:I
        12: iconst_m1
        13: if_icmpeq     390
        16: aload_0
        17: getfield      #12                 // Field c:I
        20: bipush        32
        22: if_icmpeq     52
        25: aload_0
        26: getfield      #12                 // Field c:I
        29: bipush        10
        31: if_icmpeq     52
        34: aload_0
        35: getfield      #12                 // Field c:I
        38: bipush        13
        40: if_icmpeq     52
        43: aload_0
        44: getfield      #12                 // Field c:I
        47: bipush        9
        49: if_icmpne     59
        52: aload_0
        53: invokevirtual #10                 // Method consume:()V
        56: goto          8
        59: aload_0
        60: getfield      #12                 // Field c:I
        63: bipush        97
        65: if_icmplt     77
        68: aload_0
        69: getfield      #12                 // Field c:I
        72: bipush        122
        74: if_icmple     104
        77: aload_0
        78: getfield      #12                 // Field c:I
        81: bipush        65
        83: if_icmplt     95
        86: aload_0
        87: getfield      #12                 // Field c:I
        90: bipush        90
        92: if_icmple     104
        95: aload_0
        96: getfield      #12                 // Field c:I
        99: bipush        95
       101: if_icmpne     206
       104: aload_0
       105: getfield      #5                  // Field sval:Ljava/lang/StringBuffer;
       108: aload_0
       109: getfield      #12                 // Field c:I
       112: i2c
       113: invokevirtual #13                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
       116: pop
       117: aload_0
       118: invokevirtual #10                 // Method consume:()V
       121: aload_0
       122: getfield      #12                 // Field c:I
       125: bipush        97
       127: if_icmplt     139
       130: aload_0
       131: getfield      #12                 // Field c:I
       134: bipush        122
       136: if_icmple     184
       139: aload_0
       140: getfield      #12                 // Field c:I
       143: bipush        65
       145: if_icmplt     157
       148: aload_0
       149: getfield      #12                 // Field c:I
       152: bipush        90
       154: if_icmple     184
       157: aload_0
       158: getfield      #12                 // Field c:I
       161: bipush        48
       163: if_icmplt     175
       166: aload_0
       167: getfield      #12                 // Field c:I
       170: bipush        57
       172: if_icmple     184
       175: aload_0
       176: getfield      #12                 // Field c:I
       179: bipush        95
       181: if_icmpne     204
       184: aload_0
       185: getfield      #5                  // Field sval:Ljava/lang/StringBuffer;
       188: aload_0
       189: getfield      #12                 // Field c:I
       192: i2c
       193: invokevirtual #13                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
       196: pop
       197: aload_0
       198: invokevirtual #10                 // Method consume:()V
       201: goto          121
       204: iconst_3
       205: ireturn
       206: aload_0
       207: getfield      #12                 // Field c:I
       210: bipush        40
       212: if_icmpne     221
       215: aload_0
       216: invokevirtual #10                 // Method consume:()V
       219: iconst_1
       220: ireturn
       221: aload_0
       222: getfield      #12                 // Field c:I
       225: bipush        41
       227: if_icmpne     236
       230: aload_0
       231: invokevirtual #10                 // Method consume:()V
       234: iconst_2
       235: ireturn
       236: aload_0
       237: getfield      #12                 // Field c:I
       240: bipush        37
       242: if_icmpne     251
       245: aload_0
       246: invokevirtual #10                 // Method consume:()V
       249: iconst_5
       250: ireturn
       251: aload_0
       252: getfield      #12                 // Field c:I
       255: bipush        58
       257: if_icmpne     267
       260: aload_0
       261: invokevirtual #10                 // Method consume:()V
       264: bipush        6
       266: ireturn
       267: aload_0
       268: getfield      #12                 // Field c:I
       271: bipush        46
       273: if_icmpne     283
       276: aload_0
       277: invokevirtual #10                 // Method consume:()V
       280: bipush        7
       282: ireturn
       283: aload_0
       284: getfield      #12                 // Field c:I
       287: bipush        91
       289: if_icmpne     379
       292: aload_0
       293: invokevirtual #10                 // Method consume:()V
       296: aload_0
       297: getfield      #12                 // Field c:I
       300: bipush        93
       302: if_icmpeq     373
       305: aload_0
       306: getfield      #12                 // Field c:I
       309: bipush        92
       311: if_icmpne     353
       314: aload_0
       315: invokevirtual #10                 // Method consume:()V
       318: aload_0
       319: getfield      #12                 // Field c:I
       322: bipush        93
       324: if_icmpeq     337
       327: aload_0
       328: getfield      #5                  // Field sval:Ljava/lang/StringBuffer;
       331: bipush        92
       333: invokevirtual #13                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
       336: pop
       337: aload_0
       338: getfield      #5                  // Field sval:Ljava/lang/StringBuffer;
       341: aload_0
       342: getfield      #12                 // Field c:I
       345: i2c
       346: invokevirtual #13                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
       349: pop
       350: goto          366
       353: aload_0
       354: getfield      #5                  // Field sval:Ljava/lang/StringBuffer;
       357: aload_0
       358: getfield      #12                 // Field c:I
       361: i2c
       362: invokevirtual #13                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
       365: pop
       366: aload_0
       367: invokevirtual #10                 // Method consume:()V
       370: goto          296
       373: aload_0
       374: invokevirtual #10                 // Method consume:()V
       377: iconst_4
       378: ireturn
       379: aload_0
       380: invokevirtual #10                 // Method consume:()V
       383: aload_0
       384: iconst_1
       385: putfield      #6                  // Field error:Z
       388: iconst_m1
       389: ireturn
       390: iconst_m1
       391: ireturn
      LineNumberTable:
        line 64: 0
        line 65: 8
        line 66: 16
        line 67: 52
        line 68: 56
        line 70: 59
        line 71: 104
        line 72: 117
        line 73: 121
        line 76: 184
        line 77: 197
        line 79: 204
        line 81: 206
        line 82: 215
        line 83: 219
        line 85: 221
        line 86: 230
        line 87: 234
        line 89: 236
        line 90: 245
        line 91: 249
        line 93: 251
        line 94: 260
        line 95: 264
        line 97: 267
        line 98: 276
        line 99: 280
        line 101: 283
        line 102: 292
        line 103: 296
        line 104: 305
        line 105: 314
        line 106: 318
        line 107: 327
        line 109: 337
        line 112: 353
        line 114: 366
        line 116: 373
        line 117: 377
        line 119: 379
        line 120: 383
        line 121: 388
        line 123: 390
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     392     0  this   Lorg/antlr/runtime/tree/TreePatternLexer;

  protected void consume();
    descriptor: ()V
    flags: (0x0004) ACC_PROTECTED
    Code:
      stack=3, locals=1, args_size=1
         0: aload_0
         1: dup
         2: getfield      #2                  // Field p:I
         5: iconst_1
         6: iadd
         7: putfield      #2                  // Field p:I
        10: aload_0
        11: getfield      #2                  // Field p:I
        14: aload_0
        15: getfield      #9                  // Field n:I
        18: if_icmplt     29
        21: aload_0
        22: iconst_m1
        23: putfield      #12                 // Field c:I
        26: goto          44
        29: aload_0
        30: aload_0
        31: getfield      #7                  // Field pattern:Ljava/lang/String;
        34: aload_0
        35: getfield      #2                  // Field p:I
        38: invokevirtual #14                 // Method java/lang/String.charAt:(I)C
        41: putfield      #12                 // Field c:I
        44: return
      LineNumberTable:
        line 127: 0
        line 128: 10
        line 129: 21
        line 132: 29
        line 134: 44
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      45     0  this   Lorg/antlr/runtime/tree/TreePatternLexer;
}
SourceFile: "TreePatternLexer.java"
